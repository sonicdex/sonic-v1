{"version":3,"file":"static/js/main.1728340b.js","mappings":"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","sources":["webpack://sonic-app/./src/App.tsx","webpack://sonic-app/./src/apis/analytics.ts","webpack://sonic-app/./src/apis/index.ts","webpack://sonic-app/./src/apis/rosetta.ts","webpack://sonic-app/./src/assets/index.tsx","webpack://sonic-app/./src/components/core/asset/asset.tsx","webpack://sonic-app/./src/components/core/asset/index.ts","webpack://sonic-app/./src/components/core/check-box/check-box.tsx","webpack://sonic-app/./src/components/core/check-box/index.ts","webpack://sonic-app/./src/components/core/display-value/display-value.tsx","webpack://sonic-app/./src/components/core/display-value/index.ts","webpack://sonic-app/./src/components/core/emoji/emoji.tsx","webpack://sonic-app/./src/components/core/emoji/index.ts","webpack://sonic-app/./src/components/core/fee-box/fee-box.tsx","webpack://sonic-app/./src/components/core/fee-box/index.ts","webpack://sonic-app/./src/components/core/gradient-box/gradient-box.tsx","webpack://sonic-app/./src/components/core/gradient-box/index.ts","webpack://sonic-app/./src/components/core/header/header.tsx","webpack://sonic-app/./src/components/core/header/index.ts","webpack://sonic-app/./src/components/core/image-block/index.ts","webpack://sonic-app/./src/components/core/image-block/lp-image-block.tsx","webpack://sonic-app/./src/components/core/image-block/swap-image-block.tsx","webpack://sonic-app/./src/components/core/image-block/token-image-block.tsx","webpack://sonic-app/./src/components/core/index.ts","webpack://sonic-app/./src/components/core/information-box/index.ts","webpack://sonic-app/./src/components/core/information-box/information-box.tsx","webpack://sonic-app/./src/components/core/logo-box/index.ts","webpack://sonic-app/./src/components/core/logo-box/logo-box.tsx","webpack://sonic-app/./src/components/core/logo/index.ts","webpack://sonic-app/./src/components/core/logo/logo.tsx","webpack://sonic-app/./src/components/core/lp-breakdown-popover/index.ts","webpack://sonic-app/./src/components/core/lp-breakdown-popover/lp-breakdown-popover-item.tsx","webpack://sonic-app/./src/components/core/lp-breakdown-popover/lp-breakdown-popover.tsx","webpack://sonic-app/./src/components/core/number-input/index.ts","webpack://sonic-app/./src/components/core/number-input/number-input.tsx","webpack://sonic-app/./src/components/core/search-bar/index.ts","webpack://sonic-app/./src/components/core/search-bar/search-bar.tsx","webpack://sonic-app/./src/components/core/slippage-settings/index.ts","webpack://sonic-app/./src/components/core/slippage-settings/slippage-settings.tsx","webpack://sonic-app/./src/components/core/stack-line/index.ts","webpack://sonic-app/./src/components/core/stack-line/stack-line.tsx","webpack://sonic-app/./src/components/core/token-balances-popover/index.ts","webpack://sonic-app/./src/components/core/token-balances-popover/token-balances-popover-item.tsx","webpack://sonic-app/./src/components/core/token-balances-popover/token-balances-popover.tsx","webpack://sonic-app/./src/components/core/token/index.ts","webpack://sonic-app/./src/components/core/token/token.tsx","webpack://sonic-app/./src/components/core/token/tokenCreditinfo.tsx","webpack://sonic-app/./src/components/core/view-header/index.ts","webpack://sonic-app/./src/components/core/view-header/view-header.tsx","webpack://sonic-app/./src/components/icons/circle-icon/circle-icon.tsx","webpack://sonic-app/./src/components/icons/circle-icon/index.ts","webpack://sonic-app/./src/components/icons/index.ts","webpack://sonic-app/./src/components/icons/plus/index.ts","webpack://sonic-app/./src/components/icons/plus/plus-icon.tsx","webpack://sonic-app/./src/components/index.ts","webpack://sonic-app/./src/components/layout/index.ts","webpack://sonic-app/./src/components/layout/layout.constants.tsx","webpack://sonic-app/./src/components/layout/layout.tsx","webpack://sonic-app/./src/components/maintenance/index.ts","webpack://sonic-app/./src/components/maintenance/maintenance.tsx","webpack://sonic-app/./src/components/modals/add-liquidity-fail-modal.tsx","webpack://sonic-app/./src/components/modals/add-liquidity-progress-modal.tsx","webpack://sonic-app/./src/components/modals/allowance-verify-modal.tsx","webpack://sonic-app/./src/components/modals/app-Updated.tsx","webpack://sonic-app/./src/components/modals/components/import-token/import-token-image.tsx","webpack://sonic-app/./src/components/modals/components/import-token/import-token.tsx","webpack://sonic-app/./src/components/modals/components/import-token/index.ts","webpack://sonic-app/./src/components/modals/components/index.ts","webpack://sonic-app/./src/components/modals/components/transaction/index.ts","webpack://sonic-app/./src/components/modals/components/transaction/transaction-failed-modal-content.tsx","webpack://sonic-app/./src/components/modals/components/transaction/transaction-progress-modal-content.tsx","webpack://sonic-app/./src/components/modals/components/transaction/transaction-step.tsx","webpack://sonic-app/./src/components/modals/components/transaction/transaction.utils.ts","webpack://sonic-app/./src/components/modals/deposit-fail-modal.tsx","webpack://sonic-app/./src/components/modals/deposit-progress-modal.tsx","webpack://sonic-app/./src/components/modals/index.ts","webpack://sonic-app/./src/components/modals/mint-manual-modal.tsx","webpack://sonic-app/./src/components/modals/mint-wicp-fail-modal.tsx","webpack://sonic-app/./src/components/modals/mint-wicp-progress-modal.tsx","webpack://sonic-app/./src/components/modals/mint-xtc-fail-modal.tsx","webpack://sonic-app/./src/components/modals/mint-xtc-progress-modal.tsx","webpack://sonic-app/./src/components/modals/remove-liquidity-fail-modal.tsx","webpack://sonic-app/./src/components/modals/remove-liquidity-progress-modal.tsx","webpack://sonic-app/./src/components/modals/swap-fail-modal.tsx","webpack://sonic-app/./src/components/modals/swap-progress-modal.tsx","webpack://sonic-app/./src/components/modals/terms-and-conditions-modal.tsx","webpack://sonic-app/./src/components/modals/token-select-modal.tsx","webpack://sonic-app/./src/components/modals/use-step-status.ts","webpack://sonic-app/./src/components/modals/withdraw-progress-modal.tsx","webpack://sonic-app/./src/components/modals/withdraw-wicp-fail-modal.tsx","webpack://sonic-app/./src/components/modals/withdraw-wicp-progress-modal.tsx","webpack://sonic-app/./src/components/plug/index.ts","webpack://sonic-app/./src/components/plug/plug-button/constants.ts","webpack://sonic-app/./src/components/plug/plug-button/index.ts","webpack://sonic-app/./src/components/plug/plug-button/plug-button.tsx","webpack://sonic-app/./src/components/plug/plug-logo/index.ts","webpack://sonic-app/./src/components/plug/plug-logo/plug-logo.tsx","webpack://sonic-app/./src/components/plug/plug-menu/index.ts","webpack://sonic-app/./src/components/plug/plug-menu/plug-menu.tsx","webpack://sonic-app/./src/components/plug/plug-not-connected/index.tsx","webpack://sonic-app/./src/config/constants.ts","webpack://sonic-app/./src/config/env.ts","webpack://sonic-app/./src/config/index.ts","webpack://sonic-app/./src/config/utils.ts","webpack://sonic-app/./src/constants/index.ts","webpack://sonic-app/./src/constants/token.ts","webpack://sonic-app/./src/did/dfinity/index.ts","webpack://sonic-app/./src/did/dfinity/ledger.did.ts","webpack://sonic-app/./src/did/index.ts","webpack://sonic-app/./src/did/sonic/cycles-minting.did.ts","webpack://sonic-app/./src/did/sonic/index.ts","webpack://sonic-app/./src/did/sonic/swap-storage.did.ts","webpack://sonic-app/./src/did/sonic/swap.did.ts","webpack://sonic-app/./src/did/sonic/token.did.ts","webpack://sonic-app/./src/did/sonic/xtc.did.ts","webpack://sonic-app/./src/hooks/index.ts","webpack://sonic-app/./src/hooks/use-all-pairs.ts","webpack://sonic-app/./src/hooks/use-balances.ts","webpack://sonic-app/./src/hooks/use-block-heights-init.ts","webpack://sonic-app/./src/hooks/use-header-resize-effect.ts","webpack://sonic-app/./src/hooks/use-network-error-notifications.ts","webpack://sonic-app/./src/hooks/use-query.ts","webpack://sonic-app/./src/hooks/use-token-allowance.ts","webpack://sonic-app/./src/hooks/use-token-balance.ts","webpack://sonic-app/./src/hooks/use-token-fee.ts","webpack://sonic-app/./src/hooks/use-token-logos-fetcher-init.ts","webpack://sonic-app/./src/hooks/use-token-selection-detector.ts","webpack://sonic-app/./src/hooks/use-user-metrics.ts","webpack://sonic-app/./src/index.tsx","webpack://sonic-app/./src/integrations/actor/create-ledger-actor.ts","webpack://sonic-app/./src/integrations/actor/create-swap-actor.ts","webpack://sonic-app/./src/integrations/actor/create-token-actor.ts","webpack://sonic-app/./src/integrations/actor/index.ts","webpack://sonic-app/./src/integrations/cap/connection.ts","webpack://sonic-app/./src/integrations/cap/features/get-user-transactions.ts","webpack://sonic-app/./src/integrations/cap/features/index.ts","webpack://sonic-app/./src/integrations/cap/index.ts","webpack://sonic-app/./src/integrations/cap/utils.ts","webpack://sonic-app/./src/integrations/ledger/index.ts","webpack://sonic-app/./src/integrations/ledger/ledger-transactions.ts","webpack://sonic-app/./src/integrations/plug/index.ts","webpack://sonic-app/./src/integrations/plug/plug.utils.ts","webpack://sonic-app/./src/integrations/plug/use-plug-init.ts","webpack://sonic-app/./src/integrations/transactions/batch-transactions.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/batch.utils.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/index.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-add-liquidity-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-deposit-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-mint-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-mint-multiple-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-mint-single-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-remove-liquidity-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-swap-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-withdraw-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-withdraw-wicp-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/index.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/approve.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/create-pair.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/deposit.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/icrcTransfer.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/index.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/ledger-transfer.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/liquidity.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/mint-wicp.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/mint-xtc.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/swap.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/withdraw-wicp.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/withdraw.ts","webpack://sonic-app/./src/integrations/transactions/hooks/use-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/use-mint-error-handler.ts","webpack://sonic-app/./src/integrations/transactions/index.ts","webpack://sonic-app/./src/integrations/transactions/models/batch.ts","webpack://sonic-app/./src/integrations/transactions/models/index.ts","webpack://sonic-app/./src/integrations/transactions/models/transactions/index.ts","webpack://sonic-app/./src/notifications/components/add-liquidity-notification-content.tsx","webpack://sonic-app/./src/notifications/components/deposit-notification-content.tsx","webpack://sonic-app/./src/notifications/components/index.ts","webpack://sonic-app/./src/notifications/components/mint-auto-notification-content.tsx","webpack://sonic-app/./src/notifications/components/mint-manual-notification-content.tsx","webpack://sonic-app/./src/notifications/components/mint-wicp-notification-content.tsx","webpack://sonic-app/./src/notifications/components/mint-xtc-notification-content.tsx","webpack://sonic-app/./src/notifications/components/remove-liquidity-notifcation-content.tsx","webpack://sonic-app/./src/notifications/components/swap-notification-content.tsx","webpack://sonic-app/./src/notifications/components/transaction-notification-content.tsx","webpack://sonic-app/./src/notifications/components/withdraw-notification-content.tsx","webpack://sonic-app/./src/notifications/components/withdraw-wicp-notification-content.tsx","webpack://sonic-app/./src/notifications/index.ts","webpack://sonic-app/./src/notifications/notification-box.tsx","webpack://sonic-app/./src/notifications/notification-content.tsx","webpack://sonic-app/./src/notifications/notification-errors.tsx","webpack://sonic-app/./src/notifications/notification-header.tsx","webpack://sonic-app/./src/notifications/notification-manager.tsx","webpack://sonic-app/./src/notifications/notification-timer.tsx","webpack://sonic-app/./src/store/features/activity-view/activity-view-slice.ts","webpack://sonic-app/./src/store/features/activity-view/index.ts","webpack://sonic-app/./src/store/features/activity-view/use-activity-view-store.ts","webpack://sonic-app/./src/store/features/activity-view/use-activity-view.ts","webpack://sonic-app/./src/store/features/allowance/allowance-slice.ts","webpack://sonic-app/./src/store/features/allowance/async-thunk/fetch-allowance.ts","webpack://sonic-app/./src/store/features/allowance/async-thunk/index.ts","webpack://sonic-app/./src/store/features/allowance/index.ts","webpack://sonic-app/./src/store/features/assets-view/assets-view-slice.ts","webpack://sonic-app/./src/store/features/assets-view/index.ts","webpack://sonic-app/./src/store/features/assets-view/use-assets-view-store.ts","webpack://sonic-app/./src/store/features/cycles-minting-canister/cycles-minting-canister-slice.ts","webpack://sonic-app/./src/store/features/cycles-minting-canister/cycles-minting-canister.constants.ts","webpack://sonic-app/./src/store/features/cycles-minting-canister/index.ts","webpack://sonic-app/./src/store/features/cycles-minting-canister/use-cycles-minting-canister-init.ts","webpack://sonic-app/./src/store/features/cycles-minting-canister/use-cycles-minting-canister-store.ts","webpack://sonic-app/./src/store/features/deposit-view/deposit-view-slice.ts","webpack://sonic-app/./src/store/features/deposit-view/index.ts","webpack://sonic-app/./src/store/features/deposit-view/use-deposit-view-store.ts","webpack://sonic-app/./src/store/features/index.ts","webpack://sonic-app/./src/store/features/keep-sync/index.ts","webpack://sonic-app/./src/store/features/keep-sync/keep-sync-slice.ts","webpack://sonic-app/./src/store/features/keep-sync/use-keep-sync.ts","webpack://sonic-app/./src/store/features/liquidity-view/index.ts","webpack://sonic-app/./src/store/features/liquidity-view/liquidity-view-slice.ts","webpack://sonic-app/./src/store/features/liquidity-view/use-liquidity-view-init.ts","webpack://sonic-app/./src/store/features/liquidity-view/use-liquidity-view-store.ts","webpack://sonic-app/./src/store/features/modals/index.ts","webpack://sonic-app/./src/store/features/modals/modals-slice.ts","webpack://sonic-app/./src/store/features/modals/use-modals-store.ts","webpack://sonic-app/./src/store/features/modals/use-token-modal-opener.ts","webpack://sonic-app/./src/store/features/notification/index.ts","webpack://sonic-app/./src/store/features/notification/notification-slice.ts","webpack://sonic-app/./src/store/features/notification/use-notification-store.ts","webpack://sonic-app/./src/store/features/plug/async-thunk/connect.ts","webpack://sonic-app/./src/store/features/plug/async-thunk/disconnect.ts","webpack://sonic-app/./src/store/features/plug/async-thunk/index.ts","webpack://sonic-app/./src/store/features/plug/index.ts","webpack://sonic-app/./src/store/features/plug/plug-slice.ts","webpack://sonic-app/./src/store/features/price/index.ts","webpack://sonic-app/./src/store/features/price/price-slice.ts","webpack://sonic-app/./src/store/features/price/use-price-init.ts","webpack://sonic-app/./src/store/features/price/use-price-store.ts","webpack://sonic-app/./src/store/features/swap-canister/index.ts","webpack://sonic-app/./src/store/features/swap-canister/swap-canister-slice.ts","webpack://sonic-app/./src/store/features/swap-canister/use-swap-canister-init.ts","webpack://sonic-app/./src/store/features/swap-canister/use-swap-canister-store.ts","webpack://sonic-app/./src/store/features/swap-view/index.ts","webpack://sonic-app/./src/store/features/swap-view/swap-view-slice.ts","webpack://sonic-app/./src/store/features/swap-view/use-swap-view-init.ts","webpack://sonic-app/./src/store/features/swap-view/use-swap-view-store.ts","webpack://sonic-app/./src/store/features/withdraw-view/index.ts","webpack://sonic-app/./src/store/features/withdraw-view/use-withdraw-view-store.ts","webpack://sonic-app/./src/store/features/withdraw-view/withdraw-view-slice.ts","webpack://sonic-app/./src/store/hooks.ts","webpack://sonic-app/./src/store/index.ts","webpack://sonic-app/./src/store/models.ts","webpack://sonic-app/./src/store/store.ts","webpack://sonic-app/./src/theme/components/button.ts","webpack://sonic-app/./src/theme/components/close-button.ts","webpack://sonic-app/./src/theme/components/menu.ts","webpack://sonic-app/./src/theme/components/modal.ts","webpack://sonic-app/./src/theme/components/popover.ts","webpack://sonic-app/./src/theme/components/tabs.ts","webpack://sonic-app/./src/theme/foundations/colors.ts","webpack://sonic-app/./src/theme/foundations/index.ts","webpack://sonic-app/./src/theme/index.ts","webpack://sonic-app/./src/utils/canister.ts","webpack://sonic-app/./src/utils/canisterDriver.ts","webpack://sonic-app/./src/utils/external-link.ts","webpack://sonic-app/./src/utils/format.ts","webpack://sonic-app/./src/utils/function.ts","webpack://sonic-app/./src/utils/icp.ts","webpack://sonic-app/./src/utils/index.ts","webpack://sonic-app/./src/utils/local-storage.ts","webpack://sonic-app/./src/utils/log.ts","webpack://sonic-app/./src/utils/navigator.tsx","webpack://sonic-app/./src/views/activity/components/add-liquidity-activity.tsx","webpack://sonic-app/./src/views/activity/components/deposit-activity.tsx","webpack://sonic-app/./src/views/activity/components/index.ts","webpack://sonic-app/./src/views/activity/components/ledger-transaction-activity.tsx","webpack://sonic-app/./src/views/activity/components/loading-activity.tsx","webpack://sonic-app/./src/views/activity/components/remove-liquidity-activity.tsx","webpack://sonic-app/./src/views/activity/components/swap-activity.tsx","webpack://sonic-app/./src/views/activity/components/withdraw-activity.tsx","webpack://sonic-app/./src/views/activity/index.ts","webpack://sonic-app/./src/views/activity/list.tsx","webpack://sonic-app/./src/views/assets/deposit.tsx","webpack://sonic-app/./src/views/assets/index.ts","webpack://sonic-app/./src/views/assets/list.tsx","webpack://sonic-app/./src/views/assets/withdraw.tsx","webpack://sonic-app/./src/views/index.ts","webpack://sonic-app/./src/views/liquidity/add.tsx","webpack://sonic-app/./src/views/liquidity/components/index.ts","webpack://sonic-app/./src/views/liquidity/components/paired-user-lp-token.tsx","webpack://sonic-app/./src/views/liquidity/components/remove-liquidity-modal-asset.tsx","webpack://sonic-app/./src/views/liquidity/components/remove-liquidity-modal.tsx","webpack://sonic-app/./src/views/liquidity/index.ts","webpack://sonic-app/./src/views/liquidity/liquidity.utils.ts","webpack://sonic-app/./src/views/liquidity/list.tsx","webpack://sonic-app/./src/views/swap/components/chain-popover.tsx","webpack://sonic-app/./src/views/swap/components/exchange-box.tsx","webpack://sonic-app/./src/views/swap/components/index.ts","webpack://sonic-app/./src/views/swap/components/keep-in-sonic-box.tsx","webpack://sonic-app/./src/views/swap/components/topmenu.tsx","webpack://sonic-app/./src/views/swap/hooks/index.ts","webpack://sonic-app/./src/views/swap/hooks/use-swap-view-data.tsx","webpack://sonic-app/./src/views/swap/index.ts","webpack://sonic-app/./src/views/swap/mint.tsx","webpack://sonic-app/./src/views/swap/swap.tsx","webpack://sonic-app/./src/views/swap/swap.utils.ts","webpack://sonic-app/./src/views/test/index.ts","webpack://sonic-app/./src/views/test/test.tsx","webpack://sonic-app/./src/views/test/test2.tsx","webpack://sonic-app/./src/views/test/todos.tsx","webpack://sonic-app/./src/views/test/useFetch.ts"],"sourcesContent":["import { ActorAdapter, Default } from '@memecake/sonic-js';\r\nimport { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom';\r\n\r\nimport { NotificationManager } from '@/notifications';\r\nimport { ActivityListView, AssetsDepositView, AssetsListView, AssetsWithdrawView, LiquidityAddView, LiquidityListView, SwapView , MintView } from '@/views';\r\n\r\nimport { TestView , TestViewt1 , TestViewt2}  from '@/views';\r\n\r\nimport { Layout } from './components';\r\nimport {\r\n  AddLiquidityFailModal, AddLiquidityProgressModal, AllowanceVerifyModal, DepositProgressModal, MintManualModal, MintWICPFailModal,\r\n  MintWICPProgressModal, MintXTCFailModal, MintXTCProgressModal, RemoveLiquidityFailModal, RemoveLiquidityProgressModal, SwapFailModal,\r\n  SwapProgressModal, TermsAndConditionsModal, TokenSelectModal, WithdrawProgressModal, WithdrawWICPFailModal, WithdrawWICPProgressModal,\r\n  AppUpdatedModal\r\n} from './components/modals';\r\n\r\nimport { ENV } from './config';\r\nimport { useNetworkErrorNotifications, useTokenLogosFetcherInit, } from './hooks';\r\nimport { useBlockHeightsInit } from './hooks/use-block-heights-init';\r\n\r\nimport { usePlugInit } from './integrations/plug';\r\nimport { useCyclesMintingCanisterInit, useLiquidityViewInit, usePriceInit, useSwapCanisterInit } from './store';\r\n\r\nimport {loadsupportedTokenList} from '@/utils'\r\n\r\nActorAdapter.DEFAULT_HOST = ENV.host;\r\nDefault.ENV = process.env.NODE_ENV || 'production';\r\nDefault.IC_HOST = ENV.host;\r\n\r\nexport const App = () => {\r\n  useCyclesMintingCanisterInit();\r\n  usePlugInit();\r\n  usePriceInit();\r\n  useSwapCanisterInit();\r\n  useLiquidityViewInit();\r\n  useBlockHeightsInit();\r\n  useTokenLogosFetcherInit();\r\n  useNetworkErrorNotifications();\r\n  loadsupportedTokenList();\r\n  return (\r\n    <BrowserRouter basename=\"/\">\r\n      <Layout>\r\n        <NotificationManager />\r\n\r\n        <TermsAndConditionsModal />\r\n        <TokenSelectModal />\r\n        <AllowanceVerifyModal />\r\n        <MintManualModal />\r\n\r\n        <SwapProgressModal />\r\n        <SwapFailModal />\r\n\r\n        <WithdrawProgressModal />\r\n\r\n        <DepositProgressModal />\r\n\r\n        <AddLiquidityProgressModal />\r\n        <AddLiquidityFailModal />\r\n\r\n        <RemoveLiquidityProgressModal />\r\n        <RemoveLiquidityFailModal />\r\n\r\n        <WithdrawWICPProgressModal />\r\n        <WithdrawWICPFailModal />\r\n\r\n        <MintXTCProgressModal />\r\n        <MintXTCFailModal />\r\n\r\n        <MintWICPProgressModal />\r\n        <MintWICPFailModal />\r\n\r\n        <Routes>\r\n          <Route path=\"/swap\" element={<SwapView />} />\r\n          <Route path=\"/swap/mint\" element={<MintView />} />\r\n          <Route path=\"/assets\" element={<AssetsListView />} />\r\n          <Route path=\"/assets/withdraw\" element={<AssetsWithdrawView />} />\r\n          <Route path=\"/assets/deposit\" element={<AssetsDepositView />} />\r\n          <Route path=\"/liquidity\" element={<LiquidityListView />} />\r\n          <Route path=\"/liquidity/add\" element={<LiquidityAddView />} />\r\n          <Route path=\"/activity\" element={<ActivityListView />} />\r\n          <Route path=\"/test\" element={<TestView />} />\r\n          <Route path=\"/test/t1\" element={<TestViewt1 />} />\r\n          <Route path=\"/test/t2\" element={<TestViewt2 />} />\r\n          <Route path=\"*\" element={<Navigate to=\"/swap\" />} />\r\n        </Routes>\r\n        <AppUpdatedModal isNotiOpen={true}/>\r\n      </Layout>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n","import { deserialize, serialize } from '@memecake/sonic-js';\r\nimport axios from 'axios';\r\n\r\nimport { ENV } from '@/config';\r\n\r\nexport class AnalyticsApi {\r\n  public axios;\r\n  constructor() {\r\n    this.axios = axios.create({\r\n      baseURL: ENV.analyticsHost,\r\n      method: 'post',\r\n      transformRequest: (data) => serialize(data),\r\n      transformResponse: (data) => deserialize(data),\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  }\r\n\r\n  async request<T = any>(data: AnalyticsApi.GraphqlQuery): Promise<T> {\r\n    return (await this.axios.request({ data: data })).data.data;\r\n  }\r\n\r\n  async queryUserLPMetrics(\r\n    principalId: string,\r\n    pairId?: string\r\n  ): Promise<AnalyticsApi.PositionMetrics> {\r\n    const response = await this.request<AnalyticsApi.UserLPMetricsQuery>({\r\n      operationName: null,\r\n      query: `\r\n            query {\r\n              user(id: \"${principalId}\") {\r\n                positionMetrics${pairId ? `(pairId: \"${pairId}\")` : ''} {\r\n                  impLoss,\r\n                  fees\r\n                }\r\n              }\r\n            }\r\n            `,\r\n      variables: {},\r\n    });\r\n\r\n    return response?.user?.positionMetrics;\r\n  }\r\n}\r\n\r\nexport namespace AnalyticsApi {\r\n  export interface GraphqlQuery {\r\n    operationName: string | null;\r\n    query: string;\r\n    variables: any;\r\n  }\r\n\r\n  export interface PositionMetrics {\r\n    impLoss: string;\r\n    fees: string;\r\n  }\r\n\r\n  export interface UserLPMetricsQuery {\r\n    user: {\r\n      positionMetrics: PositionMetrics;\r\n    };\r\n  }\r\n}\r\n","export * from './rosetta';\r\nexport * from './analytics';\r\n","/**\r\n * @file RosettaApi\r\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\r\n * @license MIT License\r\n */\r\n\r\nimport axios from 'axios';\r\nimport BigNumber from 'bignumber.js';\r\nimport jsonBigint from 'json-bigint';\r\n\r\n// Set useNativeBigInt to true and use BigInt once BigInt is widely supported.\r\nconst JSONbig = jsonBigint({ strict: true });\r\n\r\n/**\r\n * Types of Rosetta API errors.\r\n */\r\nexport const RosettaErrorType = Object.freeze({\r\n  NotFound: 0,\r\n  Timeout: 1,\r\n  NetworkError: 2,\r\n});\r\n\r\n/**\r\n * Describes the cause of a Rosetta API error.\r\n */\r\nexport class RosettaError extends Error {\r\n  /**\r\n   * Create a RosettaError.\r\n   * @param {String} message An error message describing the error.\r\n   * @param {Number} status number The HTTP response status.\r\n   */\r\n  public errorType;\r\n  constructor(message: string, status?: number | string) {\r\n    super(message);\r\n    switch (status) {\r\n      case 408:\r\n        this.errorType = RosettaErrorType.Timeout;\r\n        break;\r\n      case 500:\r\n        this.errorType = RosettaErrorType.NotFound;\r\n        break;\r\n      default:\r\n        this.errorType = RosettaErrorType.NetworkError;\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Contains information about a transaction.\r\n */\r\nexport class Transaction {\r\n  /**\r\n   * Create a Transaction.\r\n   * @param {Any} rosettaTransaction The Rosetta Transaction object of the transaction.\r\n   * @param {Number} blockIndex The index.tsx of the block containing the transaction.\r\n   * milliseconds since the Unix Epoch.\r\n   */\r\n  public blockIndex;\r\n  public hash;\r\n  public timestamp;\r\n  public type;\r\n  public status;\r\n  public account1Address;\r\n  public account2Address;\r\n  public amount: BigNumber;\r\n  public fee;\r\n  public memo;\r\n\r\n  constructor(rosettaTransaction: any, blockIndex: number) {\r\n    this.blockIndex = blockIndex;\r\n    this.hash = rosettaTransaction.transaction_identifier.hash;\r\n    const timestampMs = rosettaTransaction.metadata.timestamp\r\n      .div(1000000)\r\n      .toNumber();\r\n    this.timestamp = new Date(timestampMs);\r\n    const operations = rosettaTransaction.operations;\r\n    if (operations.length >= 1) {\r\n      this.type = operations[0].type;\r\n      this.status = operations[0].status;\r\n      this.account1Address = operations[0].account.address;\r\n      this.amount = new BigNumber(operations[0].amount.value);\r\n      // Negate amount for TRANSACTION and BURN, so that they appear in the UI as positive values.\r\n      if (\r\n        (operations[0].type === 'TRANSACTION' ||\r\n          operations[0].type === 'BURN') &&\r\n        !this.amount.isZero()\r\n      ) {\r\n        this.amount = this.amount.negated();\r\n      }\r\n    } else {\r\n      this.type = '';\r\n      this.status = '';\r\n      this.account1Address = '';\r\n      this.amount = new BigNumber(0);\r\n    }\r\n    if (operations.length >= 2 && operations[1].type === 'TRANSACTION')\r\n      this.account2Address = operations[1].account.address;\r\n    else this.account2Address = '';\r\n    if (operations.length >= 3 && operations[2].type === 'FEE')\r\n      this.fee = new BigNumber(-operations[2].amount.value);\r\n    else this.fee = new BigNumber(0);\r\n    this.memo = new BigNumber(rosettaTransaction.metadata.memo);\r\n  }\r\n}\r\n\r\n/**\r\n * Manages Rosetta API calls.\r\n */\r\nexport default class RosettaApi {\r\n  /**\r\n   * Create a RosettaApi.\r\n   */\r\n  public networkIdentifier;\r\n  public axios;\r\n  constructor() {\r\n    this.axios = axios.create({\r\n      baseURL:\r\n        process.env.REACT_APP_ROSETTA_BASE_URL ||\r\n        'https://rosetta-api.internetcomputer.org/',\r\n      method: 'post',\r\n      transformRequest: (data) => JSONbig.stringify(data),\r\n      transformResponse: (data) => JSONbig.parse(data),\r\n      headers: { 'Content-Type': 'application/json;charset=utf-8' },\r\n    });\r\n\r\n    this.networkIdentifier = this.networksList().then((res) =>\r\n      res.network_identifiers.find(\r\n        (networkIdentifier: any) =>\r\n          networkIdentifier.blockchain === 'Internet Computer'\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the ICP account balance of the specified account.\r\n   * @param {string} accountAddress The account address to get the ICP balance of.\r\n   * @returns {Promise<BigNumber|RosettaError>} The ICP account balance of the specified account, or\r\n   * a RosettaError for error.\r\n   */\r\n  async getAccountBalance(accountAddress: string) {\r\n    try {\r\n      const response = await this.accountBalanceByAddress(accountAddress);\r\n      return new BigNumber(response.balances[0].value);\r\n    } catch (error: any) {\r\n      return new RosettaError(\r\n        error.message,\r\n        axios.isAxiosError(error) ? error?.response?.status : ''\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the latest block index.tsx.\r\n   * @returns {Promise<number>} The latest block index.tsx, or a RosettaError for error.\r\n   */\r\n  async getLastBlockIndex() {\r\n    try {\r\n      const response = await this.networkStatus();\r\n      return response.current_block_identifier.index;\r\n    } catch (error: any) {\r\n      return new RosettaError(\r\n        error.message,\r\n        axios.isAxiosError(error) ? error?.response?.status : ''\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the Transaction object with the specified hash.\r\n   * @param {string} transactionHash The hash of the transaction to return.\r\n   * @returns {Transaction|null} The Transaction object with the specified hash, or a RosettaError\r\n   * for error.\r\n   */\r\n  async getTransaction(transactionHash: string) {\r\n    try {\r\n      const responseTransactions = await this.transactionsByHash(\r\n        transactionHash\r\n      );\r\n      if (responseTransactions.transactions.length === 0)\r\n        return new RosettaError('Transaction not found.', 500);\r\n\r\n      return new Transaction(\r\n        responseTransactions.transactions[0].transaction,\r\n        responseTransactions.transactions[0].block_identifier.index\r\n      );\r\n    } catch (error: any) {\r\n      return new RosettaError(\r\n        error.message,\r\n        axios.isAxiosError(error) ? error?.response?.status : undefined\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return an array of Transaction objects based on the specified parameters, or an empty array if\r\n   * none found.\r\n   * @param limit {number} The maximum number of transactions to return in one call.\r\n   * @param maxBlockIndex {number} The block index.tsx to start at. If not specified, start at current\r\n   * block.\r\n   * @param offset {number} The offset from maxBlockIndex to start returning transactions.\r\n   * @returns {Promise<Array<Transaction>|null>} An array of Transaction objects, or a RosettaError\r\n   * for error.\r\n   */\r\n  async getTransactions(limit: number, maxBlockIndex: number, offset: number) {\r\n    try {\r\n      // This function can be simplified once /search/transactions supports using the properties\r\n      // max_block, offset, and limit.\r\n      let blockIndex;\r\n      if (maxBlockIndex) blockIndex = maxBlockIndex;\r\n      else {\r\n        // Get the latest block index.tsx.\r\n        const response = await this.networkStatus();\r\n        blockIndex = response.current_block_identifier.index;\r\n      }\r\n      if (offset) blockIndex = Math.max(blockIndex - offset, -1);\r\n      const transactionCount = Math.min(limit, blockIndex + 1);\r\n      const transactions = [];\r\n      for (let i = 0; i < transactionCount; i++)\r\n        transactions.push(await this.getTransactionByBlock(blockIndex - i));\r\n      return transactions;\r\n    } catch (error: any) {\r\n      return new RosettaError(\r\n        error.message,\r\n        axios.isAxiosError(error) ? error?.response?.status : undefined\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return an array of Transaction objects based on the specified parameters, or an empty array if\r\n   * none found.\r\n   * @param {string} accountAddress The account address to get the transactions of.\r\n   * @returns {Promise<Array<Transaction>|null>} An array of Transaction objects, or a RosettaError\r\n   * for error.\r\n   */\r\n  async getTransactionsByAccount(accountAddress: string) {\r\n    try {\r\n      const response = await this.transactionsByAccount(accountAddress);\r\n      const transactions = await Promise.all(\r\n        response.transactions.map((blockTransaction: any) => {\r\n          return new Transaction(\r\n            blockTransaction.transaction,\r\n            blockTransaction.block_identifier.index\r\n          );\r\n        })\r\n      );\r\n      return transactions.reverse();\r\n    } catch (error: any) {\r\n      return new RosettaError(\r\n        error.message,\r\n        axios.isAxiosError(error) ? error?.response?.status : undefined\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the Transaction corresponding to the specified block index.tsx (i.e., block height).\r\n   * @param {number} blockIndex The index.tsx of the block to return the Transaction for.\r\n   * @returns {Promise<Transaction>} The Transaction corresponding to the specified block index.tsx.\r\n   * @private\r\n   */\r\n  async getTransactionByBlock(blockIndex: number) {\r\n    const response = await this.blockByIndex(blockIndex);\r\n    return new Transaction(response.block.transactions[0], blockIndex);\r\n  }\r\n\r\n  /**\r\n   * Perform the specified http request and return the response data.\r\n   * @param {string} url The server URL that will be used for the request.\r\n   * @param {object} data The data to be sent as the request body.\r\n   * @returns {Promise<any>} The response body that was provided by the server.\r\n   * @private\r\n   */\r\n  async request(url: string, data: any) {\r\n    return (await this.axios.request({ url: url, data: data })).data;\r\n  }\r\n\r\n  /**\r\n   * Return the /network/list response, containing a list of NetworkIdentifiers that the Rosetta\r\n   * server supports.\r\n   * @returns {Promise<any>} The response body that was provided by the server.\r\n   * @private\r\n   */\r\n  networksList() {\r\n    return this.request('/network/list', {});\r\n  }\r\n\r\n  /**\r\n   * Return /network/status response, describing the current status of the network.\r\n   * @returns {Promise<any>} The response body that was provided by the server.\r\n   * @private\r\n   */\r\n  async networkStatus() {\r\n    const networkIdentifier = await this.networkIdentifier;\r\n    return this.request('/network/status', {\r\n      network_identifier: networkIdentifier,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return the /account/balance response for the specified account.\r\n   * @param {string} accountAddress The account address to get the balance of.\r\n   * @returns {Promise<any>} The response body that was provided by the server.\r\n   * @private\r\n   */\r\n  async accountBalanceByAddress(accountAddress: string) {\r\n    const networkIdentifier = await this.networkIdentifier;\r\n    return this.request('/account/balance', {\r\n      network_identifier: networkIdentifier,\r\n      account_identifier: { address: accountAddress },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return the /block response for the block corresponding to the specified block index.tsx (i.e.,\r\n   * block height).\r\n   * @param {number} blockIndex The index.tsx of the block to return.\r\n   * @returns {Promise<any>} The response body that was provided by the server.\r\n   * @private\r\n   */\r\n  async blockByIndex(blockIndex: number) {\r\n    const networkIdentifier = await this.networkIdentifier;\r\n    return this.request('/block', {\r\n      network_identifier: networkIdentifier,\r\n      block_identifier: { index: blockIndex },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return the /search/transactions response for transactions containing an operation that affects\r\n   * the specified account.\r\n   * @param {string} accountAddress The account address to get the transactions of.\r\n   * @returns {Promise<any>} The response body that was provided by the server.\r\n   * @private\r\n   */\r\n  async transactionsByAccount(accountAddress: string) {\r\n    const networkIdentifier = await this.networkIdentifier;\r\n    return this.request('/search/transactions', {\r\n      network_identifier: networkIdentifier,\r\n      account_identifier: { address: accountAddress },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return the /search/transactions response for transactions (only one) with the specified hash.\r\n   * @param {string} transactionHash The hash of the transaction to return.\r\n   * @returns {Promise<any>} The response body that was provided by the server.\r\n   * @private\r\n   */\r\n  async transactionsByHash(transactionHash: string) {\r\n    const networkIdentifier = await this.networkIdentifier;\r\n    return this.request('/search/transactions', {\r\n      network_identifier: networkIdentifier,\r\n      transaction_identifier: { hash: transactionHash },\r\n    });\r\n  }\r\n}\r\n","export { default as arrowBackSrc } from './arrow-back.svg';\r\nexport { default as arrowDownSrc } from './arrow-down.svg';\r\nexport { default as closeSrc } from './close.svg';\r\nexport { default as checkSrc } from './check.svg';\r\nexport { default as checkPlainSrc } from './check-plain.svg';\r\nexport { default as depositSrc } from './deposit.svg';\r\nexport { default as dropSrc } from './drop.svg';\r\nexport { default as doubleRightChevronSrc } from './double-right-chevron.svg';\r\nexport { default as equalSrc } from './equal.svg';\r\nexport { default as icpSrc } from './icp.svg';\r\nexport { default as greenCheckSrc } from './green-check.svg';\r\nexport { default as logoSrc } from './logo.png';\r\nexport { default as plugCircleSrc } from './plug-circle.svg';\r\nexport { default as plusSrc } from './plus.svg';\r\nexport { default as questionMarkSrc } from './question-mark.svg';\r\nexport { default as redWarningSrc } from './red-warning.svg';\r\nexport { default as redTriangleWarningSrc } from './red-triangle-warning.svg';\r\nexport { default as searchSrc } from './search.svg';\r\nexport { default as sonicCircleSrc } from './sonic-circle.svg';\r\nexport { default as swapSrc } from './swap.svg';\r\nexport { default as transparentGreenCheckSrc } from './transparent-green-check.svg';\r\nexport { default as withdrawSrc } from './withdraw.svg';\r\n","import {\r\n  Box,\r\n  BoxProps,\r\n  Flex,\r\n  FlexProps,\r\n  Heading,\r\n  IconButton,\r\n  IconButtonProps,\r\n  Skeleton,\r\n  SkeletonCircle,\r\n  Text,\r\n  Tooltip,\r\n  TooltipProps,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { createContext } from '@chakra-ui/react-utils';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\n\r\nimport { LPImageBlock, SwapImageBlock, TokenImageBlock } from '..';\r\n\r\nexport type AssetType = 'swap' | 'lp' | 'token';\r\n\r\nexport type AssetUniqueProps = {\r\n  type?: AssetType;\r\n  imageSources?: string[];\r\n  isLoading?: boolean;\r\n};\r\n\r\nexport type AssetProps = FlexProps & AssetUniqueProps;\r\n\r\nconst [AssetProvider, useAssetContext] = createContext<AssetUniqueProps>({\r\n  name: 'CardContext',\r\n  errorMessage:\r\n    'useCardContext: `context` is undefined. Seems you forgot to wrap all card components within `<Card />`',\r\n});\r\n\r\nexport const Asset = ({\r\n  type,\r\n  imageSources = [questionMarkSrc],\r\n  isLoading = false,\r\n  ...props\r\n}: AssetProps) => {\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const shadow = useColorModeValue('base', 'none');\r\n\r\n  return (\r\n    <AssetProvider value={{ isLoading, type, imageSources }}>\r\n      <Flex\r\n        position=\"relative\"\r\n        direction=\"row\"\r\n        borderRadius=\"xl\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\"\r\n        bg={bg}\r\n        shadow={shadow}\r\n        px={5}\r\n        py={4}\r\n        flexWrap=\"wrap\"\r\n        gap={2}\r\n        {...props}\r\n      />\r\n    </AssetProvider>\r\n  );\r\n};\r\n\r\ntype AssetIconButtonProps = IconButtonProps & {\r\n  tooltipProps?: Partial<TooltipProps>;\r\n};\r\n\r\nexport const AssetIconButton = ({\r\n  'aria-label': ariaLabel,\r\n  tooltipProps,\r\n  ...props\r\n}: AssetIconButtonProps) => {\r\n  const { isLoading } = useAssetContext();\r\n\r\n  return (\r\n    <SkeletonCircle h={10} w={10} minW=\"fit-content\" isLoaded={!isLoading}>\r\n      <Tooltip label={ariaLabel} {...tooltipProps}>\r\n        <IconButton\r\n          isRound\r\n          aria-label={ariaLabel}\r\n          variant=\"outline\"\r\n          {...props}\r\n        />\r\n      </Tooltip>\r\n    </SkeletonCircle>\r\n  );\r\n};\r\n\r\ntype AssetTitleBlockProps = BoxProps & {\r\n  title: string;\r\n  subtitle?: string;\r\n};\r\n\r\nexport const AssetTitleBlock = ({\r\n  title,\r\n  subtitle,\r\n  ...props\r\n}: AssetTitleBlockProps) => {\r\n  const { isLoading } = useAssetContext();\r\n  const color = useColorModeValue('gray.800', 'gray.50');\r\n  const subtitleColor = useColorModeValue('gray.600', 'gray.400');\r\n\r\n  return (\r\n    <Box ml={4} {...props}>\r\n      <Skeleton\r\n        isLoaded={!isLoading}\r\n        mb={isLoading ? 2 : 0}\r\n        width={isLoading ? 60 : 'unset'}\r\n      >\r\n        <Heading as=\"h3\" fontSize=\"lg\" fontWeight={700} color={color}>\r\n          {title}\r\n        </Heading>\r\n      </Skeleton>\r\n      <Skeleton isLoaded={!isLoading} width={isLoading ? 40 : 'unset'}>\r\n        <Tooltip label={subtitle} openDelay={1000}>\r\n          <Text\r\n            fontSize=\"sm\"\r\n            color={subtitleColor}\r\n            textOverflow=\"ellipsis\"\r\n            whiteSpace=\"nowrap\"\r\n            overflow=\"hidden\"\r\n            maxW=\"100%\"\r\n          >\r\n            {subtitle}\r\n          </Text>\r\n        </Tooltip>\r\n      </Skeleton>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const AssetImageBlock = () => {\r\n  const {\r\n    type = 'token',\r\n    imageSources = [questionMarkSrc, questionMarkSrc],\r\n    isLoading,\r\n  } = useAssetContext();\r\n\r\n  const views = {\r\n    swap: <SwapImageBlock imageSources={imageSources} isLoading={isLoading} />,\r\n    lp: <LPImageBlock imageSources={imageSources} isLoading={isLoading} />,\r\n    token: <TokenImageBlock src={imageSources[0]} isLoading={isLoading} />,\r\n  };\r\n\r\n  return views[type] ?? null;\r\n};\r\n","export * from './asset';\r\n","import { Fade, Flex, Image, useColorModeValue } from '@chakra-ui/react';\r\nimport { MouseEvent } from 'react';\r\n\r\nimport { checkPlainSrc } from '@/assets';\r\n\r\ntype CheckboxProps = {\r\n  checked: boolean;\r\n  onClick: (event: MouseEvent<HTMLDivElement>) => any;\r\n};\r\n\r\nexport const Checkbox = ({ checked, onClick }: CheckboxProps) => {\r\n  const borderColor = useColorModeValue('gray.600', 'custom.1');\r\n\r\n  return (\r\n    <Flex\r\n      cursor=\"pointer\"\r\n      borderRadius={1.5}\r\n      width={6}\r\n      height={6}\r\n      onClick={onClick}\r\n      border={checked ? 'none' : '1.5px solid'}\r\n      borderColor={borderColor}\r\n      bg={checked ? 'dark-blue.400' : ''}\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n    >\r\n      <Fade in={checked}>\r\n        <Image src={checkPlainSrc} width={4} height={4} />\r\n      </Fade>\r\n    </Flex>\r\n  );\r\n};\r\n","export * from './check-box';\r\n","import { forwardRef, keyframes,Text,TextProps,Tooltip,\r\n} from '@chakra-ui/react';\r\n\r\nimport { formatAmount, toBigNumber } from '@memecake/sonic-js';\r\nimport { useMemo } from 'react';\r\n\r\nexport type DisplayValueProps = TextProps & {\r\n  isUpdating?: boolean;\r\n  value?: number | string;\r\n  decimals?: number;\r\n  prefix?: string;\r\n  suffix?: string;\r\n  disableTooltip?: boolean;\r\n  shouldDivideByDecimals?: boolean;\r\n};\r\n\r\nexport const DisplayValue = forwardRef<DisplayValueProps, 'p'>((\r\n    { \r\n      value = 0,decimals = 4, isUpdating, prefix, suffix,disableTooltip,\r\n      shouldDivideByDecimals, ...textProps},ref\r\n  ) => {\r\n    const blinker = keyframes`50% { opacity: 0.35;}`;\r\n\r\n    const [formattedValue, tooltipAmount, isDisabled] = useMemo(() => {\r\n      const tooltipAmount = shouldDivideByDecimals\r\n        ? toBigNumber(value).applyDecimals(decimals).toString()\r\n        : toBigNumber(value).dp(decimals).toString();\r\n\r\n      const formattedValue = formatAmount(tooltipAmount);\r\n      \r\n      return [formattedValue, tooltipAmount, disableTooltip || String(tooltipAmount).length <= 4,];\r\n    }, [value, decimals, disableTooltip, shouldDivideByDecimals]);\r\n  \r\n    return (\r\n      <Tooltip label={tooltipAmount} isDisabled={isDisabled}>\r\n        <Text ref={ref} {...textProps} animation={isUpdating ? `${blinker} 1s linear infinite` : undefined}>\r\n          {prefix}\r\n          {formattedValue}\r\n          {suffix}\r\n        </Text>\r\n      </Tooltip>\r\n    );\r\n  }\r\n);\r\n","export * from './display-value';\r\n","import { chakra, forwardRef } from '@chakra-ui/system';\r\nimport React from 'react';\r\n\r\nexport type EmojiProps = {\r\n  label: string;\r\n  children: string;\r\n};\r\n\r\nexport const Emoji: React.FC<EmojiProps> = forwardRef<EmojiProps, 'svg'>(\r\n  ({ children, label }, ref) => {\r\n    return (\r\n      <chakra.span\r\n        ref={ref}\r\n        role=\"img\"\r\n        aria-label={label}\r\n        title={label}\r\n        fontSize=\"md\"\r\n        ml={1}\r\n        mt={0.5}\r\n        transform=\"scale(1)\"\r\n      >\r\n        {children}\r\n      </chakra.span>\r\n    );\r\n  }\r\n);\r\n","export * from './emoji';\r\n","import { Flex, Text } from '@chakra-ui/react';\r\nimport { toBigNumber } from '@memecake/sonic-js';\r\nimport { FaArrowRight } from '@react-icons/all-files/fa/FaArrowRight';\r\nimport React, { useMemo } from 'react';\r\n\r\nimport { AppTokenMetadata } from '@/models';\r\n\r\nexport type FeeBoxProps = {\r\n  token?: AppTokenMetadata;\r\n  isDeposit?: boolean;\r\n};\r\n\r\nexport const FeeBox: React.FC<FeeBoxProps> = ({ isDeposit = false, token }) => {\r\n  const fee = useMemo(() => {\r\n    if (token) {\r\n      return toBigNumber(BigInt(isDeposit ? 2 : 1) * token.fee)\r\n        .applyDecimals(token.decimals)\r\n        .toString();\r\n    }\r\n  }, [isDeposit, token]);\r\n\r\n  if (!token) return null;\r\n\r\n  return (\r\n    <Flex opacity={0.5} alignItems=\"center\" px={4} fontWeight={400} mb={5}>\r\n      <Text display=\"flex\" alignItems=\"center\">\r\n        {isDeposit ? 'Plug' : 'Sonic'}&nbsp;\r\n        <FaArrowRight />\r\n        &nbsp;{isDeposit ? 'Sonic' : 'Plug'}\r\n      </Text>\r\n      <Text flex={1} textAlign=\"right\" mx={2}>\r\n        {token.symbol}&nbsp;Fee =&nbsp;\r\n        {fee}\r\n        &nbsp;{token.symbol}\r\n      </Text>\r\n    </Flex>\r\n  );\r\n};\r\n","export * from './fee-box';\r\nexport * from './index';\r\n","import { useColorModeValue } from '@chakra-ui/color-mode';\r\nimport { Box, Flex } from '@chakra-ui/react';\r\nimport { FC, HTMLAttributes } from 'react';\r\n\r\ntype GradientBoxProps = HTMLAttributes<HTMLDivElement> & {\r\n  size?: 'sm' | 'md' | 'lg';\r\n};\r\n\r\n/*\r\n   _before={{\r\ncontent: '\"\"',\r\nposition: 'absolute',\r\ntop: 0,\r\nright: 0,\r\nbottom: 0,\r\nleft: 0,\r\nmargin: '-4px',\r\nborderRadius: 'inherit',\r\nzIndex: 'hide',\r\nbackground:\r\n'linear-gradient(93.07deg,#ffd719 0.61%,#f754d4 33.98%,#1fd1ec 65.84%,#48fa6b 97.7%)',\r\n}}\r\n */\r\n\r\nexport const GradientBox: FC<GradientBoxProps> = ({\r\n  size = 'md',\r\n  children,\r\n  ...props\r\n}: GradientBoxProps) => {\r\n  const bg = useColorModeValue('gray.100', 'gray.800');\r\n\r\n  const boxProps = {\r\n    sm: {\r\n      w: '4',\r\n      h: '4',\r\n    },\r\n    md: {\r\n      w: '6',\r\n      h: '6',\r\n    },\r\n    lg: {\r\n      w: '8',\r\n      h: '8',\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      borderRadius=\"full\"\r\n      background={bg}\r\n      pt={-1}\r\n      {...boxProps[size]}\r\n    >\r\n      <Box\r\n        position=\"absolute\"\r\n        bg=\"linear-gradient(93.07deg,#ffd719 0.61%,#f754d4 33.98%,#1fd1ec 65.84%,#48fa6b 97.7%)\"\r\n        width={7}\r\n        height={7}\r\n        borderRadius=\"full\"\r\n      />\r\n      <Box\r\n        position=\"absolute\"\r\n        bg=\"gray.900\"\r\n        height={6}\r\n        width={6}\r\n        borderRadius=\"full\"\r\n      />\r\n      {children}\r\n    </Flex>\r\n  );\r\n};\r\n","export * from './gradient-box';\r\n","import {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Flex,\r\n  Spinner,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport React, { useState } from 'react';\r\n\r\nimport { useHeaderResizeEffect } from '@/hooks';\r\n\r\ntype HeaderProps = {\r\n  title: string;\r\n  buttonText?: string;\r\n  onButtonClick?: React.MouseEventHandler<HTMLButtonElement>;\r\n  isUpdating?: boolean;\r\n};\r\n\r\nexport const Header: React.FC<HeaderProps> = ({\r\n  title,\r\n  buttonText,\r\n  onButtonClick,\r\n  isUpdating,\r\n  children,\r\n}) => {\r\n  const [top, setTop] = useState('116px');\r\n  const paddingToLine = buttonText && onButtonClick ? '17px' : '24px';\r\n  const marginTop = buttonText && onButtonClick ? '-8px' : '0px';\r\n\r\n  const color = useColorModeValue('gray.800', 'gray.50');\r\n  const backgroundColor = useColorModeValue('app.background.body.light', 'app.background.body.dark');\r\n\r\n  useHeaderResizeEffect((element) => {\r\n    setTop(`${element.clientHeight - 1}px`);\r\n  });\r\n\r\n  return (\r\n    <Flex\r\n      position=\"sticky\"\r\n      top={top}\r\n      pt={5}\r\n      mt={-10}\r\n      mb={5}\r\n      backgroundColor={backgroundColor}\r\n      transition=\"background-color 200ms\"\r\n      zIndex={1}\r\n      flexDirection=\"column\"\r\n    >\r\n      {children}\r\n      <Flex\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        pb={paddingToLine}\r\n        mt={marginTop}\r\n      >\r\n        <Box as=\"h3\" fontWeight={700} color={color}>\r\n          {title}\r\n          {isUpdating && <Spinner width={3} height={3} mx={3} />}\r\n        </Box>\r\n        {buttonText && onButtonClick && (\r\n          <Button\r\n            variant=\"gradient\"\r\n            colorScheme=\"dark-blue\"\r\n            onClick={onButtonClick}\r\n          >\r\n            {buttonText}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n      <Divider />\r\n    </Flex>\r\n  );\r\n};\r\n","export * from './header';\r\n","export * from './lp-image-block';\r\nexport * from './swap-image-block';\r\nexport * from './token-image-block';\r\n","import { Box, Image, SkeletonCircle } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\n\r\nexport type LPImageBlockProps = {\r\n  size?: 'sm' | 'md' | 'lg';\r\n  isLoading?: boolean;\r\n  imageSources?: (string | undefined)[];\r\n};\r\n\r\nexport const LPImageBlock: React.FC<LPImageBlockProps> = ({\r\n  size = 'md',\r\n  isLoading,\r\n  imageSources = [questionMarkSrc, questionMarkSrc],\r\n}) => {\r\n  const boxSize = {\r\n    lg: 10,\r\n    md: 9,\r\n    sm: 8,\r\n  };\r\n\r\n  const skeletonSize = {\r\n    lg: 7,\r\n    md: 6,\r\n    sm: 5,\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      width={boxSize[size]}\r\n      height={boxSize[size]}\r\n      position=\"relative\"\r\n      minW=\"fit-content\"\r\n    >\r\n      <SkeletonCircle\r\n        h={skeletonSize[size]}\r\n        w={skeletonSize[size]}\r\n        isLoaded={!isLoading}\r\n      >\r\n        <Image\r\n          alt=\"token0\"\r\n          position=\"absolute\"\r\n          width={skeletonSize[size]}\r\n          height={skeletonSize[size]}\r\n          top={0}\r\n          left={0}\r\n          src={imageSources[0]}\r\n          borderRadius=\"full\"\r\n        />\r\n      </SkeletonCircle>\r\n      <SkeletonCircle\r\n        h={skeletonSize[size]}\r\n        w={skeletonSize[size]}\r\n        isLoaded={!isLoading}\r\n      >\r\n        <Image\r\n          alt=\"token1\"\r\n          position=\"absolute\"\r\n          width={skeletonSize[size]}\r\n          height={skeletonSize[size]}\r\n          bottom={0}\r\n          right={0}\r\n          src={imageSources[1]}\r\n          borderRadius=\"full\"\r\n        />\r\n      </SkeletonCircle>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, Image, SkeletonCircle, Text } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\n\r\nexport type SwapImageBlockProps = {\r\n  isLoading?: boolean;\r\n  imageSources?: string[];\r\n};\r\n\r\nexport const SwapImageBlock: React.FC<SwapImageBlockProps> = ({\r\n  isLoading,\r\n  imageSources = [questionMarkSrc, questionMarkSrc],\r\n}) => {\r\n  return (\r\n    <Box width={10} height={10} position=\"relative\" minW=\"fit-content\">\r\n      <SkeletonCircle h={6} w={6} isLoaded={!isLoading}>\r\n        <Image\r\n          alt=\"token from\"\r\n          position=\"absolute\"\r\n          width={6}\r\n          height={6}\r\n          top={0}\r\n          left={0}\r\n          src={imageSources[0]}\r\n          borderRadius=\"full\"\r\n        />\r\n      </SkeletonCircle>\r\n      <Text>&#x21AA;</Text>\r\n      <SkeletonCircle h={6} w={6} isLoaded={!isLoading}>\r\n        <Image\r\n          alt=\"token to\"\r\n          position=\"absolute\"\r\n          width={6}\r\n          height={6}\r\n          bottom={0}\r\n          right={0}\r\n          src={imageSources[1]}\r\n          borderRadius=\"full\"\r\n        />\r\n      </SkeletonCircle>\r\n    </Box>\r\n  );\r\n};\r\n","import { Image, LayoutProps, SkeletonCircle } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\n\r\nexport type TokenImageBlockProps = {\r\n  isLoading?: boolean;\r\n  src?: string | number;\r\n  size?: LayoutProps['width'];\r\n};\r\n\r\nexport const TokenImageBlock: React.FC<TokenImageBlockProps> = ({\r\n  isLoading,\r\n  src = questionMarkSrc,\r\n  size = 10,\r\n}) => {\r\n  return (\r\n    <SkeletonCircle h={size} w={size} minW={size} isLoaded={!isLoading}>\r\n      <Image\r\n        width={size}\r\n        height={size}\r\n        src={src}\r\n        borderRadius=\"full\"\r\n        alt=\"token\"\r\n      />\r\n    </SkeletonCircle>\r\n  );\r\n};\r\n","export * from './asset';\r\nexport * from './check-box';\r\nexport * from './display-value';\r\nexport * from './emoji';\r\nexport * from './gradient-box';\r\nexport * from './header';\r\nexport * from './image-block';\r\nexport * from './information-box';\r\nexport * from './logo';\r\nexport * from './logo-box';\r\nexport * from './number-input';\r\nexport * from './search-bar';\r\nexport * from './slippage-settings';\r\nexport * from './stack-line';\r\nexport * from './token';\r\nexport * from './token-balances-popover';\r\nexport * from './view-header';\r\n","export * from './information-box';\r\n","import {\r\n  Box,\r\n  BoxProps,\r\n  CloseButton,\r\n  Collapse,\r\n  Flex,\r\n  Tooltip,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { ReactNode, useState } from 'react';\r\n\r\ntype InformationBoxTypes = BoxProps & {\r\n  title: string;\r\n  children: ReactNode;\r\n  onClose?: () => void;\r\n};\r\n\r\nexport const InformationBox = ({\r\n  title,\r\n  children,\r\n  onClose,\r\n  ...props\r\n}: InformationBoxTypes) => {\r\n  const [collapse, setCollapse] = useState(true);\r\n\r\n  const handleClose = () => {\r\n    setCollapse(false);\r\n    if (onClose) {\r\n      setTimeout(onClose, 200);\r\n    }\r\n  };\r\n\r\n  const titleColor = useColorModeValue('gray.800', 'gray.50');\r\n  const bg = useColorModeValue('dark-blue.100', 'rgba(57, 77, 231, 0.2)');\r\n\r\n  return (\r\n    <Collapse in={collapse} unmountOnExit={true}>\r\n      <Box bg={bg} pt={4} px={5} pb={5} mb={5} borderRadius=\"xl\" {...props}>\r\n        <Flex direction=\"row\" justifyContent=\"space-between\" mb={2}>\r\n          <Box as=\"h3\" fontSize=\"lg\" fontWeight=\"bold\" color={titleColor}>\r\n            {title}\r\n          </Box>\r\n          <Tooltip label=\"Close\">\r\n            <CloseButton size=\"sm\" variant=\"rounded\" onClick={handleClose} />\r\n          </Tooltip>\r\n        </Flex>\r\n        {children}\r\n      </Box>\r\n    </Collapse>\r\n  );\r\n};\r\n","export * from './logo-box';\r\n","import { Stack, Text } from '@chakra-ui/layout';\r\nimport { useColorModeValue , Link} from '@chakra-ui/react';\r\nimport { Logo } from '../logo';\r\n\r\nexport const LogoBox = () => {\r\n  const stackBg = useColorModeValue('gray.50', 'custom.2');\r\n  const shadow = useColorModeValue('base', 'none');\r\n\r\n  return (\r\n    <Link href={'/'} style={{ textDecoration: \"none\" , boxShadow:'none'}}>\r\n      <Stack direction=\"row\" align=\"center\" bg={stackBg} shadow={shadow} px={4} h=\"12\" borderRadius=\"full\" userSelect=\"none\">\r\n        <Logo w=\"5\" h=\"7\" />\r\n      <Text fontWeight=\"bold\">Sonic</Text>\r\n    </Stack>\r\n    </Link>\r\n  );\r\n};\r\n","export * from './logo';\r\n","import Icon, { IconProps } from '@chakra-ui/icon';\r\nimport { forwardRef } from '@chakra-ui/system';\r\n\r\nexport const Logo = forwardRef<IconProps, 'svg'>((props, ref) => {\r\n  return (\r\n    <Icon\r\n      ref={ref}\r\n      viewBox=\"0 0 438 576\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      {...props}\r\n    >\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        clipRule=\"evenodd\"\r\n        d=\"M340.824 535.768C379.219 518.987 437.117 439.772 437.117 390.054C437.117 334.21 407.602 288.94 371.194 288.94C336.932 288.94 308.153 330.958 304.881 382.453C288.283 381.461 268.324 383.097 244.345 388.171C206.535 396.171 168.296 402.991 129.803 406.442C57.0437 412.965 7.93594 433.479 6.33618 475.073C6.33618 526.705 87.4154 575.959 191.128 575.959C250.135 575.959 304.725 559.482 340.824 535.768Z\"\r\n        fill=\"url(#paint0_linear_1_72)\"\r\n      />\r\n      <path\r\n        d=\"M431.082 399.358C409.569 446.2 276.464 399.358 180.2 358.186C85.5077 314.698 19.6274 274.889 35.963 231.091C57.4758 184.248 216.976 175.2 311.669 218.688C406.361 262.177 449.16 344.136 431.082 399.358Z\"\r\n        fill=\"#1A2A86\"\r\n      />\r\n      <path\r\n        d=\"M374.138 69.3708C384.394 119.087 320.932 132.999 188.881 160.24C87.0951 181.238 11.4238 311.976 0.761834 175.541C-3.33268 123.147 47.4486 30.0377 149.235 9.03976C251.021 -11.9582 356.187 15.0277 374.138 69.3708Z\"\r\n        fill=\"url(#paint1_linear_1_72)\"\r\n      />\r\n      <path\r\n        d=\"M255.951 276.809C249.286 301.418 186.793 340.881 120.989 323.06C55.1857 305.239 2.92729 230.251 9.59206 205.642C16.0479 181.804 66.5027 159.144 141.51 196.194C146.444 198.631 151.682 200.8 156.957 202.368C311.009 248.148 262.503 252.613 255.951 276.809Z\"\r\n        fill=\"#1A2A86\"\r\n      />\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        clipRule=\"evenodd\"\r\n        d=\"M374.111 69.1391C375.404 75.4067 375.55 81.1086 374.56 86.3413C361.134 50.7476 312.018 27.5309 248.718 24.1348C154.337 19.0713 117.36 51.9478 112.384 95.654C112.384 128.443 144.403 163.36 194.809 176.264L278.252 207.049C289.844 210.552 300.928 214.662 311.24 219.398C386.125 253.789 428.402 312.354 433.588 362.536C435.224 371.361 436.1 380.68 436.1 390.314C436.1 449.085 381.215 513.798 344.208 533.277C308.222 558.327 251.683 576 190.377 576C86.6639 576 6.58354 527.417 6.58354 476.113C6.58354 470.345 7.55766 464.978 9.43422 459.995C9.36668 461.02 9.33263 462.05 9.33263 463.084C9.33263 511.079 82.6754 549.986 173.148 549.986C263.621 549.986 336.964 511.079 336.964 463.084C336.964 430.639 303.448 402.347 253.78 387.42C253.796 387.418 253.811 387.415 253.826 387.412C228.596 378.279 203.431 368.097 180.388 358.242C122.201 331.519 74.9448 306.192 51.1264 280.465C31.8405 261.447 17.9268 240.196 12.507 224.111C7.14857 214.388 3.44721 198.782 1.58671 175.445C-2.63373 122.508 47.833 28.5814 149.407 7.62722C250.981 -13.327 356.05 14.1987 374.111 69.1391Z\"\r\n        fill=\"url(#paint2_linear_1_72)\"\r\n      />\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        clipRule=\"evenodd\"\r\n        d=\"M374.111 69.1392C375.404 75.4068 375.55 81.1088 374.56 86.3414C361.135 50.7477 312.018 27.531 248.718 24.135C154.337 19.0715 117.36 51.948 112.384 95.6541C112.384 128.443 144.403 163.36 194.809 176.265L278.252 207.049C289.844 210.552 300.928 214.662 311.24 219.398C386.125 253.789 428.403 312.354 433.589 362.536C435.224 371.361 436.1 380.68 436.1 390.315C436.1 449.085 381.215 513.798 344.208 533.277C308.222 558.327 251.683 576 190.377 576C86.6639 576 6.5836 527.417 6.5836 476.113C6.5836 470.345 7.55772 464.978 9.43428 459.995C9.36674 461.02 9.33269 462.05 9.33269 463.084C9.33269 511.079 82.6754 549.986 173.148 549.986C263.621 549.986 336.964 511.079 336.964 463.084C336.964 430.639 303.448 402.348 253.78 387.42C253.796 387.418 253.811 387.415 253.826 387.412C228.596 378.279 203.431 368.097 180.388 358.242C122.201 331.519 74.9449 306.192 51.1265 280.465C31.8406 261.447 17.9268 240.196 12.5071 224.111C7.14864 214.388 3.44727 198.782 1.58677 175.445C-2.63367 122.508 47.833 28.5815 149.407 7.62734C250.981 -13.3269 356.051 14.1988 374.111 69.1392Z\"\r\n        fill=\"url(#paint3_linear_1_72)\"\r\n      />\r\n      <defs>\r\n        <linearGradient\r\n          id=\"paint0_linear_1_72\"\r\n          x1=\"352.703\"\r\n          y1=\"431.619\"\r\n          x2=\"4.2183\"\r\n          y2=\"491.079\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop stopColor=\"#1A2A86\" />\r\n          <stop offset=\"1\" stopColor=\"#2C44FF\" />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"paint1_linear_1_72\"\r\n          x1=\"108.269\"\r\n          y1=\"104.295\"\r\n          x2=\"383.244\"\r\n          y2=\"74.7432\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop stopColor=\"#1A2A86\" />\r\n          <stop offset=\"1\" stopColor=\"#2B43FB\" />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"paint2_linear_1_72\"\r\n          x1=\"339.961\"\r\n          y1=\"0.605345\"\r\n          x2=\"137.188\"\r\n          y2=\"593.938\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop stopColor=\"#566AFF\" />\r\n          <stop offset=\"0.493345\" stopColor=\"#3347D1\" />\r\n          <stop offset=\"1\" stopColor=\"#566AFF\" />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"paint3_linear_1_72\"\r\n          x1=\"339.961\"\r\n          y1=\"0.605467\"\r\n          x2=\"137.189\"\r\n          y2=\"593.938\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop stopColor=\"#566AFF\" />\r\n          <stop offset=\"0.493345\" stopColor=\"#3347D1\" />\r\n          <stop offset=\"1\" stopColor=\"#566AFF\" />\r\n        </linearGradient>\r\n      </defs>\r\n    </Icon>\r\n  );\r\n});\r\n","export * from './lp-breakdown-popover-item';\r\nexport * from './lp-breakdown-popover';\r\n","import { Flex, HStack, Image, Text } from '@chakra-ui/react';\r\nimport { FC } from 'react';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\n\r\nimport { LPBreakdown } from '.';\r\n\r\ntype LPBreakdownPopoverItemProps = LPBreakdown;\r\n\r\nexport const LPBreakdownPopoverItem: FC<LPBreakdownPopoverItemProps> = ({\r\n  src = questionMarkSrc,\r\n  balance,\r\n  symbol,\r\n}) => {\r\n  return (\r\n    <Flex justify=\"space-between\" pb={3} _last={{ pb: 0 }}>\r\n      <HStack flex={0} minWidth=\"fit-content\">\r\n        <Image src={src} boxSize={4} alt={`${symbol} logo`} />\r\n        <Text>{symbol}</Text>\r\n      </HStack>\r\n      <Text>\r\n        {balance}&nbsp;{symbol}\r\n      </Text>\r\n    </Flex>\r\n  );\r\n};\r\n","import {\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n} from '@chakra-ui/popover';\r\nimport { Heading, useColorModeValue } from '@chakra-ui/react';\r\nimport { FC, useMemo } from 'react';\r\n\r\nimport { LPBreakdownPopoverItem } from './lp-breakdown-popover-item';\r\n\r\nexport type LPBreakdown = {\r\n  symbol: string;\r\n  decimals: number;\r\n  balance?: string;\r\n  src?: string;\r\n};\r\n\r\ntype LPBreakdownPopoverProps = {\r\n  sources?: LPBreakdown[];\r\n  children?: React.ReactNode;\r\n};\r\n\r\nexport const LPBreakdownPopover: FC<LPBreakdownPopoverProps> = ({\r\n  sources = [],\r\n  children,\r\n}) => {\r\n  const filteredSources = useMemo(\r\n    () =>\r\n      sources.filter((source) => source.balance && Number(source.balance) > 0),\r\n    [sources]\r\n  );\r\n\r\n  const color = useColorModeValue('gray.800', 'gray.50');\r\n\r\n  if (filteredSources.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Popover trigger=\"hover\">\r\n      <PopoverTrigger>{children}</PopoverTrigger>\r\n      <PopoverContent color={color}>\r\n        <PopoverArrow />\r\n        <PopoverHeader>\r\n          <Heading as=\"h3\" size=\"sm\">\r\n            LP Breakdown\r\n          </Heading>\r\n        </PopoverHeader>\r\n        <PopoverBody>\r\n          {filteredSources.map((source) => (\r\n            <LPBreakdownPopoverItem key={source.symbol} {...source} />\r\n          ))}\r\n        </PopoverBody>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n","export * from './number-input';\r\n","import {\r\n  forwardRef,\r\n  Input,\r\n  InputProps,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { ChangeEvent } from 'react';\r\n\r\nexport type NumberInputProps = InputProps & {\r\n  setValue?: (value: string) => void;\r\n  placeholder?: string;\r\n};\r\n\r\nexport const NumberInput = forwardRef<NumberInputProps, 'input'>(\r\n  ({ placeholder = '0.00', onChange, setValue, ...props }, ref) => {\r\n    const handleValueChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n      const value = event.target.value;\r\n\r\n      if(value == '.' ) setValue?setValue('0.'):false;\r\n\r\n      if (isNaN(Number(value))) return;\r\n\r\n      if (onChange) {\r\n        onChange(event);\r\n      }\r\n\r\n      if (setValue) {\r\n        setValue(value);\r\n      }\r\n    };\r\n\r\n    const color = useColorModeValue('gray.500', 'gray.300');\r\n\r\n    return (\r\n      <Input\r\n        ref={ref}\r\n        variant=\"unstyled\"\r\n        type=\"text\"\r\n        textAlign=\"right\"\r\n        fontSize=\"3xl\"\r\n        fontWeight={700}\r\n        backgroundColor=\"transparent\"\r\n        color={color}\r\n        outline=\"none\"\r\n        transition=\"color 400ms\"\r\n        placeholder={placeholder}\r\n        _placeholder={{ color: color }}\r\n        {...props}\r\n        onChange={handleValueChange}\r\n      />\r\n    );\r\n  }\r\n);\r\n","export * from './search-bar';\r\n","import { Box, Flex, Image, useColorModeValue } from '@chakra-ui/react';\r\nimport { ChangeEvent } from 'react';\r\n\r\nimport { searchSrc } from '@/assets';\r\n\r\ntype SearchBarProps = {\r\n  search: string;\r\n  setSearch: (arg0: string) => any;\r\n};\r\n\r\nexport const SearchBar = ({ search, setSearch }: SearchBarProps) => {\r\n  const handleSearchChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const inputValue = event.target.value;\r\n\r\n    setSearch(inputValue);\r\n  };\r\n\r\n  const bg = useColorModeValue('gray.50', 'custom.3');\r\n  const color = useColorModeValue('gray.800', 'gray.50');\r\n  const shadow = useColorModeValue('base', 'none');\r\n\r\n  return (\r\n    <Flex\r\n      boxSizing=\"border-box\"\r\n      px={4}\r\n      bg={bg}\r\n      shadow={shadow}\r\n      w=\"100%\"\r\n      h={10}\r\n      borderRadius={12}\r\n    >\r\n      <Image src={searchSrc} alt=\"search\" w={4} mr={3} />\r\n      <Box\r\n        as=\"input\"\r\n        value={search}\r\n        bg={bg}\r\n        border=\"none\"\r\n        w=\"100%\"\r\n        color={color}\r\n        outline=\"none\"\r\n        fontWeight={400}\r\n        placeholder=\"Search by name or canister id\"\r\n        onChange={handleSearchChange}\r\n        _placeholder={{\r\n          color: 'custom.1',\r\n        }}\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n","export * from './slippage-settings';\r\n","import {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Flex,\r\n  HStack,\r\n  Icon,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { FaExclamationTriangle } from '@react-icons/all-files/fa/FaExclamationTriangle';\r\nimport { useMemo } from 'react';\r\n\r\nimport { NumberInput } from '@/components';\r\n\r\ntype SlippageSettingsProps = {\r\n  slippage: string;\r\n  isAutoSlippage: boolean;\r\n  setSlippage: (slippage: string) => any;\r\n  setIsAutoSlippage: (isAutoSlippage: boolean) => any;\r\n};\r\n\r\nexport const SlippageSettings = ({\r\n  slippage,\r\n  setSlippage,\r\n  isAutoSlippage,\r\n  setIsAutoSlippage,\r\n}: SlippageSettingsProps) => {\r\n  const inputBorderColorDisabled = useColorModeValue('gray.200', 'custom.4');\r\n  const inputBorderColorEnabled = 'dark-blue.500';\r\n  const inputBorderColor = isAutoSlippage\r\n    ? inputBorderColorDisabled\r\n    : inputBorderColorEnabled;\r\n\r\n  const inputColorDisabled = useColorModeValue('gray.400', 'custom.1');\r\n  const inputColorEnabled = useColorModeValue('gray.800', 'gray.50');\r\n  const inputColor = isAutoSlippage ? inputColorDisabled : inputColorEnabled;\r\n\r\n  const yellowColor = useColorModeValue('yellow.600', 'yellow.500');\r\n  const redColor = useColorModeValue('red.600', 'red.500');\r\n  const messageColor = Number(slippage) > 50 ? redColor : yellowColor;\r\n\r\n  const handleInputClick = () => {\r\n    if (isAutoSlippage) setIsAutoSlippage(false);\r\n  };\r\n\r\n  const handleButtonClick = () => {\r\n    if (!isAutoSlippage) setIsAutoSlippage(true);\r\n  };\r\n\r\n  const handleChange = (value: string) => {\r\n    setIsAutoSlippage(false);\r\n    const num = Number(value);\r\n    if (num < 0) {\r\n      setSlippage('0');\r\n    } else {\r\n      setSlippage(value.replace(/^0+/, '').replace(/^\\./, '0.') || '0');\r\n    }\r\n  };\r\n\r\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\r\n    setSlippage(String(Number(e.target.value)));\r\n  };\r\n\r\n  const warningMessage = useMemo(() => {\r\n    if (Number(slippage) > 50) {\r\n      setIsAutoSlippage(true);\r\n      return 'Enter a valid slippage percentage (default: 0.5%)';\r\n    }\r\n\r\n    if (Number(slippage) > 5) {\r\n      return 'Your slippage tolerance is set very high, the received amount of tokens may reduced because of it. Consider reducing it.';\r\n    }\r\n\r\n    if (Number(slippage) < 0.25) {\r\n      return 'Your slippage tolerance is set very low, the transaction may fail.';\r\n    }\r\n  }, [slippage]);\r\n\r\n  return (\r\n    <Stack zIndex=\"popover\" px={5} pt={3} pb={3}>\r\n      <Box as=\"h1\" textAlign=\"left\" fontSize=\"1rem\" w=\"100%\">\r\n        Transaction Settings\r\n      </Box>\r\n      <Divider />\r\n      <Box as=\"p\" fontSize=\"0.875rem\" textAlign=\"left\" fontWeight={400}>\r\n        Slippage tolerance\r\n      </Box>\r\n      <Flex direction=\"row\" alignItems=\"center\">\r\n        <Button\r\n          variant={isAutoSlippage ? 'gradient' : 'outline'}\r\n          colorScheme=\"dark-blue\"\r\n          borderRadius=\"full\"\r\n          onClick={handleButtonClick}\r\n          mr={3}\r\n        >\r\n          Auto\r\n        </Button>\r\n        <InputGroup color={inputColor} fontWeight={600}>\r\n          <NumberInput\r\n            opacity={1}\r\n            color={inputColor}\r\n            borderColor={inputBorderColor}\r\n            borderStyle=\"solid\"\r\n            borderWidth=\"1px\"\r\n            borderRadius=\"full\"\r\n            value={slippage}\r\n            setValue={handleChange}\r\n            onClick={handleInputClick}\r\n            onBlur={handleBlur}\r\n            pr={8}\r\n            pl={2.5}\r\n            pt={2.5}\r\n            pb={2}\r\n            fontSize=\"sm\"\r\n          />\r\n          <InputRightElement fontSize=\"sm\">%</InputRightElement>\r\n        </InputGroup>\r\n      </Flex>\r\n      {warningMessage && (\r\n        <HStack textAlign=\"left\" color={messageColor} maxW=\"320px\" spacing={4}>\r\n          <Icon as={FaExclamationTriangle} height={6} width={6} />\r\n          <Text fontWeight=\"normal\" fontSize=\"sm\">\r\n            {warningMessage}\r\n          </Text>\r\n        </HStack>\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n","export * from './stack-line';\r\n","import { Flex, StackItem, Text } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nexport type StackLineProps = {\r\n  title: string;\r\n  value: React.ReactNode;\r\n};\r\n\r\nexport const StackLine: React.FC<StackLineProps> = ({ value, title }) => {\r\n  return (\r\n    <StackItem>\r\n      <Flex>\r\n        <Text>{title}</Text>\r\n        <Text ml={2} flex={1} textAlign=\"right\">\r\n          {value}\r\n        </Text>\r\n      </Flex>\r\n    </StackItem>\r\n  );\r\n};\r\n","export * from './token-balances-popover-item';\r\nexport * from './token-balances-popover';\r\n","import { Flex, HStack, Image, Text } from '@chakra-ui/react';\r\nimport { toBigNumber } from '@memecake/sonic-js';\r\nimport { FC, useMemo } from 'react';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\n\r\ntype TokenBalancesPopoverItemProps = {\r\n  src?: string;\r\n  name?: string;\r\n  balance?: number;\r\n  symbol?: string;\r\n  decimals?: number;\r\n};\r\n\r\nexport const TokenBalancesPopoverItem: FC<TokenBalancesPopoverItemProps> = ({\r\n  src = questionMarkSrc, symbol,balance,decimals,name}) => {\r\n    \r\n  const _balance = useMemo(() =>\r\n      toBigNumber(balance ?? 0).applyDecimals(decimals ?? 0).toString(),\r\n    [balance, decimals]\r\n  );\r\n\r\n  return (\r\n    <Flex justify=\"space-between\" pb={3} _last={{ pb: 0 }}>\r\n      <HStack flex={0} minWidth=\"fit-content\">\r\n        <Image src={src} boxSize={4} alt={`${symbol} logo`} />\r\n        <Text>{name}</Text>\r\n      </HStack>\r\n      <Text textAlign=\"right\" flex={1}>\r\n        {_balance} {symbol}\r\n      </Text>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Popover, PopoverArrow, PopoverBody, PopoverContent, PopoverHeader, PopoverTrigger } from '@chakra-ui/popover';\r\n\r\nimport { Heading, HStack, Image, useColorModeValue } from '@chakra-ui/react';\r\nimport { FC, useMemo } from 'react';\r\n\r\nimport { TokenSource } from '@/components';\r\n\r\nimport { TokenBalancesPopoverItem } from './token-balances-popover-item';\r\n\r\ntype TokenBalancesPopoverProps = {\r\n  symbol?: string;\r\n  decimals?: number;\r\n  sources?: TokenSource[];\r\n  children?: React.ReactNode;\r\n};\r\n\r\nexport const TokenBalancesPopover: FC<TokenBalancesPopoverProps> = ({\r\n  symbol, decimals, sources = [], children }) => {\r\n\r\n  const filteredSources = useMemo(\r\n    () => sources.filter((source) => source.balance && source.balance > 0),\r\n    [sources]\r\n  );\r\n\r\n  const color = useColorModeValue('gray.800', 'gray.50');\r\n\r\n  if (filteredSources.length === 0) { return null; }\r\n\r\n  return (\r\n    <Popover trigger=\"hover\">\r\n      <PopoverTrigger>\r\n        {children || (\r\n          <HStack spacing={1}>\r\n            {filteredSources.map((source) => (\r\n              <Image key={source?.src} src={source?.src} alt={source.name} />\r\n            ))}\r\n          </HStack>\r\n        )}\r\n      </PopoverTrigger>\r\n      <div>\r\n        <PopoverContent color={color}>\r\n          <PopoverArrow />\r\n          <PopoverHeader>\r\n            <Heading as=\"h3\" size=\"sm\"> Balance Breakdown</Heading>\r\n          </PopoverHeader>\r\n          <PopoverBody>\r\n            {filteredSources.map((source) => (\r\n              <TokenBalancesPopoverItem key={source.name} decimals={decimals} symbol={symbol} {...source} />\r\n            ))}\r\n          </PopoverBody>\r\n        </PopoverContent>\r\n      </div>\r\n\r\n    </Popover>\r\n  );\r\n};\r\n","export * from './token';\r\nexport * from './tokenCreditinfo';\r\n","import {\r\n  Box,\r\n  BoxProps,\r\n  Button,\r\n  ButtonProps,\r\n  Flex,\r\n  FlexProps,\r\n  forwardRef,\r\n  HStack,\r\n  Icon,\r\n  Image,\r\n  ImageProps,\r\n  Skeleton,\r\n  Text,\r\n  TextProps,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { createContext } from '@chakra-ui/react-utils';\r\nimport { Price } from '@memecake/sonic-js';\r\nimport { FaChevronDown } from '@react-icons/all-files/fa/FaChevronDown';\r\nimport React, { useCallback, useMemo } from 'react';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\nimport { NumberInput } from '@/components';\r\nimport { AppTokenMetadata } from '@/models';\r\nimport { getMaxValue } from '@/utils/format';\r\n\r\nimport { DisplayValue, NumberInputProps } from '..';\r\nimport { TokenBalancesPopover } from '../token-balances-popover';\r\n\r\n// === Core ===\r\n\r\nexport type TokenUniqueProps = {\r\n  value?: string;\r\n  tokenMetadata?: AppTokenMetadata;\r\n  tokenListMetadata?: AppTokenMetadata[];\r\n  sources?: TokenSource[];\r\n  setValue?: (value: string) => unknown;\r\n  isDisabled?: boolean;\r\n  isLoading?: boolean;\r\n  shouldGlow?: boolean;\r\n};\r\n\r\nexport type TokenProps = TokenUniqueProps & {\r\n  htmlProps?: BoxProps;\r\n};\r\n\r\nconst [TokenProvider, useTokenContext] = createContext<TokenUniqueProps>({\r\n  name: 'TokenContext',\r\n  errorMessage:\r\n    'useTokenContext: `context` is undefined. Seems you forgot to wrap all card components within `<Card />`',\r\n});\r\n\r\nexport type TokenSource = {\r\n  name: string;\r\n  src: string;\r\n  balance?: number;\r\n};\r\n\r\nexport const Token: React.FC<TokenProps> = ({\r\n  shouldGlow = false,\r\n  htmlProps,\r\n  children,\r\n  ...tokenProps\r\n}) => {\r\n  const borderGlow = useColorModeValue('dark-blue.300', 'dark-blue.500');\r\n  const borderNotGlow = useColorModeValue('gray.100', 'custom.4');\r\n  const borderColor = shouldGlow ? borderGlow : borderNotGlow;\r\n\r\n  const backgroundGlow = useColorModeValue('gray.50', 'black');\r\n  const backgroundNotGlow = useColorModeValue('gray.50', 'custom.2');\r\n  const background = shouldGlow ? backgroundGlow : backgroundNotGlow;\r\n\r\n  const shadow = useColorModeValue('base', 'none');\r\n\r\n  return (\r\n    <TokenProvider value={{ shouldGlow, ...tokenProps }}>\r\n      <Box\r\n        borderRadius={20}\r\n        bg={background}\r\n        border=\"1px solid\"\r\n        borderColor={borderColor}\r\n        shadow={shadow}\r\n        py={5}\r\n        px={5}\r\n        transition=\"border 400ms\"\r\n        position=\"relative\"\r\n        {...htmlProps}\r\n      >\r\n        {shouldGlow && <TokenGlow />}\r\n        {children}\r\n      </Box>\r\n    </TokenProvider>\r\n  );\r\n};\r\n\r\ntype TokenContentProps = FlexProps;\r\n\r\nexport const TokenContent: React.FC<TokenContentProps> = (props) => {\r\n  return (\r\n    <Flex\r\n      direction=\"row\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"space-between\"\r\n      mb={3}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\n// === Details ===\r\n\r\ntype TokenDetailsButtonProps = ButtonProps;\r\n\r\nexport const TokenDetailsButton = forwardRef<TokenDetailsButtonProps, 'button'>(\r\n  ({ children, ...props }, ref) => {\r\n    const { isLoading } = useTokenContext();\r\n    return (\r\n      <Button ref={ref} borderRadius=\"full\" mr={5} minWidth=\"fit-content\" {...props} isDisabled={isLoading || props.isDisabled}>\r\n        {children}\r\n        <Icon as={FaChevronDown} ml={2.5} width={3} />\r\n      </Button>\r\n    );\r\n  }\r\n);\r\n\r\ntype TokenDetailsLogo = ImageProps;\r\n\r\nexport const TokenDetailsLogo: React.FC<TokenDetailsLogo> = (props) => {\r\n  const { isLoading, tokenMetadata } = useTokenContext();\r\n\r\n  const logoSrc = tokenMetadata?.logo ?? questionMarkSrc;\r\n\r\n  return (\r\n    <Skeleton\r\n      isLoaded={!isLoading}\r\n      height={5}\r\n      width={5}\r\n      borderRadius=\"full\"\r\n      mr={2}\r\n    >\r\n      <Image\r\n        width={5}\r\n        minW={5}\r\n        height={5}\r\n        minH={5}\r\n        borderRadius=\"full\"\r\n        src={logoSrc}\r\n        alt={`${tokenMetadata?.symbol} logo`}\r\n        {...props}\r\n      />\r\n    </Skeleton>\r\n  );\r\n};\r\n\r\nexport const TokenDetailsSymbol: React.FC<TextProps> = (props) => {\r\n  const { isLoading, tokenMetadata } = useTokenContext();\r\n\r\n  return (\r\n    <Skeleton isLoaded={!isLoading} height={5} width=\"fit-content\">\r\n      <Text\r\n        fontWeight={700}\r\n        fontSize=\"lg\"\r\n        width=\"fit-content\"\r\n        minWidth={5}\r\n        {...props}\r\n      >\r\n        {tokenMetadata?.symbol}\r\n      </Text>\r\n    </Skeleton>\r\n  );\r\n};\r\n\r\n// === Balances ===\r\n\r\nexport const TokenData = (props: FlexProps) => {\r\n  return (\r\n    <Flex\r\n      direction=\"row\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"space-between\"\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport type TokenDataPriceProps = BoxProps & {\r\n  isUpdating?: boolean;\r\n  priceImpact?: string;\r\n};\r\n\r\nexport const TokenDataPrice: React.FC<TokenDataPriceProps> = ({\r\n  isUpdating,\r\n  priceImpact,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const { isLoading, value, tokenMetadata } = useTokenContext();\r\n\r\n  const isActive = useMemo(() => {\r\n    if (isLoading || parseFloat(value || '0') <= 0) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }, [isLoading, value]);\r\n\r\n  const price = useMemo(\r\n    () =>\r\n      Price.getByAmount({\r\n        amount: value,\r\n        price: tokenMetadata?.price,\r\n      }).toString(),\r\n    [tokenMetadata?.price, value]\r\n  );\r\n\r\n  const defaultColorActive = useColorModeValue('gray.800', 'gray.50');\r\n  const defaultColorInactive = useColorModeValue('gray.600', 'gray.300');\r\n  const defaultColor = isActive ? defaultColorActive : defaultColorInactive;\r\n\r\n  const color = useMemo(() => {\r\n    if (priceImpact) {\r\n      const priceImpactNumber = parseFloat(priceImpact);\r\n      const color =\r\n        priceImpactNumber > 0\r\n          ? 'green.500'\r\n          : priceImpactNumber <= 0 && priceImpactNumber >= -1\r\n            ? defaultColor\r\n            : priceImpactNumber < -1 && priceImpactNumber >= -5\r\n              ? 'yellow.500'\r\n              : 'red.500';\r\n\r\n      return color;\r\n    }\r\n\r\n    return defaultColor;\r\n  }, [priceImpact, defaultColor]);\r\n\r\n  const isPrice = useMemo(() => {\r\n    return price !== '0';\r\n  }, [price]);\r\n\r\n  return (\r\n    <Skeleton isLoaded={!isLoading} borderRadius=\"full\" minWidth={5}>\r\n      <HStack\r\n        transition=\"color 400ms\"\r\n        alignItems=\"center\"\r\n        color={defaultColor}\r\n        {...props}\r\n      >\r\n        {isPrice && (\r\n          <DisplayValue isUpdating={isUpdating} value={price} prefix=\"~$\" />\r\n        )}\r\n        {priceImpact && (\r\n          <DisplayValue\r\n            isUpdating={isUpdating}\r\n            color={color}\r\n            value={priceImpact}\r\n            prefix=\"(\"\r\n            suffix=\"%)\"\r\n          />\r\n        )}\r\n        {children}\r\n      </HStack>\r\n    </Skeleton>\r\n  );\r\n};\r\n\r\nexport type TokeDataBalancesProps = FlexProps & {\r\n  isUpdating?: boolean;\r\n  onMaxClick?: () => unknown | Promise<unknown>;\r\n};\r\n\r\nexport const TokenDataBalances: React.FC<TokeDataBalancesProps> = ({\r\n  isUpdating,\r\n  onMaxClick,\r\n  ...props\r\n}) => {\r\n  const { isLoading, sources, tokenMetadata, value } = useTokenContext();\r\n\r\n  const totalTokenBalance = useMemo(\r\n    () => sources?.reduce((acc, current) => acc + (current.balance ?? 0), 0),\r\n    [sources]\r\n  );\r\n\r\n  const shouldRenderMaxButton = useMemo(() => {\r\n    if (\r\n      onMaxClick &&\r\n      totalTokenBalance &&\r\n      totalTokenBalance > 0 &&\r\n      getMaxValue(tokenMetadata, totalTokenBalance).toNumber() !== Number(value)\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }, [onMaxClick, tokenMetadata, totalTokenBalance, value]);\r\n\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n\r\n  return (\r\n    <Skeleton isLoaded={!isLoading} borderRadius=\"full\" minW={20}>\r\n      <Flex direction=\"row\" color={color} {...props}>\r\n        <HStack>\r\n          <TokenBalancesPopover\r\n            sources={sources}\r\n            decimals={tokenMetadata?.decimals}\r\n            symbol={tokenMetadata?.symbol}\r\n          />\r\n\r\n          {typeof totalTokenBalance === 'number' && (\r\n            <DisplayValue\r\n              isUpdating={isUpdating}\r\n              value={totalTokenBalance}\r\n              decimals={tokenMetadata?.decimals || 0}\r\n              prefix=\"Balance: \"\r\n              suffix={tokenMetadata?.symbol && ` ${tokenMetadata?.symbol}`}\r\n              shouldDivideByDecimals\r\n            />\r\n          )}\r\n\r\n          {shouldRenderMaxButton && (\r\n            <Button variant=\"link\" onClick={onMaxClick}>\r\n              (Max)\r\n            </Button>\r\n          )}\r\n        </HStack>\r\n      </Flex>\r\n    </Skeleton>\r\n  );\r\n};\r\n\r\n// === Input ===\r\n\r\ntype TokenInputProps = NumberInputProps;\r\n\r\nexport const TokenInput: React.FC<TokenInputProps> = (props) => {\r\n\r\n  const { isLoading, isDisabled, shouldGlow, value, setValue, tokenMetadata } = useTokenContext();\r\n  const background = shouldGlow ? 'black' : 'custom.2';\r\n\r\n  const isActive = useMemo(() => {\r\n    if (isLoading || parseFloat(value || '0') <= 0) { return false;}\r\n    return true;\r\n  }, [isLoading, value]);\r\n\r\n  const handleChange = useCallback((_value: string) => {\r\n    if (tokenMetadata && setValue) {\r\n      if (_value === '' || typeof (_value) == undefined) return setValue('');\r\n      const [nat, decimals] = _value.split('.');\r\n      let newValue = parseInt(nat) > 0 ? nat.replace(/^0+/, '') : '0';\r\n      if (_value.includes('.') && tokenMetadata.decimals > 0) { newValue += '.'; }\r\n      if (decimals) { newValue += `${decimals.slice(0, tokenMetadata.decimals)}`; }\r\n      setValue(newValue);\r\n    }\r\n  },\r\n    [tokenMetadata, setValue]\r\n  );\r\n  const activeColor = useColorModeValue('gray.800', 'gray.50');\r\n  const inactiveColor = useColorModeValue('gray.400', 'custom.1');\r\n  const color = isActive ? activeColor : inactiveColor;\r\n\r\n  return (\r\n    <Skeleton isLoaded={!isLoading} borderRadius=\"full\">\r\n      <NumberInput\r\n        isDisabled={isDisabled}\r\n        value={value}\r\n        setValue={handleChange}\r\n        color={color}\r\n        background={background}\r\n        {...props}\r\n      />\r\n    </Skeleton>\r\n  );\r\n};\r\n\r\n// === Other Internal Components ===\r\n\r\nconst TokenGlow = () => (\r\n  <Box\r\n    position=\"absolute\"\r\n    borderRadius={20}\r\n    top={0}\r\n    left={0}\r\n    width=\"100%\"\r\n    height=\"100%\"\r\n    filter=\"blur(6px)\"\r\n    zIndex={-100}\r\n    bg=\"dark-blue.500\"\r\n  />\r\n);\r\n","import { Flex,Text  } from '@chakra-ui/react';\nimport { useTokenTaxCheck } from '@/hooks'\n\nexport type TokenMetaProps = {\n    tokenSymbol?: string;\n    tokenDecimals?: number;\n    tokenValue?: string;\n    tokenId?: string;\n    pageInfo?:string;\n};\n\nexport const TokenDataMetaInfo: React.FC<TokenMetaProps> = ({\n    tokenSymbol,\n    tokenValue,\n    tokenDecimals,\n    tokenId,\n    pageInfo,\n}) => {\n    var info = useTokenTaxCheck({tokenId ,tokenSymbol, tokenDecimals, tokenValue});\n    let isPrice = (): number => {\n        return parseFloat(info.taxInfo.netValue.toFixed(3));\n    };\n    let calcPrice: number = isPrice();\n\n    return (\n        <Flex mt={2} className=\"\">\n            {calcPrice&&tokenSymbol=='YC' ? (\n                <Text color=\"var(--chakra-colors-gray-200)\" >\n                    { pageInfo == \"swap\" ? \"Swapping for after 11% \": \"Credited after 11%\" }\n                    <a style={{ color: 'var(--chakra-colors-blue-300)' }} target=\"_blank\" \n                    href=\"https://blog.cigdao.com/cigdao-decentralization-sale-6856ad618f8c\"> YC tax </a> : {calcPrice}\n                </Text>\n            ) : (\n                ''\n            )}\n        </Flex>\n    );\n};","export * from './view-header';\r\n","import {\r\n  Box,\r\n  Flex,\r\n  IconButton,\r\n  Tooltip,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { FaArrowLeft } from '@react-icons/all-files/fa/FaArrowLeft';\r\n\r\ntype ViewHeaderProps = {\r\n  title: string;\r\n  onArrowBack?: () => void;\r\n};\r\n\r\nexport const ViewHeader: React.FC<ViewHeaderProps> = ({\r\n  title,\r\n  onArrowBack,\r\n  children,\r\n}) => {\r\n  const titleRightAdjustment = children ? 8 : 'auto';\r\n  const titleLeftAdjustment = onArrowBack ? 8 : 'auto';\r\n\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const shadow = useColorModeValue('base', 'none');\r\n  const color = useColorModeValue('gray.800', 'gray.50');\r\n\r\n  return (\r\n    <Flex direction=\"column\">\r\n      <Flex\r\n        py={3}\r\n        px={5}\r\n        bg={bg}\r\n        shadow={shadow}\r\n        fontSize=\"lg\"\r\n        color={color}\r\n        fontWeight={700}\r\n        textAlign=\"center\"\r\n        borderTopRadius={20}\r\n        borderBottomRadius={20}\r\n        direction=\"row\"\r\n        align=\"center\"\r\n      >\r\n        {onArrowBack && (\r\n          <Tooltip label=\"Back\">\r\n            <IconButton\r\n              size=\"sm\"\r\n              isRound\r\n              onClick={onArrowBack}\r\n              variant=\"outline\"\r\n              aria-label=\"back\"\r\n              icon={<FaArrowLeft />}\r\n              mr=\"auto\"\r\n            />\r\n          </Tooltip>\r\n        )}\r\n        <Box\r\n          pr={titleLeftAdjustment}\r\n          pl={titleRightAdjustment}\r\n          w=\"100%\"\r\n          mx=\"auto\"\r\n        >\r\n          {title}\r\n        </Box>\r\n        {children}\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n","import {\r\n  Box,\r\n  Flex,\r\n  Image,\r\n  keyframes,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\n\r\nimport { greenCheckSrc } from '@/assets';\r\nimport { StepStatus } from '@/components/modals';\r\n\r\nconst spin = keyframes`\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n`;\r\n\r\ntype CircleIconProps = {\r\n  status?: StepStatus;\r\n  iconSrc: string;\r\n};\r\n\r\nexport const CircleIcon = ({ status, iconSrc }: CircleIconProps) => {\r\n  const spinAnimation = `${spin} infinite 2s linear`;\r\n\r\n  const bgDark = status === StepStatus.Disabled ? 'custom.3' : 'dark-blue.500';\r\n  const bgLight = status === StepStatus.Disabled ? 'gray.200' : 'dark-blue.500';\r\n  const bg = useColorModeValue(bgLight, bgDark);\r\n\r\n  const opacity = status === StepStatus.Disabled ? 0.5 : 1;\r\n  const checkOpacity = status === StepStatus.Done ? 1 : 0;\r\n\r\n  return (\r\n    <Box\r\n      w=\"2.8125rem\"\r\n      h=\"2.8125rem\"\r\n      borderRadius=\"2.8125rem\"\r\n      position=\"relative\"\r\n      bg={bg}\r\n    >\r\n      {status === 'active' && (\r\n        <Box\r\n          w=\"2.8125rem\"\r\n          h=\"2.8125rem\"\r\n          borderRadius={45}\r\n          bg=\"dark-blue.500\"\r\n          filter=\"blur(10px)\"\r\n          position=\"absolute\"\r\n        />\r\n      )}\r\n      {status === 'active' && (\r\n        <Box\r\n          w=\"100%\"\r\n          h=\"100%\"\r\n          borderRadius=\"2.8125rem\"\r\n          zIndex={200}\r\n          border=\"2px solid #A8B2FF\"\r\n          borderTop=\"2px solid #FFFFFF\"\r\n          position=\"absolute\"\r\n          animation={spinAnimation}\r\n        />\r\n      )}\r\n      <Image\r\n        alt={'check'}\r\n        top={0}\r\n        right={0}\r\n        opacity={checkOpacity}\r\n        mt=\"-5px\"\r\n        mr=\"-3px\"\r\n        zIndex={300}\r\n        src={greenCheckSrc}\r\n        transition=\"opacity 400ms\"\r\n        position=\"absolute\"\r\n      />\r\n      <Flex\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"2.8125rem\"\r\n        zIndex={200}\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        position=\"absolute\"\r\n        opacity={opacity}\r\n        transition=\"opacity 400ms\"\r\n      >\r\n        <Image w=\"1.125rem\" src={iconSrc} alt={'icon'} />\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n","export * from './circle-icon';\r\n","export * from './plus';\r\nexport * from './circle-icon';\r\n","export * from './plus-icon';\r\n","import Icon, { IconProps } from '@chakra-ui/icon';\r\nimport { forwardRef } from '@chakra-ui/system';\r\n\r\nexport const PlusIcon = forwardRef<IconProps, 'svg'>((props, ref) => (\r\n  <Icon\r\n    ref={ref}\r\n    width=\"18\"\r\n    height=\"18\"\r\n    viewBox=\"0 0 18 18\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    {...props}\r\n  >\r\n    <path\r\n      d=\"M16.9062 7.9375H10.4375V1.46875C10.4375 1.10938 10.0781 0.75 9.71875 0.75H8.28125C7.87695 0.75 7.5625 1.10938 7.5625 1.46875V7.9375H1.09375C0.689453 7.9375 0.375 8.29688 0.375 8.65625V10.0938C0.375 10.498 0.689453 10.8125 1.09375 10.8125H7.5625V17.2812C7.5625 17.6855 7.87695 18 8.28125 18H9.71875C10.0781 18 10.4375 17.6855 10.4375 17.2812V10.8125H16.9062C17.2656 10.8125 17.625 10.498 17.625 10.0938V8.65625C17.625 8.29688 17.2656 7.9375 16.9062 7.9375Z\"\r\n      fill=\"dark-blue.500\"\r\n    />\r\n  </Icon>\r\n));\r\n","export * from './core';\r\nexport * from './layout';\r\nexport * from './plug';\r\nexport * from './icons';\r\nexport * from './maintenance';\r\n","export * from './layout';\r\n","export const NAVBAR_HEIGHT = '116px';\r\nexport const FOOTER_HEIGHT = '40px';\r\n\r\nexport const NAVIGATION_TABS = [\r\n  { label: 'Swap', url: '/swap' },\r\n  { label: 'Liquidity', url: '/liquidity' },\r\n  { label: 'Assets', url: '/assets' },\r\n  { label: 'Activity', url: '/activity' },\r\n];\r\n","import {\r\n  chakra,\r\n  Container,\r\n  Flex,\r\n  HStack,\r\n  IconButton,\r\n  Link as ChakraLink,\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n  Tab,\r\n  TabList,\r\n  Tabs,\r\n  Text,\r\n  useColorMode,\r\n  useColorModeValue,\r\n  useToken,\r\n} from '@chakra-ui/react';\r\nimport { FaBook } from '@react-icons/all-files/fa/FaBook';\r\nimport { FaDiscord } from '@react-icons/all-files/fa/FaDiscord';\r\nimport { FaEllipsisH } from '@react-icons/all-files/fa/FaEllipsisH';\r\nimport { FaMedium } from '@react-icons/all-files/fa/FaMedium';\r\nimport { FaMoon } from '@react-icons/all-files/fa/FaMoon';\r\nimport { FaNetworkWired } from '@react-icons/all-files/fa/FaNetworkWired';\r\nimport { FaRedo } from '@react-icons/all-files/fa/FaRedo';\r\nimport { FaSun } from '@react-icons/all-files/fa/FaSun';\r\nimport { FaTwitter } from '@react-icons/all-files/fa/FaTwitter';\r\nimport { FiArrowUpRight } from '@react-icons/all-files/fi/FiArrowUpRight';\r\nimport React, { useMemo, useState } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nimport { ENV } from '@/config';\r\nimport { useHeaderResizeEffect } from '@/hooks';\r\nimport { modalsSliceActions, useAppDispatch, usePlugStore } from '@/store';\r\nimport { ExternalLink } from '@/utils';\r\n\r\nimport packageJSON from '@/../package.json';\r\nimport { PlugButton } from '..';\r\nimport { LogoBox } from '../core';\r\nimport { PlugMenu } from '../plug/plug-menu';\r\nimport { FOOTER_HEIGHT, NAVIGATION_TABS } from './layout.constants';\r\n\r\nexport const Layout: React.FC = ({ children, ...props }) => {\r\n  const { isConnected } = usePlugStore();\r\n  const dispatch = useAppDispatch();\r\n  const location = useLocation();\r\n  const [headerHeight, setHeaderHeight] = useState('116px');\r\n\r\n  const currentTabIndex = useMemo(\r\n    () =>\r\n      NAVIGATION_TABS.findIndex(({ url }) => location.pathname.includes(url)),\r\n    [location]\r\n  );\r\n\r\n  const backgroundColor = useColorModeValue('custom.5', 'darkBlue');\r\n  const backgroundColorValue = useToken('colors', backgroundColor);\r\n\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  const menuBg = useColorModeValue('gray.50', 'custom.2');\r\n  const menuShadow = useColorModeValue('base', 'none');\r\n\r\n  useHeaderResizeEffect((element) => {\r\n    setHeaderHeight(`${element.clientHeight}px`);\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Container  maxW={['100%', 'container.xl', 'container.xl']} position=\"sticky\" top={0} zIndex={10} id=\"header\">\r\n        <Flex \r\n          zIndex=\"1000\" as=\"header\" width=\"full\" maxWidth=\"container.xl\" margin=\"auto\"\r\n          direction=\"row\" justifyContent=\"center\" alignItems=\"center\" flexWrap=\"wrap\"\r\n          gap=\"4\" p={['4', '4', '8']} position=\"sticky\" top=\"0\" bg={backgroundColor}\r\n        >\r\n          <Flex display={['none', 'none', 'none', 'flex']}   width={['0', '24%']}  alignItems=\"center\" justifyContent=\"center\">\r\n            <LogoBox />\r\n          </Flex>\r\n          <chakra.nav flex=\"1\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n            <Tabs\r\n              index={currentTabIndex}\r\n              variant=\"solid-rounded\"\r\n              colorScheme=\"dark-blue\"\r\n            >\r\n              <TabList bg={menuBg}>\r\n                {NAVIGATION_TABS.map(({ label, url }) => (\r\n                  <Tab  as={Link} key={label} to={url} px={6}>\r\n                    {label}\r\n                  </Tab>\r\n                ))}\r\n                <Tab\r\n                  display={['none', 'none', 'flex', 'flex']}\r\n                  as=\"a\"\r\n                  href={ExternalLink.analyticsApp}\r\n                  target={ExternalLink.analyticsApp}\r\n                  px={4}\r\n                >\r\n                  Analytics\r\n                  <FiArrowUpRight />\r\n                </Tab>\r\n              </TabList>\r\n            </Tabs>\r\n          </chakra.nav>\r\n          <Flex\r\n            direction=\"row\"\r\n            width={['fit-content', 'fit-content', '24%']}\r\n            gap=\"4\"\r\n            mr=\"-2\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"flex-end\"\r\n          >\r\n            <HStack>\r\n              {isConnected ? <PlugMenu /> : <PlugButton />}\r\n              <Menu placement=\"bottom-end\">\r\n                <MenuButton as={IconButton} aria-label=\"Menu\" icon={<FaEllipsisH />} borderRadius=\"full\" bg={menuBg} shadow={menuShadow} />\r\n                <div>\r\n                  <MenuList bg={menuBg} shadow={menuShadow} borderRadius=\"xl\">\r\n                    {ENV.isDarkModeEnabled && (\r\n                      <MenuItem onClick={toggleColorMode} icon={colorMode === 'dark' ? <FaSun /> : <FaMoon />}>\r\n                        {colorMode === 'dark' ? 'Light mode' : 'Dark mode'}\r\n                      </MenuItem>\r\n                    )}\r\n                    {isConnected && (\r\n                      <MenuItem onClick={() => dispatch(modalsSliceActions.openMintManualModal())} icon={<FaRedo />}>\r\n                        Retry minting\r\n                      </MenuItem>\r\n                    )}\r\n\r\n                    <MenuDivider />\r\n                    <ChakraLink href={ExternalLink.twitter} target={ExternalLink.twitter} rel=\"noopener noreferrer\" fontWeight=\"bold\">\r\n                      <MenuItem icon={<FaTwitter />}>Twitter</MenuItem>\r\n                    </ChakraLink>\r\n                    <ChakraLink href={ExternalLink.discord} target={ExternalLink.discord} rel=\"noopener noreferrer\" fontWeight=\"bold\">\r\n                      <MenuItem icon={<FaDiscord />}>Discord</MenuItem>\r\n                    </ChakraLink>\r\n                    <ChakraLink href={ExternalLink.medium} target={ExternalLink.medium} rel=\"noopener noreferrer\" fontWeight=\"bold\">\r\n                      <MenuItem icon={<FaMedium />}>Medium</MenuItem>\r\n                    </ChakraLink>\r\n                    <ChakraLink href={ExternalLink.sonicDocs} target={ExternalLink.sonicDocs} rel=\"noopener noreferrer\" fontWeight=\"bold\">\r\n                      <MenuItem icon={<FaBook />}>Documentation</MenuItem>\r\n                    </ChakraLink>\r\n                    <ChakraLink href={ExternalLink.swapApiDocs} target={ExternalLink.swapApiDocs} rel=\"noopener noreferrer\" fontWeight=\"bold\">\r\n                      <MenuItem icon={<FaNetworkWired />}>API</MenuItem>\r\n                    </ChakraLink>\r\n                  </MenuList>\r\n                </div>\r\n              </Menu>\r\n            </HStack>\r\n          </Flex>\r\n        </Flex>\r\n      </Container>\r\n\r\n      <Container as=\"main\" maxW=\"xl\" minH={`calc(100vh - ${headerHeight} - ${FOOTER_HEIGHT})`} py=\"4\" display=\"flex\" flexDirection=\"column\" {...props}>\r\n        {children}\r\n      </Container>\r\n\r\n      <chakra.footer px=\"4\" py=\"2\" position=\"fixed\" bottom={0} left={0} right={0}\r\n        background={`linear-gradient(to bottom, transparent 0%, ${backgroundColorValue} 50%)`} pointerEvents=\"none\"\r\n      >\r\n        <Text>Sonic v{packageJSON.version}</Text>\r\n      </chakra.footer>\r\n    </>\r\n  );\r\n};\r\n","export * from './maintenance';\r\n","import { Flex, Image, Link, Text, useColorModeValue } from '@chakra-ui/react';\r\nimport { FaBook } from '@react-icons/all-files/fa/FaBook';\r\nimport { FaDiscord } from '@react-icons/all-files/fa/FaDiscord';\r\nimport { FaTwitter } from '@react-icons/all-files/fa/FaTwitter';\r\n\r\nimport { logoSrc } from '@/assets';\r\nimport { ExternalLink } from '@/utils';\r\n\r\nexport const Maintenance = () => {\r\n  const color = useColorModeValue('gray.600', 'gray.300');\r\n\r\n  return (\r\n    <Flex\r\n      flexDirection=\"column\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      position=\"fixed\"\r\n      top={0}\r\n      left={0}\r\n      right={0}\r\n      bottom={0}\r\n    >\r\n      <Image src={logoSrc} m=\"8vh\" height=\"10vh\" />\r\n\r\n      <Flex\r\n        flex={1}\r\n        m={30}\r\n        textAlign=\"center\"\r\n        verticalAlign=\"center\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        flexDirection=\"column\"\r\n      >\r\n        <Text fontSize=\"4xl\">Maintenance</Text>\r\n        <Text fontSize=\"xl\">\r\n          Sonic App is under maintenance. We'll be back shortly.\r\n        </Text>\r\n        <Text color=\"dark-blue.500\">\r\n          <Link href={ExternalLink.twitter} target={ExternalLink.twitter}>\r\n            Checkout out more information\r\n          </Link>\r\n        </Text>\r\n      </Flex>\r\n\r\n      <Flex\r\n        m=\"5vh\"\r\n        flexDirection=\"row\"\r\n        justifyContent=\"space-around\"\r\n        alignItems=\"center\"\r\n        width={200}\r\n        color={color}\r\n      >\r\n        <Link href={ExternalLink.discord} target={ExternalLink.discord}>\r\n          <FaDiscord size={40} />\r\n        </Link>\r\n        <Link href={ExternalLink.twitter} target={ExternalLink.twitter}>\r\n          <FaTwitter size={40} />\r\n        </Link>\r\n        <Link href={ExternalLink.sonicDocs} target={ExternalLink.sonicDocs}>\r\n          <FaBook size={40} />\r\n        </Link>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Button } from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { TransactionFailedModal } from './components';\r\n\r\nexport const AddLiquidityFailModal = () => {\r\n  const {\r\n    isAddLiquidityFailModalOpened: isAddLiquidityFailOpened,\r\n    addLiquidityModalData: addLiquidityData,\r\n  } = useModalsStore();\r\n  const { callbacks: [addLiquidityCallback, closeCallback] = [] } =\r\n    addLiquidityData;\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeAddLiquidityFailModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionFailedModal\r\n      onClose={handleClose}\r\n      isOpen={isAddLiquidityFailOpened}\r\n      isCentered\r\n      title=\"Add Liquidity Failed\"\r\n    >\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={addLiquidityCallback}\r\n        isFullWidth\r\n      >\r\n        Retry\r\n      </Button>\r\n      <Button\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={handleClose}\r\n        isFullWidth\r\n      >\r\n        Close\r\n      </Button>\r\n    </TransactionFailedModal>\r\n  );\r\n};\r\n","import { checkPlainSrc, depositSrc, dropSrc, plusSrc } from '@/assets';\r\nimport {\r\n  AddLiquidityModalData,\r\n  AddLiquidityModalDataStep,\r\n  modalsSliceActions,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const AddLiquidityProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isAddLiquidityProgressModalOpened, addLiquidityModalData } =\r\n    useModalsStore();\r\n  const {\r\n    steps,\r\n    token1Symbol,\r\n    token0Symbol,\r\n    step: activeStep,\r\n  } = addLiquidityModalData;\r\n\r\n  const getStepStatus = useStepStatus<AddLiquidityModalData['step']>({\r\n    activeStep,\r\n    steps,\r\n  });\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeAddLiquidityProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal\r\n      onClose={handleClose}\r\n      isOpen={isAddLiquidityProgressModalOpened}\r\n      isCentered\r\n      title=\"Add LP in progress\"\r\n    >\r\n\r\n      {steps?.includes(AddLiquidityModalDataStep.Getacnt) && (\r\n        <TransactionStep status={getStepStatus(AddLiquidityModalDataStep.Getacnt)}\r\n          iconSrc={checkPlainSrc} chevron>\r\n          Getting Sonic <br /> Account\r\n\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(AddLiquidityModalDataStep.CreatePair) && (\r\n        <TransactionStep\r\n          status={getStepStatus(AddLiquidityModalDataStep.CreatePair)}\r\n          iconSrc={plusSrc}\r\n          chevron\r\n        >\r\n          Creating pair <br /> {token0Symbol} - {token1Symbol}\r\n        </TransactionStep>\r\n      )}\r\n\r\n      {steps?.includes(AddLiquidityModalDataStep.Approve0) && (\r\n        <TransactionStep\r\n          status={getStepStatus(AddLiquidityModalDataStep.Approve0)}\r\n          iconSrc={checkPlainSrc}\r\n          chevron\r\n        >\r\n          Approving <br /> {token0Symbol}\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(AddLiquidityModalDataStep.Deposit0) && (\r\n        <TransactionStep\r\n          status={getStepStatus(AddLiquidityModalDataStep.Deposit0)}\r\n          iconSrc={depositSrc}\r\n          chevron\r\n        >\r\n          Depositing <br /> {token0Symbol}\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(AddLiquidityModalDataStep.Approve1) && (\r\n        <TransactionStep\r\n          status={getStepStatus(AddLiquidityModalDataStep.Approve1)}\r\n          iconSrc={checkPlainSrc}\r\n          chevron\r\n        >\r\n          Approving <br /> {token1Symbol}\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(AddLiquidityModalDataStep.Deposit1) && (\r\n        <TransactionStep\r\n          status={getStepStatus(AddLiquidityModalDataStep.Deposit1)}\r\n          iconSrc={depositSrc}\r\n          chevron\r\n        >\r\n          Depositing <br /> {token1Symbol}\r\n        </TransactionStep>\r\n      )}\r\n\r\n      <TransactionStep\r\n        status={getStepStatus(AddLiquidityModalDataStep.AddLiquidity)}\r\n        iconSrc={dropSrc}\r\n      >\r\n        Adding LP of <br /> {token0Symbol} + {token1Symbol}\r\n      </TransactionStep>\r\n\r\n\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","import { Box } from '@chakra-ui/react';\r\nimport { useMemo } from 'react';\r\n\r\nimport { checkPlainSrc } from '@/assets';\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { StepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const AllowanceVerifyModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const {\r\n    isAllowanceVerifyModalOpened,\r\n    allowanceModalData: { tokenSymbol },\r\n  } = useModalsStore();\r\n\r\n  const _tokenSymbol = useMemo(() => {\r\n    if (!tokenSymbol) {\r\n      return ['token'];\r\n    } else if (typeof tokenSymbol === 'string') {\r\n      return [tokenSymbol];\r\n    } else {\r\n      return tokenSymbol;\r\n    }\r\n  }, [tokenSymbol]);\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeAllowanceVerifyModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal\r\n      onClose={handleClose}\r\n      isOpen={isAllowanceVerifyModalOpened}\r\n      isCentered\r\n      title=\"Verifying Allowance\"\r\n    >\r\n      {_tokenSymbol.map((symbol) => (\r\n        <TransactionStep\r\n          status={StepStatus.Active}\r\n          iconSrc={checkPlainSrc}\r\n          key={symbol}\r\n        >\r\n          <Box mx={6}>\r\n            Verifying {symbol} <br /> allowance\r\n          </Box>\r\n        </TransactionStep>\r\n      ))}\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","import {\n    Flex, Heading, Modal, ModalCloseButton, ModalContent, ModalOverlay, Text, useColorModeValue\n} from '@chakra-ui/react';\nimport React, { useState, useEffect } from 'react';\nimport packageJSON from '@/../package.json';\n\n\n\nvar appVer = localStorage.getItem('appver');\ntype AppUpdatedModalProps = {\n    isNotiOpen: boolean;\n};\n\nexport const AppUpdatedModal: React.FC<AppUpdatedModalProps> = ({ isNotiOpen }) => {\n\n    const [isModelOpen, setisModelOpen] = useState(true);\n\n    useEffect(() => {\n        if (packageJSON.version == appVer) {\n            setisModelOpen(false);\n        }\n    }, [appVer])\n\n    function handleClose() {\n        localStorage.setItem('appver', packageJSON.version);\n        setisModelOpen(false);\n    }\n\n    const bg = useColorModeValue('gray.50', 'custom.2');\n    const color = useColorModeValue('gray.600', 'custom.1');\n    const titleColor = useColorModeValue('gray.800', 'gray.50');\n    return isModelOpen ? (\n        <Modal isOpen={isModelOpen} isCentered onClose={handleClose}>\n            <ModalOverlay />\n            <ModalContent as={Flex} maxW=\"md\" direction=\"column\" alignItems=\"center\" bg={bg}\n                pt=\"37px\" px=\"37px\" pb=\"43px\" borderRadius={20}\n            >\n                <ModalCloseButton />\n                <Heading as=\"h2\" color={titleColor} fontWeight={700} fontSize=\"1.2rem\" mb={3}>\n                    UPDATE NOTIFICATION!\n                </Heading>\n                <Text as=\"p\" color={color} mb={2}>\n                We're excited to announce the launch of new features on SONIC, designed to improve your trading experience. \n                </Text>\n                <Text as=\"p\" color={color} mb={2}>\n                With the introduction of ICRC support, you can now trade and add liquidity pools for ckBTC, SNS1, and CHAT tokens. We've also implemented ICP, allowing you to trade and create LP for your favorite tokens using ICP without affecting current WICP pairs.\n   \n                </Text>\n                <Text as=\"p\" color={color} mb={2}>\n                Additionally, we've streamlined the ICP Wrapping process under the mint option for greater ease of use. \n                </Text>\n                <Text as=\"p\" color={color} mb={2}>\n                By default, tokens will be kept in your sonic wallet to facilitate high-frequency trading, where even a few extra seconds matter a lot. However, during the swap,\n                 you can uncheck this feature if you want to withdraw directly to your web wallet.\n                 <a style={{color:\"#008eff\" , fontWeight:\"bold\" }} href='https://docs.sonic.ooo/product/assets#keeping-assets-in-sonic-after-a-swap' target=\"_blank\">Learn more</a>\n                </Text>\n                <Text as=\"p\" color={color} mb={2}>\n                    We're confident that these updates will enhance your trading efficiency on Sonic DEX. Thank you for choosing Sonic DEX!\n                </Text>\n            </ModalContent>\n        </Modal>\n    ) : <></>;\n};\n","import { Flex, Image } from '@chakra-ui/react';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\n\r\ntype ImportTokenImageProps = {\r\n  logo?: string;\r\n};\r\n\r\nexport const ImportTokenImage = ({\r\n  logo = questionMarkSrc,\r\n}: ImportTokenImageProps) => {\r\n  if (logo === questionMarkSrc) {\r\n    return (\r\n      <Flex\r\n        borderRadius={26}\r\n        bg=\"gray.500\"\r\n        w={10}\r\n        h={10}\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Image alt=\"logo\" w={6} h={6} src={logo} />\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  return <Image alt=\"logo\" borderRadius={26} w={10} h={10} src={logo} />;\r\n};\r\n","import {\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  Flex,\r\n  Heading,\r\n  Image,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { useState } from 'react';\r\n\r\nimport { redTriangleWarningSrc } from '@/assets';\r\n\r\nimport { ImportTokenImage } from './import-token-image';\r\n\r\ntype ImportTokenProps = {\r\n  logo?: string;\r\n  id: string;\r\n  symbol: string;\r\n  name: string;\r\n  handleImport: (arg0?: any) => any;\r\n};\r\n\r\nexport const ImportToken = ({\r\n  logo,\r\n  id,\r\n  symbol,\r\n  name,\r\n  handleImport,\r\n}: ImportTokenProps) => {\r\n  const [understandRisk, setUnderstandRisk] = useState(false);\r\n\r\n  const bg = useColorModeValue('gray.100', 'custom.3');\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n\r\n  return (\r\n    <Flex direction=\"column\" width=\"100%\" alignItems=\"center\">\r\n      <Heading as=\"h1\" fontWeight={700} fontSize=\"1.125rem\" mb={6}>\r\n        Import Token\r\n      </Heading>\r\n      <ImportTokenImage logo={logo} />\r\n      <Text mt={2} fontSize=\"1.125rem\" fontWeight={700} color=\"gray.50\">\r\n        {symbol}\r\n      </Text>\r\n      <Text color={color}>{name}</Text>\r\n      <Flex\r\n        mt={5}\r\n        mb={6}\r\n        py={3}\r\n        w=\"100%\"\r\n        bg={bg}\r\n        borderRadius={20}\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        direction=\"row\"\r\n      >\r\n        <Text color=\"gray.50\">{id}</Text>\r\n      </Flex>\r\n      <Box\r\n        position=\"relative\"\r\n        bg=\"rgba(229, 130, 121, 0.1)\"\r\n        borderRadius={20}\r\n        mb={6}\r\n        pt={4}\r\n        px={5}\r\n        pb={5}\r\n      >\r\n        <Image\r\n          alt=\"warning\"\r\n          src={redTriangleWarningSrc}\r\n          w={6}\r\n          position=\"absolute\"\r\n          top={4}\r\n          right={5}\r\n        />\r\n        <Text fontSize=\"1.125rem\" color=\"#E58279\" fontWeight={700} mb={2}>\r\n          Trade at your own risk!\r\n        </Text>\r\n        <Text color=\"gray.50\">\r\n          Swapping from ICP to WICP is not reccomended at this moment due to the\r\n          IC restriction. Swapping from WICP to ICP is only allowed on Sonic P2P\r\n          market.\r\n        </Text>\r\n      </Box>\r\n      <Checkbox\r\n        isChecked={understandRisk}\r\n        alignSelf=\"flex-start\"\r\n        onChange={(e) => setUnderstandRisk(e.target.checked)}\r\n        size=\"lg\"\r\n        color=\"gray.50\"\r\n        fontWeight={600}\r\n        mb={6}\r\n      >\r\n        I understand the risk of trading this token\r\n      </Checkbox>\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        w=\"100%\"\r\n        borderRadius={12}\r\n        fontSize=\"1.125rem\"\r\n        fontWeight={700}\r\n        onClick={handleImport}\r\n        disabled={!understandRisk}\r\n      >\r\n        Import Token\r\n      </Button>\r\n    </Flex>\r\n  );\r\n};\r\n","export * from './import-token-image';\r\nexport * from './import-token';\r\n","export * from './import-token';\r\nexport * from './transaction';\r\n","export * from './transaction-failed-modal-content';\r\nexport * from './transaction-progress-modal-content';\r\nexport * from './transaction-step';\r\nexport * from './transaction.utils';\r\n","import {\r\n  Heading,\r\n  HStack,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  ModalProps,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\ntype TransactionFailedModalProps = ModalProps & {\r\n  title: string;\r\n};\r\n\r\nexport const TransactionFailedModal: React.FC<TransactionFailedModalProps> = ({\r\n  title,\r\n  children,\r\n  ...modalProps\r\n}) => {\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const color = useColorModeValue('gray.600', 'gray.400');\r\n\r\n  return (\r\n    <Modal {...modalProps}>\r\n      <ModalOverlay />\r\n      <ModalContent textAlign=\"center\" borderRadius={20} bg={bg}>\r\n        <ModalHeader>\r\n          <Heading as=\"h2\" fontWeight={700} fontSize=\"1.375rem\">\r\n            {title}\r\n          </Heading>\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Text color={color}>Please choose an option below</Text>\r\n        </ModalBody>\r\n        <ModalFooter as={HStack}>{children}</ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n","import {\r\n  Flex,\r\n  Heading,\r\n  Modal,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalOverlay,\r\n  ModalProps,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nexport type TransactionProgressModalProps = ModalProps & {\r\n  title: string;\r\n};\r\n\r\nexport const TransactionProgressModal: React.FC<\r\n  TransactionProgressModalProps\r\n> = ({ children, title, ...props }) => {\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n\r\n  const titleColor = useColorModeValue('gray.800', 'gray.50');\r\n\r\n  return (\r\n    <Modal {...props}>\r\n      <ModalOverlay />\r\n      <ModalContent\r\n        as={Flex}\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        bg={bg}\r\n        pt=\"37px\"\r\n        px=\"37px\"\r\n        pb=\"43px\"\r\n        borderRadius={20}\r\n        minWidth={['unset', 'fit-content', 'fit-content']}\r\n      >\r\n        <ModalCloseButton />\r\n        <Heading\r\n          as=\"h1\"\r\n          color={titleColor}\r\n          fontWeight={700}\r\n          fontSize=\"1.375rem\"\r\n          mb={3}\r\n        >\r\n          {title}\r\n        </Heading>\r\n        <Text as=\"p\" color={color} mb=\"2.06rem\">\r\n          Please wait some time for transactions to finish\r\n        </Text>\r\n        <Flex\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"flex-start\"\r\n          flexWrap=\"wrap\"\r\n          rowGap={4}\r\n        >\r\n          {children}\r\n        </Flex>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n","import { Box, Flex, Icon, useColorModeValue } from '@chakra-ui/react';\r\nimport { FaChevronRight } from '@react-icons/all-files/fa/FaChevronRight';\r\nimport { useMemo } from 'react';\r\n\r\nimport { CircleIcon } from '@/components';\r\n\r\nimport { StepStatus } from '../..';\r\n\r\ntype TransactionStepProps = {\r\n  children: React.ReactNode;\r\n  status: StepStatus;\r\n  iconSrc: string;\r\n  chevron?: boolean;\r\n};\r\n\r\nexport const TransactionStep = ({\r\n  children,\r\n  iconSrc,\r\n  status,\r\n  chevron = false,\r\n}: TransactionStepProps) => {\r\n  const colorDisabled = useColorModeValue('gray.600', 'custom.1');\r\n  const colorEnabled = useColorModeValue('gray.800', 'white');\r\n\r\n  const { color, weight, opacity } = useMemo(() => {\r\n    if (status === StepStatus.Disabled) {\r\n      return {\r\n        color: colorDisabled,\r\n        weight: 400,\r\n        opacity: 0.4,\r\n      };\r\n    }\r\n\r\n    return {\r\n      color: colorEnabled,\r\n      weight: 600,\r\n      opacity: 1,\r\n    };\r\n  }, [colorDisabled, colorEnabled, status]);\r\n\r\n  return (\r\n    <>\r\n      <Flex\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Flex direction=\"column\" alignItems=\"center\">\r\n          <CircleIcon iconSrc={iconSrc} status={status} />\r\n          <Flex\r\n            mt={2}\r\n            as=\"h3\"\r\n            fontWeight={weight}\r\n            fontSize=\"0.875rem\"\r\n            color={color}\r\n            textAlign=\"center\"\r\n            transition=\"color 400ms\"\r\n            flex={1}\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            {children}\r\n          </Flex>\r\n        </Flex>\r\n      </Flex>\r\n      {chevron && (\r\n        <Box>\r\n          <Icon\r\n            as={FaChevronRight}\r\n            my={4}\r\n            mx={2}\r\n            opacity={opacity}\r\n            transition=\"opacity 400ms\"\r\n          />\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","export enum TransactionType {}\r\n","import { Button } from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { TransactionFailedModal } from './components';\r\n\r\nexport const DepositFailModal = () => {\r\n  const { isDepositFailModalOpened, depositModalData } = useModalsStore();\r\n  const { callbacks: [retryCallback, closeCallback] = [] } = depositModalData;\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeDepositFailModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionFailedModal\r\n      onClose={handleClose}\r\n      isOpen={isDepositFailModalOpened}\r\n      isCentered\r\n      title=\"Deposit Failed\"\r\n    >\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={retryCallback}\r\n        isFullWidth\r\n      >\r\n        Retry\r\n      </Button>\r\n      <Button\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={handleClose}\r\n        isFullWidth\r\n      >\r\n        Later\r\n      </Button>\r\n    </TransactionFailedModal>\r\n  );\r\n};\r\n","import { checkPlainSrc, depositSrc } from '@/assets';\r\nimport {\r\n  DepositModalData, DepositModalDataStep, modalsSliceActions,\r\n  useAppDispatch, useModalsStore\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const DepositProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isDepositProgressModalOpened, depositModalData } = useModalsStore();\r\n  const { steps, tokenSymbol, step: activeStep } = depositModalData;\r\n\r\n  const getStepStatus = useStepStatus<DepositModalData['step']>({ activeStep, steps });\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeDepositProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal onClose={handleClose}\r\n      isOpen={isDepositProgressModalOpened} isCentered title=\"Deposit in progress\">\r\n      {steps?.includes(DepositModalDataStep.Getacnt) && (\r\n        <TransactionStep status={getStepStatus(DepositModalDataStep.Getacnt)}\r\n          iconSrc={checkPlainSrc} chevron>\r\n          Getting Sonic {tokenSymbol}  <br /> Account\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(DepositModalDataStep.Approve) && (\r\n        <TransactionStep status={getStepStatus(DepositModalDataStep.Approve)}\r\n          iconSrc={checkPlainSrc} chevron>\r\n          Approving <br /> {tokenSymbol}\r\n        </TransactionStep>\r\n      )}\r\n      <TransactionStep status={getStepStatus(DepositModalDataStep.Deposit)} iconSrc={depositSrc}>\r\n        Depositing <br /> {tokenSymbol}\r\n      </TransactionStep>\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","export * from './add-liquidity-fail-modal';\r\nexport * from './add-liquidity-progress-modal';\r\nexport * from './allowance-verify-modal';\r\nexport * from './components';\r\nexport * from './deposit-fail-modal';\r\nexport * from './deposit-progress-modal';\r\nexport * from './mint-manual-modal';\r\nexport * from './mint-wicp-fail-modal';\r\nexport * from './mint-wicp-progress-modal';\r\nexport * from './mint-xtc-fail-modal';\r\nexport * from './mint-xtc-progress-modal';\r\nexport * from './remove-liquidity-fail-modal';\r\nexport * from './remove-liquidity-progress-modal';\r\nexport * from './swap-fail-modal';\r\nexport * from './swap-progress-modal';\r\nexport * from './terms-and-conditions-modal';\r\nexport * from './token-select-modal';\r\nexport * from './use-step-status';\r\nexport * from './withdraw-progress-modal';\r\nexport * from './withdraw-wicp-fail-modal';\r\nexport * from './withdraw-wicp-progress-modal';\r\nexport * from './app-Updated';","import {\r\n  Button,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  FormHelperText,\r\n  FormLabel,\r\n  HStack,\r\n  Input,\r\n  Link as ChakraLink,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  Select,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n  useConst,\r\n} from '@chakra-ui/react';\r\nimport { FaRedoAlt } from '@react-icons/all-files/fa/FaRedoAlt';\r\nimport {\r\n  ChangeEvent,\r\n  FormEvent,\r\n  KeyboardEvent,\r\n  useCallback,\r\n  useMemo,\r\n  useState,\r\n} from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { checkIfPlugProviderVersionCompatible } from '@/integrations/plug';\r\nimport {\r\n  MintTokenSymbol,\r\n  modalsSliceActions,\r\n  NotificationType,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n  useNotificationStore,\r\n} from '@/store';\r\nimport { ExternalLink } from '@/utils';\r\n\r\nimport { PLUG_WALLET_WEBSITE_URL } from '..';\r\n\r\nexport const MintManualModal = () => {\r\n  const TOKEN_OPTIONS = useConst([\r\n    {\r\n      label: MintTokenSymbol.WICP,\r\n      value: MintTokenSymbol.WICP,\r\n    },\r\n    {\r\n      label: MintTokenSymbol.XTC,\r\n      value: MintTokenSymbol.XTC,\r\n    },\r\n  ]);\r\n  const color = useColorModeValue('gray.600', 'gray.400');\r\n\r\n  const {\r\n    mintManualModalOpened,\r\n    mintManualBlockHeight,\r\n    mintManualTokenSymbol,\r\n    mintManualModalErrorMessage,\r\n  } = useModalsStore();\r\n  const { addNotification } = useNotificationStore();\r\n\r\n  const [blockHeightErrorMessage, setBlockHeightErrorMessage] = useState<\r\n    string | undefined\r\n  >(undefined);\r\n  const [tokenErrorMessage, setTokenErrorMessage] = useState<\r\n    string | undefined\r\n  >(undefined);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleMint = useCallback(\r\n    (tokenSymbol: MintTokenSymbol) => {\r\n      const isVersionCompatible = checkIfPlugProviderVersionCompatible();\r\n\r\n      if (!isVersionCompatible) {\r\n        addNotification({\r\n          title: (\r\n            <>\r\n              You're using an outdated version of Plug, please update to the\r\n              latest one&nbsp;\r\n              <ChakraLink\r\n                color=\"blue.400\"\r\n                href={PLUG_WALLET_WEBSITE_URL}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                here\r\n              </ChakraLink>\r\n              .\r\n            </>\r\n          ),\r\n          type: NotificationType.Error,\r\n          id: String(new Date().getTime()),\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      addNotification({\r\n        title: `Minting ${tokenSymbol}`,\r\n        type: NotificationType.MintManual,\r\n        id: String(new Date().getTime()),\r\n      });\r\n    },\r\n    [addNotification]\r\n  );\r\n\r\n  const resetModalData = () => {\r\n    dispatch(modalsSliceActions.setMintManualModalErrorMessage(''));\r\n    setBlockHeightErrorMessage(undefined);\r\n    setTokenErrorMessage(undefined);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    resetModalData();\r\n    dispatch(modalsSliceActions.closeMintManualModal());\r\n  };\r\n\r\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n    resetModalData();\r\n    e.preventDefault();\r\n\r\n    if (!mintManualBlockHeight || !mintManualTokenSymbol) {\r\n      if (!mintManualBlockHeight) {\r\n        setBlockHeightErrorMessage('Block Height is required');\r\n      }\r\n      if (!mintManualTokenSymbol) {\r\n        setTokenErrorMessage('Token is required');\r\n      }\r\n      return;\r\n    }\r\n\r\n    handleMint(mintManualTokenSymbol);\r\n\r\n    handleClose();\r\n  };\r\n\r\n  const linkColor = useColorModeValue('dark-blue.500', 'dark-blue.400');\r\n\r\n  const { activityTabURL, learnMoreURL } = useMemo(() => {\r\n    return {\r\n      activityTabURL: '/activity',\r\n      learnMoreURL: ExternalLink.failedMintDocs,\r\n    };\r\n  }, []);\r\n\r\n  const handleBlockHeightChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    dispatch(modalsSliceActions.setMintManualBlockHeight(e.target.value));\r\n  };\r\n\r\n  const handleTokenSymbolSelect = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    dispatch(\r\n      modalsSliceActions.setMintManualTokenSymbol(\r\n        e.target.value as MintTokenSymbol\r\n      )\r\n    );\r\n  };\r\n\r\n  const blockInvalidBlockHeightChar = (e: KeyboardEvent<HTMLInputElement>) =>\r\n    ['e', 'E', '+', '-'].includes(e.key) && e.preventDefault();\r\n\r\n  return (\r\n    <Modal isOpen={mintManualModalOpened} onClose={handleClose} isCentered>\r\n      <ModalOverlay />\r\n      <ModalContent as=\"form\" onSubmit={handleSubmit} noValidate>\r\n        <ModalCloseButton />\r\n        <ModalHeader borderBottom=\"none\">\r\n          Retry minting{' '}\r\n          <Text textAlign=\"center\" fontSize=\"sm\" color={color}>\r\n            Use this form to retry any of your failed mints.\r\n          </Text>\r\n        </ModalHeader>\r\n        <ModalBody as={Stack} spacing={4}>\r\n          <FormControl isRequired isInvalid={Boolean(tokenErrorMessage)}>\r\n            <FormLabel>Token</FormLabel>\r\n            <Select\r\n              name=\"token\"\r\n              value={mintManualTokenSymbol}\r\n              onChange={handleTokenSymbolSelect}\r\n            >\r\n              {TOKEN_OPTIONS.map((option) => (\r\n                <option key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n            <FormErrorMessage>{tokenErrorMessage}</FormErrorMessage>\r\n          </FormControl>\r\n\r\n          <FormControl isRequired isInvalid={Boolean(blockHeightErrorMessage)}>\r\n            <FormLabel>Transaction Block Height</FormLabel>\r\n\r\n            <Input\r\n              name=\"blockHeight\"\r\n              value={mintManualBlockHeight}\r\n              onKeyDown={blockInvalidBlockHeightChar}\r\n              onChange={handleBlockHeightChange}\r\n              placeholder=\"2021024\"\r\n              type=\"number\"\r\n            />\r\n\r\n            <FormErrorMessage>{blockHeightErrorMessage}</FormErrorMessage>\r\n            <FormHelperText>\r\n              Visit your&nbsp;\r\n              <ChakraLink\r\n                as={Link}\r\n                color={linkColor}\r\n                to={activityTabURL}\r\n                onClick={handleClose}\r\n              >\r\n                activity tab\r\n              </ChakraLink>\r\n              &nbsp;to find your failed transactions blockheight. Learn more\r\n              about failed mints&nbsp;\r\n              <ChakraLink\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                color={linkColor}\r\n                href={learnMoreURL}\r\n              >\r\n                here\r\n              </ChakraLink>\r\n              .\r\n            </FormHelperText>\r\n          </FormControl>\r\n          {mintManualModalErrorMessage && (\r\n            <Text textAlign=\"center\" fontSize=\"sm\" color=\"red.500\">\r\n              {mintManualModalErrorMessage}\r\n            </Text>\r\n          )}\r\n        </ModalBody>\r\n        <ModalFooter as={HStack}>\r\n          <Button\r\n            leftIcon={<FaRedoAlt />}\r\n            isFullWidth\r\n            type=\"submit\"\r\n            variant=\"gradient\"\r\n            colorScheme=\"dark-blue\"\r\n          >\r\n            Retry\r\n          </Button>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n","import { Button } from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { TransactionFailedModal } from './components';\r\n\r\nexport const MintWICPFailModal = () => {\r\n  const { isMintWICPFailModalOpened, mintWICPModalData } = useModalsStore();\r\n  const { callbacks: [retryCallback, closeCallback] = [] } = mintWICPModalData;\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeMintWICPFailModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionFailedModal\r\n      onClose={handleClose}\r\n      isOpen={isMintWICPFailModalOpened}\r\n      isCentered\r\n      title=\"ICP Wrapping Failed\"\r\n    >\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={retryCallback}\r\n        isFullWidth\r\n      >\r\n        Retry\r\n      </Button>\r\n      <Button\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={handleClose}\r\n        isFullWidth\r\n      >\r\n        Later\r\n      </Button>\r\n    </TransactionFailedModal>\r\n  );\r\n};\r\n","import { checkPlainSrc, depositSrc, swapSrc, withdrawSrc } from '@/assets';\r\nimport {\r\n  MintModalData,\r\n  MintModalDataStep,\r\n  modalsSliceActions,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const MintWICPProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isMintWICPProgressModalOpened, mintWICPModalData } = useModalsStore();\r\n  const { steps, step: activeStep } = mintWICPModalData;\r\n  const getStepStatus = useStepStatus<MintModalData['step']>({\r\n    activeStep,\r\n    steps,\r\n  });\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeMintWICPProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal\r\n      onClose={handleClose}\r\n      isOpen={isMintWICPProgressModalOpened}\r\n      isCentered\r\n      title=\"ICP wrapping in progress\"\r\n    >\r\n      {steps?.includes(MintModalDataStep.LedgerTransfer) && (\r\n        <TransactionStep\r\n          status={getStepStatus(MintModalDataStep.LedgerTransfer)}\r\n          iconSrc={withdrawSrc}\r\n          chevron\r\n        >\r\n          Ledger Transfer <br />\r\n          ICP\r\n        </TransactionStep>\r\n      )}\r\n      <TransactionStep\r\n        status={getStepStatus(MintModalDataStep.Mint)}\r\n        iconSrc={swapSrc}\r\n        chevron={\r\n          steps?.includes(MintModalDataStep.Approve) ||\r\n          steps?.includes(MintModalDataStep.Deposit)\r\n        }\r\n      >\r\n        Minting <br /> WICP\r\n      </TransactionStep>\r\n      {steps?.includes(MintModalDataStep.Approve) && (\r\n        <TransactionStep\r\n          status={getStepStatus(MintModalDataStep.Approve)}\r\n          iconSrc={checkPlainSrc}\r\n          chevron\r\n        >\r\n          Approving <br /> WICP\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(MintModalDataStep.Deposit) && (\r\n        <TransactionStep\r\n          status={getStepStatus(MintModalDataStep.Deposit)}\r\n          iconSrc={depositSrc}\r\n        >\r\n          Depositing <br /> WICP\r\n        </TransactionStep>\r\n      )}\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","import { Button } from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { TransactionFailedModal } from './components';\r\n\r\nexport const MintXTCFailModal = () => {\r\n  const {\r\n    isMintXTCFailModalOpened: isRemoveLiquidityFailOpened,\r\n    mintXTCModalData,\r\n  } = useModalsStore();\r\n  const { callbacks: [retryCallback, closeCallback] = [] } = mintXTCModalData;\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeMintXTCFailModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionFailedModal\r\n      onClose={handleClose}\r\n      isOpen={isRemoveLiquidityFailOpened}\r\n      isCentered\r\n      title=\"Mint XTC Failed\"\r\n    >\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={retryCallback}\r\n        isFullWidth\r\n      >\r\n        Retry\r\n      </Button>\r\n      <Button\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={handleClose}\r\n        isFullWidth\r\n      >\r\n        Later\r\n      </Button>\r\n    </TransactionFailedModal>\r\n  );\r\n};\r\n","import { checkPlainSrc, depositSrc, swapSrc, withdrawSrc } from '@/assets';\r\nimport {\r\n  MintModalData,\r\n  MintModalDataStep,\r\n  modalsSliceActions,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const MintXTCProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isMintXTCProgressModalOpened, mintXTCModalData } = useModalsStore();\r\n  const { steps, step: activeStep } = mintXTCModalData;\r\n\r\n  const getStepStatus = useStepStatus<MintModalData['step']>({\r\n    activeStep,\r\n    steps,\r\n  });\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeMintXTCProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal\r\n      onClose={handleClose}\r\n      isOpen={isMintXTCProgressModalOpened}\r\n      isCentered\r\n      title=\"Mint XTC in progress\"\r\n    >\r\n      <TransactionStep\r\n        status={getStepStatus(MintModalDataStep.LedgerTransfer)}\r\n        iconSrc={withdrawSrc}\r\n        chevron\r\n      >\r\n        Ledger Transfer <br /> ICP\r\n      </TransactionStep>\r\n      <TransactionStep\r\n        status={getStepStatus(MintModalDataStep.Mint)}\r\n        iconSrc={swapSrc}\r\n        chevron={\r\n          steps?.includes(MintModalDataStep.Approve) ||\r\n          steps?.includes(MintModalDataStep.Deposit)\r\n        }\r\n      >\r\n        Minting <br /> XTC\r\n      </TransactionStep>\r\n      {steps?.includes(MintModalDataStep.Approve) && (\r\n        <TransactionStep\r\n          status={getStepStatus(MintModalDataStep.Approve)}\r\n          iconSrc={checkPlainSrc}\r\n          chevron\r\n        >\r\n          Approving <br /> XTC\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(MintModalDataStep.Deposit) && (\r\n        <TransactionStep\r\n          status={getStepStatus(MintModalDataStep.Deposit)}\r\n          iconSrc={depositSrc}\r\n        >\r\n          Depositing <br /> XTC\r\n        </TransactionStep>\r\n      )}\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","import { Button } from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { TransactionFailedModal } from './components';\r\n\r\nexport const RemoveLiquidityFailModal = () => {\r\n  const { isRemoveLiquidityFailModalOpened, removeLiquidityModalData } =\r\n    useModalsStore();\r\n  const { callbacks: [retryCallback, closeCallback] = [] } =\r\n    removeLiquidityModalData;\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeRemoveLiquidityFailModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionFailedModal\r\n      onClose={handleClose}\r\n      isOpen={isRemoveLiquidityFailModalOpened}\r\n      isCentered\r\n      title=\"Remove Liquidity Failed\"\r\n    >\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={retryCallback}\r\n        isFullWidth\r\n      >\r\n        Retry\r\n      </Button>\r\n      <Button\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={handleClose}\r\n        isFullWidth\r\n      >\r\n        Close\r\n      </Button>\r\n    </TransactionFailedModal>\r\n  );\r\n};\r\n","import { dropSrc, withdrawSrc } from '@/assets';\r\nimport {\r\n  modalsSliceActions,\r\n  RemoveLiquidityModalData,\r\n  RemoveLiquidityModalDataStep,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const RemoveLiquidityProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isRemoveLiquidityProgressModalOpened, removeLiquidityModalData } =\r\n    useModalsStore();\r\n  const {\r\n    steps,\r\n    token1Symbol,\r\n    token0Symbol,\r\n    step: activeStep,\r\n  } = removeLiquidityModalData;\r\n  const getStepStatus = useStepStatus<RemoveLiquidityModalData['step']>({\r\n    activeStep,\r\n    steps,\r\n  });\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeRemoveLiquidityProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal\r\n      onClose={handleClose}\r\n      isOpen={isRemoveLiquidityProgressModalOpened}\r\n      isCentered\r\n      title=\"Removing LP in progress\"\r\n    >\r\n      <TransactionStep\r\n        status={getStepStatus(RemoveLiquidityModalDataStep.RemoveLiquidity)}\r\n        iconSrc={dropSrc}\r\n        chevron={\r\n          steps?.includes(RemoveLiquidityModalDataStep.Withdraw0) ||\r\n          steps?.includes(RemoveLiquidityModalDataStep.Withdraw1)\r\n        }\r\n      >\r\n        Removing Liquidity Position of <br /> {token0Symbol} + {token1Symbol}\r\n      </TransactionStep>\r\n\r\n      {steps?.includes(RemoveLiquidityModalDataStep.Withdraw0) && (\r\n        <TransactionStep\r\n          status={getStepStatus(RemoveLiquidityModalDataStep.Withdraw0)}\r\n          iconSrc={withdrawSrc}\r\n          chevron={steps?.includes(RemoveLiquidityModalDataStep.Withdraw1)}\r\n        >\r\n          Withdrawing <br /> {token0Symbol}\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(RemoveLiquidityModalDataStep.Withdraw1) && (\r\n        <TransactionStep\r\n          status={getStepStatus(RemoveLiquidityModalDataStep.Withdraw1)}\r\n          iconSrc={withdrawSrc}\r\n        >\r\n          Withdrawing <br /> {token1Symbol}\r\n        </TransactionStep>\r\n      )}\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","import { Button } from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { TransactionFailedModal } from './components';\r\n\r\nexport const SwapFailModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isSwapFailModalOpened, swapModalData } = useModalsStore();\r\n  const { callbacks: [retryCallback, withdrawCallback, closeCallback] = [] } =\r\n    swapModalData;\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeSwapFailModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionFailedModal\r\n      onClose={handleClose}\r\n      isOpen={isSwapFailModalOpened}\r\n      isCentered\r\n      title=\"Swap Failed\"\r\n    >\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={retryCallback}\r\n        isFullWidth\r\n      >\r\n        Retry Swap\r\n      </Button>\r\n      <Button\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={withdrawCallback}\r\n        isFullWidth\r\n      >\r\n        Withdraw to Plug\r\n      </Button>\r\n    </TransactionFailedModal>\r\n  );\r\n};\r\n","import { checkPlainSrc, depositSrc, swapSrc, withdrawSrc } from '@/assets';\r\nimport {\r\n  modalsSliceActions, SwapModalData, SwapModalDataStep, useAppDispatch, useModalsStore,\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const SwapProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isSwapProgressModalOpened, swapModalData } = useModalsStore();\r\n  const { steps, fromTokenSymbol, toTokenSymbol, step: activeStep } = swapModalData;\r\n\r\n  const getStepStatus = useStepStatus<SwapModalData['step']>({ activeStep, steps });\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeSwapProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal onClose={handleClose} isOpen={isSwapProgressModalOpened} isCentered title=\"Swap in progress\">\r\n       {steps?.includes(SwapModalDataStep.Getacnt) && (\r\n        <TransactionStep status={getStepStatus(SwapModalDataStep.Getacnt)}\r\n          iconSrc={checkPlainSrc} chevron>\r\n          Getting Sonic<br />{fromTokenSymbol} Account\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(SwapModalDataStep.Approve) && (\r\n        <TransactionStep status={getStepStatus(SwapModalDataStep.Approve)} iconSrc={checkPlainSrc} chevron>\r\n          Approving <br /> {fromTokenSymbol}\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(SwapModalDataStep.Deposit) && (\r\n        <TransactionStep status={getStepStatus(SwapModalDataStep.Deposit)} iconSrc={depositSrc} chevron>\r\n          Depositing <br /> {fromTokenSymbol}\r\n        </TransactionStep>\r\n      )}\r\n      <TransactionStep status={getStepStatus(SwapModalDataStep.Swap)} iconSrc={swapSrc} chevron={steps?.includes(SwapModalDataStep.Withdraw)}>\r\n        Swapping <br /> {fromTokenSymbol} to {toTokenSymbol}\r\n      </TransactionStep>\r\n      {steps?.includes(SwapModalDataStep.Withdraw) && (\r\n        <TransactionStep status={getStepStatus(SwapModalDataStep.Withdraw)} iconSrc={withdrawSrc}>\r\n          Withdrawing <br /> {toTokenSymbol}\r\n        </TransactionStep>\r\n      )}\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  Link,\r\n  Modal,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\nimport { ExternalLink } from '@/utils';\r\n\r\nexport const TermsAndConditionsModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const {\r\n    isTermsAndConditionsModalOpened: isOpened,\r\n    termsAndConditionsModalData: {\r\n      callbacks: [successCallback, closeCallback] = [],\r\n    },\r\n  } = useModalsStore();\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeTermsAndConditionsModal());\r\n  };\r\n\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n\r\n  return (\r\n    <Modal onClose={handleClose} isOpen={isOpened} isCentered>\r\n      <ModalOverlay />\r\n\r\n      <ModalContent\r\n        alignItems=\"center\"\r\n        borderRadius={20}\r\n        minWidth=\"fit-content\"\r\n      >\r\n        <ModalCloseButton />\r\n        <ModalHeader borderBottom=\"none\">Terms and Conditions</ModalHeader>\r\n        <Text as=\"p\" color={color} maxW={370}>\r\n          Please read &nbsp;\r\n          <Link color=\"dark-blue.600\" href={ExternalLink.termsAndConditions}>\r\n            Sonic's terms & conditions\r\n          </Link>\r\n          &nbsp;carefully.\r\n          <br />\r\n          By clicking \"I agree\" you acknowledge that you have read and accepted\r\n          them.\r\n        </Text>\r\n        <ModalFooter width=\"full\">\r\n          <Button\r\n            onClick={successCallback}\r\n            width=\"full\"\r\n            colorScheme=\"dark-blue\"\r\n            variant=\"gradient\"\r\n          >\r\n            I agree\r\n          </Button>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n","import { \r\n  Box, Button,Flex,Heading,Icon,Image,Modal,ModalBody,ModalCloseButton,ModalContent,\r\n  ModalHeader,ModalOverlay,Skeleton,Stack,Text,Tooltip,useColorModeValue,\r\n} from '@chakra-ui/react';\r\n\r\nimport { deserialize } from '@memecake/sonic-js';\r\nimport { FaHdd } from '@react-icons/all-files/fa/FaHdd';\r\nimport { useEffect, useMemo, useState } from 'react';\r\n\r\nimport { arrowBackSrc, questionMarkSrc } from '@/assets';\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { AppTokenMetadata } from '@/models';\r\nimport { FeatureState, modalsSliceActions, useAppDispatch, useModalsStore} from '@/store';\r\n\r\n// import { ExternalLink } from '@/utils';\r\n\r\nimport { DisplayValue, SearchBar } from '..';\r\nimport { ImportToken } from './components';\r\n\r\nexport const TokenSelectModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const {\r\n    tokenSelectModalData: tokenSelectData,\r\n    isTokenSelectModalModalOpened: isTokenSelectOpened,\r\n  } = useModalsStore();\r\n\r\n  const { tokens, onSelect, selectedTokenIds, isLoading = false, allowAddToken} = tokenSelectData; // This controls if token can be imported\r\n\r\n  const [addToken, setAddToken] = useState(false);\r\n  const [importTokenData, setImportTokenData] = useState({ name: '',symbol: '',logo: '',id: ''});\r\n\r\n  const parsedTokens = useMemo(() => deserialize(tokens), [tokens]);\r\n  const [search, setSearch] = useState('');\r\n  const [filteredList, setFilteredList] =\r\n    useState<AppTokenMetadata[]>(parsedTokens);\r\n  const { totalBalances } = useBalances();\r\n\r\n  useEffect(() => {\r\n    const filterFunction = ({ symbol, name }: Partial<AppTokenMetadata>) => {\r\n      if (search?.length === 0) {\r\n        return true;\r\n      }\r\n      const lowerSearch = search.toLowerCase();\r\n      return (\r\n        symbol?.toLowerCase().includes(lowerSearch) ||\r\n        name?.toLowerCase().includes(lowerSearch)\r\n      );\r\n    };\r\n\r\n    const filteredItems = parsedTokens.filter(filterFunction);\r\n    setFilteredList(filteredItems);\r\n  }, [search, parsedTokens]);\r\n \r\n \r\n  const handleSelect = (tokenId?: string) => {  \r\n    onSelect(tokenId);handleTokenSelectClose();\r\n  };\r\n\r\n  const handleImportToken = (tokenData: any) => {\r\n    setAddToken(true);setImportTokenData(importTokenData);\r\n  };\r\n\r\n  const importToken = () => {\r\n    // TODO: Import token integration\r\n    handleTokenSelectClose();\r\n  };\r\n\r\n  const handleTokenSelectClose = () => {\r\n    setSearch('');\r\n    dispatch(modalsSliceActions.closeTokenSelectModal());\r\n  };\r\n\r\n  const bg = useColorModeValue('white', 'custom.2');\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n  const emptyColor = useColorModeValue('gray.600', 'gray.300');\r\n\r\n  return (\r\n    <Modal isOpen={isTokenSelectOpened} onClose={handleTokenSelectClose} scrollBehavior=\"inside\" isCentered size=\"md\">\r\n      <ModalOverlay />\r\n      <ModalContent bg={bg}>\r\n        <ModalCloseButton zIndex=\"docked\" />\r\n        <ModalHeader>\r\n          {addToken ? (\r\n            <Box onClick={() => setAddToken(false)} position=\"absolute\" p={2} top={3}\r\n              left={4} cursor=\"pointer\" transition=\"background 400ms\" _hover={{ background: 'custom.3'}}\r\n            >\r\n              <Image src={arrowBackSrc} alt=\"Back\" />\r\n            </Box>\r\n          ) : (\r\n            <Flex w=\"100%\" direction=\"column\" alignItems=\"center\" position=\"sticky\" bg={bg} top={0}>\r\n              <Heading as=\"h1\" fontWeight={700} fontSize=\"lg\">\r\n                Select Token\r\n              </Heading>\r\n              <Box fontSize=\"md\" px=\"0.625rem\" w=\"100%\" mt={4}>\r\n                <SearchBar search={search} setSearch={setSearch} />\r\n              </Box>\r\n            </Flex>\r\n          )}\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          {addToken ? (\r\n            <div>\r\n              <ImportToken id={importTokenData?.id} symbol={importTokenData?.symbol} name={importTokenData?.name} handleImport={importToken}/>\r\n            </div>\r\n          ) : (\r\n            <Stack width=\"100%\" direction=\"column\">\r\n              {isLoading &&\r\n                [...Array(4)].map(() => <TokenSelectItemSkeleton />)}\r\n              {!isLoading && filteredList.length > 0 ? (\r\n                filteredList.map(({ id, logo, symbol, decimals, name }) => (\r\n                  <TokenSelectItem key={id} balance={totalBalances && totalBalances[id]}\r\n                    symbol={symbol} decimals={decimals} name={name} onSelect={() => handleSelect(id)} isLoading={isLoading}\r\n                    isSelected={selectedTokenIds?.includes(id)} logoSrc={logo}\r\n                  />\r\n                ))\r\n              ) : (\r\n                <Stack color={emptyColor} alignItems=\"center\" pt={2}>\r\n                  <Icon as={FaHdd} />\r\n                  <Text textAlign=\"center\">\r\n                    Can't see your token? Request it to be added to Sonic using\r\n                    the button below.\r\n                  </Text>\r\n                </Stack>\r\n              )}\r\n\r\n              {allowAddToken && filteredList.length === 0 && (\r\n                <Flex direction=\"row\" alignItems=\"center\" py={3} px={3}\r\n                  cursor=\"pointer\" justifyContent=\"space-between\" width=\"100%\"\r\n                  transition=\"border 400ms\" border=\"1px solid transparent\" borderRadius=\"20px\"\r\n                >\r\n                  <Flex direction=\"row\" alignItems=\"center\">\r\n                    <Skeleton isLoaded={!isLoading} borderRadius={40}>\r\n                      <Image alt={importTokenData.symbol} src={importTokenData.logo}\r\n                        w={10} h={10} borderRadius={40}\r\n                      />\r\n                    </Skeleton>\r\n                    <Skeleton isLoaded={!isLoading} minWidth={4} ml={3}>\r\n                      <Text fontWeight={700} fontSize=\"1.125rem\" pl={3}>\r\n                        {importTokenData.symbol}\r\n                      </Text>\r\n                    </Skeleton>\r\n                    <Skeleton isLoaded={!isLoading} minWidth={17} ml={2}>\r\n                      <Text pl={2} color={color}>\r\n                        {importTokenData.name}\r\n                      </Text>\r\n                    </Skeleton>\r\n                  </Flex>\r\n                  <Skeleton isLoaded={!isLoading} minWidth={17} ml={2}>\r\n                    <Button width=\"fit-content\" variant=\"gradient\" colorScheme=\"dark-blue\"\r\n                      px={4} borderRadius={20} fontWeight={700} onClick={handleImportToken}\r\n                    >\r\n                      Import\r\n                    </Button>\r\n                  </Skeleton>\r\n                </Flex>\r\n              )}\r\n            </Stack>\r\n          )}\r\n        </ModalBody>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\ntype TokenSelectItemProps = Partial<{\r\n  balance: number; onSelect: any; name: string;\r\n  symbol: string; decimals: number;isSelected: boolean;\r\n  isLoading: boolean;logoSrc: string;\r\n}>;\r\n\r\nconst TokenSelectItem = ({\r\n  balance = 0, onSelect, name = '', symbol = '', decimals = 0,isSelected = false,\r\n  isLoading = false, logoSrc = questionMarkSrc,\r\n}: TokenSelectItemProps) => {\r\n  const { balancesState } = useBalances();\r\n\r\n  const isBalancesUpdating = useMemo(() => {\r\n    return balancesState === FeatureState.Updating;\r\n  }, [balancesState]);\r\n\r\n  const nameColor = useColorModeValue('gray.700', 'gray.300');\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" py={3} px={3} cursor=\"pointer\"\r\n      width=\"100%\" transition=\"border 400ms\" border=\"1px solid\" borderColor={isSelected ? 'gray.600' : 'transparent'}\r\n      borderRadius=\"20px\" onClick={onSelect} _hover={{ borderColor: 'custom.4'}}\r\n    >\r\n      <Stack direction=\"row\" alignItems=\"center\" spacing={4}>\r\n        <Skeleton isLoaded={!isLoading}>\r\n          <Image alt={symbol} src={logoSrc} w={8} h={8} borderRadius={40} />\r\n        </Skeleton>\r\n        <Box>\r\n          <Skeleton isLoaded={!isLoading} minWidth=\"fit-content\">\r\n            <Text fontWeight={700} maxWidth=\"100%\">\r\n              {symbol}\r\n            </Text>\r\n          </Skeleton>\r\n          <Skeleton isLoaded={!isLoading} flex={1} overflow=\"hidden\">\r\n            <Tooltip label={name} openDelay={1000}>\r\n              <Text fontSize=\"sm\" color={nameColor}>\r\n                {name}\r\n              </Text>\r\n            </Tooltip>\r\n          </Skeleton>\r\n        </Box>\r\n      </Stack>\r\n      <Skeleton isLoaded={!isLoading} minWidth=\"fit-content\" ml={3}>\r\n        <DisplayValue isUpdating={isBalancesUpdating} value={balance} decimals={decimals}\r\n          fontSize=\"1.125rem\" fontWeight={700} textAlign=\"right\" shouldDivideByDecimals\r\n        />\r\n      </Skeleton>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst TokenSelectItemSkeleton = () => (\r\n  <Flex direction=\"row\" alignItems=\"center\" py={3} px={2} cursor=\"pointer\" height={16}\r\n   justifyContent=\"space-between\" width=\"100%\" transition=\"border 400ms\" border=\"1px solid transparent\"\r\n    borderRadius={20}\r\n  >\r\n    <Flex direction=\"row\" alignItems=\"center\">\r\n      <Skeleton isLoaded={false} height={10} width={10} borderRadius={40} />\r\n      <Skeleton isLoaded={false} width={12} ml={3} height={7} />\r\n      <Skeleton isLoaded={false} width={18} height={6} ml={2} />\r\n    </Flex>\r\n    <Skeleton isLoaded={false} minWidth={18} height={6} ml={2} />\r\n  </Flex>\r\n);\r\n","import { useCallback } from 'react';\r\n\r\nexport enum StepStatus {\r\n  Active = 'active',\r\n  Disabled = 'disabled',\r\n  Done = 'done',\r\n}\r\n\r\ntype UseStepStatusMemoOptions<Step> = {\r\n  activeStep?: Step;\r\n  steps?: Step[];\r\n};\r\n\r\nexport const useStepStatus = <Step>({\r\n  activeStep,\r\n  steps,\r\n}: UseStepStatusMemoOptions<Step>) =>\r\n  useCallback(\r\n    (step: Step) => {\r\n      if (activeStep) {\r\n        const selectedStepIndex = steps?.indexOf(step);\r\n        const activeStepIndex = steps?.indexOf(activeStep);\r\n\r\n        if (activeStepIndex! > selectedStepIndex!) return StepStatus.Done;\r\n        if (activeStepIndex === selectedStepIndex) return StepStatus.Active;\r\n      }\r\n\r\n      return StepStatus.Disabled;\r\n    },\r\n    [activeStep, steps]\r\n  );\r\n","import { withdrawSrc } from '@/assets';\r\nimport {\r\n  modalsSliceActions,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n  WithdrawModalData,\r\n  WithdrawModalDataStep,\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const WithdrawProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isWithdrawProgressModalOpened, withdrawModalData } = useModalsStore();\r\n  const { tokenSymbol, steps, step: activeStep } = withdrawModalData;\r\n\r\n  const getStepStatus = useStepStatus<WithdrawModalData['step']>({\r\n    activeStep,\r\n    steps,\r\n  });\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeWithdrawProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal\r\n      title=\"Withdraw in progress\"\r\n      onClose={handleClose}\r\n      isOpen={isWithdrawProgressModalOpened}\r\n      isCentered\r\n    >\r\n      <TransactionStep\r\n        status={getStepStatus(WithdrawModalDataStep.Withdraw)}\r\n        iconSrc={withdrawSrc}\r\n      >\r\n        Withdrawing <br /> {tokenSymbol}\r\n      </TransactionStep>\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","import { Button } from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { TransactionFailedModal } from './components';\r\n\r\nexport const WithdrawWICPFailModal = () => {\r\n  const { isWithdrawWICPFailModalOpened, withdrawWICPModalData } =\r\n    useModalsStore();\r\n  const { callbacks: [retryCallback, closeCallback] = [] } =\r\n    withdrawWICPModalData;\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeWithdrawWICPFailModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionFailedModal\r\n      onClose={handleClose}\r\n      isOpen={isWithdrawWICPFailModalOpened}\r\n      isCentered\r\n      title=\"ICP Unwrapping Failed\"\r\n    >\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={retryCallback}\r\n        isFullWidth\r\n      >\r\n        Retry\r\n      </Button>\r\n      <Button\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={handleClose}\r\n        isFullWidth\r\n      >\r\n        Later\r\n      </Button>\r\n    </TransactionFailedModal>\r\n  );\r\n};\r\n","import { swapSrc, withdrawSrc } from '@/assets';\r\nimport {\r\n  modalsSliceActions,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n  WithdrawWICPModalData,\r\n  WithdrawWICPModalDataStep,\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const WithdrawWICPProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isWithdrawWICPProgressModalOpened, withdrawWICPModalData } =\r\n    useModalsStore();\r\n  const { steps, step: activeStep } = withdrawWICPModalData;\r\n\r\n  const getStepStatus = useStepStatus<WithdrawWICPModalData['step']>({\r\n    activeStep,\r\n    steps,\r\n  });\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeWithdrawWICPProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal\r\n      onClose={handleClose}\r\n      isOpen={isWithdrawWICPProgressModalOpened}\r\n      isCentered\r\n      title=\"WICP unwrapping in progress\"\r\n    >\r\n      {steps?.includes(WithdrawWICPModalDataStep.Withdraw) && (\r\n        <TransactionStep\r\n          status={getStepStatus(WithdrawWICPModalDataStep.Withdraw)}\r\n          iconSrc={withdrawSrc}\r\n          chevron\r\n        >\r\n          Withdrawing <br /> WICP\r\n        </TransactionStep>\r\n      )}\r\n      <TransactionStep\r\n        status={getStepStatus(WithdrawWICPModalDataStep.WithdrawWICP)}\r\n        iconSrc={swapSrc}\r\n      >\r\n        Unwrapping <br /> WICP\r\n      </TransactionStep>\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","export * from './plug-button';\r\nexport * from './plug-logo';\r\nexport * from './plug-menu';\r\nexport * from './plug-not-connected';\r\n","export const PLUG_WALLET_WEBSITE_URL = 'https://plugwallet.ooo/';\r\n","export * from './constants';\r\nexport * from './plug-button';\r\n","import { Button, ButtonProps } from '@chakra-ui/button';\r\nimport { useColorModeValue } from '@chakra-ui/color-mode';\r\nimport type { Provider } from '@memecake/plug-inpage-provider';\r\nimport { forwardRef, useMemo } from 'react';\r\n\r\nimport { plugActions, PlugState, useAppDispatch, usePlugStore } from '@/store';\r\n\r\nimport { PlugLogo } from '../plug-logo/plug-logo';\r\n\r\nexport type PlugButtonProps = Omit<ButtonProps, 'color' | 'variant'> & {\r\n  variant?: 'default' | 'dark';\r\n};\r\n\r\nexport const PlugButton = forwardRef<HTMLButtonElement, PlugButtonProps>(\r\n  ({ ...props }, ref) => {\r\n    const { variant = 'default' } = props;\r\n    const { state } = usePlugStore();\r\n    const dispatch = useAppDispatch();\r\n\r\n    const isPlugPAPIExists = Boolean(window.ic?.plug);\r\n\r\n    const isLoading = useMemo(() => {\r\n      return state === PlugState.Loading;\r\n    }, [state]);\r\n\r\n    const colorDark = useColorModeValue('gray.800', 'gray.500');\r\n    const bgDark = useColorModeValue('gray.50', 'custom.2');\r\n    const bgHoverDark = useColorModeValue('gray.50', 'gray.700');\r\n\r\n    const colorLight = useColorModeValue('gray.800', 'white');\r\n    const bgLight = useColorModeValue('gray.50', 'custom.2');\r\n    const bgHoverLight = useColorModeValue('gray.50', 'gray.800');\r\n\r\n    const shadow = useColorModeValue('base', 'none');\r\n\r\n    const { color, bg, bgHover, leftIcon, before, borderRadius } =\r\n      useMemo(() => {\r\n        if (variant === 'dark') {\r\n          return {\r\n            color: colorDark,\r\n            bg: bgDark,\r\n            bgHover: bgHoverDark,\r\n            borderRadius: 'xl',\r\n          };\r\n        }\r\n\r\n        return {\r\n          color: colorLight,\r\n          bg: bgLight,\r\n          bgHover: bgHoverLight,\r\n          leftIcon: <PlugLogo />,\r\n          before: {\r\n            content: \"''\",\r\n            position: 'absolute',\r\n            top: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            zIndex: 'hide',\r\n            margin: '-2px',\r\n            borderRadius: 'inherit',\r\n            background:\r\n              'linear-gradient(93.07deg,#ffd719 0.61%,#f754d4 33.98%,#1fd1ec 65.84%,#48fa6b 97.7%)',\r\n          },\r\n          borderRadius: 'full',\r\n        };\r\n      }, [\r\n        bgDark,\r\n        bgHoverDark,\r\n        bgHoverLight,\r\n        bgLight,\r\n        colorDark,\r\n        colorLight,\r\n        variant,\r\n      ]);\r\n\r\n    const handleClick = (): void => {\r\n      switch (state) {\r\n        case PlugState.Disconnected:{\r\n          dispatch(plugActions.connect());\r\n          break;\r\n        }\r\n        case PlugState.NotInstalled:\r\n          window.open('https://plugwallet.ooo/', '_plug');\r\n          break;\r\n        case PlugState.Connected:\r\n        case PlugState.Loading:\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Button\r\n        ref={ref}\r\n        size=\"lg\"\r\n        leftIcon={leftIcon}\r\n        onClick={handleClick}\r\n        isDisabled={isLoading}\r\n        borderRadius={borderRadius}\r\n        backgroundColor={bg}\r\n        shadow={shadow}\r\n        _hover={{\r\n          backgroundColor: bgHover,\r\n          _disabled: { backgroundColor: bg },\r\n        }}\r\n        _active={{ backgroundColor: bgHover }}\r\n        _disabled={{ backgroundColor: bg, cursor: 'not-allowed' }}\r\n        _before={before}\r\n        color={color}\r\n        {...props}\r\n      >\r\n        {isLoading\r\n          ? 'Loading...'\r\n          : isPlugPAPIExists\r\n          ? 'Connect'\r\n          : 'Install Plug'}\r\n      </Button>\r\n    );\r\n  }\r\n);\r\n\r\nPlugButton.displayName = 'PlugButton';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    ic?: {\r\n      plug?: Provider;\r\n    };\r\n  }\r\n}\r\n","export * from './plug-logo';\r\n","import {\r\n  forwardRef,\r\n  Icon,\r\n  IconProps,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\n\r\nexport const PlugLogo = forwardRef<IconProps, 'svg'>((props, ref) => {\r\n  const socketColor = useColorModeValue('black', 'white');\r\n  return (\r\n    <Icon\r\n      viewBox=\"0 0 18 27\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      ref={ref}\r\n      {...props}\r\n    >\r\n      <g clipPath=\"url(#clip0_88:618)\">\r\n        <path\r\n          d=\"M3.36523 0.413793C3.36523 0.185261 3.54425 0 3.76509 0H5.59107C5.81191 0 5.99093 0.185261 5.99093 0.413793V6.66207H3.36523V0.413793Z\"\r\n          fill={socketColor}\r\n        />\r\n        <path\r\n          d=\"M11.9492 0.413793C11.9492 0.185261 12.1282 0 12.3491 0H14.1751C14.3959 0 14.5749 0.185261 14.5749 0.413793V6.66207H11.9492V0.413793Z\"\r\n          fill={socketColor}\r\n        />\r\n        <path\r\n          d=\"M0 7.75323C0 7.1522 0.470772 6.66504 1.0515 6.66504H16.9423C17.523 6.66504 17.9938 7.1522 17.9938 7.75323V13.1736C17.9938 18.3157 13.9658 22.4842 8.99687 22.4842C4.02805 22.4842 0 18.3157 0 13.1736V7.75323Z\"\r\n          fill=\"url(#paint0_linear_88:618)\"\r\n        />\r\n        <path\r\n          d=\"M5.99316 21.6953H11.9998V22.4707C11.9998 23.5975 11.1172 24.511 10.0283 24.511H7.96473C6.87587 24.511 5.99316 23.5975 5.99316 22.4707V21.6953Z\"\r\n          fill=\"url(#paint1_linear_88:618)\"\r\n        />\r\n        <path\r\n          d=\"M6.96582 24.1846H11.0273V25.64C11.0273 26.3913 10.4388 27.0002 9.71287 27.0002H8.2802C7.55434 27.0002 6.96582 26.3913 6.96582 25.64V24.1846Z\"\r\n          fill=\"url(#paint2_linear_88:618)\"\r\n        />\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M17.2814 16.8109C15.8952 11.5743 11.2636 7.72607 5.76353 7.72607C3.67346 7.72607 1.70881 8.2818 0 9.25821V13.1737C0 17.2259 2.50147 20.6735 5.99355 21.9529V22.4707C5.99355 23.2202 6.38414 23.8754 6.96615 24.2301V25.6399C6.96615 26.3912 7.55467 27.0002 8.28053 27.0002H9.7132C10.4391 27.0002 11.0276 26.3912 11.0276 25.6399V24.2301C11.6096 23.8754 12.0002 23.2202 12.0002 22.4707V21.9529C14.3801 21.0809 16.3 19.2019 17.2814 16.8109Z\"\r\n          fill=\"url(#paint3_linear_88:618)\"\r\n        />\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M15.1303 19.9853C14.6896 14.739 10.4347 10.623 5.25093 10.623C3.32256 10.623 1.52274 11.1926 0 12.1781V13.1734C0 17.2256 2.50147 20.6732 5.99355 21.9526V22.4704C5.99355 23.2199 6.38414 23.8751 6.96615 24.2298V25.6397C6.96615 26.3909 7.55467 26.9999 8.28053 26.9999H9.7132C10.4391 26.9999 11.0276 26.3909 11.0276 25.6397V24.2298C11.6096 23.8751 12.0002 23.2199 12.0002 22.4704V21.9526C13.1748 21.5223 14.2373 20.8466 15.1303 19.9853Z\"\r\n          fill=\"url(#paint4_linear_88:618)\"\r\n        />\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M12.01 21.951C11.8231 17.6755 8.4145 14.2686 4.23693 14.2686C2.78497 14.2686 1.4259 14.6801 0.262695 15.3967C0.985966 18.452 3.16636 20.9153 5.99819 21.9528V22.4706C5.99819 23.2201 6.38879 23.8753 6.97083 24.23V25.6399C6.97083 26.3911 7.55928 27.0001 8.28521 27.0001H9.71788C10.4438 27.0001 11.0323 26.3911 11.0323 25.6399V24.23C11.6143 23.8753 12.0049 23.2201 12.0049 22.4706V21.9528C12.0066 21.9522 12.0083 21.9516 12.01 21.951Z\"\r\n          fill=\"url(#paint5_linear_88:618)\"\r\n        />\r\n      </g>\r\n      <defs>\r\n        <linearGradient\r\n          id=\"paint0_linear_88:618\"\r\n          x1=\"12.0068\"\r\n          y1=\"12.5275\"\r\n          x2=\"18.7021\"\r\n          y2=\"6.05122\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop stopColor=\"#46FF47\" />\r\n          <stop offset=\"1\" stopColor=\"#9CFF9D\" />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"paint1_linear_88:618\"\r\n          x1=\"12.0064\"\r\n          y1=\"12.5276\"\r\n          x2=\"18.7017\"\r\n          y2=\"6.0513\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop stopColor=\"#46FF47\" />\r\n          <stop offset=\"1\" stopColor=\"#9CFF9D\" />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"paint2_linear_88:618\"\r\n          x1=\"12.0065\"\r\n          y1=\"12.5277\"\r\n          x2=\"18.7017\"\r\n          y2=\"6.0514\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop stopColor=\"#46FF47\" />\r\n          <stop offset=\"1\" stopColor=\"#9CFF9D\" />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"paint3_linear_88:618\"\r\n          x1=\"10.4427\"\r\n          y1=\"13.813\"\r\n          x2=\"13.7708\"\r\n          y2=\"9.54276\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop stopColor=\"#10D9ED\" />\r\n          <stop offset=\"1\" stopColor=\"#10D9ED\" stopOpacity=\"0.3\" />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"paint4_linear_88:618\"\r\n          x1=\"9.73293\"\r\n          y1=\"15.3702\"\r\n          x2=\"12.0141\"\r\n          y2=\"11.1222\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop stopColor=\"#FA51D3\" />\r\n          <stop offset=\"0.958774\" stopColor=\"#FA51D3\" stopOpacity=\"0\" />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"paint5_linear_88:618\"\r\n          x1=\"6.74911\"\r\n          y1=\"21.7089\"\r\n          x2=\"10.1796\"\r\n          y2=\"13.233\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop stopColor=\"#FFE700\" />\r\n          <stop offset=\"1\" stopColor=\"#FFE700\" stopOpacity=\"0\" />\r\n        </linearGradient>\r\n        <clipPath id=\"clip0_88:618\">\r\n          <rect width=\"18\" height=\"27\" fill=\"white\" />\r\n        </clipPath>\r\n      </defs>\r\n    </Icon>\r\n  );\r\n});\r\n","export * from './plug-menu';\r\n","import {\r\n  Box,\r\n  Flex,\r\n  Icon,\r\n  Menu,\r\n  MenuButton,\r\n  MenuItem,\r\n  MenuList,\r\n  MenuProps,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { Spinner } from '@chakra-ui/spinner';\r\nimport { BiExit } from '@react-icons/all-files/bi/BiExit';\r\nimport { FaChevronDown } from '@react-icons/all-files/fa/FaChevronDown';\r\nimport { FiCopy } from '@react-icons/all-files/fi/FiCopy';\r\nimport { FC, useMemo } from 'react';\r\n\r\nimport { plugActions, PlugState, useAppDispatch, usePlugStore } from '@/store';\r\nimport { copyToClipboard } from '@/utils';\r\nimport { desensitizationPrincipalId } from '@/utils/canister';\r\n\r\nimport { PlugLogo } from '..';\r\n\r\nexport const PlugMenu: FC<Omit<MenuProps, 'children'>> = (props) => {\r\n  const { principalId, state } = usePlugStore();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleDisconnect = async () => {\r\n    dispatch(plugActions.disconnect());\r\n  };\r\n\r\n  const shortPrincipalId = useMemo(() => {\r\n    return desensitizationPrincipalId(principalId);\r\n  }, [principalId]);\r\n\r\n  const handleCopy = () => {\r\n    if (principalId) {\r\n      copyToClipboard(principalId, 'Principal ID copied to clipboard');\r\n    }\r\n  };\r\n\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const shadow = useColorModeValue('base', 'none');\r\n\r\n  return (\r\n    <Menu {...props}>\r\n      <MenuButton borderRadius=\"full\" px=\"4\" h=\"12\" bg={bg} shadow={shadow}>\r\n        <Flex direction=\"row\" alignItems=\"center\">\r\n          {state === PlugState.Loading ? <Spinner /> : <PlugLogo />}\r\n          <Box ml=\"2\" fontWeight={600}> {shortPrincipalId}</Box>\r\n          <Icon as={FaChevronDown} ml={3} />\r\n        </Flex>\r\n      </MenuButton>\r\n      <div>\r\n        <MenuList bg={bg} shadow={shadow} borderRadius=\"xl\" overflow=\"hidden\">\r\n          <MenuItem onClick={handleCopy} icon={<FiCopy />}>\r\n            <Text>Copy ID</Text>\r\n          </MenuItem>\r\n          <MenuItem onClick={handleDisconnect} icon={<BiExit />}>\r\n            <Text>Disconnect</Text>\r\n          </MenuItem>\r\n        </MenuList>\r\n      </div>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nPlugMenu.displayName = 'PlugPrincipalIDTag';\r\n","import { Box, Stack, Text } from '@chakra-ui/react';\r\nimport { FaInbox } from '@react-icons/all-files/fa/FaInbox';\r\nimport React from 'react';\r\n\r\nimport { PlugButton } from '..';\r\n\r\nexport interface PlugNotConnectedProps {\r\n  message?: string;\r\n}\r\n\r\nexport const PlugNotConnected: React.FC<PlugNotConnectedProps> = ({\r\n  message = 'Connect to see the content.',\r\n}) => {\r\n  return (\r\n    <Stack color=\"gray.500\" alignItems=\"center\">\r\n      <Box mt={6} mb={3}>\r\n        <FaInbox size={30} />\r\n      </Box>\r\n      <Text fontSize=\"lg\" pb={3}>\r\n        {message}\r\n      </Text>\r\n      <PlugButton width=\"80%\" variant=\"dark\">\r\n        Connect to Plug\r\n      </PlugButton>\r\n    </Stack>\r\n  );\r\n};\r\n","export const PATHS = {\r\n  All: '*',\r\n  Home: '/',\r\n};\r\n\r\nexport const ROUTES = {\r\n  Home: '/',\r\n};\r\n\r\nexport const ERRORS = {\r\n  PlugNotConnected: 'Plug is not connected',\r\n};\r\n","export const ENV = {\r\n  host: process.env.HOST || 'https://boundary.ic0.app/',\r\n  analyticsHost: process.env.ANALYTICS_HOST || 'https://api.sonic.ooo/graphql',\r\n  swapCanisterFee: Number(process.env.SWAP_CANISTER_FEE) || 10000,\r\n  isDarkModeEnabled: process.env.IS_DARK_MODE_ENABLED === 'true',\r\n  canistersPrincipalIDs: {\r\n    ledger: process.env.LEDGER_CANISTER_ID || 'ryjl3-tyaaa-aaaaa-aaaba-cai',\r\n    swap: process.env.SWAP_CANISTER_ID || '3xwpq-ziaaa-aaaah-qcn4a-cai',\r\n    cyclesMinting:\r\n      process.env.CYCLES_MINTING_CANISTER_ID || 'rkp4c-7iaaa-aaaaa-aaaca-cai',\r\n    WICP: process.env.WICP_CANISTER_ID || 'utozz-siaaa-aaaam-qaaxq-cai',\r\n    XTC: process.env.XTC_CANISTER_ID || 'aanaa-xaaaa-aaaah-aaeiq-cai',\r\n    swapCapRoot:\r\n      process.env.SWAP_CAP_ROOT_CANISTER_ID || '3qxje-uqaaa-aaaah-qcn4q-cai',\r\n  },\r\n  accountIDs: {\r\n    XTC:\r\n      process.env.XTC_ACCOUNT_ID ||\r\n      '758bdb7e54b73605d1d743da9f3aad70637d4cddcba03db13137eaf35f12d375',\r\n    WICP:\r\n      process.env.WICP_ACCOUNT_ID ||\r\n      'cc659fe529756bae6f72db9937c6c60cf7ad57eb4ac5f930a75748927aab469a',\r\n  },\r\n  URLs: {\r\n    discord: process.env.DISCORD_URL || 'https://discord.com/invite/EkmnRd99h6',\r\n    twitter: process.env.TWITTER_URL || 'https://twitter.com/sonic_ooo',\r\n    medium: process.env.MEDIUM_URL || 'https://medium.com/@sonic-ooo',\r\n    github: process.env.GITHUB_URL || 'https://github.com/psychedelic/sonic',\r\n    sonicDocs: process.env.SONIC_DOCS_URL || 'https://docs.sonic.ooo',\r\n    termsAndConditions:\r\n      process.env.TERMS_AND_CONDITIONS_URL ||\r\n      'https://docs.sonic.ooo/resources/disclaimer-terms',\r\n    tokenRequestForm:\r\n      process.env.TOKEN_REQUEST_FORM_URL ||\r\n      'https://form.typeform.com/to/YnSyAUn0',\r\n    analyticsApp: process.env.ANALYTICS_APP_URL || 'https://data.sonic.ooo',\r\n    ledgerTransactions:\r\n      process.env.LEDGER_TRANSACTIONS_URL || 'https://icscan.io/transaction',\r\n  },\r\n  hiddenTokens: (process.env.HIDDEN_TOKENS || '').split(','),\r\n  maintenanceMode: process.env.MAINTENANCE_MODE === 'true',\r\n  prorityOrder:['ICP', 'WICP', 'XTC', 'ckBTC', 'SNS1', 'CHAT', 'BOX', 'OGY', 'YC', 'DONGE']\r\n};\r\n","export * from './constants';\r\nexport * from './env';\r\n","import { plugCircleSrc, sonicCircleSrc } from '@/assets';\r\n\r\nexport type GetAppAssetsSourcesParams = {\r\n  balances: {\r\n    plug?: number;\r\n    sonic?: number;\r\n  };\r\n};\r\n\r\nexport type AppAssetSource = {\r\n  name: string;\r\n  src: string;\r\n  balance?: number;\r\n};\r\n\r\nexport const getAppAssetsSources = ({\r\n  balances,\r\n}: GetAppAssetsSourcesParams): AppAssetSource[] => {\r\n  return [\r\n    {\r\n      name: 'Plug Wallet',\r\n      src: plugCircleSrc,\r\n      balance: balances.plug,\r\n    },\r\n    {\r\n      name: 'Sonic',\r\n      src: sonicCircleSrc,\r\n      balance: balances.sonic,\r\n    },\r\n  ];\r\n};\r\n","export * from './token';\r\n","import { icpSrc } from '@/assets';\r\nimport { AppTokenMetadata } from '@/models';\r\n\r\nexport const ICP_METADATA = {\r\n  id: 'ICP', // ryjl3-tyaaa-aaaaa-aaaba-cai ICP\r\n  name: 'Internet Computer Protocol',\r\n  symbol: 'ICP',\r\n  fee: BigInt(10000), // 0.0001\r\n  decimals: 8,\r\n  totalSupply: BigInt(0),\r\n  logo: icpSrc,\r\n  tokenType:'ICRC1'\r\n};\r\n\r\nexport const getICPTokenMetadata = (price?: string): AppTokenMetadata => ({ ...ICP_METADATA, price});\r\n","export * from './ledger.did';\r\n","import { IDL } from '@dfinity/candid';\r\nimport { Principal } from '@dfinity/principal';\r\n\r\nexport namespace LedgerIDL {\r\n  export interface AccountBalanceArgs {\r\n    account: AccountIdentifier;\r\n  }\r\n  export type AccountIdentifier = string;\r\n  export interface ArchiveOptions {\r\n    max_message_size_bytes: [] | [number];\r\n    node_max_memory_size_bytes: [] | [number];\r\n    controller_id: Principal;\r\n  }\r\n  export type BlockHeight = bigint;\r\n  export interface Duration {\r\n    secs: bigint;\r\n    nanos: number;\r\n  }\r\n  export interface ICPTs {\r\n    e8s: bigint;\r\n  }\r\n  export interface LedgerCanisterInitPayload {\r\n    send_whitelist: Array<[Principal]>;\r\n    minting_account: AccountIdentifier;\r\n    transaction_window: [] | [Duration];\r\n    max_message_size_bytes: [] | [number];\r\n    archive_options: [] | [ArchiveOptions];\r\n    initial_values: Array<[AccountIdentifier, ICPTs]>;\r\n  }\r\n  export type Memo = bigint;\r\n  export interface NotifyCanisterArgs {\r\n    to_subaccount: [] | [SubAccount];\r\n    from_subaccount: [] | [SubAccount];\r\n    to_canister: Principal;\r\n    max_fee: ICPTs;\r\n    block_height: BlockHeight;\r\n  }\r\n  export interface SendArgs {\r\n    to: AccountIdentifier;\r\n    fee: ICPTs;\r\n    memo: Memo;\r\n    from_subaccount: [] | [SubAccount];\r\n    created_at_time: [] | [TimeStamp];\r\n    amount: ICPTs;\r\n  }\r\n  export type SubAccount = Array<number>;\r\n  export interface TimeStamp {\r\n    timestamp_nanos: bigint;\r\n  }\r\n  export interface Transaction {\r\n    memo: Memo;\r\n    created_at: BlockHeight;\r\n    transfer: Transfer;\r\n  }\r\n  export type Transfer =\r\n    | {\r\n        Burn: { from: AccountIdentifier; amount: ICPTs };\r\n      }\r\n    | { Mint: { to: AccountIdentifier; amount: ICPTs } }\r\n    | {\r\n        Send: {\r\n          to: AccountIdentifier;\r\n          from: AccountIdentifier;\r\n          amount: ICPTs;\r\n        };\r\n      };\r\n  export interface Factory {\r\n    account_balance_dfx: (arg_0: AccountBalanceArgs) => Promise<ICPTs>;\r\n    notify_dfx: (arg_0: NotifyCanisterArgs) => Promise<undefined>;\r\n    send_dfx: (arg_0: SendArgs) => Promise<BlockHeight>;\r\n  }\r\n\r\n  export const factory: IDL.InterfaceFactory = ({ IDL }) => {\r\n    const AccountIdentifier = IDL.Text;\r\n    // const Duration = IDL.Record({ secs: IDL.Nat64, nanos: IDL.Nat32 });\r\n    // const ArchiveOptions = IDL.Record({\r\n    //   max_message_size_bytes: IDL.Opt(IDL.Nat32),\r\n    //   node_max_memory_size_bytes: IDL.Opt(IDL.Nat32),\r\n    //   controller_id: IDL.Principal,\r\n    // });\r\n    const ICPTs = IDL.Record({ e8s: IDL.Nat64 });\r\n    // const LedgerCanisterInitPayload = IDL.Record({\r\n    //   send_whitelist: IDL.Vec(IDL.Tuple(IDL.Principal)),\r\n    //   minting_account: AccountIdentifier,\r\n    //   transaction_window: IDL.Opt(Duration),\r\n    //   max_message_size_bytes: IDL.Opt(IDL.Nat32),\r\n    //   archive_options: IDL.Opt(ArchiveOptions),\r\n    //   initial_values: IDL.Vec(IDL.Tuple(AccountIdentifier, ICPTs)),\r\n    // });\r\n    const AccountBalanceArgs = IDL.Record({ account: AccountIdentifier });\r\n    const SubAccount = IDL.Vec(IDL.Nat8);\r\n    const BlockHeight = IDL.Nat64;\r\n    const NotifyCanisterArgs = IDL.Record({\r\n      to_subaccount: IDL.Opt(SubAccount),\r\n      from_subaccount: IDL.Opt(SubAccount),\r\n      to_canister: IDL.Principal,\r\n      max_fee: ICPTs,\r\n      block_height: BlockHeight,\r\n    });\r\n    const Memo = IDL.Nat64;\r\n    const TimeStamp = IDL.Record({ timestamp_nanos: IDL.Nat64 });\r\n    const SendArgs = IDL.Record({\r\n      to: AccountIdentifier,\r\n      fee: ICPTs,\r\n      memo: Memo,\r\n      from_subaccount: IDL.Opt(SubAccount),\r\n      created_at_time: IDL.Opt(TimeStamp),\r\n      amount: ICPTs,\r\n    });\r\n    return IDL.Service({\r\n      account_balance_dfx: IDL.Func([AccountBalanceArgs], [ICPTs], ['query']),\r\n      notify_dfx: IDL.Func([NotifyCanisterArgs], [], []),\r\n      send_dfx: IDL.Func([SendArgs], [BlockHeight], []),\r\n    });\r\n  };\r\n}\r\n","export * from './dfinity';\r\nexport * from './sonic';\r\n","import { IDL } from '@dfinity/candid';\r\nimport type { Principal } from '@dfinity/principal';\r\n\r\nexport namespace CyclesMintingIDL {\r\n  export type CyclesResponse =\r\n    | { Refunded: [string, [] | [bigint]] }\r\n    | { CanisterCreated: Principal }\r\n    | { ToppedUp: null };\r\n  export interface ICPTs {\r\n    e8s: bigint;\r\n  }\r\n  export interface IcpXdrConversionRate {\r\n    xdr_permyriad_per_icp: bigint;\r\n    timestamp_seconds: bigint;\r\n  }\r\n  export interface IcpXdrConversionRateCertifiedResponse {\r\n    certificate: Array<number>;\r\n    data: IcpXdrConversionRate;\r\n    hash_tree: Array<number>;\r\n  }\r\n  export type Result = { Ok: CyclesResponse } | { Err: string };\r\n  export interface SetAuthorizedSubnetworkListArgs {\r\n    who: [] | [Principal];\r\n    subnets: Array<Principal>;\r\n  }\r\n  export interface TransactionNotification {\r\n    to: Principal;\r\n    to_subaccount: [] | [Array<number>];\r\n    from: Principal;\r\n    memo: bigint;\r\n    from_subaccount: [] | [Array<number>];\r\n    amount: ICPTs;\r\n    block_height: bigint;\r\n  }\r\n  export interface Factory {\r\n    get_average_icp_xdr_conversion_rate: () => Promise<IcpXdrConversionRateCertifiedResponse>;\r\n    get_icp_xdr_conversion_rate: () => Promise<IcpXdrConversionRateCertifiedResponse>;\r\n    set_authorized_subnetwork_list: (\r\n      arg_0: SetAuthorizedSubnetworkListArgs\r\n    ) => Promise<undefined>;\r\n    transaction_notification: (\r\n      arg_0: TransactionNotification\r\n    ) => Promise<Result>;\r\n  }\r\n\r\n  export const factory: IDL.InterfaceFactory = ({ IDL }) => {\r\n    const IcpXdrConversionRate = IDL.Record({\r\n      xdr_permyriad_per_icp: IDL.Nat64,\r\n      timestamp_seconds: IDL.Nat64,\r\n    });\r\n    const IcpXdrConversionRateCertifiedResponse = IDL.Record({\r\n      certificate: IDL.Vec(IDL.Nat8),\r\n      data: IcpXdrConversionRate,\r\n      hash_tree: IDL.Vec(IDL.Nat8),\r\n    });\r\n    const SetAuthorizedSubnetworkListArgs = IDL.Record({\r\n      who: IDL.Opt(IDL.Principal),\r\n      subnets: IDL.Vec(IDL.Principal),\r\n    });\r\n    const ICPTs = IDL.Record({ e8s: IDL.Nat64 });\r\n    const TransactionNotification = IDL.Record({\r\n      to: IDL.Principal,\r\n      to_subaccount: IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n      from: IDL.Principal,\r\n      memo: IDL.Nat64,\r\n      from_subaccount: IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n      amount: ICPTs,\r\n      block_height: IDL.Nat64,\r\n    });\r\n    const CyclesResponse = IDL.Variant({\r\n      Refunded: IDL.Tuple(IDL.Text, IDL.Opt(IDL.Nat64)),\r\n      CanisterCreated: IDL.Principal,\r\n      ToppedUp: IDL.Null,\r\n    });\r\n    const Result = IDL.Variant({ Ok: CyclesResponse, Err: IDL.Text });\r\n\r\n    return IDL.Service({\r\n      get_average_icp_xdr_conversion_rate: IDL.Func(\r\n        [],\r\n        [IcpXdrConversionRateCertifiedResponse],\r\n        ['query']\r\n      ),\r\n      get_icp_xdr_conversion_rate: IDL.Func(\r\n        [],\r\n        [IcpXdrConversionRateCertifiedResponse],\r\n        ['query']\r\n      ),\r\n      set_authorized_subnetwork_list: IDL.Func(\r\n        [SetAuthorizedSubnetworkListArgs],\r\n        [],\r\n        []\r\n      ),\r\n      transaction_notification: IDL.Func(\r\n        [TransactionNotification],\r\n        [Result],\r\n        []\r\n      ),\r\n    });\r\n  };\r\n}\r\n","export * from './swap-storage.did';\r\nexport * from './swap.did';\r\nexport * from './token.did';\r\nexport * from './xtc.did';\r\n","import { IDL } from '@dfinity/candid';\r\nimport type { Principal } from '@dfinity/principal';\r\n\r\nexport namespace SwapStorageIDL {\r\n  export interface Bucket {\r\n    addRecords: (arg_0: Array<TxRecord>) => Promise<bigint>;\r\n    getStatus: () => Promise<Status>;\r\n    getTransaction: (arg_0: bigint) => Promise<TxRecord>;\r\n    getTransactions: (arg_0: bigint, arg_1: bigint) => Promise<Array<TxRecord>>;\r\n  }\r\n  export interface BucketInfoExt {\r\n    id: bigint;\r\n    bucketId: Principal;\r\n    start: bigint;\r\n    length: bigint;\r\n  }\r\n  export type Operation =\r\n    | { lpTransfer: null }\r\n    | { lpApprove: null }\r\n    | { withdraw: null }\r\n    | { tokenTransfer: null }\r\n    | { swap: null }\r\n    | { addLiquidity: null }\r\n    | { createPair: null }\r\n    | { deposit: null }\r\n    | { removeLiquidity: null }\r\n    | { lpTransferFrom: null }\r\n    | { tokenTransferFrom: null }\r\n    | { tokenApprove: null };\r\n  export type Operation__1 =\r\n    | { lpTransfer: null }\r\n    | { lpApprove: null }\r\n    | { withdraw: null }\r\n    | { tokenTransfer: null }\r\n    | { swap: null }\r\n    | { addLiquidity: null }\r\n    | { createPair: null }\r\n    | { deposit: null }\r\n    | { removeLiquidity: null }\r\n    | { lpTransferFrom: null }\r\n    | { tokenTransferFrom: null }\r\n    | { tokenApprove: null };\r\n  export interface Status {\r\n    memSize: bigint;\r\n    storageId: Principal;\r\n    cycles: bigint;\r\n    start: bigint;\r\n    length: bigint;\r\n  }\r\n  export interface Status__1 {\r\n    recordsPerBucket: bigint;\r\n    memSize: bigint;\r\n    owner: Principal;\r\n    txAmount: bigint;\r\n    cycles: bigint;\r\n    flushing: boolean;\r\n    bufferSize: bigint;\r\n    chunkSize: bigint;\r\n    dswap: Principal;\r\n    buckets: Array<BucketInfoExt>;\r\n  }\r\n  export interface Storage {\r\n    addRecord: (\r\n      arg_0: Principal,\r\n      arg_1: Operation__1,\r\n      arg_2: string,\r\n      arg_3: Principal,\r\n      arg_4: Principal,\r\n      arg_5: bigint,\r\n      arg_6: bigint,\r\n      arg_7: bigint,\r\n      arg_8: bigint,\r\n      arg_9: Time\r\n    ) => Promise<bigint>;\r\n    flush: () => Promise<boolean>;\r\n    getBucket: () => Promise<Principal>;\r\n    getStatus: () => Promise<Status__1>;\r\n    getTransaction: (arg_0: bigint) => Promise<TxRecord__1>;\r\n    getTransactions: (\r\n      arg_0: bigint,\r\n      arg_1: bigint\r\n    ) => Promise<Array<TxRecord__1>>;\r\n    getUserTransactionAmount: (arg_0: Principal) => Promise<bigint>;\r\n    getUserTransactions: (\r\n      arg_0: Principal,\r\n      arg_1: bigint,\r\n      arg_2: bigint\r\n    ) => Promise<Array<TxRecord__1>>;\r\n    historySize: () => Promise<bigint>;\r\n    newBucket: () => Promise<Principal>;\r\n    setDSwapCanisterId: (arg_0: Principal) => Promise<boolean>;\r\n  }\r\n  export type Time = bigint;\r\n  export interface TxRecord {\r\n    op: Operation;\r\n    to: Principal;\r\n    fee: bigint;\r\n    tokenId: string;\r\n    from: Principal;\r\n    amount0: bigint;\r\n    amount1: bigint;\r\n    timestamp: Time;\r\n    caller: Principal;\r\n    index: bigint;\r\n    amount: bigint;\r\n  }\r\n  export interface TxRecord__1 {\r\n    op: Operation;\r\n    to: Principal;\r\n    fee: bigint;\r\n    tokenId: string;\r\n    from: Principal;\r\n    amount0: bigint;\r\n    amount1: bigint;\r\n    timestamp: Time;\r\n    caller: Principal;\r\n    index: bigint;\r\n    amount: bigint;\r\n  }\r\n  export type Factory = Storage;\r\n\r\n  export const factory: IDL.InterfaceFactory = ({ IDL }) => {\r\n    const Operation__1 = IDL.Variant({\r\n      lpTransfer: IDL.Null,\r\n      lpApprove: IDL.Null,\r\n      withdraw: IDL.Null,\r\n      tokenTransfer: IDL.Null,\r\n      swap: IDL.Null,\r\n      addLiquidity: IDL.Null,\r\n      createPair: IDL.Null,\r\n      deposit: IDL.Null,\r\n      removeLiquidity: IDL.Null,\r\n      lpTransferFrom: IDL.Null,\r\n      tokenTransferFrom: IDL.Null,\r\n      tokenApprove: IDL.Null,\r\n    });\r\n    const Time = IDL.Int;\r\n    const Operation = IDL.Variant({\r\n      lpTransfer: IDL.Null,\r\n      lpApprove: IDL.Null,\r\n      withdraw: IDL.Null,\r\n      tokenTransfer: IDL.Null,\r\n      swap: IDL.Null,\r\n      addLiquidity: IDL.Null,\r\n      createPair: IDL.Null,\r\n      deposit: IDL.Null,\r\n      removeLiquidity: IDL.Null,\r\n      lpTransferFrom: IDL.Null,\r\n      tokenTransferFrom: IDL.Null,\r\n      tokenApprove: IDL.Null,\r\n    });\r\n    const TxRecord = IDL.Record({\r\n      op: Operation,\r\n      to: IDL.Principal,\r\n      fee: IDL.Nat,\r\n      tokenId: IDL.Text,\r\n      from: IDL.Principal,\r\n      amount0: IDL.Nat,\r\n      amount1: IDL.Nat,\r\n      timestamp: Time,\r\n      caller: IDL.Principal,\r\n      index: IDL.Nat,\r\n      amount: IDL.Nat,\r\n    });\r\n    const Status = IDL.Record({\r\n      memSize: IDL.Nat,\r\n      storageId: IDL.Principal,\r\n      cycles: IDL.Nat,\r\n      start: IDL.Nat,\r\n      length: IDL.Nat,\r\n    });\r\n    const Bucket = IDL.Service({\r\n      addRecords: IDL.Func([IDL.Vec(TxRecord)], [IDL.Nat], []),\r\n      getStatus: IDL.Func([], [Status], ['query']),\r\n      getTransaction: IDL.Func([IDL.Nat], [TxRecord], ['query']),\r\n      getTransactions: IDL.Func(\r\n        [IDL.Nat, IDL.Nat],\r\n        [IDL.Vec(TxRecord)],\r\n        ['query']\r\n      ),\r\n    });\r\n    const BucketInfoExt = IDL.Record({\r\n      id: IDL.Nat,\r\n      bucketId: IDL.Principal,\r\n      start: IDL.Nat,\r\n      length: IDL.Nat,\r\n    });\r\n    const Status__1 = IDL.Record({\r\n      recordsPerBucket: IDL.Nat,\r\n      memSize: IDL.Nat,\r\n      owner: IDL.Principal,\r\n      txAmount: IDL.Nat,\r\n      cycles: IDL.Nat,\r\n      flushing: IDL.Bool,\r\n      bufferSize: IDL.Nat,\r\n      chunkSize: IDL.Nat,\r\n      dswap: IDL.Principal,\r\n      buckets: IDL.Vec(BucketInfoExt),\r\n    });\r\n    const TxRecord__1 = IDL.Record({\r\n      op: Operation,\r\n      to: IDL.Principal,\r\n      fee: IDL.Nat,\r\n      tokenId: IDL.Text,\r\n      from: IDL.Principal,\r\n      amount0: IDL.Nat,\r\n      amount1: IDL.Nat,\r\n      timestamp: Time,\r\n      caller: IDL.Principal,\r\n      index: IDL.Nat,\r\n      amount: IDL.Nat,\r\n    });\r\n    const Storage = IDL.Service({\r\n      addRecord: IDL.Func(\r\n        [\r\n          IDL.Principal,\r\n          Operation__1,\r\n          IDL.Text,\r\n          IDL.Principal,\r\n          IDL.Principal,\r\n          IDL.Nat,\r\n          IDL.Nat,\r\n          IDL.Nat,\r\n          IDL.Nat,\r\n          Time,\r\n        ],\r\n        [IDL.Nat],\r\n        []\r\n      ),\r\n      flush: IDL.Func([], [IDL.Bool], []),\r\n      getBucket: IDL.Func([], [Bucket], []),\r\n      getStatus: IDL.Func([], [Status__1], ['query']),\r\n      getTransaction: IDL.Func([IDL.Nat], [TxRecord__1], []),\r\n      getTransactions: IDL.Func([IDL.Nat, IDL.Nat], [IDL.Vec(TxRecord__1)], []),\r\n      getUserTransactionAmount: IDL.Func([IDL.Principal], [IDL.Nat], ['query']),\r\n      getUserTransactions: IDL.Func(\r\n        [IDL.Principal, IDL.Nat, IDL.Nat],\r\n        [IDL.Vec(TxRecord__1)],\r\n        []\r\n      ),\r\n      historySize: IDL.Func([], [IDL.Nat], []),\r\n      newBucket: IDL.Func([], [Bucket], []),\r\n      setDSwapCanisterId: IDL.Func([IDL.Principal], [IDL.Bool], []),\r\n    });\r\n    return Storage;\r\n  };\r\n}\r\n","import { IDL } from '@dfinity/candid';\r\nimport type { Principal } from '@dfinity/principal';\r\n\r\nexport namespace SwapIDL {\r\n  export interface PairInfoExt {\r\n    id: string, price0CumulativeLast: bigint, creator: Principal, reserve0: bigint, reserve1: bigint,\r\n    lptoken: string, totalSupply: bigint, token0: string, token1: string, price1CumulativeLast: bigint,\r\n    kLast: bigint, blockTimestampLast: bigint,\r\n  };\r\n  export interface SwapInfo { owner: Principal, cycles: bigint, tokens: Array<TokenInfoExt>, pairs: Array<PairInfoExt> };\r\n  export interface TokenInfoExt { id: string, fee: bigint, decimals: number, name: string, totalSupply: bigint, symbol: string };\r\n  export interface TokenInfoWithType {\r\n    id: string, fee: bigint, decimals: number, name: string,\r\n    totalSupply: bigint, tokenType: string, symbol: string,\r\n  };\r\n  export type TxReceipt = { ok: bigint } | { err: string };\r\n  export interface UserInfo { lpBalances: Array<[string, bigint]>, balances: Array<[string, bigint]> };\r\n  export interface UserInfoPage { lpBalances: [Array<[string, bigint]>, bigint], balances: [Array<[string, bigint]>, bigint] };\r\n  export type Result = { ok: boolean } | { err: string };\r\n\r\n  export interface Swap {\r\n    addAuth: (arg_0: Principal) => Promise<boolean>,\r\n    addLiquidity: (arg_0: Principal, arg_1: Principal, arg_2: bigint, arg_3: bigint, arg_4: bigint, arg_5: bigint, arg_6: bigint) => Promise<TxReceipt>,\r\n    addToken: (arg_0: Principal) => Promise<TxReceipt>,\r\n    addTokenTypes: (arg_0: Principal, arg_1: string) => Promise<TxReceipt>,\r\n    addTokenWithType: (arg_0: Principal, arg_1: string) => Promise<TxReceipt>,\r\n    allowance: (arg_0: string, arg_1: Principal, arg_2: Principal) => Promise<bigint>,\r\n    approve: (arg_0: string, arg_1: Principal, arg_2: bigint) => Promise<boolean>,\r\n    balanceOf: (arg_0: string, arg_1: Principal) => Promise<bigint>,\r\n    burn: (arg_0: string, arg_1: bigint) => Promise<boolean>,\r\n    createPair: (arg_0: Principal, arg_1: Principal) => Promise<TxReceipt>,\r\n    decimals: (arg_0: string) => Promise<number>,\r\n    deposit: (arg_0: Principal, arg_1: bigint) => Promise<TxReceipt>,\r\n    depositTo: (arg_0: Principal, arg_1: Principal, arg_2: bigint) => Promise<TxReceipt>,\r\n    exportBalances: (arg_0: string) => Promise<[] | [Array<[Principal, bigint]>]>,\r\n    exportLPTokens: () => Promise<Array<TokenInfoExt>>,\r\n    exportPairs: () => Promise<Array<PairInfoExt>>,\r\n    exportTokenTypes: () => Promise<Array<[string, string]>>,\r\n    exportTokens: () => Promise<Array<TokenInfoExt>>,\r\n    getAllPairs: () => Promise<Array<PairInfoExt>>,\r\n    getHolders: (arg_0: string) => Promise<bigint>,\r\n    getLPTokenId: (arg_0: Principal, arg_1: Principal) => Promise<string>,\r\n    getNumPairs: () => Promise<bigint>,\r\n    getPair: (arg_0: Principal, arg_1: Principal) => Promise<[] | [PairInfoExt]>,\r\n    getPairs: (arg_0: bigint, arg_1: bigint) => Promise<[Array<PairInfoExt>, bigint]>,\r\n    getSupportedTokenList: () => Promise<Array<TokenInfoWithType>>,\r\n    getSupportedTokenListByName: (arg_0: string, arg_1: bigint, arg_2: bigint) => Promise<[Array<TokenInfoExt>, bigint]>,\r\n    getSupportedTokenListSome: (arg_0: bigint, arg_1: bigint) => Promise<[Array<TokenInfoExt>, bigint]>,\r\n    getSwapInfo: () => Promise<SwapInfo>,\r\n    getUserBalances: (arg_0: Principal) => Promise<Array<[string, bigint]>>,\r\n    getUserInfo: (arg_0: Principal) => Promise<UserInfo>,\r\n    getUserInfoAbove: (arg_0: Principal, arg_1: bigint, arg_2: bigint) => Promise<UserInfo>,\r\n    getUserInfoByNamePageAbove: (\r\n      arg_0: Principal, arg_1: bigint, arg_2: string, arg_3: bigint, arg_4: bigint,\r\n      arg_5: bigint, arg_6: string, arg_7: bigint, arg_8: bigint) => Promise<UserInfoPage>,\r\n    getUserLPBalances: (arg_0: Principal) => Promise<Array<[string, bigint]>>,\r\n    getUserLPBalancesAbove: (arg_0: Principal, arg_1: bigint) => Promise<Array<[string, bigint]>>,\r\n    historySize: () => Promise<bigint>,\r\n    initateTransfer: () => Promise<string>,\r\n\r\n    initiateICRC1Transfer : () => Promise<Array<number>>,\r\n\r\n    logMessageClear: () => Promise<undefined>,\r\n    logMessageGet: () => Promise<Array<string>>,\r\n    name: (arg_0: string) => Promise<string>,\r\n    removeAuth: (arg_0: Principal) => Promise<boolean>,\r\n    removeLiquidity: (\r\n      arg_0: Principal, arg_1: Principal, arg_2: bigint, arg_3: bigint,\r\n      arg_4: bigint, arg_5: Principal, arg_6: bigint,\r\n    ) => Promise<TxReceipt>,\r\n    setFeeForToken: (arg_0: string, arg_1: bigint) => Promise<boolean>,\r\n    setFeeOn: (arg_0: boolean) => Promise<boolean>,\r\n    setFeeTo: (arg_0: Principal) => Promise<boolean>,\r\n    setGlobalTokenFee: (arg_0: bigint) => Promise<boolean>,\r\n    setMaxTokens: (arg_0: bigint) => Promise<boolean>,\r\n    setOwner: (arg_0: Principal) => Promise<boolean>,\r\n    setPairSupply: (arg_0: string, arg_1: bigint) => Promise<boolean>,\r\n    setPermissionless: (arg_0: boolean) => Promise<boolean>,\r\n    swapExactTokensForTokens: (arg_0: bigint, arg_1: bigint, arg_2: Array<string>,\r\n      arg_3: Principal, arg_4: bigint) => Promise<TxReceipt>,\r\n    swapTokensForExactTokens: (\r\n      arg_0: bigint, arg_1: bigint, arg_2: Array<string>, arg_3: Principal, arg_4: bigint,\r\n    ) => Promise<TxReceipt>,\r\n    symbol: (arg_0: string) => Promise<string>,\r\n    totalSupply: (arg_0: string) => Promise<bigint>,\r\n    transfer: (arg_0: string, arg_1: Principal, arg_2: bigint) => Promise<boolean>,\r\n    transferFrom: (\r\n      arg_0: string, arg_1: Principal, arg_2: Principal, arg_3: bigint,\r\n    ) => Promise<boolean>,\r\n    updateAllTokenMetadata: () => Promise<boolean>,\r\n    updateTokenFees: () => Promise<boolean>,\r\n    updateTokenMetadata: (arg_0: string) => Promise<boolean>,\r\n    withdraw: (arg_0: Principal, arg_1: bigint) => Promise<TxReceipt>,\r\n    withdrawTo: (arg_0: Principal, arg_1: Principal, arg_2: bigint) => Promise<\r\n      TxReceipt\r\n    >,\r\n  }\r\n\r\n  export type Factory = Swap;\r\n\r\n  export const factory: IDL.InterfaceFactory = ({ IDL }) => {\r\n    const TxReceipt = IDL.Variant({ ok: IDL.Nat, err: IDL.Text });\r\n    const TokenInfoExt = IDL.Record({\r\n      id: IDL.Text, fee: IDL.Nat, decimals: IDL.Nat8,\r\n      name: IDL.Text, totalSupply: IDL.Nat, symbol: IDL.Text,\r\n    });\r\n    const PairInfoExt = IDL.Record({\r\n      id: IDL.Text, price0CumulativeLast: IDL.Nat, creator: IDL.Principal, reserve0: IDL.Nat,\r\n      reserve1: IDL.Nat, lptoken: IDL.Text, totalSupply: IDL.Nat, token0: IDL.Text, token1: IDL.Text,\r\n      price1CumulativeLast: IDL.Nat, kLast: IDL.Nat, blockTimestampLast: IDL.Int,\r\n    });\r\n    const TokenInfoWithType = IDL.Record({\r\n      id: IDL.Text, fee: IDL.Nat, decimals: IDL.Nat8, name: IDL.Text,\r\n      totalSupply: IDL.Nat, tokenType: IDL.Text, symbol: IDL.Text,\r\n    });\r\n    const SwapInfo = IDL.Record({\r\n      owner: IDL.Principal, cycles: IDL.Nat, tokens: IDL.Vec(TokenInfoExt), pairs: IDL.Vec(PairInfoExt),\r\n    });\r\n    const UserInfo = IDL.Record({\r\n      lpBalances: IDL.Vec(IDL.Tuple(IDL.Text, IDL.Nat)), balances: IDL.Vec(IDL.Tuple(IDL.Text, IDL.Nat)),\r\n    });\r\n    const UserInfoPage = IDL.Record({\r\n      lpBalances: IDL.Tuple(IDL.Vec(IDL.Tuple(IDL.Text, IDL.Nat)), IDL.Nat),\r\n      balances: IDL.Tuple(IDL.Vec(IDL.Tuple(IDL.Text, IDL.Nat)), IDL.Nat),\r\n    });\r\n\r\n    const Swap = IDL.Service({\r\n      addAuth: IDL.Func([IDL.Principal], [IDL.Bool], []),\r\n      addLiquidity: IDL.Func(\r\n        [IDL.Principal, IDL.Principal, IDL.Nat, IDL.Nat, IDL.Nat, IDL.Nat, IDL.Int],\r\n        [TxReceipt],\r\n        [],\r\n      ),\r\n      addToken: IDL.Func([IDL.Principal], [TxReceipt], []),\r\n      addTokenTypes: IDL.Func([IDL.Principal, IDL.Text], [TxReceipt], []),\r\n      addTokenWithType: IDL.Func([IDL.Principal, IDL.Text], [TxReceipt], []),\r\n      allowance: IDL.Func([IDL.Text, IDL.Principal, IDL.Principal], [IDL.Nat], ['query']),\r\n      approve: IDL.Func([IDL.Text, IDL.Principal, IDL.Nat], [IDL.Bool], []),\r\n      balanceOf: IDL.Func([IDL.Text, IDL.Principal], [IDL.Nat], ['query']),\r\n      burn: IDL.Func([IDL.Text, IDL.Nat], [IDL.Bool], []),\r\n      createPair: IDL.Func([IDL.Principal, IDL.Principal], [TxReceipt], []),\r\n      decimals: IDL.Func([IDL.Text], [IDL.Nat8], ['query']),\r\n      deposit: IDL.Func([IDL.Principal, IDL.Nat], [TxReceipt], []),\r\n      depositTo: IDL.Func([IDL.Principal, IDL.Principal, IDL.Nat], [TxReceipt], []),\r\n      exportBalances: IDL.Func([IDL.Text], [IDL.Opt(IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat)))], ['query']),\r\n      exportLPTokens: IDL.Func([], [IDL.Vec(TokenInfoExt)], ['query']),\r\n      exportPairs: IDL.Func([], [IDL.Vec(PairInfoExt)], ['query']),\r\n      exportTokenTypes: IDL.Func([], [IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text))], ['query']),\r\n      exportTokens: IDL.Func([], [IDL.Vec(TokenInfoExt)], ['query']),\r\n      getAllPairs: IDL.Func([], [IDL.Vec(PairInfoExt)], ['query']),\r\n      getHolders: IDL.Func([IDL.Text], [IDL.Nat], ['query']),\r\n      getLPTokenId: IDL.Func([IDL.Principal, IDL.Principal], [IDL.Text], ['query']),\r\n      getNumPairs: IDL.Func([], [IDL.Nat], ['query']),\r\n      getPair: IDL.Func([IDL.Principal, IDL.Principal], [IDL.Opt(PairInfoExt)], ['query']),\r\n      getPairs: IDL.Func([IDL.Nat, IDL.Nat], [IDL.Vec(PairInfoExt), IDL.Nat], ['query']),\r\n      getSupportedTokenList: IDL.Func([], [IDL.Vec(TokenInfoWithType)], ['query']),\r\n      getSupportedTokenListByName: IDL.Func([IDL.Text, IDL.Nat, IDL.Nat], [IDL.Vec(TokenInfoExt), IDL.Nat], ['query']),\r\n      getSupportedTokenListSome: IDL.Func([IDL.Nat, IDL.Nat], [IDL.Vec(TokenInfoExt), IDL.Nat], ['query']),\r\n      getSwapInfo: IDL.Func([], [SwapInfo], ['query']),\r\n      getUserBalances: IDL.Func([IDL.Principal], [IDL.Vec(IDL.Tuple(IDL.Text, IDL.Nat))], ['query']),\r\n      getUserInfo: IDL.Func([IDL.Principal], [UserInfo], ['query']),\r\n      getUserInfoAbove: IDL.Func([IDL.Principal, IDL.Nat, IDL.Nat], [UserInfo], ['query']),\r\n      getUserInfoByNamePageAbove: IDL.Func(\r\n        [IDL.Principal, IDL.Int, IDL.Text, IDL.Nat, IDL.Nat, IDL.Int, IDL.Text, IDL.Nat, IDL.Nat],\r\n        [UserInfoPage], ['query'],\r\n      ),\r\n      getUserLPBalances: IDL.Func([IDL.Principal], [IDL.Vec(IDL.Tuple(IDL.Text, IDL.Nat))], ['query']),\r\n      getUserLPBalancesAbove: IDL.Func([IDL.Principal, IDL.Nat], [IDL.Vec(IDL.Tuple(IDL.Text, IDL.Nat))], ['query']),\r\n      historySize: IDL.Func([], [IDL.Nat], []),\r\n      initateTransfer: IDL.Func([], [IDL.Text], []),\r\n\r\n      initiateICRC1Transfer : IDL.Func([], [IDL.Vec(IDL.Nat8)], []),\r\n\r\n      logMessageClear: IDL.Func([], [], []),\r\n      logMessageGet: IDL.Func([], [IDL.Vec(IDL.Text)], ['query']),\r\n      name: IDL.Func([IDL.Text], [IDL.Text], ['query']),\r\n      removeAuth: IDL.Func([IDL.Principal], [IDL.Bool], []),\r\n      removeLiquidity: IDL.Func([\r\n        IDL.Principal, IDL.Principal, IDL.Nat, IDL.Nat,\r\n        IDL.Nat, IDL.Principal, IDL.Int], [TxReceipt], [],\r\n      ),\r\n      setFeeForToken: IDL.Func([IDL.Text, IDL.Nat], [IDL.Bool], []),\r\n      setFeeOn: IDL.Func([IDL.Bool], [IDL.Bool], []),\r\n      setFeeTo: IDL.Func([IDL.Principal], [IDL.Bool], []),\r\n      setGlobalTokenFee: IDL.Func([IDL.Nat], [IDL.Bool], []),\r\n      setMaxTokens: IDL.Func([IDL.Nat], [IDL.Bool], []),\r\n      setOwner: IDL.Func([IDL.Principal], [IDL.Bool], []),\r\n      setPairSupply: IDL.Func([IDL.Text, IDL.Nat], [IDL.Bool], []),\r\n      setPermissionless: IDL.Func([IDL.Bool], [IDL.Bool], []),\r\n      swapExactTokensForTokens: IDL.Func([IDL.Nat, IDL.Nat, IDL.Vec(IDL.Text), IDL.Principal, IDL.Int], [TxReceipt], []),\r\n      swapTokensForExactTokens: IDL.Func([IDL.Nat, IDL.Nat, IDL.Vec(IDL.Text), IDL.Principal, IDL.Int], [TxReceipt], []),\r\n      symbol: IDL.Func([IDL.Text], [IDL.Text], ['query']),\r\n      totalSupply: IDL.Func([IDL.Text], [IDL.Nat], ['query']),\r\n      transfer: IDL.Func([IDL.Text, IDL.Principal, IDL.Nat], [IDL.Bool], []),\r\n      transferFrom: IDL.Func([IDL.Text, IDL.Principal, IDL.Principal, IDL.Nat], [IDL.Bool], []),\r\n      updateAllTokenMetadata: IDL.Func([], [IDL.Bool], []),\r\n      updateTokenFees: IDL.Func([], [IDL.Bool], []),\r\n      updateTokenMetadata: IDL.Func([IDL.Text], [IDL.Bool], []),\r\n      withdraw: IDL.Func([IDL.Principal, IDL.Nat], [TxReceipt], []),\r\n      withdrawTo: IDL.Func([IDL.Principal, IDL.Principal, IDL.Nat], [TxReceipt], []),\r\n    });\r\n    return Swap;\r\n  };\r\n}\r\n","import { IDL } from '@dfinity/candid';\r\nimport type { Principal } from '@dfinity/principal';\r\n\r\nexport namespace TokenIDL {\r\n  export namespace DIP20 {\r\n    export interface Metadata {\r\n      fee: bigint;\r\n      decimals: number;\r\n      owner: Principal;\r\n      logo: string;\r\n      name: string;\r\n      totalSupply: bigint;\r\n      symbol: string;\r\n    }\r\n    export type Result = { Ok: bigint } | { Err: TxError };\r\n    export type YCResult = { Ok: string } | { Err: TxError };\r\n    export interface TokenInfo {\r\n      holderNumber: bigint;\r\n      deployTime: bigint;\r\n      metadata: Metadata;\r\n      historySize: bigint;\r\n      cycles: bigint;\r\n      feeTo: Principal;\r\n    }\r\n    export type TxError =\r\n      | { InsufficientAllowance: null }\r\n      | { InsufficientBalance: null }\r\n      | { ErrorOperationStyle: null }\r\n      | { Unauthorized: null }\r\n      | { LedgerTrap: null }\r\n      | { ErrorTo: null }\r\n      | { Other: null }\r\n      | { BlockUsed: null }\r\n      | { AmountTooSmall: null };\r\n    export interface Token {\r\n      allowance: (arg_0: Principal, arg_1: Principal) => Promise<bigint>;\r\n      approve: (arg_0: Principal, arg_1: bigint) => Promise<Result>;\r\n      balanceOf: (arg_0: Principal) => Promise<bigint>;\r\n      decimals: () => Promise<number>;\r\n      getAllowanceSize: () => Promise<bigint>;\r\n      getBlockUsed: () => Promise<Array<bigint>>;\r\n      getHolders: (\r\n        arg_0: bigint,\r\n        arg_1: bigint\r\n      ) => Promise<Array<[Principal, bigint]>>;\r\n      logo: () => Promise<string>;\r\n      getMetadata: () => Promise<Metadata>;\r\n      getTokenInfo: () => Promise<TokenInfo>;\r\n      getUserApprovals: (arg_0: Principal) => Promise<Array<[Principal, bigint]>>;\r\n      historySize: () => Promise<bigint>;\r\n      isBlockUsed: (arg_0: bigint) => Promise<boolean>;\r\n      mint: (arg_0: [] | [Array<number>], arg_1: bigint) => Promise<Result>;\r\n      name: () => Promise<string>;\r\n      owner: () => Promise<Principal>;\r\n      setFee: (arg_0: bigint) => Promise<undefined>;\r\n      setFeeTo: (arg_0: Principal) => Promise<undefined>;\r\n      setGenesis: () => Promise<Result>;\r\n      setLogo: (arg_0: string) => Promise<undefined>;\r\n      setName: (arg_0: string) => Promise<undefined>;\r\n      setOwner: (arg_0: Principal) => Promise<undefined>;\r\n      symbol: () => Promise<string>;\r\n      totalSupply: () => Promise<bigint>;\r\n      transfer: (arg_0: Principal, arg_1: bigint) => Promise<Result>;\r\n      transferFrom: (\r\n        arg_0: Principal,\r\n        arg_1: Principal,\r\n        arg_2: bigint\r\n      ) => Promise<Result>;\r\n      withdraw: (arg_0: bigint, arg_1: string) => Promise<Result>;\r\n    }\r\n    export type Factory = Token;\r\n\r\n    export const factory: IDL.InterfaceFactory = ({ IDL }) => {\r\n      const TxError = IDL.Variant({\r\n        InsufficientAllowance: IDL.Null,\r\n        InsufficientBalance: IDL.Null,\r\n        ErrorOperationStyle: IDL.Null,\r\n        Unauthorized: IDL.Null,\r\n        LedgerTrap: IDL.Null,\r\n        ErrorTo: IDL.Null,\r\n        Other: IDL.Null,\r\n        BlockUsed: IDL.Null,\r\n        AmountTooSmall: IDL.Null,\r\n      });\r\n      const Result = IDL.Variant({ Ok: IDL.Nat, Err: TxError });\r\n      const Metadata = IDL.Record({\r\n        fee: IDL.Nat,\r\n        decimals: IDL.Nat8,\r\n        owner: IDL.Principal,\r\n        logo: IDL.Text,\r\n        name: IDL.Text,\r\n        totalSupply: IDL.Nat,\r\n        symbol: IDL.Text,\r\n      });\r\n      const TokenInfo = IDL.Record({\r\n        holderNumber: IDL.Nat64,\r\n        deployTime: IDL.Nat64,\r\n        metadata: Metadata,\r\n        historySize: IDL.Nat64,\r\n        cycles: IDL.Nat64,\r\n        feeTo: IDL.Principal,\r\n      });\r\n      return IDL.Service({\r\n        allowance: IDL.Func([IDL.Principal, IDL.Principal], [IDL.Nat], ['query']),\r\n        approve: IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\r\n        balanceOf: IDL.Func([IDL.Principal], [IDL.Nat], []),\r\n        decimals: IDL.Func([], [IDL.Nat8], ['query']),\r\n        getAllowanceSize: IDL.Func([], [IDL.Nat64], ['query']),\r\n        getBlockUsed: IDL.Func([], [IDL.Vec(IDL.Nat64)], ['query']),\r\n        getHolders: IDL.Func(\r\n          [IDL.Nat64, IDL.Nat64],\r\n          [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat))],\r\n          ['query']\r\n        ),\r\n        logo: IDL.Func([], [IDL.Text], ['query']),\r\n        getMetadata: IDL.Func([], [Metadata], ['query']),\r\n        getTokenInfo: IDL.Func([], [TokenInfo], ['query']),\r\n        getUserApprovals: IDL.Func(\r\n          [IDL.Principal],\r\n          [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat))],\r\n          ['query']\r\n        ),\r\n        historySize: IDL.Func([], [IDL.Nat64], ['query']),\r\n        isBlockUsed: IDL.Func([IDL.Nat64], [IDL.Bool], ['query']),\r\n        mint: IDL.Func([IDL.Opt(IDL.Vec(IDL.Nat8)), IDL.Nat64], [Result], []),\r\n        name: IDL.Func([], [IDL.Text], ['query']),\r\n        owner: IDL.Func([], [IDL.Principal], ['query']),\r\n        setFee: IDL.Func([IDL.Nat], [], []),\r\n        setFeeTo: IDL.Func([IDL.Principal], [], []),\r\n        setGenesis: IDL.Func([], [Result], []),\r\n        setLogo: IDL.Func([IDL.Text], [], []),\r\n        setName: IDL.Func([IDL.Text], [], []),\r\n        setOwner: IDL.Func([IDL.Principal], [], []),\r\n        symbol: IDL.Func([], [IDL.Text], ['query']),\r\n        totalSupply: IDL.Func([], [IDL.Nat], ['query']),\r\n        transfer: IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\r\n        transferFrom: IDL.Func(\r\n          [IDL.Principal, IDL.Principal, IDL.Nat],\r\n          [Result],\r\n          []\r\n        ),\r\n        withdraw: IDL.Func([IDL.Nat64, IDL.Text], [Result], []),\r\n      });\r\n    };\r\n    export const YCfactory: IDL.InterfaceFactory = ({ IDL }) => {\r\n      const TxError = IDL.Variant({\r\n        InsufficientAllowance: IDL.Null,\r\n        InsufficientBalance: IDL.Null,\r\n        ErrorOperationStyle: IDL.Null,\r\n        Unauthorized: IDL.Null,\r\n        LedgerTrap: IDL.Null,\r\n        ErrorTo: IDL.Null,\r\n        Other: IDL.Null,\r\n        BlockUsed: IDL.Null,\r\n        AmountTooSmall: IDL.Null,\r\n      });\r\n      const Result = IDL.Variant({ Ok: IDL.Text, Err: TxError });\r\n      const Metadata = IDL.Record({\r\n        fee: IDL.Nat,\r\n        decimals: IDL.Nat8,\r\n        owner: IDL.Principal,\r\n        logo: IDL.Text,\r\n        name: IDL.Text,\r\n        totalSupply: IDL.Nat,\r\n        symbol: IDL.Text,\r\n      });\r\n      const TokenInfo = IDL.Record({\r\n        holderNumber: IDL.Nat64,\r\n        deployTime: IDL.Nat64,\r\n        metadata: Metadata,\r\n        historySize: IDL.Nat64,\r\n        cycles: IDL.Nat64,\r\n        feeTo: IDL.Principal,\r\n      });\r\n      return IDL.Service({\r\n        allowance: IDL.Func([IDL.Principal, IDL.Principal], [IDL.Nat], ['query']),\r\n        approve: IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\r\n        balanceOf: IDL.Func([IDL.Principal], [IDL.Nat], []),\r\n        decimals: IDL.Func([], [IDL.Nat8], ['query']),\r\n        getAllowanceSize: IDL.Func([], [IDL.Nat64], ['query']),\r\n        getBlockUsed: IDL.Func([], [IDL.Vec(IDL.Nat64)], ['query']),\r\n        getHolders: IDL.Func(\r\n          [IDL.Nat64, IDL.Nat64],\r\n          [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat))],\r\n          ['query']\r\n        ),\r\n        logo: IDL.Func([], [IDL.Text], ['query']),\r\n        getMetadata: IDL.Func([], [Metadata], ['query']),\r\n        getTokenInfo: IDL.Func([], [TokenInfo], ['query']),\r\n        getUserApprovals: IDL.Func(\r\n          [IDL.Principal],\r\n          [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat))],\r\n          ['query']\r\n        ),\r\n        historySize: IDL.Func([], [IDL.Nat64], ['query']),\r\n        isBlockUsed: IDL.Func([IDL.Nat64], [IDL.Bool], ['query']),\r\n        mint: IDL.Func([IDL.Opt(IDL.Vec(IDL.Nat8)), IDL.Nat64], [Result], []),\r\n        name: IDL.Func([], [IDL.Text], ['query']),\r\n        owner: IDL.Func([], [IDL.Principal], ['query']),\r\n        setFee: IDL.Func([IDL.Nat], [], []),\r\n        setFeeTo: IDL.Func([IDL.Principal], [], []),\r\n        setGenesis: IDL.Func([], [Result], []),\r\n        setLogo: IDL.Func([IDL.Text], [], []),\r\n        setName: IDL.Func([IDL.Text], [], []),\r\n        setOwner: IDL.Func([IDL.Principal], [], []),\r\n        symbol: IDL.Func([], [IDL.Text], ['query']),\r\n        totalSupply: IDL.Func([], [IDL.Nat], ['query']),\r\n        transfer: IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\r\n        transferFrom: IDL.Func(\r\n          [IDL.Principal, IDL.Principal, IDL.Nat],\r\n          [Result],\r\n          []\r\n        ),\r\n        withdraw: IDL.Func([IDL.Nat64, IDL.Text], [Result], []),\r\n      });\r\n    };\r\n  };\r\n\r\n  export namespace ICRC1 {\r\n    export interface Account { owner: Principal, subaccount: [] | [Array<number>] };\r\n    export interface ArchivedTransactionRange { callback: [Principal, string], start: bigint, length: bigint };\r\n    export interface Burn { from: Account, memo: [] | [Array<number>], created_at_time: [] | [bigint], amount: bigint };\r\n    export interface GetTransactionsRequest { start: bigint, length: bigint };\r\n    export interface GetTransactionsResponse {\r\n      first_index: bigint, log_length: bigint, transactions: Array<Transaction>,\r\n      archived_transactions: Array<ArchivedTransactionRange>,\r\n    };\r\n    export interface HttpRequest { url: string, method: string, body: Array<number>, headers: Array<[string, string]> };\r\n    export interface HttpResponse { body: Array<number>, headers: Array<[string, string]>, status_code: number };\r\n    export interface Mint { to: Account, memo: [] | [Array<number>], created_at_time: [] | [bigint], amount: bigint };\r\n    export type Result = { Ok: bigint } | { Err: TransferError };\r\n    export interface StandardRecord { url: string, name: string };\r\n    export interface Transaction {\r\n      burn: [] | [Burn], kind: string, mint: [] | [Mint],\r\n      timestamp: bigint, transfer: [] | [Transfer]\r\n    };\r\n    export interface Transfer {\r\n      to: Account, fee: [] | [bigint], from: Account, memo: [] | [Array<number>],\r\n      created_at_time: [] | [bigint], amount: bigint,\r\n    };\r\n    export interface TransferArg {\r\n      to: Account, fee: [] | [bigint], memo: [] | [Array<number>],\r\n      from_subaccount: [] | [Array<number>], created_at_time: [] | [bigint], amount: bigint\r\n    };\r\n    export type TransferError = {\r\n      GenericError: { message: string, error_code: bigint }\r\n    } |\r\n    { TemporarilyUnavailable: null } |\r\n    { BadBurn: { min_burn_amount: bigint } } |\r\n    { Duplicate: { duplicate_of: bigint } } |\r\n    { BadFee: { expected_fee: bigint } } |\r\n    { CreatedInFuture: { ledger_time: bigint } } |\r\n    { TooOld: null } |\r\n    { InsufficientFunds: { balance: bigint } };\r\n    export type Value = { Int: bigint } | { Nat: bigint } | { Blob: Array<number> } | { Text: string };\r\n\r\n    export interface Token {\r\n      get_transactions: (arg_0: GetTransactionsRequest) => Promise<GetTransactionsResponse>,\r\n      http_request: (arg_0: HttpRequest) => Promise<HttpResponse>,\r\n      icrc1_balance_of: (arg_0: Account) => Promise<bigint>,\r\n      icrc1_decimals: () => Promise<number>,\r\n      icrc1_fee: () => Promise<bigint>,\r\n      icrc1_metadata: () => Promise<Array<[string, Value]>>,\r\n      icrc1_minting_account: () => Promise<[] | [Account]>,\r\n      icrc1_name: () => Promise<string>,\r\n      icrc1_supported_standards: () => Promise<Array<StandardRecord>>,\r\n      icrc1_symbol: () => Promise<string>,\r\n      icrc1_total_supply: () => Promise<bigint>,\r\n      icrc1_transfer: (arg_0: TransferArg) => Promise<Result>,\r\n    };\r\n    export type Factory = Token;\r\n    export const factory: IDL.InterfaceFactory = ({ IDL }) => {\r\n      const GetTransactionsRequest = IDL.Record({ start: IDL.Nat, length: IDL.Nat });\r\n      const Account = IDL.Record({ owner: IDL.Principal, subaccount: IDL.Opt(IDL.Vec(IDL.Nat8)) });\r\n      const Burn = IDL.Record({\r\n        from: Account, memo: IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n        created_at_time: IDL.Opt(IDL.Nat64), amount: IDL.Nat\r\n      });\r\n      const Mint = IDL.Record({\r\n        to: Account, memo: IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n        created_at_time: IDL.Opt(IDL.Nat64), amount: IDL.Nat\r\n      });\r\n      const Transfer = IDL.Record({\r\n        to: Account, fee: IDL.Opt(IDL.Nat), from: Account, memo: IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n        created_at_time: IDL.Opt(IDL.Nat64), amount: IDL.Nat,\r\n      });\r\n      const Transaction = IDL.Record({\r\n        burn: IDL.Opt(Burn), kind: IDL.Text, mint: IDL.Opt(Mint), timestamp: IDL.Nat64,\r\n        transfer: IDL.Opt(Transfer),\r\n      });\r\n      const ArchivedTransactionRange = IDL.Record({\r\n        callback: IDL.Func( [GetTransactionsRequest],\r\n          [IDL.Record({ transactions: IDL.Vec(Transaction) })],['query'],\r\n        ),\r\n        start: IDL.Nat, length: IDL.Nat,\r\n      });\r\n\r\n      const GetTransactionsResponse = IDL.Record({ \r\n        first_index: IDL.Nat, log_length: IDL.Nat, transactions: IDL.Vec(Transaction),\r\n        archived_transactions: IDL.Vec(ArchivedTransactionRange),\r\n      });\r\n      const HttpRequest = IDL.Record({\r\n        url: IDL.Text, method: IDL.Text,body: IDL.Vec(IDL.Nat8), headers: IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\r\n      });\r\n      const HttpResponse = IDL.Record({\r\n        body: IDL.Vec(IDL.Nat8), headers: IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)), status_code: IDL.Nat16,\r\n      });\r\n      const Value = IDL.Variant({ Int: IDL.Int, Nat: IDL.Nat, Blob: IDL.Vec(IDL.Nat8), Text: IDL.Text});\r\n      const StandardRecord = IDL.Record({ url: IDL.Text, name: IDL.Text });\r\n\r\n      const TransferArg = IDL.Record({\r\n        to: Account, fee: IDL.Opt(IDL.Nat), memo: IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n        from_subaccount: IDL.Opt(IDL.Vec(IDL.Nat8)),created_at_time: IDL.Opt(IDL.Nat64), amount: IDL.Nat,\r\n      });\r\n       \r\n      const TransferError = IDL.Variant({\r\n        GenericError: IDL.Record({  message: IDL.Text,   error_code: IDL.Nat }),\r\n        TemporarilyUnavailable: IDL.Null,\r\n        BadBurn: IDL.Record({ min_burn_amount: IDL.Nat }),\r\n        Duplicate: IDL.Record({ duplicate_of: IDL.Nat }),\r\n        BadFee: IDL.Record({ expected_fee: IDL.Nat }),\r\n        CreatedInFuture: IDL.Record({ ledger_time: IDL.Nat64 }),\r\n        TooOld: IDL.Null,\r\n        InsufficientFunds: IDL.Record({ balance: IDL.Nat }),\r\n      });\r\n      const Result = IDL.Variant({ Ok: IDL.Nat, Err: TransferError });\r\n      return IDL.Service({\r\n        get_transactions: IDL.Func( [GetTransactionsRequest], [GetTransactionsResponse],['query']),\r\n        http_request: IDL.Func([HttpRequest], [HttpResponse], ['query']),\r\n        icrc1_balance_of: IDL.Func([Account], [IDL.Nat], ['query']),\r\n        icrc1_decimals: IDL.Func([], [IDL.Nat8], ['query']),\r\n        icrc1_fee: IDL.Func([], [IDL.Nat], ['query']),\r\n        icrc1_metadata: IDL.Func( [], [IDL.Vec(IDL.Tuple(IDL.Text, Value))],['query'] ),\r\n        icrc1_minting_account: IDL.Func([], [IDL.Opt(Account)], ['query']),\r\n        icrc1_name: IDL.Func([], [IDL.Text], ['query']),\r\n        icrc1_supported_standards: IDL.Func( [],[IDL.Vec(StandardRecord)],['query']),\r\n        icrc1_symbol: IDL.Func([], [IDL.Text], ['query']),\r\n        icrc1_total_supply: IDL.Func([], [IDL.Nat], ['query']),\r\n        icrc1_transfer: IDL.Func([TransferArg], [Result], []),\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { IDL } from '@dfinity/candid';\r\nimport type { Principal } from '@dfinity/principal';\r\n\r\nexport namespace XTCIDL {\r\n  export type BurnError =\r\n    | { InsufficientBalance: null }\r\n    | { InvalidTokenContract: null }\r\n    | { NotSufficientLiquidity: null };\r\n  export type BurnResult = { Ok: TransactionId } | { Err: BurnError };\r\n  export type CreateResult =\r\n    | { Ok: { canister_id: Principal } }\r\n    | { Err: string };\r\n  export interface Event {\r\n    fee: bigint;\r\n    status: TransactionStatus;\r\n    kind: EventDetail;\r\n    cycles: bigint;\r\n    timestamp: bigint;\r\n  }\r\n  export type EventDetail =\r\n    | {\r\n        Approve: { to: Principal; from: Principal };\r\n      }\r\n    | { Burn: { to: Principal; from: Principal } }\r\n    | { Mint: { to: Principal } }\r\n    | { CanisterCreated: { from: Principal; canister: Principal } }\r\n    | {\r\n        CanisterCalled: {\r\n          from: Principal;\r\n          method_name: string;\r\n          canister: Principal;\r\n        };\r\n      }\r\n    | { Transfer: { to: Principal; from: Principal } }\r\n    | {\r\n        TransferFrom: {\r\n          to: Principal;\r\n          from: Principal;\r\n          caller: Principal;\r\n        };\r\n      };\r\n  export interface EventsConnection {\r\n    data: Array<Event>;\r\n    next_offset: TransactionId;\r\n    next_canister_id: [] | [Principal];\r\n  }\r\n  export interface Metadata {\r\n    fee: bigint;\r\n    decimals: number;\r\n    owner: Principal;\r\n    logo: string;\r\n    name: string;\r\n    totalSupply: bigint;\r\n    symbol: string;\r\n  }\r\n  export type MintError = { NotSufficientLiquidity: null };\r\n  export type MintResult = { Ok: TransactionId } | { Err: MintError };\r\n  export type Operation =\r\n    | { transferFrom: null }\r\n    | { burn: null }\r\n    | { mint: null }\r\n    | { approve: null }\r\n    | { canisterCalled: null }\r\n    | { transfer: null }\r\n    | { canisterCreated: null };\r\n  export type ResultCall = { Ok: { return: Array<number> } } | { Err: string };\r\n  export type ResultSend = { Ok: null } | { Err: string };\r\n  export interface Stats {\r\n    fee: bigint;\r\n    transfers_count: bigint;\r\n    balance: bigint;\r\n    mints_count: bigint;\r\n    transfers_from_count: bigint;\r\n    canisters_created_count: bigint;\r\n    supply: bigint;\r\n    burns_count: bigint;\r\n    approvals_count: bigint;\r\n    proxy_calls_count: bigint;\r\n    history_events: bigint;\r\n  }\r\n  export type Time = bigint;\r\n  export type TransactionId = bigint;\r\n  export type TransactionStatus = { FAILED: null } | { SUCCEEDED: null };\r\n  export type TxError =\r\n    | { NotifyDfxFailed: null }\r\n    | { InsufficientAllowance: null }\r\n    | { UnexpectedCyclesResponse: null }\r\n    | { InsufficientBalance: null }\r\n    | { InsufficientXTCFee: null }\r\n    | { ErrorOperationStyle: null }\r\n    | { Unauthorized: null }\r\n    | { LedgerTrap: null }\r\n    | { ErrorTo: null }\r\n    | { Other: null }\r\n    | { FetchRateFailed: null }\r\n    | { BlockUsed: null }\r\n    | { AmountTooSmall: null };\r\n  export type TxReceipt = { Ok: bigint } | { Err: TxError };\r\n  export type TxReceiptLegacy =\r\n    | { Ok: bigint }\r\n    | {\r\n        Err: { InsufficientAllowance: null } | { InsufficientBalance: null };\r\n      };\r\n  export interface TxRecord {\r\n    op: Operation;\r\n    to: Principal;\r\n    fee: bigint;\r\n    status: TransactionStatus;\r\n    from: Principal;\r\n    timestamp: Time;\r\n    caller: [] | [Principal];\r\n    index: bigint;\r\n    amount: bigint;\r\n  }\r\n  export interface _SERVICE {\r\n    allowance: (arg_0: Principal, arg_1: Principal) => Promise<bigint>;\r\n    approve: (arg_0: Principal, arg_1: bigint) => Promise<TxReceipt>;\r\n    balance: (arg_0: [] | [Principal]) => Promise<bigint>;\r\n    balanceOf: (arg_0: Principal) => Promise<bigint>;\r\n    burn: (arg_0: {\r\n      canister_id: Principal;\r\n      amount: bigint;\r\n    }) => Promise<BurnResult>;\r\n    decimals: () => Promise<number>;\r\n    events: (arg_0: {\r\n      offset: [] | [bigint];\r\n      limit: number;\r\n    }) => Promise<EventsConnection>;\r\n    getBlockUsed: () => Promise<Array<bigint>>;\r\n    getMetadata: () => Promise<Metadata>;\r\n    getTransaction: (arg_0: bigint) => Promise<TxRecord>;\r\n    getTransactions: (arg_0: bigint, arg_1: bigint) => Promise<Array<TxRecord>>;\r\n    get_map_block_used: (arg_0: bigint) => Promise<[] | [bigint]>;\r\n    get_transaction: (arg_0: TransactionId) => Promise<[] | [Event]>;\r\n    halt: () => Promise<undefined>;\r\n    historySize: () => Promise<bigint>;\r\n    isBlockUsed: (arg_0: bigint) => Promise<boolean>;\r\n    logo: () => Promise<string>;\r\n    mint: (arg_0: Principal, arg_1: bigint) => Promise<MintResult>;\r\n    mint_by_icp: (\r\n      arg_0: [] | [Array<number>],\r\n      arg_1: bigint\r\n    ) => Promise<TxReceipt>;\r\n    name: () => Promise<string>;\r\n    nameErc20: () => Promise<string>;\r\n    stats: () => Promise<Stats>;\r\n    symbol: () => Promise<string>;\r\n    totalSupply: () => Promise<bigint>;\r\n    transfer: (arg_0: Principal, arg_1: bigint) => Promise<TxReceipt>;\r\n    transferErc20: (\r\n      arg_0: Principal,\r\n      arg_1: bigint\r\n    ) => Promise<TxReceiptLegacy>;\r\n    transferFrom: (\r\n      arg_0: Principal,\r\n      arg_1: Principal,\r\n      arg_2: bigint\r\n    ) => Promise<TxReceipt>;\r\n    wallet_balance: () => Promise<{ amount: bigint }>;\r\n    wallet_call: (arg_0: {\r\n      args: Array<number>;\r\n      cycles: bigint;\r\n      method_name: string;\r\n      canister: Principal;\r\n    }) => Promise<ResultCall>;\r\n    wallet_create_canister: (arg_0: {\r\n      controller: [] | [Principal];\r\n      cycles: bigint;\r\n    }) => Promise<CreateResult>;\r\n    wallet_create_wallet: (arg_0: {\r\n      controller: [] | [Principal];\r\n      cycles: bigint;\r\n    }) => Promise<CreateResult>;\r\n    wallet_send: (arg_0: {\r\n      canister: Principal;\r\n      amount: bigint;\r\n    }) => Promise<ResultSend>;\r\n  }\r\n\r\n  export const factory: IDL.InterfaceFactory = ({ IDL }) => {\r\n    const TxError = IDL.Variant({\r\n      NotifyDfxFailed: IDL.Null,\r\n      InsufficientAllowance: IDL.Null,\r\n      UnexpectedCyclesResponse: IDL.Null,\r\n      InsufficientBalance: IDL.Null,\r\n      InsufficientXTCFee: IDL.Null,\r\n      ErrorOperationStyle: IDL.Null,\r\n      Unauthorized: IDL.Null,\r\n      LedgerTrap: IDL.Null,\r\n      ErrorTo: IDL.Null,\r\n      Other: IDL.Null,\r\n      FetchRateFailed: IDL.Null,\r\n      BlockUsed: IDL.Null,\r\n      AmountTooSmall: IDL.Null,\r\n    });\r\n    const TxReceipt = IDL.Variant({ Ok: IDL.Nat, Err: TxError });\r\n    const TransactionId = IDL.Nat64;\r\n    const BurnError = IDL.Variant({\r\n      InsufficientBalance: IDL.Null,\r\n      InvalidTokenContract: IDL.Null,\r\n      NotSufficientLiquidity: IDL.Null,\r\n    });\r\n    const BurnResult = IDL.Variant({ Ok: TransactionId, Err: BurnError });\r\n    const TransactionStatus = IDL.Variant({\r\n      FAILED: IDL.Null,\r\n      SUCCEEDED: IDL.Null,\r\n    });\r\n    const EventDetail = IDL.Variant({\r\n      Approve: IDL.Record({ to: IDL.Principal, from: IDL.Principal }),\r\n      Burn: IDL.Record({ to: IDL.Principal, from: IDL.Principal }),\r\n      Mint: IDL.Record({ to: IDL.Principal }),\r\n      CanisterCreated: IDL.Record({\r\n        from: IDL.Principal,\r\n        canister: IDL.Principal,\r\n      }),\r\n      CanisterCalled: IDL.Record({\r\n        from: IDL.Principal,\r\n        method_name: IDL.Text,\r\n        canister: IDL.Principal,\r\n      }),\r\n      Transfer: IDL.Record({ to: IDL.Principal, from: IDL.Principal }),\r\n      TransferFrom: IDL.Record({\r\n        to: IDL.Principal,\r\n        from: IDL.Principal,\r\n        caller: IDL.Principal,\r\n      }),\r\n    });\r\n    const Event = IDL.Record({\r\n      fee: IDL.Nat64,\r\n      status: TransactionStatus,\r\n      kind: EventDetail,\r\n      cycles: IDL.Nat64,\r\n      timestamp: IDL.Nat64,\r\n    });\r\n    const EventsConnection = IDL.Record({\r\n      data: IDL.Vec(Event),\r\n      next_offset: TransactionId,\r\n      next_canister_id: IDL.Opt(IDL.Principal),\r\n    });\r\n    const Metadata = IDL.Record({\r\n      fee: IDL.Nat,\r\n      decimals: IDL.Nat8,\r\n      owner: IDL.Principal,\r\n      logo: IDL.Text,\r\n      name: IDL.Text,\r\n      totalSupply: IDL.Nat,\r\n      symbol: IDL.Text,\r\n    });\r\n    const Operation = IDL.Variant({\r\n      transferFrom: IDL.Null,\r\n      burn: IDL.Null,\r\n      mint: IDL.Null,\r\n      approve: IDL.Null,\r\n      canisterCalled: IDL.Null,\r\n      transfer: IDL.Null,\r\n      canisterCreated: IDL.Null,\r\n    });\r\n    const Time = IDL.Int;\r\n    const TxRecord = IDL.Record({\r\n      op: Operation,\r\n      to: IDL.Principal,\r\n      fee: IDL.Nat,\r\n      status: TransactionStatus,\r\n      from: IDL.Principal,\r\n      timestamp: Time,\r\n      caller: IDL.Opt(IDL.Principal),\r\n      index: IDL.Nat,\r\n      amount: IDL.Nat,\r\n    });\r\n    const MintError = IDL.Variant({ NotSufficientLiquidity: IDL.Null });\r\n    const MintResult = IDL.Variant({ Ok: TransactionId, Err: MintError });\r\n    const Stats = IDL.Record({\r\n      fee: IDL.Nat,\r\n      transfers_count: IDL.Nat64,\r\n      balance: IDL.Nat64,\r\n      mints_count: IDL.Nat64,\r\n      transfers_from_count: IDL.Nat64,\r\n      canisters_created_count: IDL.Nat64,\r\n      supply: IDL.Nat,\r\n      burns_count: IDL.Nat64,\r\n      approvals_count: IDL.Nat64,\r\n      proxy_calls_count: IDL.Nat64,\r\n      history_events: IDL.Nat64,\r\n    });\r\n    const TxReceiptLegacy = IDL.Variant({\r\n      Ok: IDL.Nat,\r\n      Err: IDL.Variant({\r\n        InsufficientAllowance: IDL.Null,\r\n        InsufficientBalance: IDL.Null,\r\n      }),\r\n    });\r\n    const ResultCall = IDL.Variant({\r\n      Ok: IDL.Record({ return: IDL.Vec(IDL.Nat8) }),\r\n      Err: IDL.Text,\r\n    });\r\n    const CreateResult = IDL.Variant({\r\n      Ok: IDL.Record({ canister_id: IDL.Principal }),\r\n      Err: IDL.Text,\r\n    });\r\n    const ResultSend = IDL.Variant({ Ok: IDL.Null, Err: IDL.Text });\r\n    return IDL.Service({\r\n      allowance: IDL.Func([IDL.Principal, IDL.Principal], [IDL.Nat], ['query']),\r\n      approve: IDL.Func([IDL.Principal, IDL.Nat], [TxReceipt], []),\r\n      balance: IDL.Func([IDL.Opt(IDL.Principal)], [IDL.Nat64], []),\r\n      balanceOf: IDL.Func([IDL.Principal], [IDL.Nat], ['query']),\r\n      burn: IDL.Func(\r\n        [IDL.Record({ canister_id: IDL.Principal, amount: IDL.Nat64 })],\r\n        [BurnResult],\r\n        []\r\n      ),\r\n      decimals: IDL.Func([], [IDL.Nat8], ['query']),\r\n      events: IDL.Func(\r\n        [IDL.Record({ offset: IDL.Opt(IDL.Nat64), limit: IDL.Nat16 })],\r\n        [EventsConnection],\r\n        ['query']\r\n      ),\r\n      getBlockUsed: IDL.Func([], [IDL.Vec(IDL.Nat64)], ['query']),\r\n      getMetadata: IDL.Func([], [Metadata], ['query']),\r\n      getTransaction: IDL.Func([IDL.Nat], [TxRecord], []),\r\n      getTransactions: IDL.Func([IDL.Nat, IDL.Nat], [IDL.Vec(TxRecord)], []),\r\n      get_map_block_used: IDL.Func(\r\n        [IDL.Nat64],\r\n        [IDL.Opt(IDL.Nat64)],\r\n        ['query']\r\n      ),\r\n      get_transaction: IDL.Func([TransactionId], [IDL.Opt(Event)], []),\r\n      halt: IDL.Func([], [], []),\r\n      historySize: IDL.Func([], [IDL.Nat], ['query']),\r\n      isBlockUsed: IDL.Func([IDL.Nat64], [IDL.Bool], ['query']),\r\n      logo: IDL.Func([], [IDL.Text], ['query']),\r\n      mint: IDL.Func([IDL.Principal, IDL.Nat], [MintResult], []),\r\n      mint_by_icp: IDL.Func(\r\n        [IDL.Opt(IDL.Vec(IDL.Nat8)), IDL.Nat64],\r\n        [TxReceipt],\r\n        []\r\n      ),\r\n      name: IDL.Func([], [IDL.Text], ['query']),\r\n      nameErc20: IDL.Func([], [IDL.Text], ['query']),\r\n      stats: IDL.Func([], [Stats], ['query']),\r\n      symbol: IDL.Func([], [IDL.Text], ['query']),\r\n      totalSupply: IDL.Func([], [IDL.Nat], ['query']),\r\n      transfer: IDL.Func([IDL.Principal, IDL.Nat], [TxReceipt], []),\r\n      transferErc20: IDL.Func([IDL.Principal, IDL.Nat], [TxReceiptLegacy], []),\r\n      transferFrom: IDL.Func(\r\n        [IDL.Principal, IDL.Principal, IDL.Nat],\r\n        [TxReceipt],\r\n        []\r\n      ),\r\n      wallet_balance: IDL.Func(\r\n        [],\r\n        [IDL.Record({ amount: IDL.Nat64 })],\r\n        ['query']\r\n      ),\r\n      wallet_call: IDL.Func(\r\n        [\r\n          IDL.Record({\r\n            args: IDL.Vec(IDL.Nat8),\r\n            cycles: IDL.Nat64,\r\n            method_name: IDL.Text,\r\n            canister: IDL.Principal,\r\n          }),\r\n        ],\r\n        [ResultCall],\r\n        []\r\n      ),\r\n      wallet_create_canister: IDL.Func(\r\n        [\r\n          IDL.Record({\r\n            controller: IDL.Opt(IDL.Principal),\r\n            cycles: IDL.Nat64,\r\n          }),\r\n        ],\r\n        [CreateResult],\r\n        []\r\n      ),\r\n      wallet_create_wallet: IDL.Func(\r\n        [\r\n          IDL.Record({\r\n            controller: IDL.Opt(IDL.Principal),\r\n            cycles: IDL.Nat64,\r\n          }),\r\n        ],\r\n        [CreateResult],\r\n        []\r\n      ),\r\n      wallet_send: IDL.Func(\r\n        [IDL.Record({ canister: IDL.Principal, amount: IDL.Nat64 })],\r\n        [ResultSend],\r\n        []\r\n      ),\r\n    });\r\n  };\r\n}\r\n","export * from './use-all-pairs';\r\nexport * from './use-balances';\r\nexport * from './use-query';\r\nexport * from './use-token-allowance';\r\nexport * from './use-token-balance';\r\nexport * from './use-token-logos-fetcher-init';\r\nexport * from './use-token-selection-detector';\r\nexport * from './use-user-metrics';\r\nexport * from './use-network-error-notifications';\r\nexport * from './use-header-resize-effect';\r\nexport * from './use-token-fee'","import { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { getswapActor } from '@/utils/canisterDriver'\r\n\r\n\r\nimport { FeatureState, swapCanisterActions, useKeepSync, useSwapCanisterStore } from '@/store';\r\nimport { AppLog } from '@/utils';\r\nimport { parseResponseAllPairs } from '@/utils/canister';\r\n\r\nexport const useAllPairs = () => {\r\n  const dispatch = useDispatch();\r\n  const { allPairsState, allPairs } = useSwapCanisterStore();\r\n\r\n  const getAllPairs = useKeepSync('getAllPairs',\r\n    useCallback(async (isRefreshing?: boolean) => {\r\n      try {\r\n        if (allPairsState !== FeatureState.Loading) {\r\n          dispatch(swapCanisterActions.setAllPairsState(isRefreshing ? FeatureState.Updating : FeatureState.Loading));\r\n          const swapActor = await getswapActor(true);\r\n          var response = await swapActor.getAllPairs();\r\n          if (response) {\r\n            dispatch(swapCanisterActions.setAllPairs(parseResponseAllPairs(response)));\r\n          } else {\r\n            throw new Error('No \"getAllPairs\" response');\r\n          }\r\n          dispatch(swapCanisterActions.setAllPairsState(FeatureState.Idle));\r\n        }\r\n      } catch (error) {\r\n        AppLog.error(`All pairs fetch error`, error);\r\n        dispatch(swapCanisterActions.setAllPairsState(FeatureState.Error));\r\n      }\r\n    },[dispatch, allPairsState]),{ interval: 25 * 1000 }\r\n  );\r\n\r\n  const directGetAllPairs = async()=>{\r\n    try {\r\n      if (allPairsState !== FeatureState.Loading) {\r\n        dispatch(swapCanisterActions.setAllPairsState(FeatureState.Updating ));\r\n        const swapActor = await getswapActor(true);\r\n        var response = await swapActor.getAllPairs();\r\n        if (response) {\r\n          dispatch(swapCanisterActions.setAllPairs(parseResponseAllPairs(response)));\r\n        } else {\r\n          throw new Error('No \"getAllPairs\" response');\r\n        }\r\n        dispatch(swapCanisterActions.setAllPairsState(FeatureState.Idle));\r\n      }\r\n    } catch (error) {\r\n      AppLog.error(`All pairs fetch error`, error);\r\n      dispatch(swapCanisterActions.setAllPairsState(FeatureState.Error));\r\n    }\r\n  }\r\n\r\n  return { allPairs, allPairsState, getAllPairs , directGetAllPairs };\r\n};\r\n\r\n","import { Principal } from '@dfinity/principal';\r\nimport { useCallback, useMemo } from 'react';\r\n\r\nimport { ICP_METADATA } from '@/constants';\r\n\r\nimport { Balances } from '@/models';\r\nimport {\r\n  FeatureState, swapCanisterActions, useAppDispatch,\r\n  usePlugStore, useSwapCanisterStore,\r\n} from '@/store';\r\n\r\nimport { useKeepSync } from '@/store/features/keep-sync';\r\nimport { AppLog } from '@/utils';\r\nimport { parseResponseUserLPBalances } from '@/utils/canister';\r\n\r\nimport { parseAmount, roundBigInt } from '@/utils/format';\r\nimport { fetchICPBalance } from '@/utils/icp';\r\n\r\nimport { getswapActor, getTokenBalance, tokenList } from '@/utils'\r\n\r\nexport const useBalances = () => {\r\n  const { principalId } = usePlugStore();\r\n  const { sonicBalances, icpBalance, tokenBalances, balancesState, userLPBalancesState } = useSwapCanisterStore();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const getUserPositiveLPBalances = useKeepSync('getUserPositiveLPBalances',\r\n    useCallback(\r\n      async (isRefreshing?: boolean) => {\r\n        try {\r\n          if (userLPBalancesState === FeatureState.Loading) return;\r\n          dispatch(swapCanisterActions.setUserLPBalancesState(isRefreshing ? FeatureState.Updating : FeatureState.Loading));\r\n          if (!principalId) throw new Error('Principal ID not found');\r\n\r\n          const swapActor = await getswapActor(true);\r\n          const response = await swapActor.getUserLPBalancesAbove(Principal.fromText(principalId), BigInt(0));\r\n\r\n          if (response) {\r\n            dispatch(swapCanisterActions.setUserLPBalances(parseResponseUserLPBalances(response)));\r\n          } else {\r\n            throw new Error('No \"getUserLPBalancesAbove\" response');\r\n          }\r\n          dispatch(swapCanisterActions.setUserLPBalancesState(FeatureState.Idle));\r\n        } catch (error) {\r\n          AppLog.error(`User LP balances fetch error`, error);\r\n          // dispatch(swapCanisterActions.setUserLPBalancesState(FeatureState.Error));\r\n        }\r\n      },\r\n      [userLPBalancesState, principalId, dispatch]\r\n    )\r\n  );\r\n  const maxDecimalPlaces = 5;\r\n  const getBalances = useKeepSync('getBalances', useCallback(async (isRefreshing?: boolean) => {\r\n      try {\r\n        if (balancesState === FeatureState.Loading) return;\r\n        if (!principalId) return;\r\n        const tokenInfo = tokenList('obj');\r\n        dispatch(swapCanisterActions.setBalancesState(isRefreshing ? FeatureState.Updating : FeatureState.Loading));\r\n        const swapActor: any = await getswapActor(true);\r\n        const sonicBalances = await swapActor.getUserBalances(Principal.fromText(principalId));\r\n        const tokenBalances = sonicBalances ? await Promise.all(\r\n          sonicBalances.map(async (balance: any, index: number) => {\r\n            const tokenCanisterId = balance[0];\r\n           var tokenFeeLen = tokenInfo[tokenCanisterId]?.fee.toString().length;\r\n            var tokenDecimals = tokenInfo[tokenCanisterId].decimals;\r\n            sonicBalances[index][1] = roundBigInt(sonicBalances[index][1], tokenDecimals, tokenFeeLen>maxDecimalPlaces?tokenFeeLen:maxDecimalPlaces );\r\n            try {\r\n              var tokenBalance = BigInt(0);\r\n              tokenBalance = await getTokenBalance(tokenCanisterId, principalId);\r\n              const result: [string, bigint] = [balance[0], roundBigInt(tokenBalance, tokenDecimals, tokenFeeLen>maxDecimalPlaces?tokenFeeLen:maxDecimalPlaces)];\r\n              return result;\r\n            } catch (error) {\r\n              AppLog.error(`Token balance fetch error: token=\"${tokenCanisterId}\"`, error);\r\n              const errorResult: [string, bigint] = [balance[0], BigInt(0)];\r\n              return errorResult;\r\n            }\r\n          })\r\n        ) : undefined;\r\n        const icpBalance = await fetchICPBalance(principalId);\r\n        dispatch(swapCanisterActions.setICPBalance(parseAmount(icpBalance, ICP_METADATA.decimals)));\r\n        dispatch(swapCanisterActions.setSonicBalances(sonicBalances));\r\n        dispatch(swapCanisterActions.setTokenBalances(tokenBalances));\r\n        dispatch(swapCanisterActions.setBalancesState(FeatureState.Idle));\r\n      } catch (error) {\r\n        AppLog.error(`Balances fetch error`, error);\r\n        dispatch(swapCanisterActions.setBalancesState(FeatureState.Error));\r\n      }\r\n    },[principalId, dispatch, balancesState]), { interval: 10 * 1000 }\r\n  );\r\n\r\n  const totalBalances = useMemo(() => {\r\n    if (tokenBalances && sonicBalances) {\r\n      return sumBalances(tokenBalances, sonicBalances, { [ICP_METADATA.id]: icpBalance ?? 0 });\r\n    }\r\n    return undefined;\r\n  }, [tokenBalances, sonicBalances, icpBalance]);\r\n\r\n  return {\r\n    totalBalances, sonicBalances, tokenBalances, icpBalance, balancesState,\r\n    userLPBalancesState, getBalances, getUserPositiveLPBalances,\r\n  };\r\n};\r\n\r\nconst sumBalances = (...balances: Balances[]): Balances => {\r\n  return balances.reduce((acc, current) => {\r\n    const balance = Object.entries(current);\r\n    balance.forEach(([canisterId, amount]) => {\r\n      if (acc[canisterId]) {\r\n        acc[canisterId] += amount;\r\n      } else {\r\n        acc[canisterId] = amount;\r\n      }\r\n    });\r\n    return acc;\r\n  }, {} as Balances);\r\n};\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { MINT_AUTO_NOTIFICATION_TITLES } from '@/notifications';\r\nimport {\r\n  modalsSliceActions,\r\n  NotificationState,\r\n  NotificationType,\r\n  useAppDispatch,\r\n  useNotificationStore,\r\n  usePlugStore,\r\n} from '@/store';\r\nimport {\r\n  getFromStorage,\r\n  LocalStorageKey,\r\n  MintUncompleteBlockHeights,\r\n} from '@/utils';\r\n\r\nexport const useBlockHeightsInit = () => {\r\n  const [notificationId] = useState(String(new Date().getTime()));\r\n  const { isConnected, principalId } = usePlugStore();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    const totalBlockHeightsWICP = getFromStorage(\r\n      LocalStorageKey.MintWICPUncompleteBlockHeights\r\n    ) as MintUncompleteBlockHeights | undefined;\r\n    const totalBlockHeightsXTC = getFromStorage(\r\n      LocalStorageKey.MintXTCUncompleteBlockHeights\r\n    ) as MintUncompleteBlockHeights | undefined;\r\n\r\n    if (principalId) {\r\n      const blockHeightsXTC = totalBlockHeightsXTC?.[principalId];\r\n      const blockHeightsWICP = totalBlockHeightsWICP?.[principalId];\r\n\r\n      if (blockHeightsWICP || blockHeightsXTC) {\r\n        const totalLength =\r\n          (blockHeightsWICP?.length ?? 0) + (blockHeightsXTC?.length ?? 0);\r\n\r\n        if (blockHeightsWICP) {\r\n          dispatch(\r\n            modalsSliceActions.setMintWICPUncompleteBlockHeights(\r\n              blockHeightsWICP\r\n            )\r\n          );\r\n        }\r\n        if (blockHeightsXTC) {\r\n          dispatch(\r\n            modalsSliceActions.setMintXTCUncompleteBlockHeights(blockHeightsXTC)\r\n          );\r\n        }\r\n\r\n        if (totalLength >= 1 && isConnected) {\r\n          addNotification({\r\n            id: notificationId,\r\n            title: MINT_AUTO_NOTIFICATION_TITLES[NotificationState.Error],\r\n            type: NotificationType.MintAuto,\r\n            state: NotificationState.Error,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!isConnected || !principalId) {\r\n      popNotification(notificationId);\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isConnected, principalId]);\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nexport const useHeaderResizeEffect = (\r\n  callback: (element: HTMLElement) => void\r\n) => {\r\n  useEffect(() => {\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      const header = document.getElementById('header');\r\n      if (header) {\r\n        callback(header);\r\n      }\r\n    });\r\n    const target = document.getElementById('header');\r\n    if (target) {\r\n      resizeObserver.observe(target);\r\n    }\r\n    return () => {\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, [callback]);\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nimport {\r\n  FeatureState,\r\n  NotificationType,\r\n  useAppSelector,\r\n  useNotificationStore,\r\n} from '@/store';\r\n\r\nconst useNotificationEffect = (\r\n  id: string,\r\n  title: string,\r\n  state: FeatureState,\r\n  notifications: ReturnType<typeof useNotificationStore>\r\n) =>\r\n  useEffect(() => {\r\n    if (state === FeatureState.Error) {\r\n      return notifications.addNotification({\r\n        id,\r\n        title,\r\n        errorMessage: 'Trying again in 15 seconds...',\r\n        type: NotificationType.Error,\r\n        timeout: '11s',\r\n      });\r\n    } else {\r\n      notifications.popNotification(id);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [state]);\r\n\r\nexport const useNetworkErrorNotifications = () => {\r\n  const { allPairsState, supportedTokenListState, priceState, balanceState } =\r\n    useAppSelector((state) => ({\r\n      allPairsState: state.swap.allPairsState,\r\n      supportedTokenListState: state.swap.supportedTokenListState,\r\n      priceState: state.price.state,\r\n      balanceState: state.swap.balancesState,\r\n    }));\r\n  const notifications = useNotificationStore();\r\n\r\n  useNotificationEffect(\r\n    'icp-price-error',\r\n    'Failed to fetch ICP price',\r\n    priceState,\r\n    notifications\r\n  );\r\n\r\n  useNotificationEffect(\r\n    'supported-token-list-error',\r\n    'Failed to fetch supported token list',\r\n    supportedTokenListState,\r\n    notifications\r\n  );\r\n\r\n  useNotificationEffect(\r\n    'all-pairs-error',\r\n    'Failed to fetch all pairs',\r\n    allPairsState,\r\n    notifications\r\n  );\r\n\r\n  useNotificationEffect(\r\n    'balance-error',\r\n    'Failed to fetch balances',\r\n    balanceState,\r\n    notifications\r\n  );\r\n};\r\n","import { useCallback } from 'react';\r\nimport { useLocation } from 'react-router';\r\n\r\nexport const useQuery = () => {\r\n  const location = useLocation();\r\n\r\n  return {\r\n    get: useCallback(\r\n      (key: string) => new URLSearchParams(location.search).get(key),\r\n      [location.search]\r\n    ),\r\n    delete: useCallback(\r\n      (key: string) => {\r\n        const query = new URLSearchParams(location.search);\r\n        query.delete(key);\r\n        location.search = query.toString();\r\n\r\n        window.history.replaceState(\r\n          {},\r\n          '',\r\n          location.pathname +\r\n            (location.search !== '' ? `?${location.search}` : '')\r\n        );\r\n      },\r\n      [location.search]\r\n    ),\r\n  };\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nimport { allowanceActions, useAllowanceStore, useAppDispatch, usePlugStore } from '@/store';\r\n\r\nimport { validPrincipalId } from '@/utils';\r\n\r\nexport const useTokenAllowance = (tokenId = ''): number | undefined => {\r\n  const dispatch = useAppDispatch();\r\n  const { principalId } = usePlugStore();\r\n  const { tokensAllowance } = useAllowanceStore();\r\n\r\n  useEffect(() => {\r\n    if (validPrincipalId(tokenId) && principalId) {\r\n      if (tokensAllowance[tokenId]) {\r\n        if (Date.now() > tokensAllowance[tokenId].expiration) {\r\n          dispatch(allowanceActions.fetchAllowance({ tokenId }));\r\n        }\r\n      } else {\r\n        dispatch(allowanceActions.fetchAllowance({ tokenId }));\r\n      }\r\n    }\r\n  }, [tokenId, principalId, dispatch, tokensAllowance]);\r\n\r\n  return tokensAllowance[tokenId]?.allowance;\r\n};\r\n","import { useMemo } from 'react';\r\n\r\nimport { ICP_METADATA } from '@/constants';\r\n\r\nimport { useBalances } from './use-balances';\r\n\r\nexport const useTokenBalanceMemo = (canisterId?: string , tokenType?:string) => {\r\n  const { totalBalances, icpBalance } = useBalances();\r\n\r\n  return useMemo(() => {\r\n    if (canisterId && totalBalances) {\r\n      const isICP = canisterId === ICP_METADATA.id;\r\n      if (isICP) { return icpBalance; }\r\n\r\n      return totalBalances[canisterId];\r\n    }\r\n  }, [canisterId, totalBalances, icpBalance]);\r\n};\r\n","import { useBalances } from '@/hooks/use-balances';\n\ntype useTokenTaxCheckOptions = {\n    tokenId?: string;\n    tokenDecimals?: number;\n    tokenValue?:string;\n    tokenSymbol?:string;\n};\nexport const useTokenTaxCheck = ({ tokenId ,tokenSymbol, tokenDecimals=1 , tokenValue='' ,}: useTokenTaxCheckOptions) => {\n    const { sonicBalances, tokenBalances ,icpBalance } = useBalances();\n    const tokenInfo={ wallet:0, sonic:0, taxInfo:{ input: 0 ,taxedValue:0, nonTaxedValue:0 ,netValue:0} }\n    if(tokenId!='' && tokenId!='ICP' && sonicBalances && tokenBalances){\n        var id= tokenId?tokenId:'';\n        tokenInfo['wallet'] = tokenBalances[id]? tokenBalances[id]:0;\n        tokenInfo['sonic'] = sonicBalances[id]?sonicBalances[id]:0;\n    }else{ tokenInfo['wallet'] = icpBalance?icpBalance:0;}\n    if(tokenValue){\n      let tokenVal:number = parseFloat(tokenValue)\n        if(tokenSymbol == 'YC'){\n            let decimals = tokenDecimals?(10**tokenDecimals):1\n            let sonicBalance = tokenInfo['sonic'] / decimals;\n            if((sonicBalance > tokenVal)){\n                tokenInfo.taxInfo.nonTaxedValue = tokenVal;\n                tokenInfo.taxInfo.taxedValue = 0;\n            } else {\n                tokenInfo.taxInfo.nonTaxedValue = sonicBalance;\n                tokenInfo.taxInfo.taxedValue = tokenVal - tokenInfo.taxInfo.nonTaxedValue;\n            }    \n            tokenInfo.taxInfo.netValue = tokenInfo.taxInfo.nonTaxedValue + (tokenInfo.taxInfo.taxedValue * (89/100));\n        }\n    }    \n    return tokenInfo\n}","import { useEffect } from 'react';\r\nimport { getFromStorage, saveToStorage } from '@/utils';\r\nimport { AppLog , getTokenLogo , tokenList} from '@/utils';\r\n\r\nexport const useTokenLogosFetcherInit = (): void => {\r\n  const supportedTokenList = tokenList('array');\r\n  useEffect(() => {\r\n    if (!supportedTokenList) return;\r\n    Promise.all(\r\n      supportedTokenList.map(async (token:{id:string}) => {\r\n        const storageKey = `${token.id}-logo`;\r\n        const logo = getFromStorage(storageKey);\r\n        if (!logo) {\r\n          try {\r\n            var tokenLogo = await getTokenLogo(token.id);\r\n            saveToStorage(storageKey, tokenLogo);        \r\n          } catch (e) {\r\n            AppLog.error(`Token logo fetch error: token=${token.id}`, e);\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }, [supportedTokenList]);\r\n};\r\n","import { useMemo } from 'react';\r\n\r\nimport { ICP_METADATA } from '@/constants';\r\n\r\nexport type UseTokenSelectionCheckerOptions = {\r\n  id0?: string;\r\n  id1?: string;\r\n  targetId?: string;\r\n};\r\n\r\nexport type UseTokenSelectionCheckerReturn = ReturnType<\r\n  typeof useTokenSelectionChecker\r\n>;\r\n\r\nexport const useTokenSelectionChecker = ({ id0, id1,targetId = ICP_METADATA.id,\r\n}: UseTokenSelectionCheckerOptions) => {\r\n\r\n  const isFirstIsSelected = useMemo(() => id0 === targetId, [id0, targetId]);\r\n  const isSecondIsSelected = useMemo(() => id1 === targetId, [id1, targetId]);\r\n\r\n  return { isFirstIsSelected, isSecondIsSelected, isTokenSelected: isFirstIsSelected || isSecondIsSelected};\r\n};\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport { AnalyticsApi } from '@/apis';\r\nimport {\r\n  KEEP_SYNC_DEFAULT_INTERVAL,\r\n  useKeepSync,\r\n  usePlugStore,\r\n  useSwapCanisterStore,\r\n} from '@/store';\r\nimport { AppLog } from '@/utils';\r\nimport { getPairIdsFromPairList } from '@/utils/format';\r\nimport { debounce } from '@/utils/function';\r\n\r\nexport type UserLPMetrics = {\r\n  [pairId: string]: AnalyticsApi.PositionMetrics;\r\n};\r\n\r\nexport const useUserMetrics = () => {\r\n  const { principalId } = usePlugStore();\r\n  const { allPairs } = useSwapCanisterStore();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [userLPMetrics, setUserLPMetrics] = useState<UserLPMetrics>();\r\n\r\n  const getUserLPMetrics = useKeepSync(\r\n    'getUserMetrics',\r\n    useCallback(async () => {\r\n      try {\r\n        if (isLoading) {\r\n          return;\r\n        }\r\n\r\n        if (!principalId || !allPairs) {\r\n          setUserLPMetrics(undefined);\r\n          return;\r\n        }\r\n\r\n        const pairIds = getPairIdsFromPairList(allPairs);\r\n\r\n        setIsLoading(true);\r\n        const analyticsApi = new AnalyticsApi();\r\n        const promises = pairIds.map((pairId) =>\r\n          analyticsApi.queryUserLPMetrics(principalId, pairId)\r\n        );\r\n        const responses = await Promise.all(promises);\r\n\r\n        const _userPairMetrics = responses.reduce((acc, response, index) => {\r\n          acc[pairIds[index]] = response;\r\n          return acc;\r\n        }, {} as UserLPMetrics);\r\n\r\n        setUserLPMetrics(_userPairMetrics);\r\n      } catch (error) {\r\n        AppLog.error(`User metrics fetch error`, error);\r\n        await new Promise((resolve) =>\r\n          debounce(resolve, KEEP_SYNC_DEFAULT_INTERVAL)\r\n        );\r\n      }\r\n      setIsLoading(false);\r\n    }, [setUserLPMetrics, principalId, allPairs, isLoading])\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!userLPMetrics) {\r\n      getUserLPMetrics();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [principalId]);\r\n\r\n  return {\r\n    isLoading,\r\n    userPairMetrics: userLPMetrics,\r\n    getUserMetrics: getUserLPMetrics,\r\n  };\r\n};\r\n","import { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider as ReduxProvider } from 'react-redux';\r\n\r\nimport { theme } from '@/theme';\r\n\r\nimport { App } from './App';\r\nimport { Maintenance } from './components';\r\nimport { ENV } from './config';\r\nimport { store } from './store';\r\n\r\n// import * as Sentry from \"@sentry/react\";\r\n\r\n// Sentry.init({\r\n//   dsn: \"https://aab2a72afcbc4c13b07142e955c4e80d@o4505044540325888.ingest.sentry.io/4505044542029824\",\r\n//   integrations: [new Sentry.BrowserTracing(), new Sentry.Replay()],\r\n//   tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!\r\n//   replaysSessionSampleRate: 0.1,\r\n//   replaysOnErrorSampleRate: 1.0,\r\n// });\r\n\r\nlet Render: React.FC;\r\n\r\nif (ENV.maintenanceMode) {\r\n  Render = () => <Maintenance />;\r\n} else {\r\n  Render = () => <App />;\r\n}\r\n\r\nReactDOM.render(\r\n  <>\r\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\r\n    <ChakraProvider theme={theme} resetCSS>\r\n      <ReduxProvider store={store}>\r\n        <Render />\r\n      </ReduxProvider>\r\n    </ChakraProvider>\r\n  </>,\r\n  document.getElementById('sonic-app-root')\r\n);\r\n","import { ActorAdapter } from '@memecake/sonic-js';\r\n\r\nimport { ENV } from '@/config';\r\nimport { LedgerIDL } from '@/did';\r\n\r\nexport const createAnonLedgerActor = async (): Promise<LedgerIDL.Factory> => {\r\n  return ActorAdapter.createAnonymousActor(\r\n    ENV.canistersPrincipalIDs.ledger,\r\n    LedgerIDL.factory\r\n  );\r\n};\r\n","import { ActorAdapter  } from '@memecake/sonic-js';\r\n\r\nimport { SwapIDL } from \"@/did\"\r\n\r\nimport { ENV } from '@/config';\r\n\r\nimport { plug } from '../plug';\r\n\r\nexport const createSwapActor = async (): Promise<SwapIDL.Factory> => {\r\n  const actorAdapter = new ActorAdapter(plug as any);\r\n  return actorAdapter.createActor(\r\n    ENV.canistersPrincipalIDs.swap,\r\n    SwapIDL.factory\r\n  );\r\n};\r\n\r\nexport const createAnonSwapActor = async (): Promise<SwapIDL.Factory> => {\r\n  return ActorAdapter.createAnonymousActor(\r\n    ENV.canistersPrincipalIDs.swap,\r\n    SwapIDL.factory\r\n  );\r\n};\r\n","import {  ActorAdapter, createTokenActor as cta } from '@memecake/sonic-js';\r\nimport { TokenIDL } from '@/did';\r\nexport const createTokenActor = cta;\r\n\r\nexport const createAnonTokenActor =  async (canisterId: string , tokenType?:string): Promise<any> =>{\r\n  if( tokenType == 'DIP20')\r\n    return ActorAdapter.createAnonymousActor<TokenIDL.DIP20.Factory>( canisterId,TokenIDL.DIP20.factory);\r\n  else if( tokenType == 'YC')\r\n  return ActorAdapter.createAnonymousActor<TokenIDL.DIP20.YCResult>( canisterId,TokenIDL.DIP20.YCfactory);\r\n  else if( tokenType == 'ICRC1')\r\n    return ActorAdapter.createAnonymousActor<TokenIDL.ICRC1.Factory>( canisterId,TokenIDL.ICRC1.factory);\r\n  else\r\n    return ActorAdapter.createAnonymousActor<TokenIDL.DIP20.Factory>( canisterId,TokenIDL.DIP20.factory);\r\n}\r\n  \r\n","export * from './create-swap-actor';\r\nexport * from './create-token-actor';\r\nexport * from './create-ledger-actor';\r\n","import { CapRoot } from '@memecake/cap-js';\r\n\r\nimport { ENV } from '@/config';\r\n\r\nexport interface CapRouterInstanceProps {\r\n  canisterId: string;\r\n  host?: string;\r\n}\r\n\r\nexport const getCapRootInstance = async ({\r\n  canisterId,\r\n  host = ENV.host,\r\n}: CapRouterInstanceProps) =>\r\n  await CapRoot.init({\r\n    host,\r\n    canisterId,\r\n  });\r\n","import { Principal } from '@dfinity/principal';\r\n\r\nimport { ENV } from '@/config';\r\n\r\nimport { MappedCapHistoryLog } from '..';\r\nimport { getCapRootInstance } from '../connection';\r\nimport { CapHistoryLog } from '../history-log';\r\nimport { parseCapHistoryLog } from '../utils';\r\n\r\nexport interface UserTransactionsResponse {\r\n  data: MappedCapHistoryLog[];\r\n  page: number;\r\n}\r\n\r\nexport const getUserTransactions = async (\r\n  principalId: string,\r\n  page?: number\r\n): Promise<UserTransactionsResponse> => {\r\n  const capRoot = await getCapRootInstance({\r\n    canisterId: ENV.canistersPrincipalIDs.swapCapRoot,\r\n  });\r\n\r\n  const result = (await capRoot.get_user_transactions({\r\n    user: Principal.fromText(principalId) as any,\r\n    page,\r\n  })) as { data: CapHistoryLog[]; page: number };\r\n\r\n  return {\r\n    data: parseCapHistoryLog(Object.values(result.data.reverse())),\r\n    page: result.page,\r\n  };\r\n};\r\n","export * from './get-user-transactions';\r\n","export * from './features';\r\nexport * from './history-log';\r\n","import { CapHistoryLog, MappedCapHistoryLog } from '.';\r\n\r\nconst mapDetails = (details: CapHistoryLog['details']) => {\r\n  return details.reduce((acc, [key, value]) => {\r\n    const aux = Object.values(value)[0];\r\n    acc[key] = typeof aux === 'bigint' ? Number(aux) : aux;\r\n    return acc;\r\n  }, {} as any);\r\n};\r\n\r\nexport const parseCapHistoryLog = (\r\n  data: CapHistoryLog[]\r\n): MappedCapHistoryLog[] => {\r\n  return data.map<MappedCapHistoryLog>((data) => {\r\n    return {\r\n      ...data,\r\n      time: Number(data.time),\r\n      details: mapDetails(data.details),\r\n    };\r\n  });\r\n};\r\n","export * from './ledger-transactions';\r\n","import BigNumber from 'bignumber.js';\r\n\r\nimport RosettaApi from '@/apis/rosetta';\r\nimport { ENV } from '@/config';\r\n\r\nexport interface LedgerTransaction {\r\n  account1Address: string;\r\n  account2Address: string;\r\n  amount: BigNumber;\r\n  blockIndex: number;\r\n  fee: BigNumber;\r\n  hash: string;\r\n  memo: BigNumber;\r\n  status: string;\r\n  timestamp: Date;\r\n  type: string;\r\n}\r\n\r\nconst ADDRESS_TO_FILTER = [ENV.accountIDs.XTC, ENV.accountIDs.WICP];\r\n\r\nexport const getUserLedgerTransactions = async (\r\n  accountId: string\r\n): Promise<LedgerTransaction[]> => {\r\n  const rosetta = new RosettaApi();\r\n  const ledgerTransactions = await rosetta.getTransactionsByAccount(accountId);\r\n\r\n  if (Array.isArray(ledgerTransactions)) {\r\n    return ledgerTransactions\r\n      .filter(\r\n        (t) =>\r\n          ADDRESS_TO_FILTER.includes(t.account1Address) ||\r\n          ADDRESS_TO_FILTER.includes(t.account2Address)\r\n      )\r\n      .reverse();\r\n  } else {\r\n    throw new Error('Failed to get ledger transactions');\r\n  }\r\n};\r\n","export * from './use-plug-init';\r\nexport * from './plug.utils';\r\n","import Provider from '@memecake/plug-inpage-provider';\r\n\r\ntype RequestConnectArgs = {\r\n  whitelist?: string[];\r\n  host?: string;\r\n};\r\n\r\nconst isDev = process.env.NODE_ENV === 'development';\r\nconst ua = navigator.userAgent.toLowerCase();\r\nconst isAndroid = ua.indexOf('android') > -1;\r\nconst isiOs = ua.indexOf('iphone') > -1 || ua.indexOf('ipad') > -1;\r\n\r\nconst isMobile = isAndroid || isiOs;\r\n\r\nif (!window.ic?.plug && isMobile) {\r\n  Provider.exposeProviderWithWalletConnect({ window, debug: isDev });\r\n}\r\n\r\nexport const plug = window.ic?.plug;\r\n\r\nexport const requestConnect = (args?: RequestConnectArgs) =>\r\n  window.ic?.plug?.requestConnect(args);\r\n\r\nexport const checkIsConnected = () => window.ic?.plug?.isConnected();\r\n\r\nexport const getPrincipal = () => window.ic?.plug?.getPrincipal();\r\n\r\nexport const requestBalance = () => (window.ic?.plug as any)?.requestBalance();\r\n\r\nexport const disconnect = () => window.ic?.plug?.disconnect();\r\n\r\nexport const checkIfPlugProviderVersionCompatible = (version = '1.6.0') => {\r\n  if (!plug?.versions.provider) return false;\r\n\r\n  const parseVersion = (v: string) =>\r\n    v\r\n      .replace(/([^(\\d|.)]+)/gi, '')\r\n      .split('.')\r\n      .map(Number);\r\n\r\n  const providerVersion = parseVersion(plug.versions.provider);\r\n  const requiredVersion = parseVersion(version);\r\n\r\n  for (let i = 0; i < requiredVersion.length; i++) {\r\n    if (providerVersion[i] === undefined) providerVersion[i] = 0;\r\n    if (requiredVersion[i] === undefined) requiredVersion[i] = 0;\r\n\r\n    if (providerVersion[i] === requiredVersion[i]) {\r\n      continue;\r\n    } else if (providerVersion[i] > requiredVersion[i]) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nimport { plugActions, PlugState, useAppDispatch } from '@/store';\r\n\r\nimport { plug } from './plug.utils';\r\n\r\nexport const usePlugInit = (): void => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (plug) {\r\n      dispatch(plugActions.setState(PlugState.Loading));\r\n\r\n      new Promise<string>((resolve, reject) => {\r\n        const timeout = setTimeout(reject, 3000);\r\n        plug\r\n          ?.isConnected()\r\n          .then((isConnected) => {\r\n            if (isConnected && plug) {\r\n              return plug.getPrincipal();\r\n            }\r\n            throw new Error('Plug is not connected');\r\n          })\r\n          .then((principal) => {\r\n            const principalId =\r\n              typeof principal === 'string' ? principal : principal.toText();\r\n            clearTimeout(timeout);\r\n            resolve(principalId);\r\n          })\r\n          .catch(reject);\r\n      })\r\n        .then((principalId) =>\r\n          dispatch(plugActions.setPrincipalId(principalId))\r\n        )\r\n        .catch(() => dispatch(plugActions.setState(PlugState.Disconnected)));\r\n    } else {\r\n      dispatch(plugActions.setState(PlugState.NotInstalled));\r\n    }\r\n  }, [dispatch]);\r\n};\r\n","import Provider from '@memecake/plug-inpage-provider';\r\nimport type {\r\n  Transaction,\r\n  TransactionPrevResponse,\r\n} from '@memecake/plug-inpage-provider/dist/src/Provider/interfaces';\r\n\r\nimport { AppLog } from '@/utils';\r\n\r\nimport { Batch } from './models/batch';\r\n\r\nexport class BatchTransactions implements Batch.Controller {\r\n  private transactions: Transaction[] = [];\r\n  private state: Batch.State = Batch.State.Idle;\r\n  private batchTransactionResolver?: (value: unknown) => void;\r\n  private batchTransactionRejector?: (value: unknown) => void;\r\n\r\n  constructor(\r\n    private provider?: Provider,\r\n    private handleRetry?: (\r\n      error: unknown,\r\n      prevResponses?: TransactionPrevResponse[]\r\n    ) => Promise<boolean | { nextTxArgs: any }>\r\n  ) {}\r\n\r\n  public push(transaction: Transaction): BatchTransactions {\r\n    this.transactions.push({\r\n      ...transaction,\r\n      onSuccess: (response) =>\r\n        this.handleTransactionSuccess(transaction, response),\r\n      onFail: (error, prevResponses) => {\r\n        AppLog.error(`Batch Transaction`, transaction, error, prevResponses);\r\n        return this.handleTransactionFail(transaction, error, prevResponses);\r\n      },\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public async execute(): Promise<unknown> {\r\n    if (this.state !== Batch.State.Idle) {\r\n      return Promise.reject(Batch.State.Running);\r\n    }\r\n\r\n    if (this.transactions.length === 0) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.state = Batch.State.Running;\r\n      this.batchTransactionResolver = resolve;\r\n      this.batchTransactionRejector = reject;\r\n      this.start();\r\n    });\r\n  }\r\n\r\n  public getTransactions(): Transaction[] {\r\n    return this.transactions;\r\n  }\r\n\r\n  public getState(): Batch.State {\r\n    return this.state;\r\n  }\r\n\r\n  private async handleTransactionSuccess(\r\n    transaction: Transaction,\r\n    responses: unknown[]\r\n  ): Promise<unknown> {\r\n    const result = await transaction.onSuccess(responses);\r\n    this.pop();\r\n    if (this.transactions.length === 0) {\r\n      this.finishPromise(true, responses);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private async handleTransactionFail(\r\n    transaction: Transaction,\r\n    error: unknown,\r\n    prevResponses?: TransactionPrevResponse[]\r\n  ): Promise<void> {\r\n    const retryResponse =\r\n      this.handleRetry && (await this.handleRetry(error, prevResponses));\r\n\r\n    if (retryResponse) {\r\n      if (typeof retryResponse !== 'boolean' && 'nextTxArgs' in retryResponse) {\r\n        this.start(retryResponse.nextTxArgs);\r\n      } else {\r\n        this.start();\r\n      }\r\n    } else {\r\n      await transaction.onFail(error, prevResponses);\r\n      this.finishPromise(false, error);\r\n    }\r\n  }\r\n\r\n  private pop(): void {\r\n    this.transactions = this.transactions.slice(1);\r\n  }\r\n\r\n  private finishPromise(resolved: boolean, result: unknown): void {\r\n    if (!this.batchTransactionRejector || !this.batchTransactionResolver) {\r\n      throw new Error('Batch promise not initialized');\r\n    }\r\n\r\n    if (resolved) {\r\n      this.batchTransactionResolver(result);\r\n    } else {\r\n      this.batchTransactionRejector(result);\r\n    }\r\n    this.batchTransactionResolver = undefined;\r\n    this.batchTransactionRejector = undefined;\r\n    this.state = Batch.State.Idle;\r\n  }\r\n\r\n  private start(nextTxArgs?: any): void {\r\n    const firstTransaction = this.transactions[0];\r\n    const otherTransactions = this.transactions.filter(\r\n      (txData, index) => index !== 0\r\n    );\r\n\r\n    const transactions = nextTxArgs\r\n      ? [\r\n          {\r\n            ...firstTransaction,\r\n            args: () => firstTransaction.args(nextTxArgs),\r\n          },\r\n          ...(otherTransactions?.length > 0 ? otherTransactions : []),\r\n        ]\r\n      : this.transactions;\r\n    \r\n    \r\n    this.provider?.batchTransactions(transactions).catch((error) => {\r\n      if (this.handleRetry) {\r\n        return this.handleRetry(error).then((response) => {\r\n          if (response) {\r\n            return this.start();\r\n          } else {\r\n            this.finishPromise(false, error);\r\n          }\r\n        });\r\n      } else {\r\n        this.finishPromise(false, error);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { TransactionPrevResponse } from '@memecake/plug-inpage-provider/dist/src/Provider/interfaces';\r\nimport { toBigNumber } from '@memecake/sonic-js';\r\n\r\nimport { MintTokenSymbol } from '@/store';\r\nimport {  \r\n  getFromStorage, LocalStorageKey,  MintUncompleteBlockHeights, saveToStorage,\r\n} from '@/utils';\r\n\r\nexport const getAmountDependsOnBalance = ( tokenBalance: number,tokenDecimals: number, fromValue: string): string => {\r\n  const parsedFromValue = parseFloat(fromValue);\r\n  const parsedTokenBalance = toBigNumber(tokenBalance).applyDecimals(tokenDecimals).toNumber();\r\n\r\n  return (parsedFromValue - parsedTokenBalance).toString();\r\n};\r\n\r\ntype GetDepositTransactionsOptions = {\r\n  getAcnt?:any, approveTx: any;depositTx: any;txNames?: string[],tokenType?: string\r\n};\r\n\r\nexport const getDepositTransactions = ({approveTx, depositTx, txNames = ['approve', 'deposit'] ,tokenType }: GetDepositTransactionsOptions) => {\r\n    let transactions = {};\r\n    if(tokenType ==  'DIP20' || tokenType =='YC'){\r\n      let requiredAllowance = Number(approveTx?.args[1]);\r\n      let requiredBalance = Number(depositTx?.args[1] );\r\n      if (requiredBalance > 0) {\r\n        if (requiredAllowance > 0) {\r\n          transactions = { ...transactions, [txNames[0]]: approveTx };\r\n        }\r\n        transactions = { ...transactions, [txNames[1]?txNames[1]:'']: depositTx };\r\n      }\r\n    }else if( tokenType ==  'ICRC1' ){\r\n      transactions = {[txNames[0]]: approveTx, [txNames[1]]: depositTx };\r\n    }\r\n  return transactions;\r\n};\r\n\r\nexport type GetTransactionNameOptions = {\r\n  tokenSymbol: MintTokenSymbol;\r\n  blockHeight: string;\r\n};\r\n\r\nexport function getTransactionName({\r\n  tokenSymbol,\r\n  blockHeight,\r\n}: GetTransactionNameOptions) {\r\n  return `${tokenSymbol}-${blockHeight}`;\r\n}\r\n\r\nexport type SaveBlockHeightToStorageOptions = {\r\n  blockHeight?: bigint;\r\n  principalId?: string;\r\n  tokenSymbol: MintTokenSymbol;\r\n};\r\n\r\n// === Block Heights ===\r\n\r\nexport type RemoveBlockHeightFromStorageOptions = {\r\n  blockHeight: string;\r\n  principalId?: string;\r\n  tokenSymbol: MintTokenSymbol;\r\n};\r\n\r\nexport const removeBlockHeightFromStorage = ({\r\n  blockHeight,\r\n  principalId,\r\n  tokenSymbol,\r\n}: RemoveBlockHeightFromStorageOptions) => {\r\n  if (!principalId) {\r\n    return null;\r\n  }\r\n\r\n  const localStorageKey =\r\n    tokenSymbol === MintTokenSymbol.XTC\r\n      ? LocalStorageKey.MintXTCUncompleteBlockHeights\r\n      : LocalStorageKey.MintWICPUncompleteBlockHeights;\r\n\r\n  const totalBlockHeights = getFromStorage(localStorageKey) as\r\n    | MintUncompleteBlockHeights\r\n    | undefined;\r\n  const userBlockHeights = totalBlockHeights?.[principalId];\r\n\r\n  if (userBlockHeights && userBlockHeights.length > 0) {\r\n    const newBlockHeights = userBlockHeights.filter(\r\n      (_blockHeight: string) => _blockHeight !== blockHeight\r\n    );\r\n\r\n    saveToStorage(localStorageKey, {\r\n      ...totalBlockHeights,\r\n      [principalId]: newBlockHeights,\r\n    });\r\n  }\r\n};\r\n\r\nexport const saveBlockHeightToStorage = ({\r\n  blockHeight,\r\n  principalId,\r\n  tokenSymbol,\r\n}: SaveBlockHeightToStorageOptions) => {\r\n  \r\n  if (!principalId || !blockHeight) { return null;}\r\n\r\n  const localStorageKey =\r\n    tokenSymbol === MintTokenSymbol.XTC\r\n      ? LocalStorageKey.MintXTCUncompleteBlockHeights\r\n      : LocalStorageKey.MintWICPUncompleteBlockHeights;\r\n\r\n  const prevMintWICPBlockHeight = getFromStorage(localStorageKey);\r\n\r\n  const newBlockHeights = {\r\n    ...prevMintWICPBlockHeight,\r\n    [principalId]: [\r\n      ...(prevMintWICPBlockHeight?.[principalId] || []),\r\n      String(blockHeight),\r\n    ],\r\n  };\r\n\r\n  saveToStorage(localStorageKey, newBlockHeights);\r\n};\r\n\r\nexport const updateFailedBlockHeight = ({\r\n  prevResponses,\r\n  ...props\r\n}: Omit<SaveBlockHeightToStorageOptions, 'blockHeight'> & {\r\n  prevResponses: TransactionPrevResponse[];\r\n}) => {\r\n  const failedBlockHeight = prevResponses?.[0]?.response as bigint | undefined;\r\n\r\n  saveBlockHeightToStorage({ blockHeight: failedBlockHeight, ...props });\r\n};\r\n","export * from './batch.utils';\r\nexport * from './use-add-liquidity-batch';\r\nexport * from './use-deposit-batch';\r\nexport * from './use-mint-batch';\r\nexport * from './use-mint-multiple-batch';\r\nexport * from './use-mint-single-batch';\r\nexport * from './use-remove-liquidity-batch';\r\nexport * from './use-swap-batch';\r\nexport * from './use-withdraw-batch';\r\nexport * from './use-withdraw-wicp-batch';\r\n","import { useMemo  } from 'react';\r\n\r\nimport { AddLiquidityModalDataStep, modalsSliceActions, useAppDispatch, useLiquidityViewStore, useSwapCanisterStore } from '@/store';\r\n\r\nimport { AddLiquidity, Deposit } from '../..';\r\nimport {\r\n  useAddLiquidityTransactionMemo, useApproveTransactionMemo, useBatch, useDepositTransactionMemo,\r\n  intitICRCTokenDeposit, useICRCTransferMemo, //useICRCDepositMemo\r\n} from '..';\r\nimport { useCreatePairTransactionMemo } from '../transactions/create-pair';\r\n\r\nimport { getAmountDependsOnBalance, getDepositTransactions } from './batch.utils';\r\n\r\ninterface Transactions {\r\n  [transactionName: string]: any;\r\n}\r\n\r\n\r\nexport const useAddLiquidityBatch = (addLiquidityParams: AddLiquidity) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const { sonicBalances } = useSwapCanisterStore();\r\n  const { pair } = useLiquidityViewStore();\r\n\r\n  if (!sonicBalances) { throw new Error('Sonic balance are required'); }\r\n  if (!addLiquidityParams.token0.metadata || !addLiquidityParams.token1.metadata) {\r\n    throw new Error('Tokens are required');\r\n  }\r\n\r\n  const deposit0Params = useMemo(() => {\r\n    if (addLiquidityParams.token0.metadata) {\r\n      return {\r\n        token: addLiquidityParams.token0.metadata,\r\n        amount: getAmountDependsOnBalance(\r\n          sonicBalances[addLiquidityParams.token0.metadata?.id],\r\n          addLiquidityParams.token0.metadata.decimals, addLiquidityParams.token0.value\r\n        ),\r\n        allowance: addLiquidityParams.allowance0,\r\n      };\r\n    }\r\n  }, []) as Deposit;\r\n\r\n  const deposit1Params = useMemo(() => {\r\n    if (addLiquidityParams.token1.metadata) {\r\n      return {\r\n        token: addLiquidityParams.token1.metadata,\r\n        amount: getAmountDependsOnBalance(\r\n          sonicBalances[addLiquidityParams.token1.metadata?.id],\r\n          addLiquidityParams.token1.metadata.decimals, addLiquidityParams.token1.value\r\n        ),\r\n        allowance: addLiquidityParams.allowance1,\r\n      };\r\n    }\r\n  }, []) as Deposit;\r\n\r\n  const createPairParams = useMemo(() => {\r\n    return {\r\n      token0: addLiquidityParams.token0,\r\n      token1: addLiquidityParams.token1,\r\n    };\r\n  }, []);\r\n\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  var approve0: any, deposit0: any, approve1: any, deposit1: any, steps: any = [];\r\n  var tx0complete = false, tx1complete = false, getICRCAcnt: any;\r\n  \r\n  var batchLoad: any = { state: \"idle\" };\r\n  var DepositBatch = { batch: batchLoad, openBatchModal: () => { } };\r\n\r\n  var token0Type = addLiquidityParams.token0.metadata.tokenType;\r\n  var token1Type = addLiquidityParams.token1.metadata.tokenType;\r\n\r\n  var token0Amt = parseFloat(deposit0Params?.amount ? deposit0Params?.amount : '0');\r\n  var token1Amt = parseFloat(deposit1Params?.amount ? deposit1Params?.amount : '0');\r\n  \r\n\r\n  if (!pair) { steps = ['createPair'] }\r\n\r\n  if (token0Type == 'ICRC1' || token1Type == 'ICRC1') {\r\n    getICRCAcnt = intitICRCTokenDeposit();steps = [...steps, 'getacnt'];\r\n  }\r\n\r\n  //step 1\r\n  if (token0Amt > 0) {\r\n    if (token0Type == 'DIP20' || token0Type == 'YC') {\r\n      approve0 = useApproveTransactionMemo(deposit0Params);\r\n      deposit0 = useDepositTransactionMemo(deposit0Params);\r\n\r\n      if (deposit0) tx0complete = true;\r\n    } else if (token0Type == 'ICRC1') {\r\n\r\n      approve0 = useICRCTransferMemo({ ...deposit0Params, tokenAcnt: getICRCAcnt });\r\n      deposit0 = useDepositTransactionMemo(deposit0Params);\r\n      if (getICRCAcnt) tx0complete = true;\r\n    }\r\n    steps = [...steps, 'approve0', 'deposit0'];\r\n  } else tx0complete = true;\r\n\r\n  //step 2\r\n  if (token1Amt > 0) {\r\n    if (token1Type == 'DIP20' || token1Type == 'YC') {\r\n      approve1 = useApproveTransactionMemo(deposit1Params);\r\n      deposit1 = useDepositTransactionMemo(deposit1Params);\r\n\r\n      if (tx0complete && deposit1) tx1complete = true;\r\n    } else if (token1Type == 'ICRC1') {\r\n      approve1 = useICRCTransferMemo({ ...deposit1Params, tokenAcnt: getICRCAcnt });\r\n      deposit1 = useDepositTransactionMemo(deposit1Params);\r\n\r\n      if (getICRCAcnt && approve1) tx1complete = true;\r\n    }\r\n    steps = [...steps, 'approve1', 'deposit1'];\r\n  } else tx1complete = true;\r\n\r\n  const createPair = useCreatePairTransactionMemo(createPairParams);\r\n  const addLiquidity = useAddLiquidityTransactionMemo(addLiquidityParams);\r\n\r\n  var  TrxFull = useMemo(() => {\r\n    let _transactions: Transactions = {};\r\n    if (!pair) { _transactions = { ..._transactions, createPair } }\r\n    if (token0Amt > 0) {\r\n      _transactions = {\r\n        ..._transactions,\r\n        ...getDepositTransactions({ txNames: ['approve0', 'deposit0'], approveTx: approve0, depositTx: deposit0, tokenType: token0Type })\r\n      }\r\n    }\r\n    if (token1Amt > 0) {\r\n      _transactions = {\r\n        ..._transactions,\r\n        ...getDepositTransactions({ txNames: ['approve1', 'deposit1'], approveTx: approve1, depositTx: deposit1, tokenType: token1Type })\r\n      }\r\n    }\r\n    _transactions = { ..._transactions, addLiquidity };\r\n    return _transactions;\r\n  }, [ tx1complete]);\r\n\r\n\r\n  steps = [...steps, 'addLiquidity'];\r\n  \r\n  // console.log(TrxFull);\r\n\r\n  const handleRetry = async () => {\r\n    return new Promise<boolean>((resolve) => {\r\n      dispatch(\r\n        modalsSliceActions.setAddLiquidityModalData({\r\n          callbacks: [\r\n            () => { // Retry callback\r\n              dispatch(modalsSliceActions.closeAddLiquidityFailModal());\r\n              openBatchModal(); resolve(true);\r\n            },\r\n            () => { // Cancel callback\r\n              dispatch(modalsSliceActions.closeAddLiquidityFailModal());\r\n              resolve(false);\r\n            },\r\n          ],\r\n        })\r\n      );\r\n      dispatch(modalsSliceActions.closeAddLiquidityProgressModal());\r\n      dispatch(modalsSliceActions.openAddLiquidityFailModal());\r\n    });\r\n  };\r\n\r\n  const openBatchModal = () => {\r\n    dispatch(\r\n      modalsSliceActions.setAddLiquidityModalData({\r\n        steps: steps as AddLiquidityModalDataStep[],\r\n        token0Symbol: addLiquidityParams.token0.metadata?.symbol,\r\n        token1Symbol: addLiquidityParams.token1.metadata?.symbol,\r\n      })\r\n    );\r\n    dispatch(modalsSliceActions.openAddLiquidityProgressModal());\r\n  };\r\n\r\n  if ( tx0complete && tx1complete && Object.keys(TrxFull).length>0) {\r\n    batchLoad = useBatch<AddLiquidityModalDataStep>({ transactions: TrxFull, handleRetry });\r\n    batchLoad.batchFnUpdate = true;\r\n  } else {\r\n    batchLoad = useBatch<AddLiquidityModalDataStep>({ transactions: {}, handleRetry: () => { return Promise.resolve(false) } });\r\n    if (steps.includes('getacnt')) batchLoad = { state: \"getacnt\" };\r\n    else batchLoad = { state: \"idle\" }\r\n  }\r\n  return DepositBatch = { ...DepositBatch, batch: batchLoad, openBatchModal };\r\n};","import { useMemo } from 'react';\r\n\r\nimport { DepositModalDataStep, modalsSliceActions, useAppDispatch } from '@/store';\r\n\r\nimport { Deposit } from '../..';\r\nimport { useApproveTransactionMemo, useDepositTransactionMemo, useBatch, intitICRCTokenDeposit , useICRCTransferMemo } from '..'; //useICRCDepositMemo\r\n\r\nimport { getDepositTransactions } from '.';\r\n\r\nexport const useDepositBatch = (deposit: Deposit): any => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  var batchLoad: any = { state: \"idle\" };\r\n  var DepositBatch = { batch: batchLoad, openBatchModal: () => { } };\r\n  var tokenType = deposit.token?.tokenType;\r\n\r\n  if (tokenType == 'DIP20' || tokenType == 'YC') {\r\n    var approveTx = useApproveTransactionMemo(deposit);\r\n    var depositTx = useDepositTransactionMemo(deposit);\r\n\r\n    var transactions = useMemo(\r\n      () =>\r\n        getDepositTransactions({ approveTx, depositTx, txNames: ['approve', 'deposit'], tokenType: deposit.token?.tokenType }),\r\n      [approveTx, depositTx]\r\n    );\r\n\r\n    var openBatchModal = () => {\r\n      dispatch(\r\n        modalsSliceActions.setDepositModalData({\r\n          steps: Object.keys(transactions) as DepositModalDataStep[],\r\n          tokenSymbol: deposit.token?.symbol,\r\n        })\r\n      );\r\n      dispatch(modalsSliceActions.openDepositProgressModal());\r\n    };\r\n\r\n    DepositBatch = {\r\n      batch: useBatch<DepositModalDataStep>({\r\n        transactions,\r\n        handleRetry: () => {\r\n          dispatch(modalsSliceActions.closeDepositProgressModal());\r\n          dispatch(modalsSliceActions.openDepositFailModal());\r\n          return Promise.resolve(false);\r\n        },\r\n      }),\r\n      openBatchModal,\r\n    };\r\n    return DepositBatch;\r\n\r\n  } else if (tokenType == 'ICRC1') {\r\n\r\n    var openBatchModal = () => {\r\n      dispatch(\r\n        modalsSliceActions.setDepositModalData({\r\n          steps: ['getacnt', 'approve', 'deposit'] as DepositModalDataStep[],\r\n          tokenSymbol: deposit.token?.symbol,\r\n        })\r\n      );\r\n      dispatch(modalsSliceActions.openDepositProgressModal());\r\n    };\r\n    DepositBatch = { ...DepositBatch, openBatchModal };\r\n    var getAcnt = intitICRCTokenDeposit(); \r\n    \r\n    var approveTx = useICRCTransferMemo({ ...deposit, tokenAcnt: getAcnt }); // useICRCDepositMemo\r\n    var depositTx = useDepositTransactionMemo(deposit);\r\n\r\n    var transactions = useMemo(() => {\r\n      if (getAcnt)\r\n        return getDepositTransactions({ approveTx: approveTx, depositTx, txNames: ['approve', 'deposit'], tokenType: deposit.token?.tokenType })\r\n      else return {}\r\n    }, [approveTx]);\r\n\r\n    if (Object.keys(transactions).length > 0) {\r\n      batchLoad = useBatch<DepositModalDataStep>({\r\n        transactions,\r\n        handleRetry: () => {\r\n          dispatch(modalsSliceActions.closeDepositProgressModal());\r\n          dispatch(modalsSliceActions.openDepositFailModal());\r\n          return Promise.resolve(false);\r\n        },\r\n      });\r\n      batchLoad.batchFnUpdate = true;\r\n    } else {\r\n      batchLoad = useBatch<DepositModalDataStep>({\r\n        transactions: {},\r\n        handleRetry: () => { return Promise.resolve(false) },\r\n      });\r\n\r\n      if (getAcnt) batchLoad = { state: \"approve\" }\r\n      else batchLoad = { state: \"getacnt\" };\r\n    }\r\n    return DepositBatch = {...DepositBatch, batch: batchLoad, openBatchModal}\r\n  }\r\n  else return DepositBatch\r\n\r\n};\r\n","import { TransactionPrevResponse } from '@memecake/plug-inpage-provider/dist/src/Provider/interfaces';\r\nimport { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { MINT_AUTO_NOTIFICATION_TITLES } from '@/notifications';\r\nimport {\r\n  addNotification,\r\n  MintModalData,\r\n  MintModalDataStep,\r\n  MintTokenSymbol,\r\n  modalsSliceActions,\r\n  NotificationState,\r\n  NotificationType,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n  usePlugStore,\r\n  useSwapViewStore,\r\n} from '@/store';\r\n\r\nimport {\r\n  getMintWICPTransaction,\r\n  getMintXTCTransaction,\r\n  useApproveTransactionMemo,\r\n  useBatch,\r\n  useDepositTransactionMemo,\r\n  useLedgerTransferTransactionMemo,\r\n} from '..';\r\nimport { updateFailedBlockHeight } from '.';\r\n\r\nexport type UseMintBatchOptions = {\r\n  amountIn: string;\r\n  amountOut: string;\r\n  blockHeight?: string;\r\n  keepInSonic?: boolean;\r\n  tokenSymbol: MintTokenSymbol;\r\n};\r\n\r\nexport const useMintBatch = ({\r\n  amountIn,\r\n  amountOut,\r\n  blockHeight,\r\n  keepInSonic,\r\n  tokenSymbol,\r\n}: UseMintBatchOptions) => {\r\n  const { tokenList } = useSwapViewStore();\r\n  const { principalId } = usePlugStore();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const { mintXTCUncompleteBlockHeights, mintWICPUncompleteBlockHeights } =\r\n    useModalsStore();\r\n\r\n  if (!tokenList) throw new Error('Token list is required');\r\n\r\n  const {\r\n    canisterPrincipalId,\r\n    canisterAccountID,\r\n    mintTransaction,\r\n    openFailModal,\r\n    openBatchModal,\r\n  } = useMemo(() => {\r\n    const getMintTransaction = () => {\r\n      const mintTransactionData = {\r\n        [MintTokenSymbol.XTC]: {\r\n          handler: getMintXTCTransaction,\r\n          uncompleteBlockHeights: mintXTCUncompleteBlockHeights,\r\n          setMintUncompleteBlockHeights:\r\n            modalsSliceActions.setMintXTCUncompleteBlockHeights,\r\n        },\r\n        [MintTokenSymbol.WICP]: {\r\n          handler: getMintWICPTransaction,\r\n          uncompleteBlockHeights: mintWICPUncompleteBlockHeights,\r\n          setMintUncompleteBlockHeights:\r\n            modalsSliceActions.setMintWICPUncompleteBlockHeights,\r\n        },\r\n      };\r\n      const { handler, uncompleteBlockHeights, setMintUncompleteBlockHeights } =\r\n        mintTransactionData[tokenSymbol];\r\n\r\n      return handler(\r\n        { blockHeight },\r\n        () => null,\r\n        (err: any, prevResponses: TransactionPrevResponse[]) => {\r\n          const failedBlockHeight = prevResponses?.[0]?.response as\r\n            | bigint\r\n            | undefined;\r\n\r\n          if (failedBlockHeight) {\r\n            dispatch(\r\n              setMintUncompleteBlockHeights([\r\n                ...(uncompleteBlockHeights ? uncompleteBlockHeights : []),\r\n                String(failedBlockHeight),\r\n              ])\r\n            );\r\n          }\r\n\r\n          updateFailedBlockHeight({\r\n            prevResponses,\r\n            tokenSymbol,\r\n            principalId,\r\n          });\r\n\r\n          if (failedBlockHeight) {\r\n            dispatch(\r\n              addNotification({\r\n                id: String(new Date().getTime()),\r\n                title: MINT_AUTO_NOTIFICATION_TITLES[NotificationState.Error],\r\n                type: NotificationType.MintAuto,\r\n                state: NotificationState.Error,\r\n              })\r\n            );\r\n          }\r\n        }\r\n      );\r\n    };\r\n\r\n    if (tokenSymbol === MintTokenSymbol.WICP) {\r\n      return {\r\n        canisterPrincipalId: ENV.canistersPrincipalIDs.WICP,\r\n        canisterAccountID: ENV.accountIDs.WICP,\r\n        openBatchModal: () => {\r\n          const steps = Object.keys(_transactions) as MintModalData['steps'];\r\n\r\n          dispatch(modalsSliceActions.setMintWICPModalData({ steps }));\r\n          dispatch(modalsSliceActions.openMintWICPProgressModal());\r\n        },\r\n        openFailModal: () => {\r\n          dispatch(modalsSliceActions.closeMintWICPProgressModal());\r\n          dispatch(modalsSliceActions.openMintWICPFailModal());\r\n        },\r\n        mintTransaction: getMintTransaction(),\r\n      };\r\n    }\r\n\r\n    if (tokenSymbol === MintTokenSymbol.XTC) {\r\n      return {\r\n        canisterPrincipalId: ENV.canistersPrincipalIDs.XTC,\r\n        canisterAccountID: ENV.accountIDs.XTC,\r\n        openBatchModal: () => {\r\n          const steps = Object.keys(_transactions) as MintModalData['steps'];\r\n\r\n          dispatch(modalsSliceActions.setMintXTCModalData({ steps }));\r\n          dispatch(modalsSliceActions.openMintXTCProgressModal());\r\n        },\r\n        openFailModal: () => {\r\n          dispatch(modalsSliceActions.closeMintXTCProgressModal());\r\n          dispatch(modalsSliceActions.openMintXTCFailModal());\r\n        },\r\n        mintTransaction: getMintTransaction(),\r\n      };\r\n    }\r\n\r\n    return {\r\n      canisterPrincipalId: '',\r\n      canisterAccountID: '',\r\n      mintTransaction: null,\r\n      openBatchModal: () => null,\r\n      openFailModal: () => null,\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [\r\n    blockHeight,\r\n    dispatch,\r\n    mintWICPUncompleteBlockHeights,\r\n    mintXTCUncompleteBlockHeights,\r\n    principalId,\r\n    tokenSymbol,\r\n  ]);\r\n\r\n  const depositParams = {\r\n    token: tokenList[canisterPrincipalId],\r\n    amount: amountOut,\r\n  };\r\n\r\n  const ledgerTransfer = useLedgerTransferTransactionMemo({\r\n    toAccountId: canisterAccountID,\r\n    amount: amountIn,\r\n  });\r\n  const approve = useApproveTransactionMemo(depositParams);\r\n  const deposit = useDepositTransactionMemo(depositParams);\r\n\r\n  const _transactions = useMemo(() => {\r\n    let transactions: Partial<Record<MintModalDataStep, any>> = {\r\n      [MintModalDataStep.Mint]: mintTransaction,\r\n    };\r\n\r\n    if (!blockHeight) {\r\n      transactions = {\r\n        ledgerTransfer,\r\n        ...transactions,\r\n      };\r\n    }\r\n\r\n    if (keepInSonic) {\r\n      transactions = {\r\n        ...transactions,\r\n        approve,\r\n        deposit,\r\n      };\r\n    }\r\n\r\n    return transactions;\r\n  }, [\r\n    ledgerTransfer,\r\n    mintTransaction,\r\n    blockHeight,\r\n    approve,\r\n    deposit,\r\n    keepInSonic,\r\n  ]);\r\n\r\n  const batch = useBatch<MintModalDataStep>({\r\n    transactions: _transactions,\r\n    handleRetry: async (error, prevResponses) => {\r\n      return new Promise((resolve) => {\r\n        const setMintModalData =\r\n          tokenSymbol === MintTokenSymbol.WICP\r\n            ? modalsSliceActions.setMintWICPModalData\r\n            : modalsSliceActions.setMintXTCModalData;\r\n\r\n        dispatch(\r\n          setMintModalData({\r\n            callbacks: [\r\n              // Retry callback\r\n              () => {\r\n                dispatch(modalsSliceActions.closeMintWICPFailModal());\r\n                dispatch(modalsSliceActions.closeMintXTCFailModal());\r\n                openBatchModal();\r\n                resolve({ nextTxArgs: prevResponses });\r\n              },\r\n              // Close callback\r\n              () => {\r\n                dispatch(modalsSliceActions.closeMintWICPFailModal());\r\n                dispatch(modalsSliceActions.closeMintXTCFailModal());\r\n                resolve(false);\r\n              },\r\n            ],\r\n          })\r\n        );\r\n\r\n        openFailModal();\r\n      });\r\n    },\r\n  });\r\n\r\n  return { batch, openBatchModal };\r\n};\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { MintTokenSymbol, usePlugStore } from '@/store';\r\n\r\nimport { getMintWICPTransaction, getMintXTCTransaction, useBatch } from '..';\r\nimport { getTransactionName, removeBlockHeightFromStorage } from '.';\r\n\r\nexport type UseMintMultipleBatchOptions = {\r\n  blockHeights: {\r\n    [MintTokenSymbol.XTC]?: string[];\r\n    [MintTokenSymbol.WICP]?: string[];\r\n  };\r\n};\r\n\r\nexport const useMintMultipleBatch = ({\r\n  blockHeights,\r\n}: UseMintMultipleBatchOptions) => {\r\n  const { principalId } = usePlugStore();\r\n\r\n  const [transactions, setTransactions] = useState<Record<string, any>>({});\r\n\r\n  useEffect(() => {\r\n    let transactions: Record<string, any> = {};\r\n\r\n    const updateTransactions = (\r\n      tokenSymbol: MintTokenSymbol,\r\n      blockHeight: string\r\n    ) => {\r\n      const handler =\r\n        tokenSymbol === MintTokenSymbol.XTC\r\n          ? getMintXTCTransaction\r\n          : getMintWICPTransaction;\r\n\r\n      const transactionName = getTransactionName({ tokenSymbol, blockHeight });\r\n      const transaction = handler({ blockHeight }, () =>\r\n        removeBlockHeightFromStorage({ blockHeight, tokenSymbol, principalId })\r\n      );\r\n\r\n      transactions = {\r\n        ...transactions,\r\n        [transactionName]: transaction,\r\n      };\r\n    };\r\n\r\n    blockHeights.WICP?.forEach((blockHeight: string) => {\r\n      updateTransactions(MintTokenSymbol.WICP, blockHeight);\r\n    });\r\n\r\n    blockHeights.XTC?.forEach((blockHeight: string) => {\r\n      updateTransactions(MintTokenSymbol.XTC, blockHeight);\r\n    });\r\n\r\n    setTransactions(transactions);\r\n  }, [blockHeights.WICP, blockHeights.XTC, principalId]);\r\n\r\n  const getTransactionNames = () => Object.keys(transactions);\r\n\r\n  return {\r\n    batch: useBatch<string>({ transactions }),\r\n    getTransactionNames,\r\n  };\r\n};\r\n","import { useMemo } from 'react';\r\n\r\nimport { MintTokenSymbol, usePlugStore } from '@/store';\r\n\r\nimport { getMintWICPTransaction, useBatch } from '..';\r\nimport { getMintXTCTransaction } from '../transactions/mint-xtc';\r\nimport { removeBlockHeightFromStorage } from '.';\r\n\r\nexport type UseMintSingleBatchOptions = {\r\n  tokenSymbol: MintTokenSymbol;\r\n  blockHeight: string;\r\n};\r\n\r\nexport const useMintSingleBatch = ({\r\n  tokenSymbol,\r\n  blockHeight,\r\n}: UseMintSingleBatchOptions) => {\r\n  const { principalId } = usePlugStore();\r\n\r\n  const transactions = useMemo(() => {\r\n    let transactions: Record<string, any> = {};\r\n\r\n    if (!principalId) {\r\n      return transactions;\r\n    }\r\n\r\n    const handler =\r\n      tokenSymbol === MintTokenSymbol.XTC\r\n        ? getMintXTCTransaction\r\n        : getMintWICPTransaction;\r\n\r\n    transactions = {\r\n      ...transactions,\r\n      [tokenSymbol]: handler({ blockHeight }, () =>\r\n        removeBlockHeightFromStorage({\r\n          blockHeight,\r\n          tokenSymbol: tokenSymbol,\r\n          principalId,\r\n        })\r\n      ),\r\n    };\r\n\r\n    return transactions;\r\n  }, [principalId, tokenSymbol, blockHeight]);\r\n\r\n  const getTransactionNames = () => Object.keys(transactions);\r\n\r\n  return {\r\n    batch: useBatch<string>({ transactions }),\r\n    getTransactionNames,\r\n  };\r\n};\r\n","import { useMemo } from 'react';\r\n\r\nimport {\r\n  modalsSliceActions,\r\n  RemoveLiquidityModalDataStep,\r\n  useAppDispatch,\r\n  useSwapCanisterStore,\r\n} from '@/store';\r\n\r\nimport { RemoveLiquidity } from '../..';\r\nimport {\r\n  useBatch,\r\n  useRemoveLiquidityTransactionMemo,\r\n  useWithdrawTransactionMemo,\r\n} from '..';\r\n\r\nexport interface UseRemoveLiquidityBatchOptions extends RemoveLiquidity {\r\n  keepInSonic: boolean;\r\n}\r\n\r\nexport const useRemoveLiquidityBatch = ({\r\n  keepInSonic,\r\n  ...removeLiquidityParams\r\n}: UseRemoveLiquidityBatchOptions) => {\r\n  const dispatch = useAppDispatch();\r\n  const { sonicBalances } = useSwapCanisterStore();\r\n\r\n  if (!sonicBalances) {\r\n    throw new Error('Sonic balance are required');\r\n  }\r\n\r\n  if (\r\n    !removeLiquidityParams.token0.metadata ||\r\n    !removeLiquidityParams.token1.metadata\r\n  ) {\r\n    throw new Error('Tokens are required');\r\n  }\r\n\r\n  const withdraw0Params = {\r\n    token: removeLiquidityParams.token0.metadata,\r\n    amount: removeLiquidityParams.amount0Min.toString(),\r\n  };\r\n\r\n  const withdraw1Params = {\r\n    token: removeLiquidityParams.token1.metadata,\r\n    amount: removeLiquidityParams.amount1Min.toString(),\r\n  };\r\n\r\n  const removeLiquidity = useRemoveLiquidityTransactionMemo(\r\n    removeLiquidityParams\r\n  );\r\n  const withdraw0 = useWithdrawTransactionMemo(withdraw0Params);\r\n  const withdraw1 = useWithdrawTransactionMemo(withdraw1Params);\r\n\r\n  const transactions = useMemo(() => {\r\n    let _transactions: any = {\r\n      removeLiquidity,\r\n    };\r\n\r\n    if (!keepInSonic) {\r\n      _transactions = {\r\n        ..._transactions,\r\n        withdraw0,\r\n        withdraw1,\r\n      };\r\n    }\r\n\r\n    return _transactions;\r\n  }, [...Object.values(removeLiquidityParams), keepInSonic]);\r\n\r\n  const handleRetry = async () => {\r\n    return new Promise<boolean>((resolve) => {\r\n      dispatch(\r\n        modalsSliceActions.setRemoveLiquidityModalData({\r\n          callbacks: [\r\n            // Retry callback\r\n            () => {\r\n              dispatch(modalsSliceActions.closeRemoveLiquidityFailModal());\r\n              openBatchModal();\r\n              resolve(true);\r\n            },\r\n            // Not retry callback\r\n            () => {\r\n              dispatch(modalsSliceActions.closeRemoveLiquidityFailModal());\r\n              resolve(false);\r\n            },\r\n          ],\r\n        })\r\n      );\r\n\r\n      dispatch(modalsSliceActions.closeRemoveLiquidityProgressModal());\r\n      dispatch(modalsSliceActions.openRemoveLiquidityFailModal());\r\n    });\r\n  };\r\n\r\n  const openBatchModal = () => {\r\n    dispatch(\r\n      modalsSliceActions.setRemoveLiquidityModalData({\r\n        steps: Object.keys(transactions) as RemoveLiquidityModalDataStep[],\r\n        token0Symbol: removeLiquidityParams.token0.metadata?.symbol,\r\n        token1Symbol: removeLiquidityParams.token1.metadata?.symbol,\r\n      })\r\n    );\r\n\r\n    dispatch(modalsSliceActions.openRemoveLiquidityProgressModal());\r\n  };\r\n\r\n  return {\r\n    batch: useBatch<RemoveLiquidityModalDataStep>({\r\n      transactions,\r\n      handleRetry,\r\n    }),\r\n    openBatchModal,\r\n  };\r\n};\r\n","import { useMemo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport { modalsSliceActions, SwapModalDataStep, useAppDispatch, useSwapCanisterStore } from '@/store';\r\nimport { SwapModel } from '../..';\r\n\r\nimport {\r\n  useApproveTransactionMemo, useBatch, useDepositTransactionMemo,\r\n  useSwapExactTokensTransactionMemo, useWithdrawTransactionMemo,\r\n  intitICRCTokenDeposit, useICRCTransferMemo , // useICRCDepositMemo , \r\n} from '..';\r\n\r\nimport { getAmountDependsOnBalance, getDepositTransactions } from './batch.utils';\r\n\r\n\r\nexport interface ExtraDepositSwapBatchOptions {\r\n  keepInSonic: boolean;\r\n}\r\n\r\nexport const useSwapBatch = ({ keepInSonic, ...swapParams }: SwapModel & ExtraDepositSwapBatchOptions) => {\r\n  const dispatch = useAppDispatch();\r\n  const { sonicBalances } = useSwapCanisterStore();\r\n\r\n  if (!sonicBalances) throw new Error('Sonic balance is required');\r\n  if (!swapParams.from.metadata || !swapParams.to.metadata) throw new Error('Tokens are required');\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const depositParams = {\r\n    token: swapParams.from.metadata,\r\n    amount: getAmountDependsOnBalance( sonicBalances[swapParams.from.metadata.id],\r\n      swapParams.from.metadata.decimals,\r\n      swapParams.from.value\r\n    ),\r\n    allowance: swapParams.allowance,\r\n    entryVal:'0'\r\n  };\r\n  const withdrawParams = { token: swapParams.to.metadata, amount: swapParams.to.value };\r\n  var tokenType = depositParams.token?.tokenType;\r\n\r\n  var batchLoad: any = { state: \"idle\" };\r\n  var DepositBatch = { batch: batchLoad, openBatchModal: () => { } };\r\n\r\n  if (tokenType == 'DIP20' || tokenType == 'YC') {\r\n\r\n    const approve = useApproveTransactionMemo(depositParams);\r\n    const deposit = useDepositTransactionMemo(depositParams);\r\n    swapParams.entryVal = depositParams.amount;\r\n    \r\n    const swap = useSwapExactTokensTransactionMemo(swapParams);\r\n    withdrawParams.amount = swap.amountOutMin?.toString();\r\n    const withdraw = useWithdrawTransactionMemo(withdrawParams);\r\n\r\n    const transactions = useMemo(() => {\r\n      let _transactions = {};\r\n      _transactions = { ...getDepositTransactions({ approveTx: approve, depositTx: deposit, tokenType: depositParams.token.tokenType }) };\r\n      _transactions = { ..._transactions, swap };\r\n      if (!keepInSonic) { _transactions = { ..._transactions, withdraw } };\r\n      return _transactions;\r\n    }, [...Object.values(swapParams), keepInSonic]);\r\n\r\n    const openBatchModal = () => {\r\n      dispatch(\r\n        modalsSliceActions.setSwapModalData({\r\n          steps: Object.keys(transactions) as SwapModalDataStep[],\r\n          fromTokenSymbol: swapParams.from.metadata?.symbol,\r\n          toTokenSymbol: swapParams.to.metadata?.symbol,\r\n        })\r\n      );\r\n      dispatch(modalsSliceActions.openSwapProgressModal());\r\n    };\r\n\r\n    batchLoad = useBatch<SwapModalDataStep>({\r\n      transactions,\r\n      handleRetry: () => {\r\n        return new Promise<boolean>((resolve) => {\r\n          dispatch(\r\n            modalsSliceActions.setSwapModalData({\r\n              callbacks: [\r\n                () => {\r\n                  dispatch(modalsSliceActions.closeSwapFailModal());\r\n                  openBatchModal(); resolve(true);\r\n                },\r\n                () => {\r\n                  navigate(`/assets/withdraw?tokenId=${swapParams.from.metadata?.id}&amount=${swapParams.from.value}`);\r\n                  dispatch(modalsSliceActions.closeSwapFailModal()); resolve(false);\r\n                },\r\n                () => { resolve(false); },\r\n              ],\r\n            })\r\n          );\r\n          dispatch(modalsSliceActions.closeSwapProgressModal());\r\n          dispatch(modalsSliceActions.openSwapFailModal());\r\n        });\r\n      },\r\n    });\r\n\r\n    if(batchLoad.execute) batchLoad.batchFnUpdate = true;\r\n\r\n    return DepositBatch = { batch: batchLoad, openBatchModal};\r\n    \r\n  } else if (tokenType == 'ICRC1') {\r\n\r\n    var steps = ['swap', 'withdraw'];\r\n    var reqAmt = parseFloat(depositParams.amount);\r\n\r\n    if (reqAmt > 0) {\r\n      steps = ['getacnt', 'approve', 'deposit', ...steps];\r\n    }\r\n    \r\n    const openBatchModal = () => {\r\n      dispatch(\r\n        modalsSliceActions.setSwapModalData({\r\n          steps: steps as SwapModalDataStep[],\r\n          fromTokenSymbol: swapParams.from.metadata?.symbol,\r\n          toTokenSymbol: swapParams.to.metadata?.symbol,\r\n        })\r\n      );\r\n      dispatch(modalsSliceActions.openSwapProgressModal());\r\n    };\r\n\r\n    DepositBatch = { ...DepositBatch, openBatchModal };\r\n\r\n    var getAcnt: any, approveTx: any, depositTx: any;\r\n\r\n    getAcnt = intitICRCTokenDeposit(); \r\n    approveTx = useICRCTransferMemo({ ...depositParams, tokenAcnt: getAcnt });\r\n    depositTx = useDepositTransactionMemo(depositParams);\r\n    \r\n    const swap = useSwapExactTokensTransactionMemo(swapParams);\r\n    const withdraw = useWithdrawTransactionMemo(withdrawParams);\r\n\r\n    const transactions = useMemo(() => {\r\n      let _transactions = {};\r\n      if (reqAmt > 0) {\r\n        if (getAcnt) {\r\n          _transactions = {\r\n            ...getDepositTransactions({ approveTx: approveTx, depositTx, txNames: ['approve', 'deposit'], tokenType: tokenType }), swap\r\n          }\r\n        }\r\n      } else {\r\n        _transactions = { ..._transactions, swap };\r\n      }\r\n      if (!keepInSonic) { _transactions = { ..._transactions, withdraw } };\r\n      return _transactions;\r\n    }, [approveTx]);\r\n\r\n    if (Object.keys(transactions).includes('swap')) {\r\n      batchLoad = useBatch<SwapModalDataStep>({\r\n        transactions,\r\n        handleRetry: () => {\r\n          return new Promise<boolean>((resolve) => {\r\n            dispatch(\r\n              modalsSliceActions.setSwapModalData({\r\n                callbacks: [\r\n                  () => {\r\n                    dispatch(modalsSliceActions.closeSwapFailModal());\r\n                    openBatchModal(); resolve(true);\r\n                  },\r\n                  () => {\r\n                    navigate(`/assets/withdraw?tokenId=${swapParams.from.metadata?.id}&amount=${swapParams.from.value}`);\r\n                    dispatch(modalsSliceActions.closeSwapFailModal()); resolve(false);\r\n                  },\r\n                  () => { resolve(false); },\r\n                ],\r\n              })\r\n            );\r\n            dispatch(modalsSliceActions.closeSwapProgressModal());\r\n            dispatch(modalsSliceActions.openSwapFailModal());\r\n          });\r\n        },\r\n      });\r\n      batchLoad.batchFnUpdate = true;\r\n    } else {\r\n      batchLoad = useBatch<SwapModalDataStep>({\r\n        transactions: {},\r\n        handleRetry: () => { return Promise.resolve(false) },\r\n      });\r\n      if (getAcnt) batchLoad = { state: \"approve\" }\r\n      else batchLoad = { state: \"getacnt\" }\r\n    }\r\n    return DepositBatch = { ...DepositBatch, batch: batchLoad, openBatchModal}\r\n  } else return DepositBatch;\r\n};","import {\r\n  modalsSliceActions,\r\n  useAppDispatch,\r\n  WithdrawModalDataStep,\r\n} from '@/store';\r\n\r\nimport { Withdraw } from '../..';\r\nimport { useBatch, useWithdrawTransactionMemo } from '..';\r\n\r\nexport const useWithdrawBatch = (withdraw: Withdraw) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const openBatchModal = () => {\r\n    dispatch(\r\n      modalsSliceActions.setWithdrawModalData({\r\n        steps: ['withdraw'] as WithdrawModalDataStep[],\r\n        tokenSymbol: withdraw.token?.symbol,\r\n      })\r\n    );\r\n    dispatch(modalsSliceActions.openWithdrawProgressModal());\r\n  };\r\n\r\n  const withdrawMemo = useWithdrawTransactionMemo(withdraw);\r\n\r\n  return {\r\n    batch: useBatch({\r\n      transactions: {\r\n        withdraw: withdrawMemo,\r\n      },\r\n      handleRetry: () => {\r\n        dispatch(modalsSliceActions.closeWithdrawProgressModal());\r\n        dispatch(modalsSliceActions.openWithdrawFailModal());\r\n\r\n        return Promise.resolve(false);\r\n      },\r\n    }),\r\n    openBatchModal,\r\n  };\r\n};\r\n","import { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport {\r\n  modalsSliceActions,\r\n  useAppDispatch,\r\n  useSwapCanisterStore,\r\n  useSwapViewStore,\r\n  WithdrawWICPModalDataStep,\r\n} from '@/store';\r\n\r\nimport { useBatch } from '..';\r\nimport {\r\n  useWithdrawTransactionMemo,\r\n  useWithdrawWICPTransactionMemo,\r\n} from '../transactions';\r\nimport { getAmountDependsOnBalance } from '.';\r\n\r\ntype UseWithdrawWICPBatchOptions = {\r\n  amount: string;\r\n  toAccountId?: string;\r\n};\r\n\r\nexport const useWithdrawWICPBatch = ({\r\n  amount,\r\n  toAccountId,\r\n}: UseWithdrawWICPBatchOptions) => {\r\n  const { tokenList } = useSwapViewStore();\r\n  const { tokenBalances } = useSwapCanisterStore();\r\n  const dispatch = useAppDispatch();\r\n\r\n  if (!tokenBalances) throw new Error('Sonic balance is required');\r\n  if (!tokenList) throw new Error('Token list is required');\r\n\r\n  const withdraw = useWithdrawTransactionMemo({\r\n    token: tokenList[ENV.canistersPrincipalIDs.WICP],\r\n    amount: getAmountDependsOnBalance(\r\n      tokenBalances[ENV.canistersPrincipalIDs.WICP],\r\n      ICP_METADATA.decimals,\r\n      amount\r\n    ),\r\n  });\r\n\r\n  const withdrawWICP = useWithdrawWICPTransactionMemo({\r\n    toAccountId,\r\n    amount,\r\n  });\r\n\r\n  const transactions = useMemo(() => {\r\n    let _transactions = {};\r\n\r\n    if (Number(withdraw.args[1]) > 0) {\r\n      _transactions = {\r\n        withdraw,\r\n      };\r\n    }\r\n\r\n    _transactions = {\r\n      ..._transactions,\r\n      withdrawWICP,\r\n    };\r\n\r\n    return _transactions;\r\n  }, [withdrawWICP, withdraw]);\r\n\r\n  const openBatchModal = () => {\r\n    dispatch(\r\n      modalsSliceActions.setWithdrawWICPModalData({\r\n        steps: Object.keys(transactions) as WithdrawWICPModalDataStep[],\r\n      })\r\n    );\r\n\r\n    dispatch(modalsSliceActions.openWithdrawWICPProgressModal());\r\n  };\r\n\r\n  return {\r\n    batch: useBatch({\r\n      transactions,\r\n      handleRetry: () => {\r\n        return new Promise((resolve) => {\r\n          dispatch(\r\n            modalsSliceActions.setWithdrawWICPModalData({\r\n              callbacks: [\r\n                // Retry callback\r\n                () => {\r\n                  dispatch(modalsSliceActions.closeWithdrawWICPFailModal());\r\n                  openBatchModal();\r\n                  resolve(true);\r\n                },\r\n                // Close callback\r\n                () => {\r\n                  dispatch(modalsSliceActions.closeWithdrawWICPFailModal());\r\n                  resolve(false);\r\n                },\r\n              ],\r\n            })\r\n          );\r\n\r\n          dispatch(modalsSliceActions.closeWithdrawWICPProgressModal());\r\n          dispatch(modalsSliceActions.openWithdrawWICPFailModal());\r\n        });\r\n      },\r\n    }),\r\n    openBatchModal,\r\n  };\r\n};\r\n","export * from './transactions';\r\nexport * from './batch';\r\nexport * from './use-batch';\r\n","import { Principal } from '@dfinity/principal';\r\nimport { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { TokenIDL } from '@/did';\r\nimport { parseAmount } from '@/utils/format';\r\n\r\nimport { CreateTransaction, Deposit } from '../../models';\r\n\r\nexport const useApproveTransactionMemo: CreateTransaction<Deposit> = (\r\n  { amount, token, allowance = 0 }, onSuccess, onFail\r\n) =>\r\n  useMemo(() => {\r\n    if (!token?.id) { return; }\r\n    const tokenType = token.tokenType;\r\n    const parsedAmount = amount ? parseAmount(amount, token.decimals) : BigInt(0);\r\n    const toApproveAmount = parsedAmount + token.fee > BigInt(allowance) ? parsedAmount : 0;\r\n\r\n    if (tokenType == 'DIP20') {\r\n      return {\r\n        canisterId: token.id, idl: TokenIDL.DIP20.factory, methodName: 'approve',\r\n        onSuccess: async (res: TokenIDL.DIP20.Result) => {\r\n          if ('Err' in res) throw new Error(JSON.stringify(res.Err));\r\n          if (onSuccess) onSuccess(res);\r\n        },\r\n        onFail,\r\n        args: [Principal.fromText(ENV.canistersPrincipalIDs.swap), toApproveAmount],\r\n      };\r\n    }\r\n    else if (tokenType == 'YC') {\r\n      return {\r\n        canisterId: token.id, idl: TokenIDL.DIP20.YCfactory, methodName: 'approve',\r\n        onSuccess: async (res: TokenIDL.DIP20.YCResult) => {\r\n          if ('Err' in res) throw new Error(JSON.stringify(res.Err));\r\n          if (onSuccess) onSuccess(res);\r\n        },\r\n        onFail,\r\n        args: [Principal.fromText(ENV.canistersPrincipalIDs.swap), toApproveAmount],\r\n      };\r\n    }\r\n    else return false;\r\n  }, [amount, token, allowance]);\r\n","import { Principal } from '@dfinity/principal';\r\nimport { Transaction } from '@memecake/plug-inpage-provider/dist/src/Provider/interfaces';\r\nimport { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { SwapIDL } from '@/did';\r\nimport { AppLog } from '@/utils';\r\n\r\nimport { CreatePair, CreateTransaction } from '../../models';\r\n\r\nexport type CreatePairTransaction = Transaction;\r\n\r\nexport const useCreatePairTransactionMemo: CreateTransaction<CreatePair> = (\r\n   { token0, token1 }: CreatePair,onSuccess,onFail) =>useMemo(() => {\r\n    if (!token0.metadata || !token1.metadata) {\r\n      return {};\r\n    }\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.swap,\r\n      idl: SwapIDL.factory,\r\n      methodName: 'createPair',\r\n      onFail: async (res: SwapIDL.Result) => {\r\n        AppLog.error('Create pair transaction failed', res);\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onFail) onFail(res);\r\n      },\r\n      onSuccess: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onSuccess) onSuccess(res);\r\n      },\r\n      args: [\r\n        Principal.fromText(token0.metadata.id),\r\n        Principal.fromText(token1.metadata.id),\r\n      ],\r\n    };\r\n  }, []);\r\n","import { Principal } from '@dfinity/principal';\r\nimport { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { SwapIDL } from '@/did';\r\nimport { parseAmount } from '@/utils/format';\r\n\r\nimport { CreateTransaction, Deposit } from '../../models';\r\n\r\nexport const useDepositTransactionMemo: CreateTransaction<Deposit> = ({ amount, token }, onSuccess, onFail) =>\r\n  useMemo(() => {\r\n    if (!token?.id || !amount) { return {} }\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.swap,\r\n      idl: SwapIDL.factory,\r\n      methodName: 'deposit',\r\n      onSuccess: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onSuccess) onSuccess(res);\r\n      },\r\n      onFail,\r\n      args: [ Principal.fromText(token?.id),parseAmount(amount, token?.decimals)],\r\n    };\r\n  }, [amount, token]);\r\n","import { getswapActor, fromHexString, getTokenActor } from '@/utils';\n\nimport { useState, useMemo, useEffect } from \"react\";\n\nimport { parseAmount } from '@/utils/format';\nimport { Principal } from '@dfinity/principal';\nimport { ENV } from '@/config';\n\nimport { CreateTransaction, Deposit } from '../../models';\n\nimport { TokenIDL } from '@/did';\n\nexport const intitICRCTokenDeposit = (deposit?:any): any => {\n    const [tokenAcnt, setData] = useState();\n    useMemo(() => {\n        getswapActor(false).then(actor => {\n            //initiateICRC1Transfer initateTransfer\n            actor.initiateICRC1Transfer().then((data:any) => {\n                setData(data);\n            });\n        });\n    }, []);\n    return tokenAcnt;\n};\n\nexport const useICRCTransferMemo: CreateTransaction<Deposit> = (\n    { amount, token, allowance = 0, tokenAcnt=[] },onSuccess, onFail) => useMemo(() => {\n        if (!token?.id && tokenAcnt) { return; }\n        var canId = token?.id ? token.id : '';\n        var parsedAmount = amount ? parseAmount(amount, token?.decimals ? token?.decimals : 0) : BigInt(0);\n        parsedAmount += token?.fee ? token?.fee : BigInt(0);\n        var subacc:any = tokenAcnt; // fromHexString(tokenAcnt);\n        return {\n            canisterId: canId,\n            idl: TokenIDL.ICRC1.factory,\n            methodName: 'icrc1_transfer',\n            onSuccess: async (res: TokenIDL.DIP20.Result) => {\n                if ('Err' in res) throw new Error(JSON.stringify(res.Err));\n                if (onSuccess) onSuccess(res);\n            },\n            onFail,\n            args: [{\n                to: { owner: Principal.fromText(ENV.canistersPrincipalIDs.swap), subaccount: [subacc] },\n                fee: [], memo: [], amount: parsedAmount, from_subaccount: [], created_at_time: []\n            }],\n        };\n    }, [tokenAcnt]);\n\n\nexport const useICRCDepositMemo: CreateTransaction<Deposit> = ({ amount, token, allowance = 0, tokenAcnt = '' }, onSuccess, onFail) => {\n    const [tokenTrx, settokenTrxData] = useState({});\n    useEffect((): any => {\n        var canId = token?.id ? token.id : '';\n        if (!tokenAcnt) return false;\n        getTokenActor(canId, false).then(actor => {\n            var parsedAmount = amount ? parseAmount(amount, token?.decimals ? token?.decimals : 0) : BigInt(0);\n            parsedAmount += token?.fee ? token?.fee : BigInt(0);\n            var subacc: number[] = fromHexString(tokenAcnt);\n            actor.icrc1_transfer({\n                to: { owner: Principal.fromText(ENV.canistersPrincipalIDs.swap), subaccount: [subacc] },\n                fee: [], memo: [], amount: parsedAmount, from_subaccount: [], created_at_time: []\n            }).then((data: any) => {\n                settokenTrxData({ resp: data });\n            }).catch(((err: any) => { return false; }))\n        });\n    }, [tokenAcnt]);\n    return tokenTrx;\n}\n","export * from './approve';\r\nexport * from './create-pair';\r\nexport * from './deposit';\r\nexport * from './ledger-transfer';\r\nexport * from './liquidity';\r\nexport * from './mint-wicp';\r\nexport * from './mint-xtc';\r\nexport * from './swap';\r\nexport * from './withdraw-wicp';\r\nexport * from './withdraw';\r\nexport * from './icrcTransfer'","import { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport { LedgerIDL } from '@/did';\r\nimport { parseAmount } from '@/utils/format';\r\n\r\nimport { CreateTransaction, LedgerTransfer } from '../../models';\r\n\r\nexport const useLedgerTransferTransactionMemo: CreateTransaction<\r\n  LedgerTransfer\r\n> = (\r\n  { toAccountId, fee = ICP_METADATA.fee, amount, memo = BigInt(0) },\r\n  onSuccess,\r\n  onFail\r\n) =>\r\n  useMemo(() => {\r\n    if (!toAccountId || !amount) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.ledger,\r\n      idl: LedgerIDL.factory,\r\n      methodName: 'send_dfx',\r\n      onSuccess: async (blockHeight: number[]) => {\r\n        if (onSuccess) onSuccess(blockHeight);\r\n        return blockHeight;\r\n      },\r\n      onFail,\r\n      args: [\r\n        {\r\n          to: toAccountId,\r\n          fee: { e8s: fee },\r\n          amount: {\r\n            e8s: parseAmount(amount, ICP_METADATA.decimals),\r\n          },\r\n          memo,\r\n          from_subaccount: [], // For now, using default subaccount to handle ICP\r\n          created_at_time: [],\r\n        },\r\n      ],\r\n    };\r\n  }, [amount, fee, memo, onFail, onSuccess, toAccountId]);\r\n","import { Principal } from '@dfinity/principal';\r\nimport { Transaction } from '@memecake/plug-inpage-provider/dist/src/Provider/interfaces';\r\nimport { Swap } from '@memecake/sonic-js';\r\nimport { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { SwapIDL } from '@/did';\r\nimport { AppLog } from '@/utils';\r\nimport { parseAmount } from '@/utils/format';\r\n\r\nimport { useBalances } from '@/hooks';\r\n\r\nimport { AddLiquidity, CreateTransaction, RemoveLiquidity } from '../../models';\r\n\r\nexport type LiquidityTransaction = Transaction;\r\n\r\nexport interface LiquidityExtraArgs {\r\n  principal: Principal;\r\n}\r\n\r\ntype useTokenTaxCheckOptions = {\r\n  balances?: any;\r\n  tokenId?: string;\r\n  tokenDecimals?: number;\r\n  tokenValue?: string;\r\n  tokenSymbol?: string;\r\n};\r\n\r\nconst useTokenTaxCheck = ({ balances, tokenId, tokenSymbol, tokenDecimals = 1, tokenValue = '', }: useTokenTaxCheckOptions) => {\r\n  const { sonicBalances, tokenBalances, icpBalance } = balances;\r\n  const tokenInfo = { wallet: 0, sonic: 0, taxInfo: { input: 0, taxedValue: 0, nonTaxedValue: 0, netValue: 0 } }\r\n  if (tokenId != '' && tokenId != 'ICP' && sonicBalances && tokenBalances) {\r\n    var id = tokenId ? tokenId : '';\r\n    tokenInfo['wallet'] = tokenBalances[id] ? tokenBalances[id] : 0;\r\n    tokenInfo['sonic'] = sonicBalances[id] ? sonicBalances[id] : 0;\r\n  } else { tokenInfo['wallet'] = icpBalance ? icpBalance : 0; }\r\n  if (tokenValue) {\r\n\r\n    let tokenVal: number = parseFloat(tokenValue)\r\n    if (tokenSymbol == 'YC') {\r\n      let decimals = tokenDecimals ? (10 ** tokenDecimals) : 1\r\n      let sonicBalance = tokenInfo['sonic'] / decimals;\r\n     \r\n      if ((sonicBalance > tokenVal)) {\r\n        tokenInfo.taxInfo.nonTaxedValue = tokenVal;\r\n        tokenInfo.taxInfo.taxedValue = 0;\r\n      } else {\r\n        tokenInfo.taxInfo.nonTaxedValue = sonicBalance;\r\n        tokenInfo.taxInfo.taxedValue = tokenVal - tokenInfo.taxInfo.nonTaxedValue;\r\n      }\r\n      tokenInfo.taxInfo.netValue = tokenInfo.taxInfo.nonTaxedValue + (tokenInfo.taxInfo.taxedValue * (89 / 100));\r\n    }\r\n  }\r\n  return tokenInfo\r\n};\r\n\r\nexport const useAddLiquidityTransactionMemo: CreateTransaction<AddLiquidity> = (\r\n  { token0, token1, slippage }: AddLiquidity, onSuccess, onFail) => {\r\n  var token0Value = token0.value, token1Value = token1.value;\r\n  var balances = useBalances();\r\n  return useMemo(() => {\r\n    if (!token0.metadata || !token1.metadata) throw new Error('Tokens are required');\r\n\r\n    if (token0.metadata?.symbol == 'YC') {\r\n      let info = useTokenTaxCheck({\r\n        balances: balances, tokenId: token0.metadata ? token0.metadata.id : '',\r\n        tokenSymbol: token0.metadata ? token0.metadata.symbol : '',\r\n        tokenDecimals: token0.metadata ? token0.metadata.decimals : 1,\r\n        tokenValue: token0.value ? token0.value : ''\r\n      });\r\n\r\n      token0Value = info.taxInfo.netValue.toString();\r\n      var _temp = token0Value.split(\".\");\r\n\r\n      token0Value = _temp[0] + '.' + (_temp[1] ? _temp[1].substring(0, 3):'0');\r\n    }\r\n\r\n    if (token1.metadata?.symbol == 'YC') {\r\n      let info = useTokenTaxCheck({\r\n        balances: balances, tokenId: token1.metadata ? token1.metadata.id : '',\r\n        tokenSymbol: token1.metadata ? token1.metadata.symbol : '',\r\n        tokenDecimals: token1.metadata ? token1.metadata.decimals : 1,\r\n        tokenValue: token1.value ? token1.value : ''\r\n      });\r\n\r\n      token1Value = info.taxInfo.netValue.toString();\r\n      var _temp = token1Value.split(\".\");\r\n      token1Value = _temp[0] + '.' + ( _temp[1]? _temp[1].substring(0, 3):'0');\r\n    }\r\n\r\n    const amount0Desired = parseAmount(token0Value, token0.metadata.decimals);\r\n    const amount1Desired = parseAmount(token1Value, token1.metadata.decimals);\r\n\r\n    const amount0Min = parseAmount(\r\n      Swap.getAmountMin({ amount: token0Value, slippage, decimals: token0.metadata.decimals }).toString(),\r\n      token0.metadata.decimals\r\n    );\r\n    const amount1Min = parseAmount(\r\n      Swap.getAmountMin({ amount: token1Value, slippage, decimals: token1.metadata.decimals }).toString(),\r\n      token1.metadata.decimals\r\n    );\r\n\r\n    const currentTime = (new Date().getTime() + 5 * 60 * 1000) * 10000000;\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.swap,\r\n      idl: SwapIDL.factory,\r\n      methodName: 'addLiquidity',\r\n      onFail: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onFail) onFail(res);\r\n      },\r\n      onSuccess: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onSuccess) onSuccess(res);\r\n      },\r\n      args: [\r\n        Principal.fromText(token0.metadata?.id), Principal.fromText(token1.metadata?.id),\r\n        amount0Desired, amount1Desired, amount0Min, amount1Min, BigInt(currentTime),\r\n      ],\r\n    };\r\n  }, [token0, token1, slippage]);\r\n};\r\n\r\n\r\nexport const useRemoveLiquidityTransactionMemo: CreateTransaction<RemoveLiquidity> = (\r\n  {\r\n    token0, token1, amount0Min, amount1Min, lpAmount, principalId,\r\n  }: RemoveLiquidity, onSuccess, onFail\r\n) =>\r\n  useMemo(() => {\r\n\r\n    if (!token0 || !token1) throw new Error('Token IDs are required');\r\n    if (!principalId) throw new Error('Principal is required');\r\n\r\n    const currentTime = (new Date().getTime() + 5 * 60 * 1000) * 10000000;\r\n\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.swap,\r\n      idl: SwapIDL.factory,\r\n      methodName: 'removeLiquidity',\r\n      onFail: async (res: SwapIDL.Result) => {\r\n        AppLog.error(\r\n          `Remove liquidity transaction failed: token0=${token0.metadata.id} token1=${token1.metadata.id} principal=${principalId}`,\r\n          res\r\n        );\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onFail) onFail(res);\r\n      },\r\n      onSuccess: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onSuccess) onSuccess(res);\r\n      },\r\n      args: [\r\n        Principal.fromText(token0.metadata.id),\r\n        Principal.fromText(token1.metadata.id),\r\n        BigInt(Math.round(lpAmount)),\r\n        parseAmount(String(amount0Min), token0.metadata.decimals),\r\n        parseAmount(String(amount1Min), token1.metadata.decimals),\r\n        Principal.fromText(principalId),\r\n        BigInt(currentTime),\r\n      ],\r\n    };\r\n  }, [token0, token1]);\r\n","import { ENV } from '@/config';\r\nimport { TokenIDL } from '@/did';\r\n\r\nimport { CreateTransaction, MintWICP } from '../../models';\r\n\r\nexport const getMintWICPTransaction: CreateTransaction<MintWICP> = (\r\n  options = {},\r\n  onSuccess,\r\n  onFail\r\n) => {\r\n  const { blockHeight, subaccount = [] } = options;\r\n\r\n  return {\r\n    canisterId: ENV.canistersPrincipalIDs.WICP,\r\n    idl: TokenIDL.DIP20.factory,\r\n    methodName: 'mint',\r\n    onSuccess: async (res: TokenIDL.DIP20.Result) => {\r\n      if ('Err' in res) throw new Error(JSON.stringify(Object.keys(res.Err)));\r\n      if (onSuccess) onSuccess(res);\r\n    },\r\n    onFail,\r\n    args: (prevResponses: any[]) => {\r\n      const argBlockHeight = prevResponses?.[0]?.response;\r\n      return [\r\n        subaccount,\r\n        (blockHeight && BigInt(blockHeight)) ?? argBlockHeight,\r\n      ];\r\n    },\r\n  };\r\n};\r\n","import { ENV } from '@/config';\r\nimport { XTCIDL } from '@/did';\r\n\r\nimport { CreateTransaction, MintXTC } from '../../models';\r\n\r\nexport const getMintXTCTransaction: CreateTransaction<MintXTC> = (\r\n  options = {},\r\n  onSuccess,\r\n  onFail\r\n) => {\r\n  const { blockHeight, subaccount = [] } = options;\r\n\r\n  return {\r\n    canisterId: ENV.canistersPrincipalIDs.XTC,\r\n    idl: XTCIDL.factory,\r\n    methodName: 'mint_by_icp',\r\n    onSuccess: async (res: XTCIDL.TxReceipt) => {\r\n      if ('Err' in res) throw new Error(JSON.stringify(Object.keys(res.Err)));\r\n      if (onSuccess) onSuccess(res);\r\n    },\r\n    onFail,\r\n    args: (prevResponses: any[]) => {\r\n      const argBlockHeight = prevResponses[0]?.response;\r\n\r\n      return [\r\n        subaccount,\r\n        (blockHeight && BigInt(blockHeight)) ?? argBlockHeight,\r\n      ];\r\n    },\r\n  };\r\n};\r\n","import { Principal } from '@dfinity/principal';\r\nimport { Transaction } from '@memecake/plug-inpage-provider/dist/src/Provider/interfaces';\r\nimport { Swap } from '@memecake/sonic-js';\r\nimport { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { SwapIDL } from '@/did';\r\nimport { parseAmount } from '@/utils/format';\r\nimport { useBalances } from '@/hooks';\r\n\r\nimport { CreateTransaction, SwapModel } from '../../models';\r\n\r\nexport type SwapTransaction = Transaction;\r\n\r\nexport interface SwapExtraArgs {\r\n  principal: Principal;\r\n}\r\n\r\ntype useTokenTaxCheckOptions = {\r\n  balances?: any;\r\n  tokenId?: string;\r\n\r\n  tokenDecimals?: number;\r\n  tokenValue?: string;\r\n  tokenSymbol?: string;\r\n};\r\n\r\nconst useTokenTaxCheck = ({ balances, tokenId, tokenSymbol, tokenDecimals = 1, tokenValue = '', }: useTokenTaxCheckOptions) => {\r\n  const { sonicBalances, tokenBalances, icpBalance } = balances;\r\n  const tokenInfo = { wallet: 0, sonic: 0, taxInfo: { input: 0, taxedValue: 0, nonTaxedValue: 0, netValue: 0 } }\r\n  if (tokenId != '' && tokenId != 'ICP' && sonicBalances && tokenBalances) {\r\n    var id = tokenId ? tokenId : '';\r\n    tokenInfo['wallet'] = tokenBalances[id] ? tokenBalances[id] : 0;\r\n    tokenInfo['sonic'] = sonicBalances[id] ? sonicBalances[id] : 0;\r\n  } else { tokenInfo['wallet'] = icpBalance ? icpBalance : 0; }\r\n  if (tokenValue) {\r\n    let tokenVal: number = parseFloat(tokenValue)\r\n    if (tokenSymbol == 'YC') {\r\n      let decimals = tokenDecimals ? (10 ** tokenDecimals) : 1\r\n      let sonicBalance = tokenInfo['sonic'] / decimals;\r\n\r\n      if ((sonicBalance > tokenVal)) {\r\n        tokenInfo.taxInfo.nonTaxedValue = tokenVal;\r\n        tokenInfo.taxInfo.taxedValue = 0;\r\n      } else {\r\n        tokenInfo.taxInfo.nonTaxedValue = sonicBalance;\r\n        tokenInfo.taxInfo.taxedValue = tokenVal - tokenInfo.taxInfo.nonTaxedValue;\r\n      }\r\n      tokenInfo.taxInfo.netValue = tokenInfo.taxInfo.nonTaxedValue + (tokenInfo.taxInfo.taxedValue * (88.9 / 100));\r\n    }\r\n  }\r\n  return tokenInfo\r\n};\r\n\r\nexport const useSwapExactTokensTransactionMemo: CreateTransaction<SwapModel> = (\r\n  { from, to, slippage, principalId, entryVal }: SwapModel, onSuccess, onFail) => {\r\n  var fromValue = from.value;\r\n  let balances = useBalances();\r\n  return useMemo(() => {\r\n    if (!from.metadata || !to.metadata) throw new Error('Tokens are required');\r\n    if (!principalId) throw new Error('Principal is required');\r\n\r\n    if (from.metadata?.symbol == 'YC') {\r\n      let info = useTokenTaxCheck({\r\n        balances: balances, tokenId: from.metadata ? from.metadata.id : '',\r\n        tokenSymbol: from.metadata ? from.metadata.symbol : '',\r\n        tokenDecimals: from.metadata ? from.metadata.decimals : 1,\r\n        tokenValue: from.value ? from.value : ''\r\n      });\r\n      fromValue = info.taxInfo.netValue.toFixed(3);\r\n    }\r\n\r\n    const amountIn = parseAmount(fromValue, from.metadata.decimals);\r\n    var outAmountMin = Swap.getAmountMin({ amount: to.value, slippage, decimals: to.metadata.decimals }).toNumber();\r\n\r\n    if (from.metadata?.symbol == 'YC' && parseFloat(entryVal || '') > 0) {\r\n      outAmountMin = outAmountMin - (outAmountMin * 0.11);\r\n    }\r\n\r\n    const currentTime = (new Date().getTime() + 5 * 60 * 1000) * 10000000;\r\n\r\n    var amountOutMin = parseAmount(outAmountMin.toString(), to.metadata.decimals);\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.swap,\r\n      idl: SwapIDL.factory,\r\n      methodName: 'swapExactTokensForTokens',\r\n      onFail,\r\n      onSuccess: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onSuccess) onSuccess(res);\r\n      },\r\n      args: [amountIn, amountOutMin, from.paths[to.metadata.id]?.path, Principal.fromText(principalId), BigInt(currentTime)],\r\n      amountOutMin:outAmountMin\r\n    };\r\n  }, [from.metadata, from.value, from.paths, to.metadata, to.value, principalId, slippage, onFail, onSuccess]);\r\n};\r\n\r\nexport const useSwapForExactTokensTransactionMemo: CreateTransaction<\r\n  SwapModel\r\n> = ({ from, to, slippage, principalId }: SwapModel, onSuccess, onFail) => {\r\n\r\n  var fromValue = from.value;\r\n  let balances = useBalances();\r\n\r\n  return useMemo(() => {\r\n    if (!from.metadata || !to.metadata) throw new Error('Tokens are required');\r\n    if (!principalId) throw new Error('Principal is required');\r\n    if (from.metadata?.symbol == 'YC') {\r\n      let info = useTokenTaxCheck({\r\n        balances: balances, tokenId: from.metadata ? from.metadata.id : '',\r\n        tokenSymbol: from.metadata ? from.metadata.symbol : '',\r\n        tokenDecimals: from.metadata ? from.metadata.decimals : 1,\r\n        tokenValue: from.value ? from.value : ''\r\n      });\r\n      fromValue = info.taxInfo.netValue.toFixed(3);\r\n    }\r\n\r\n    const amountOut = parseAmount(to.value, to.metadata.decimals);\r\n    const amountInMin = parseAmount(\r\n      Swap.getAmountMin({\r\n        amount: fromValue,\r\n        slippage,\r\n        decimals: from.metadata.decimals,\r\n      }).toString(),\r\n      to.metadata.decimals\r\n    );\r\n    const currentTime = (new Date().getTime() + 5 * 60 * 1000) * 10000000;\r\n\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.swap,\r\n      idl: SwapIDL.factory,\r\n      methodName: 'swapTokensForExactTokens',\r\n      onFail,\r\n      onSuccess: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        onSuccess(res);\r\n      },\r\n      args: [\r\n        amountOut,\r\n        amountInMin,\r\n        [from.metadata.id, to.metadata.id],\r\n        Principal.fromText(principalId),\r\n        BigInt(currentTime),\r\n      ],\r\n    };\r\n  }, [\r\n    from.metadata,\r\n    from.value,\r\n    to.metadata,\r\n    to.value,\r\n    principalId,\r\n    slippage,\r\n    onFail,\r\n    onSuccess,\r\n  ]);\r\n};\r\n","import { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport { TokenIDL } from '@/did';\r\nimport { parseAmount } from '@/utils/format';\r\n\r\nimport { CreateTransaction, WithdrawWICP } from '../../models';\r\n\r\nexport const useWithdrawWICPTransactionMemo: CreateTransaction<WithdrawWICP> = (\r\n  { amount, toAccountId },\r\n  onSuccess,\r\n  onFail\r\n) =>\r\n  useMemo(() => {\r\n    if (!amount) throw new Error('Amount is required');\r\n    if (!toAccountId) throw new Error('Account ID is required');\r\n\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.WICP,\r\n      idl: TokenIDL.DIP20.factory,\r\n      methodName: 'withdraw',\r\n      onSuccess: async (res: TokenIDL.DIP20.Result) => {\r\n        if ('Err' in res) throw new Error(JSON.stringify(Object.keys(res.Err)));\r\n        if (onSuccess) onSuccess(res);\r\n      },\r\n      onFail,\r\n      args: [parseAmount(amount, ICP_METADATA.decimals), toAccountId],\r\n    };\r\n  }, [amount, onFail, onSuccess, toAccountId]);\r\n","import { Principal } from '@dfinity/principal';\r\nimport { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { SwapIDL } from '@/did';\r\nimport { parseAmount } from '@/utils/format';\r\n\r\nimport { CreateTransaction, Withdraw } from '../../models';\r\n\r\nexport const useWithdrawTransactionMemo: CreateTransaction<Withdraw> = ({ amount, token },onSuccess,onFail) =>\r\n  useMemo(() => {\r\n    if (!token?.id || !amount) {return {};}\r\n    return {\r\n      args: [Principal.fromText(token.id), parseAmount(amount, token.decimals)],\r\n      canisterId: ENV.canistersPrincipalIDs.swap,\r\n      idl: SwapIDL.factory,\r\n      methodName: 'withdraw',\r\n      onSuccess: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onSuccess) onSuccess(res);\r\n      },\r\n      onFail,\r\n    };\r\n  }, [amount, token, onFail, onSuccess]);\r\n","import { useMemo, useState } from 'react';\r\n\r\nimport { plug } from '@/integrations/plug';\r\n\r\nimport { BatchTransactions } from '..';\r\nimport { Batch } from '../models';\r\n\r\nexport const useBatch = <Model>({\r\n  transactions, handleRetry\r\n}: Batch.HookProps<Model>): Batch.Hook<Model> => {\r\n\r\n  const [state, setState] = useState(Batch.DefaultHookState.Idle);\r\n  const [error, setError] = useState<unknown>();\r\n\r\n  const handleError = (error: unknown): void => {\r\n    setError(error);\r\n    setState(Batch.DefaultHookState.Error);\r\n  };\r\n\r\n  const states = useMemo(\r\n    () => Object.keys(transactions) as Batch.DefaultHookState[],\r\n    [transactions]\r\n  );\r\n\r\n  const batch = useMemo(() => {\r\n    const newBatch = new BatchTransactions(plug, handleRetry);\r\n    const transactionsList = Object.values(transactions);\r\n    Object.values(transactions).forEach((transaction, index) => {\r\n      const onSuccess = transaction.onSuccess;\r\n      transaction.onSuccess = async (res) => {\r\n        let txSuccessResponse;\r\n        if (onSuccess) { txSuccessResponse = await onSuccess(res);}\r\n        if (index !== transactionsList.length - 1) {\r\n          setState(states[index + 1]);\r\n        } else {\r\n          setState(Batch.DefaultHookState.Done);\r\n        }\r\n        return txSuccessResponse;\r\n      };\r\n      const onFail = transaction.onFail;\r\n      transaction.onFail = async (err, prevRes) => {\r\n        if (onFail) await onFail(err, prevRes);\r\n        handleError(err);\r\n      };\r\n      newBatch.push(transaction);\r\n    });\r\n\r\n    return newBatch;\r\n  }, [transactions, handleRetry]);\r\n\r\n  const execute = async (): Promise<unknown> => {\r\n    if (\r\n      state !== Batch.DefaultHookState.Idle &&\r\n      state !== Batch.DefaultHookState.Error\r\n    ) {\r\n      return Promise.reject('Batch is not idle');\r\n    }\r\n    setState(states[0]);\r\n    try {\r\n      return await batch.execute();\r\n    } catch (error: any) {\r\n      // TODO: Improve rejection flow to support other providers\r\n      if (error.message === 'The transactions was rejected.') {\r\n        setState(Batch.DefaultHookState.Error);\r\n      }\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return { execute, state, error };\r\n};\r\n","import { useCallback } from 'react';\r\n\r\nimport {\r\n  MintTokenSymbol,\r\n  popNotification,\r\n  useAppDispatch,\r\n  usePlugStore,\r\n} from '@/store';\r\nimport {\r\n  getFromStorage,\r\n  LocalStorageKey,\r\n  MintUncompleteBlockHeights,\r\n  saveToStorage,\r\n} from '@/utils';\r\nimport { AppLog } from '@/utils';\r\n\r\nexport type UseMintErrorHandlerOptions = {\r\n  notificationId: string;\r\n  errorMessage?: string;\r\n};\r\n\r\nexport const useMintErrorHandler = ({\r\n  notificationId,\r\n}: UseMintErrorHandlerOptions) => {\r\n  const { principalId } = usePlugStore();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleMintError = useCallback(\r\n    (errorMessage?: string, callback?: (errorText: string) => unknown) => {\r\n      if (!errorMessage) {\r\n        return;\r\n      }\r\n\r\n      AppLog.error('Minting Error', errorMessage);\r\n\r\n      const isBlockUsedError = errorMessage.includes('BlockUsed');\r\n      const isUnauthorizedError = errorMessage.includes('Unauthorized');\r\n      const isOtherError = errorMessage.includes('Other');\r\n      const isOperationStyleError = errorMessage.includes(\r\n        'ErrorOperationStyle'\r\n      );\r\n      const isErrorToError = errorMessage.includes('ErrorTo');\r\n      const isAmountToSmallError = errorMessage.includes('AmountToSmall');\r\n\r\n      const errorText = isUnauthorizedError\r\n        ? `Block Height entered does not match your address`\r\n        : isOtherError\r\n        ? `Wrap failed, check if the Block Height correct`\r\n        : isBlockUsedError\r\n        ? `Block Height entered is already used`\r\n        : isOperationStyleError\r\n        ? `Provided Block Height can't be used for this operation`\r\n        : isErrorToError\r\n        ? `Selected token symbol does not match the Block Height`\r\n        : isAmountToSmallError\r\n        ? `Amount to mint is too small`\r\n        : `Wrap failed, please try again later`;\r\n\r\n      if (isBlockUsedError && principalId) {\r\n        const removeLastProcessedTransaction = (\r\n          tokenSymbol: MintTokenSymbol\r\n        ) => {\r\n          const localStorageKey =\r\n            tokenSymbol === MintTokenSymbol.WICP\r\n              ? LocalStorageKey.MintWICPUncompleteBlockHeights\r\n              : LocalStorageKey.MintXTCUncompleteBlockHeights;\r\n\r\n          const prevMintBlockHeightData = getFromStorage(localStorageKey) as\r\n            | MintUncompleteBlockHeights\r\n            | undefined;\r\n\r\n          const newBlockHeightData = {\r\n            ...prevMintBlockHeightData,\r\n            [principalId]: [\r\n              ...(prevMintBlockHeightData?.[principalId]?.filter(\r\n                (_, index) => index !== 0\r\n              ) || []),\r\n            ],\r\n          };\r\n\r\n          saveToStorage(localStorageKey, newBlockHeightData);\r\n        };\r\n\r\n        removeLastProcessedTransaction(MintTokenSymbol.WICP);\r\n        removeLastProcessedTransaction(MintTokenSymbol.XTC);\r\n\r\n        dispatch(popNotification(notificationId));\r\n      }\r\n\r\n      if (callback) {\r\n        callback(errorText);\r\n      }\r\n    },\r\n    [dispatch, notificationId, principalId]\r\n  );\r\n\r\n  return handleMintError;\r\n};\r\n","export * from './batch-transactions';\r\nexport * from './hooks';\r\nexport * from './models';\r\n","import type {\r\n  Transaction,\r\n  TransactionPrevResponse,\r\n} from '@memecake/plug-inpage-provider/dist/src/Provider/interfaces';\r\n\r\nimport { CreateTransaction } from '.';\r\n\r\nexport namespace Batch {\r\n  export enum State {\r\n    Idle = 'idle',\r\n    Running = 'running',\r\n  }\r\n\r\n  export type Execute = () => Promise<unknown>;\r\n\r\n  export type Push = (transaction: Transaction) => Controller;\r\n\r\n  export type GetTransactions = () => Transaction[];\r\n\r\n  export type GetState = () => State;\r\n\r\n  export interface Controller {\r\n    execute: Execute;\r\n    push: Push;\r\n    getTransactions: GetTransactions;\r\n    getState: GetState;\r\n  }\r\n\r\n  export enum DefaultHookState {\r\n    Idle = 'idle',\r\n    Done = 'done',\r\n    Error = 'error',\r\n  }\r\n\r\n  export type HookState = {\r\n    [key: number]: string;\r\n  };\r\n\r\n  export interface Hook<State> {\r\n    execute: Batch.Execute;\r\n    state: State | DefaultHookState;\r\n    error: unknown;\r\n  }\r\n\r\n  export interface HookProps<Model> {\r\n    transactions: {\r\n      [key: string]: ReturnType<CreateTransaction<Model, Transaction>>;\r\n    };\r\n    handleRetry?: (\r\n      error: unknown,\r\n      prevResponses?: TransactionPrevResponse[]\r\n    ) => Promise<boolean | { nextTxArgs: unknown }>;\r\n  }\r\n}\r\n","export * from './batch';\r\nexport * from './create-transaction';\r\nexport * from './transactions';\r\n","export * from './create-pair';\r\nexport * from './deposit';\r\nexport * from './ledger-transfer';\r\nexport * from './liquidity';\r\nexport * from './mint-wicp';\r\nexport * from './mint-xtc';\r\nexport * from './swap';\r\nexport * from './withdraw-wicp';\r\nexport * from './withdraw';\r\n","import { Link } from '@chakra-ui/react';\r\nimport { deserialize, serialize } from '@memecake/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\n\r\nimport { useAllPairs } from '@/hooks';\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useTokenAllowance } from '@/hooks/use-token-allowance';\r\nimport { useAddLiquidityBatch } from '@/integrations/transactions';\r\nimport {\r\n  AddLiquidityModalDataStep, modalsSliceActions, NotificationType,\r\n  useAppDispatch, useLiquidityViewStore, useNotificationStore,\r\n} from '@/store';\r\n\r\nimport { AppLog } from '@/utils';\r\n\r\nexport interface AddLiquidityNotificationContentProps {\r\n  id: string;\r\n}\r\n\r\nexport const AddLiquidityNotificationContent: React.FC<\r\n  AddLiquidityNotificationContentProps\r\n> = ({ id }) => {\r\n  const dispatch = useAppDispatch();\r\n  const liquidityViewStore = useLiquidityViewStore();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { getBalances, getUserPositiveLPBalances } = useBalances();\r\n  const { getAllPairs } = useAllPairs();\r\n\r\n  const { token0, token1, slippage } =\r\n    useMemo(() => {\r\n      // Clone current state just for this batch\r\n      const { token0, token1, slippage, pair } = liquidityViewStore;\r\n      // Is needed to send to canister the values in the pair id order\r\n      if (pair) {\r\n        const token0Id = pair.id.split(':')[0];\r\n        if (token0Id !== token0.metadata?.id) {\r\n          return deserialize(\r\n            serialize({ token0: token1, token1: token0, slippage })\r\n          );\r\n        }\r\n      }\r\n      return deserialize(serialize({ token0, token1, slippage }));\r\n    }, []) ?? {};\r\n\r\n    \r\n  const allowance0 = useTokenAllowance(token0.metadata?.id);\r\n  const allowance1 = useTokenAllowance(token1.metadata?.id);\r\n\r\n  var batchData = useAddLiquidityBatch({ token0, token1, slippage: Number(slippage) });\r\n\r\n  const batch: any = batchData?.batch, openBatchModal: any = batchData?.openBatchModal;\r\n  const batchFnUpdate = batch?.batchFnUpdate;\r\n\r\n  const handleStateChange = () => {\r\n    if (batch && batch.state)\r\n    if (Object.values(AddLiquidityModalDataStep).includes(batch.state as AddLiquidityModalDataStep)){\r\n      dispatch(modalsSliceActions.setAddLiquidityModalData({ step: batch.state as AddLiquidityModalDataStep \r\n    }));\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    if (!batch?.state) return;\r\n    if (typeof allowance0 === 'number' && typeof allowance1 === 'number') {\r\n      dispatch(modalsSliceActions.closeAllowanceVerifyModal());\r\n      handleStateChange();\r\n      openBatchModal();\r\n    } else {\r\n      dispatch( \r\n        modalsSliceActions.setAllowanceVerifyModalData({\r\n          tokenSymbol: [token0.metadata?.symbol, token1.metadata?.symbol],\r\n        })\r\n      );\r\n      dispatch(modalsSliceActions.openAllowanceVerifyModal());\r\n    }\r\n  };\r\n  useEffect(handleStateChange, [batch.state, dispatch]);\r\n  useEffect(() => {\r\n    handleOpenModal();\r\n    if (typeof allowance0 === 'undefined' || typeof allowance1 === 'undefined')\r\n      return;\r\n    if (batch.execute)\r\n    batch.execute().then(() => {\r\n      dispatch(modalsSliceActions.clearAddLiquidityModalData());\r\n      dispatch(modalsSliceActions.closeAddLiquidityProgressModal());\r\n\r\n      addNotification({\r\n        title: `Added LP of ${token0.value} ${token0.metadata.symbol} + ${token1.value} ${token1.metadata.symbol}`,\r\n        type: NotificationType.Success,id: Date.now().toString(),transactionLink: '/activity',\r\n      });\r\n      getBalances();\r\n      getAllPairs();\r\n      \r\n      getUserPositiveLPBalances();\r\n      \r\n\r\n    }).catch((err:any) => {\r\n      AppLog.error('Add Liquidity Error', err);\r\n      dispatch(modalsSliceActions.clearAddLiquidityModalData());\r\n      addNotification({\r\n        title: `Add LP of ${token0.value} ${token0.metadata.symbol} + ${token1.value} ${token1.metadata.symbol} failed`,\r\n        type: NotificationType.Error, id: Date.now().toString(),\r\n      });\r\n    }).finally(() => popNotification(id));\r\n  }, [batchFnUpdate]);\r\n  return (\r\n    <Link target=\"_blank\" rel=\"noreferrer\" color=\"dark-blue.500\" onClick={handleOpenModal}>\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport { deserialize, serialize } from '@memecake/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\n\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useTokenAllowance } from '@/hooks/use-token-allowance';\r\nimport { useDepositBatch } from '@/integrations/transactions';\r\n\r\nimport {\r\n  DepositModalDataStep, modalsSliceActions, NotificationType, useAppDispatch,\r\n  useDepositViewStore, useNotificationStore,\r\n} from '@/store';\r\n\r\nimport { AppLog, tokenList } from '@/utils';\r\n\r\nexport interface DepositNotificationContentProps { id: string }\r\n\r\nexport const DepositNotificationContent: React.FC<DepositNotificationContentProps> = ({ id }) => {\r\n  const dispatch = useAppDispatch();\r\n  const { addNotification, popNotification } = useNotificationStore(), { getBalances } = useBalances();\r\n  const depositViewStore = useDepositViewStore();\r\n\r\n  \r\n  const { value, tokenId } = useMemo(() => {\r\n      const { amount: value, tokenId } = depositViewStore;\r\n      return deserialize(serialize({ value, tokenId }));\r\n  }, []) ?? {};\r\n\r\n  const selectedToken = tokenList('obj', tokenId), allowance = useTokenAllowance(selectedToken?.id);\r\n\r\n  var batchData = useDepositBatch({ amount: value, token: selectedToken, allowance });\r\n\r\n  const batch = batchData?.batch, openBatchModal = batchData?.openBatchModal;\r\n  const batchFnUpdate = batch?.batchFnUpdate;\r\n\r\n  const handleStateChange = () => {\r\n    if (batch && batch.state)\r\n      if (\r\n        Object.values(DepositModalDataStep).includes(batch.state as DepositModalDataStep)\r\n      ) {\r\n        dispatch(modalsSliceActions.setDepositModalData({ step: batch.state as DepositModalDataStep }));\r\n      }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    if (!batch?.state) return;\r\n    if (typeof allowance === 'number') {\r\n      dispatch(modalsSliceActions.closeAllowanceVerifyModal());\r\n      handleStateChange(); openBatchModal();\r\n    } else {\r\n      dispatch(\r\n        modalsSliceActions.setAllowanceVerifyModalData({ tokenSymbol: selectedToken?.symbol })\r\n      );\r\n      dispatch(modalsSliceActions.openAllowanceVerifyModal());\r\n    }\r\n  };\r\n\r\n  useEffect(handleStateChange, [batch?.state]);\r\n\r\n  useEffect(() => {\r\n    handleOpenModal();\r\n    if (typeof allowance === 'undefined' || !batch?.state) return;\r\n    if (batch.execute)\r\n      batch.execute().then(() => {\r\n        dispatch(modalsSliceActions.closeDepositProgressModal());\r\n        getBalances();\r\n        addNotification({\r\n          title: `Deposited ${value} ${selectedToken?.symbol}`,\r\n          type: NotificationType.Success,\r\n          id: Date.now().toString(),\r\n          transactionLink: '/activity',\r\n        });\r\n        dispatch(modalsSliceActions.clearDepositModalData());\r\n      }).catch((err: any) => {\r\n        AppLog.error(`Deposit Error`, err);\r\n        dispatch(modalsSliceActions.clearDepositModalData());\r\n        addNotification({\r\n          title: `Deposit ${value} ${selectedToken?.symbol} failed`,\r\n          type: NotificationType.Error, id: Date.now().toString(),\r\n        });\r\n      }).finally(() => popNotification(id));\r\n  \r\n  }, [allowance, batchFnUpdate]);\r\n\r\n  return (\r\n    <Link target=\"_blank\" rel=\"noreferrer\" color=\"dark-blue.500\" onClick={handleOpenModal}>\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","export * from './add-liquidity-notification-content';\r\nexport * from './deposit-notification-content';\r\nexport * from './mint-auto-notification-content';\r\nexport * from './mint-manual-notification-content';\r\nexport * from './mint-wicp-notification-content';\r\nexport * from './mint-xtc-notification-content';\r\nexport * from './remove-liquidity-notifcation-content';\r\nexport * from './swap-notification-content';\r\nexport * from './transaction-notification-content';\r\nexport * from './withdraw-notification-content';\r\nexport * from './withdraw-wicp-notification-content';\r\n","import { Button, Flex, Stack, Text, useColorModeValue } from '@chakra-ui/react';\r\nimport { useEffect, useMemo, useState } from 'react';\r\n\r\nimport { StepStatus, useStepStatus } from '@/components/modals';\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { Batch } from '@/integrations/transactions';\r\nimport { useMintMultipleBatch } from '@/integrations/transactions/hooks/batch/use-mint-multiple-batch';\r\nimport { useMintErrorHandler } from '@/integrations/transactions/hooks/use-mint-error-handler';\r\nimport {\r\n  addNotification,\r\n  NotificationState,\r\n  NotificationType,\r\n  setNotificationData,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n} from '@/store';\r\nimport { LocalStorageKey, removeFromStorage } from '@/utils';\r\n\r\nexport type MintAutoNotificationContentProps = {\r\n  id: string;\r\n  state?: NotificationState;\r\n};\r\n\r\nexport const MINT_AUTO_NOTIFICATION_TITLES = {\r\n  [NotificationState.Pending]: 'Minting in progress',\r\n  [NotificationState.Success]: 'Mint was successful',\r\n  [NotificationState.Error]:\r\n    'You have unfinished or failed mint(s), click retry mint below.',\r\n};\r\n\r\nexport const MintAutoNotificationContent: React.FC<\r\n  MintAutoNotificationContentProps\r\n> = ({ id, state }) => {\r\n  const [steps, setSteps] = useState<string[]>([]);\r\n  const [step, setStep] = useState<string | Batch.DefaultHookState>(\r\n    Batch.DefaultHookState.Idle\r\n  );\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const { getBalances } = useBalances();\r\n\r\n  const handleMintError = useMintErrorHandler({ notificationId: id });\r\n\r\n  const { mintWICPUncompleteBlockHeights, mintXTCUncompleteBlockHeights } =\r\n    useModalsStore();\r\n\r\n  const getStepStatus = useStepStatus<string>({\r\n    activeStep: step,\r\n    steps,\r\n  });\r\n\r\n  const { batch, getTransactionNames } = useMintMultipleBatch({\r\n    blockHeights: {\r\n      WICP: mintWICPUncompleteBlockHeights,\r\n      XTC: mintXTCUncompleteBlockHeights,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    setStep(batch.state);\r\n  }, [batch.state, dispatch]);\r\n\r\n  const handleAutoMint = () => {\r\n    dispatch(\r\n      setNotificationData({\r\n        data: {\r\n          state: NotificationState.Pending,\r\n          title: MINT_AUTO_NOTIFICATION_TITLES[NotificationState.Pending],\r\n        },\r\n        id,\r\n      })\r\n    );\r\n\r\n    batch\r\n      .execute()\r\n      .then(() => {\r\n        dispatch(\r\n          addNotification({\r\n            title: `Minting finished`,\r\n            type: NotificationType.Success,\r\n            id: Date.now().toString(),\r\n          })\r\n        );\r\n\r\n        removeFromStorage(LocalStorageKey.MintWICPUncompleteBlockHeights);\r\n        removeFromStorage(LocalStorageKey.MintXTCUncompleteBlockHeights);\r\n\r\n        getBalances();\r\n        dispatch(\r\n          setNotificationData({\r\n            data: {\r\n              state: NotificationState.Success,\r\n              title: MINT_AUTO_NOTIFICATION_TITLES[NotificationState.Success],\r\n            },\r\n            id,\r\n          })\r\n        );\r\n      })\r\n      .catch((err) =>\r\n        handleMintError(err.message, (errorMessage) => {\r\n          dispatch(\r\n            setNotificationData({\r\n              data: {\r\n                state: NotificationState.Error,\r\n                title: MINT_AUTO_NOTIFICATION_TITLES[NotificationState.Error],\r\n              },\r\n              id,\r\n            })\r\n          );\r\n          dispatch(\r\n            addNotification({\r\n              title: errorMessage,\r\n              type: NotificationType.Error,\r\n              id: Date.now().toString(),\r\n            })\r\n          );\r\n        })\r\n      );\r\n\r\n    const transactionNames = getTransactionNames();\r\n\r\n    setSteps(transactionNames);\r\n  };\r\n\r\n  const doneStepColor = useColorModeValue('green.600', 'green.400');\r\n  const activeStepColor = useColorModeValue('gray.600', 'gray.400');\r\n  const disabledStepColor = useColorModeValue('gray.400', 'gray.600');\r\n\r\n  const shouldShowRetryButton = useMemo(() => {\r\n    return (\r\n      step === Batch.DefaultHookState.Idle ||\r\n      step === Batch.DefaultHookState.Error ||\r\n      state === NotificationState.Error\r\n    );\r\n  }, [step, state]);\r\n\r\n  return shouldShowRetryButton ? (\r\n    <Button\r\n      colorScheme=\"dark-blue\"\r\n      variant=\"gradient\"\r\n      isFullWidth\r\n      onClick={handleAutoMint}\r\n      mt={3}\r\n    >\r\n      Retry Mint\r\n    </Button>\r\n  ) : (\r\n    <Stack w=\"full\" pt={4}>\r\n      {steps.map((_step) => {\r\n        const stepStatus = getStepStatus(_step);\r\n        const isDoneStep = stepStatus === StepStatus.Done;\r\n        const isActiveStep = stepStatus === StepStatus.Active;\r\n        const isDisabledStep = stepStatus === StepStatus.Disabled;\r\n\r\n        const stepColor = isDoneStep\r\n          ? doneStepColor\r\n          : isActiveStep\r\n          ? activeStepColor\r\n          : isDisabledStep\r\n          ? disabledStepColor\r\n          : disabledStepColor;\r\n\r\n        const stepLabel = isDisabledStep\r\n          ? 'Waiting'\r\n          : isActiveStep\r\n          ? 'Minting...'\r\n          : 'Done';\r\n\r\n        const blockHeight = _step.split('-')[1];\r\n\r\n        return (\r\n          <Flex\r\n            key={_step}\r\n            w=\"full\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Text>{blockHeight}</Text>\r\n            <Text color={stepColor}>{stepLabel}</Text>\r\n          </Flex>\r\n        );\r\n      })}\r\n    </Stack>\r\n  );\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useMintSingleBatch } from '@/integrations/transactions/hooks/batch/use-mint-single-batch';\r\nimport { useMintErrorHandler } from '@/integrations/transactions/hooks/use-mint-error-handler';\r\nimport {\r\n  modalsSliceActions,\r\n  NotificationType,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n  useNotificationStore,\r\n} from '@/store';\r\n\r\nexport interface MintManualNotificationContentProps {\r\n  id: string;\r\n}\r\n\r\nexport const MintManualNotificationContent: React.FC<\r\n  MintManualNotificationContentProps\r\n> = ({ id }) => {\r\n  const dispatch = useAppDispatch();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { getBalances } = useBalances();\r\n  const { mintManualTokenSymbol, mintManualBlockHeight } = useModalsStore();\r\n  const handleMintError = useMintErrorHandler({ notificationId: id });\r\n\r\n  const { batch } = useMintSingleBatch({\r\n    tokenSymbol: mintManualTokenSymbol,\r\n    blockHeight: mintManualBlockHeight,\r\n  });\r\n\r\n  useEffect(() => {\r\n    batch\r\n      .execute()\r\n      .then(() => {\r\n        addNotification({\r\n          title: `Minting finished`,\r\n          type: NotificationType.Success,\r\n          id: Date.now().toString(),\r\n        });\r\n\r\n        dispatch(modalsSliceActions.setMintManualBlockHeight(''));\r\n        getBalances();\r\n      })\r\n      .catch((err) =>\r\n        handleMintError(err.message, (errorMessage) => {\r\n          dispatch(\r\n            modalsSliceActions.setMintManualModalErrorMessage(errorMessage)\r\n          );\r\n          dispatch(modalsSliceActions.openMintManualModal());\r\n        })\r\n      )\r\n      .finally(() => popNotification(id));\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport { deserialize, serialize } from '@memecake/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\n\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useMintBatch } from '@/integrations/transactions';\r\nimport {\r\n  MintModalDataStep,\r\n  MintTokenSymbol,\r\n  modalsSliceActions,\r\n  NotificationType,\r\n  useAppDispatch,\r\n  useNotificationStore,\r\n  useSwapViewStore,\r\n} from '@/store';\r\nimport { AppLog } from '@/utils';\r\n\r\nexport interface MintWICPNotificationContentProps {\r\n  id: string;\r\n}\r\n\r\nexport const MintWICPNotificationContent: React.FC<\r\n  MintWICPNotificationContentProps\r\n> = ({ id }) => {\r\n  const dispatch = useAppDispatch();\r\n  const swapViewStore = useSwapViewStore();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { getBalances } = useBalances();\r\n\r\n  const { from, to, keepInSonic } =\r\n    useMemo(() => {\r\n      const { from, to, keepInSonic } = swapViewStore;\r\n\r\n      return deserialize(serialize({ from, to, keepInSonic }));\r\n    }, []) ?? {};\r\n\r\n  const { batch, openBatchModal } = useMintBatch({\r\n    amountIn: from.value,\r\n    amountOut: to.value,\r\n    tokenSymbol: MintTokenSymbol.WICP,\r\n    keepInSonic,\r\n  });\r\n\r\n  const handleStateChange = () => {\r\n    if (\r\n      Object.values(MintModalDataStep).includes(\r\n        batch.state as MintModalDataStep\r\n      )\r\n    ) {\r\n      dispatch(\r\n        modalsSliceActions.setMintWICPModalData({\r\n          step: batch.state,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    handleStateChange();\r\n\r\n    openBatchModal();\r\n  };\r\n\r\n  useEffect(handleStateChange, [batch.state, dispatch]);\r\n\r\n  useEffect(() => {\r\n    batch\r\n      .execute()\r\n      .then(() => {\r\n        dispatch(modalsSliceActions.closeMintWICPProgressModal());\r\n\r\n        addNotification({\r\n          title: `Wrapped ${from.value} ${from.metadata.symbol}`,\r\n          type: NotificationType.Success,\r\n          id: Date.now().toString(),\r\n          transactionLink: '/activity',\r\n        });\r\n        getBalances();\r\n      })\r\n      .catch((err) => {\r\n        AppLog.error('Mint WICP Error', err);\r\n\r\n        addNotification({\r\n          title: `Wrap ${from.value} ${from.metadata.symbol} failed`,\r\n          type: NotificationType.Error,\r\n          id: Date.now().toString(),\r\n        });\r\n      })\r\n      .finally(() => popNotification(id));\r\n\r\n    handleOpenModal();\r\n  }, []);\r\n\r\n  return (\r\n    <Link\r\n      target=\"_blank\"\r\n      rel=\"noreferrer\"\r\n      color=\"dark-blue.500\"\r\n      onClick={handleOpenModal}\r\n    >\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport { deserialize, serialize } from '@memecake/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\n\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useMintBatch } from '@/integrations/transactions/hooks/batch/use-mint-batch';\r\nimport {\r\n  MintModalDataStep,\r\n  MintTokenSymbol,\r\n  modalsSliceActions,\r\n  NotificationType,\r\n  useAppDispatch,\r\n  useNotificationStore,\r\n  useSwapViewStore,\r\n} from '@/store';\r\nimport { AppLog } from '@/utils';\r\n\r\nexport interface MintXTCNotificationContentProps {\r\n  id: string;\r\n}\r\n\r\nexport const MintXTCNotificationContent: React.FC<\r\n  MintXTCNotificationContentProps\r\n> = ({ id }) => {\r\n  const dispatch = useAppDispatch();\r\n  const swapViewStore = useSwapViewStore();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { getBalances } = useBalances();\r\n\r\n  const { from, to, keepInSonic } =\r\n    useMemo(() => {\r\n      const { from, to, keepInSonic } = swapViewStore;\r\n\r\n      return deserialize(serialize({ from, to, keepInSonic }));\r\n    }, []) ?? {};\r\n\r\n  const { batch, openBatchModal } = useMintBatch({\r\n    amountIn: from.value,\r\n    amountOut: to.value,\r\n    tokenSymbol: MintTokenSymbol.XTC,\r\n    keepInSonic,\r\n  });\r\n\r\n  const handleStateChange = () => {\r\n    if (\r\n      Object.values(MintModalDataStep).includes(\r\n        batch.state as MintModalDataStep\r\n      )\r\n    ) {\r\n      dispatch(\r\n        modalsSliceActions.setMintXTCModalData({\r\n          step: batch.state,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    handleStateChange();\r\n\r\n    openBatchModal();\r\n  };\r\n\r\n  useEffect(handleStateChange, [batch.state, dispatch]);\r\n\r\n  useEffect(() => {\r\n    batch\r\n      .execute()\r\n      .then(() => {\r\n        dispatch(modalsSliceActions.closeMintXTCProgressModal());\r\n\r\n        addNotification({\r\n          title: `Minted ${to.value} ${to.metadata.symbol}`,\r\n          type: NotificationType.Success,\r\n          id: Date.now().toString(),\r\n          transactionLink: '/activity',\r\n        });\r\n        getBalances();\r\n      })\r\n      .catch((err) => {\r\n        AppLog.error('Mint XTC Error', err);\r\n\r\n        addNotification({\r\n          title: `Mint ${to.value} ${to.metadata.symbol} failed`,\r\n          type: NotificationType.Error,\r\n          id: Date.now().toString(),\r\n        });\r\n      })\r\n      .finally(() => popNotification(id));\r\n\r\n    handleOpenModal();\r\n  }, []);\r\n\r\n  return (\r\n    <Link\r\n      target=\"_blank\"\r\n      rel=\"noreferrer\"\r\n      color=\"dark-blue.500\"\r\n      onClick={handleOpenModal}\r\n    >\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport { deserialize, serialize, toBigNumber } from '@memecake/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\n\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useRemoveLiquidityBatch } from '@/integrations/transactions';\r\nimport {\r\n  modalsSliceActions,\r\n  NotificationType,\r\n  RemoveLiquidityModalDataStep,\r\n  useAppDispatch,\r\n  useLiquidityViewStore,\r\n  useNotificationStore,\r\n  usePlugStore,\r\n  useSwapCanisterStore,\r\n} from '@/store';\r\nimport { AppLog } from '@/utils';\r\n\r\nexport interface RemoveLiquidityNotificationContentProps {\r\n  id: string;\r\n}\r\n\r\nexport const RemoveLiquidityNotificationContent: React.FC<\r\n  RemoveLiquidityNotificationContentProps\r\n> = ({ id }) => {\r\n  const dispatch = useAppDispatch();\r\n  const liquidityViewStore = useLiquidityViewStore();\r\n  const { userLPBalances } = useSwapCanisterStore();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { principalId } = usePlugStore();\r\n  const { getBalances, getUserPositiveLPBalances } = useBalances();\r\n\r\n  const { token0, token1, ...removeLiquidityBatchParams } =\r\n    useMemo(() => {\r\n      const { token0, token1, keepInSonic, removeAmountPercentage, pair } =\r\n        liquidityViewStore;\r\n\r\n      if (userLPBalances && token0.metadata && token1.metadata && pair) {\r\n        const tokensLPBalance =\r\n          userLPBalances[token0.metadata.id]?.[token1.metadata.id];\r\n        const lpAmount = (removeAmountPercentage / 100) * tokensLPBalance;\r\n\r\n        const amount0Min = toBigNumber(lpAmount)\r\n          .multipliedBy(pair.reserve0.toString())\r\n          .dividedBy(pair.totalSupply.toString())\r\n          .applyDecimals(token0.metadata.decimals);\r\n\r\n        const amount1Min = toBigNumber(lpAmount)\r\n          .multipliedBy(pair.reserve1.toString())\r\n          .dividedBy(pair.totalSupply.toString())\r\n          .applyDecimals(token1.metadata.decimals);\r\n\r\n        return deserialize(\r\n          serialize({\r\n            token0,\r\n            token1,\r\n            keepInSonic,\r\n            lpAmount,\r\n            amount0Min,\r\n            amount1Min,\r\n          })\r\n        );\r\n      }\r\n    }, []) ?? {};\r\n\r\n  const { batch, openBatchModal } = useRemoveLiquidityBatch({\r\n    token0,\r\n    token1,\r\n    principalId,\r\n    ...removeLiquidityBatchParams,\r\n    // TODO: Improve safety\r\n  } as any);\r\n\r\n  const handleStateChange = () => {\r\n    if (\r\n      Object.values(RemoveLiquidityModalDataStep).includes(\r\n        batch.state as RemoveLiquidityModalDataStep\r\n      )\r\n    ) {\r\n      dispatch(\r\n        modalsSliceActions.setRemoveLiquidityModalData({\r\n          step: batch.state as RemoveLiquidityModalDataStep,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    handleStateChange();\r\n\r\n    openBatchModal();\r\n  };\r\n\r\n  useEffect(handleStateChange, [batch.state, dispatch]);\r\n\r\n  useEffect(() => {\r\n    batch\r\n      .execute()\r\n      .then(() => {\r\n        dispatch(modalsSliceActions.clearRemoveLiquidityModalData());\r\n        dispatch(modalsSliceActions.closeRemoveLiquidityProgressModal());\r\n        addNotification({\r\n          title: `Removed LP of ${token0.value} ${token0.metadata.symbol} + ${token1.value} ${token1.metadata.symbol}`,\r\n          type: NotificationType.Success,\r\n          id: Date.now().toString(),\r\n          transactionLink: '/activity',\r\n        });\r\n        getBalances();\r\n        getUserPositiveLPBalances();\r\n      })\r\n      .catch((err) => {\r\n        AppLog.error('Remove Liquidity Error', err);\r\n        dispatch(modalsSliceActions.clearRemoveLiquidityModalData());\r\n        addNotification({\r\n          title: `Remove LP of ${token0.value} ${token0.metadata.symbol} + ${token1.value} ${token1.metadata.symbol} failed`,\r\n          type: NotificationType.Error,\r\n          id: Date.now().toString(),\r\n        });\r\n      })\r\n      .finally(() => popNotification(id));\r\n\r\n    handleOpenModal();\r\n  }, []);\r\n\r\n  return (\r\n    <Link\r\n      target=\"_blank\"\r\n      rel=\"noreferrer\"\r\n      color=\"dark-blue.500\"\r\n      onClick={handleOpenModal}\r\n    >\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport { deserialize, serialize } from '@memecake/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\n\r\nimport { useTokenAllowance } from '@/hooks';\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useSwapBatch } from '@/integrations/transactions';\r\nimport {\r\n  modalsSliceActions, NotificationType, SwapModalDataStep, useAppDispatch,\r\n  useNotificationStore, usePlugStore,useSwapViewStore,\r\n} from '@/store';\r\n\r\nexport interface SwapNotificationContentProps {\r\n  id: string;\r\n}\r\n\r\nexport const SwapNotificationContent: React.FC<SwapNotificationContentProps> = ({ id }) => {\r\n\r\n  const dispatch = useAppDispatch();\r\n  const swapViewStore = useSwapViewStore();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { principalId } = usePlugStore();\r\n  const { getBalances } = useBalances();\r\n  // const { getAllPairs } = useAllPairs();\r\n \r\n  const { from, to, slippage, keepInSonic } =\r\n    useMemo(() => {\r\n      // Clone current state just for this batch\r\n      const { from, to, slippage, keepInSonic } = swapViewStore;\r\n\r\n      return deserialize(serialize({ from, to, slippage, keepInSonic }));\r\n    }, []) ?? {};\r\n\r\n  const allowance = useTokenAllowance(from.metadata?.id);\r\n  var batchData = useSwapBatch({ from, to, slippage: Number(slippage), keepInSonic, principalId, allowance });\r\n\r\n  const batch: any = batchData?.batch, openBatchModal: any = batchData?.openBatchModal;\r\n  const batchFnUpdate = batch?.batchFnUpdate;\r\n\r\n  const handleStateChange = () => {\r\n    if (batch && batch.state)\r\n    if (Object.values(SwapModalDataStep).includes(batch.state as SwapModalDataStep)){\r\n      dispatch( modalsSliceActions.setSwapModalData({ step: batch.state as SwapModalDataStep}));\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    if (!batch?.state && from.metadata?.symbol) return;\r\n    if (typeof allowance === 'number') {\r\n      dispatch(modalsSliceActions.closeAllowanceVerifyModal());\r\n      handleStateChange();\r\n      openBatchModal();\r\n    } else {\r\n      dispatch( modalsSliceActions.setAllowanceVerifyModalData({ tokenSymbol: from.metadata?.symbol}));\r\n      dispatch(modalsSliceActions.openAllowanceVerifyModal());\r\n    }\r\n  };\r\n\r\n  useEffect(handleStateChange, [batch.state, dispatch]);\r\n\r\n  useEffect(() => {\r\n    handleOpenModal();\r\n    if (typeof allowance === 'undefined') return;\r\n    if (batch.execute)\r\n      batch.execute().then(() => {\r\n        dispatch(modalsSliceActions.clearSwapModalData());\r\n        dispatch(modalsSliceActions.closeSwapProgressModal());\r\n        getBalances();\r\n        addNotification({\r\n          title: `Swapped ${from.value} ${from.metadata.symbol} for ${to.value} ${to.metadata.symbol}`,\r\n          type: NotificationType.Success, id: Date.now().toString(), transactionLink: '/activity',\r\n        });\r\n        \r\n        // getAllPairs();\r\n      }).catch((err: any) => {\r\n\r\n        dispatch(modalsSliceActions.clearSwapModalData());\r\n        if (err.message === 'slippage: insufficient output amount') {\r\n          addNotification({\r\n            title: `Slippage is too low to swap ${from.value} ${from.metadata.symbol} for ${to.value} ${to.metadata.symbol}`,\r\n            type: NotificationType.Error, id: Date.now().toString(),\r\n          });\r\n        } else {\r\n          addNotification({\r\n            title: `Swap ${from.value} ${from.metadata.symbol} for ${to.value} ${to.metadata.symbol} failed`,\r\n            type: NotificationType.Error, id: Date.now().toString(),\r\n          });\r\n        }\r\n      }).finally(() => popNotification(id));\r\n  }, [ batchFnUpdate]);\r\n\r\n  return (\r\n    <Link target=\"_blank\" rel=\"noreferrer\" color=\"dark-blue.500\" onClick={handleOpenModal}>\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport interface TransactionNotificationContentProps {\r\n  transactionLink?: string;\r\n}\r\n\r\nexport const TransactionNotificationContent: React.FC<\r\n  TransactionNotificationContentProps\r\n> = ({ transactionLink }) => {\r\n  if (!transactionLink) return null;\r\n\r\n  return (\r\n    <Link\r\n      as={NavLink}\r\n      to={transactionLink}\r\n      rel=\"noreferrer\"\r\n      color=\"dark-blue.500\"\r\n    >\r\n      View in activity tab\r\n    </Link>\r\n  );\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport { useEffect, useMemo } from 'react';\r\n\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useWithdrawBatch } from '@/integrations/transactions/hooks/batch/use-withdraw-batch';\r\nimport {\r\n  modalsSliceActions,\r\n  NotificationType,\r\n  useAppDispatch,\r\n  useNotificationStore,\r\n  useSwapCanisterStore,\r\n  useWithdrawViewStore,\r\n  WithdrawModalDataStep,\r\n} from '@/store';\r\nimport { AppLog } from '@/utils';\r\n\r\nexport interface WithdrawNotificationContentProps {\r\n  id: string;\r\n}\r\n\r\nexport const WithdrawNotificationContent: React.FC<\r\n  WithdrawNotificationContentProps\r\n> = ({ id }) => {\r\n  const dispatch = useAppDispatch();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { getBalances } = useBalances();\r\n\r\n  const { amount: value, tokenId } = useWithdrawViewStore();\r\n  const { supportedTokenList } = useSwapCanisterStore();\r\n\r\n  const selectedToken = useMemo(() => {\r\n    if (tokenId && supportedTokenList) {\r\n      return supportedTokenList.find(({ id }) => id === tokenId);\r\n    }\r\n\r\n    return undefined;\r\n  }, [supportedTokenList, tokenId]);\r\n\r\n  const { batch, openBatchModal } = useWithdrawBatch({\r\n    amount: value,\r\n    token: selectedToken,\r\n  });\r\n\r\n  const handleStateChange = () => {\r\n    if (\r\n      Object.values(WithdrawModalDataStep).includes(\r\n        batch.state as WithdrawModalDataStep\r\n      )\r\n    ) {\r\n      dispatch(\r\n        modalsSliceActions.setWithdrawModalData({\r\n          step: batch.state as WithdrawModalDataStep,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    handleStateChange();\r\n    openBatchModal();\r\n  };\r\n\r\n  useEffect(handleStateChange, [batch.state, dispatch]);\r\n\r\n  useEffect(() => {\r\n    batch\r\n      .execute()\r\n      .then(() => {\r\n        dispatch(modalsSliceActions.clearWithdrawModalData());\r\n        dispatch(modalsSliceActions.closeWithdrawProgressModal());\r\n        addNotification({\r\n          title: `Withdrawn ${value} ${selectedToken?.symbol}`,\r\n          type: NotificationType.Success,\r\n          id: Date.now().toString(),\r\n          transactionLink: '/activity',\r\n        });\r\n        getBalances();\r\n      })\r\n      .catch((err) => {\r\n        AppLog.error('Withdraw Error', err);\r\n        dispatch(modalsSliceActions.clearWithdrawModalData());\r\n        addNotification({\r\n          title: `Withdraw ${value} ${selectedToken?.symbol} failed`,\r\n          type: NotificationType.Error,\r\n          id: Date.now().toString(),\r\n        });\r\n      })\r\n      .finally(() => popNotification(id));\r\n\r\n    handleOpenModal();\r\n  }, []);\r\n\r\n  return (\r\n    <Link\r\n      target=\"_blank\"\r\n      rel=\"noreferrer\"\r\n      color=\"dark-blue.500\"\r\n      onClick={handleOpenModal}\r\n    >\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport { Principal } from '@dfinity/principal';\r\nimport { deserialize, serialize } from '@memecake/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\n\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useWithdrawWICPBatch } from '@/integrations/transactions';\r\nimport {\r\n  modalsSliceActions,\r\n  NotificationType,\r\n  useAppDispatch,\r\n  useNotificationStore,\r\n  usePlugStore,\r\n  useSwapViewStore,\r\n  WithdrawWICPModalDataStep,\r\n} from '@/store';\r\nimport { AppLog } from '@/utils';\r\nimport { getAccountId } from '@/utils/icp';\r\n\r\nexport interface WithdrawWICPNotificationContentProps {\r\n  id: string;\r\n}\r\n\r\nexport const WithdrawWICPNotificationContent: React.FC<\r\n  WithdrawWICPNotificationContentProps\r\n> = ({ id }) => {\r\n  const { principalId } = usePlugStore();\r\n  const dispatch = useAppDispatch();\r\n  const swapViewStore = useSwapViewStore();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { getBalances } = useBalances();\r\n\r\n  const { from } =\r\n    useMemo(() => {\r\n      const { from } = swapViewStore;\r\n\r\n      return deserialize(serialize({ from }));\r\n    }, []) ?? {};\r\n\r\n  const { batch, openBatchModal } = useWithdrawWICPBatch({\r\n    amount: from.value,\r\n    toAccountId: principalId\r\n      ? getAccountId(Principal.fromText(principalId))\r\n      : undefined,\r\n  });\r\n\r\n  const handleStateChange = () => {\r\n    if (\r\n      Object.values(WithdrawWICPModalDataStep).includes(\r\n        batch.state as WithdrawWICPModalDataStep\r\n      )\r\n    ) {\r\n      dispatch(\r\n        modalsSliceActions.setWithdrawWICPModalData({\r\n          step: batch.state as WithdrawWICPModalDataStep,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    handleStateChange();\r\n\r\n    openBatchModal();\r\n  };\r\n\r\n  useEffect(handleStateChange, [batch.state, dispatch]);\r\n\r\n  useEffect(() => {\r\n    batch\r\n      .execute()\r\n      .then(() => {\r\n        dispatch(modalsSliceActions.closeWithdrawWICPProgressModal());\r\n\r\n        addNotification({\r\n          title: `Unwrapped ${from.value} ${from.metadata.symbol}`,\r\n          type: NotificationType.Success,\r\n          id: Date.now().toString(),\r\n          transactionLink: '/activity',\r\n        });\r\n        getBalances();\r\n      })\r\n      .catch((err) => {\r\n        AppLog.error('Unwrap Error', err);\r\n\r\n        addNotification({\r\n          title: `Unwrap ${from.value} ${from.metadata.symbol} failed`,\r\n          type: NotificationType.Error,\r\n          id: Date.now().toString(),\r\n        });\r\n      })\r\n      .finally(() => popNotification(id));\r\n\r\n    handleOpenModal();\r\n  }, []);\r\n\r\n  return (\r\n    <Link\r\n      target=\"_blank\"\r\n      rel=\"noreferrer\"\r\n      color=\"dark-blue.500\"\r\n      onClick={handleOpenModal}\r\n    >\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","export * from './components';\r\nexport * from './notification-box';\r\nexport * from './notification-content';\r\nexport * from './notification-errors';\r\nexport * from './notification-header';\r\nexport * from './notification-manager';\r\nexport * from './notification-timer';\r\n","import { Box, Collapse, useColorModeValue } from '@chakra-ui/react';\r\nimport { useState } from 'react';\r\n\r\nimport { Notification } from '@/store';\r\n\r\nimport { NotificationContent } from './notification-content';\r\nimport { NotificationHeader } from './notification-header';\r\nimport { NotificationTimer } from './notification-timer';\r\n\r\nexport type NotificationBoxProps = Notification & {\r\n  children?: React.ReactNode;\r\n  onClose: () => any;\r\n};\r\n\r\nexport const NotificationBox = ({\r\n  children,\r\n  onClose,\r\n  ...notification\r\n}: NotificationBoxProps) => {\r\n  const [show, setShow] = useState(true);\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    setTimeout(onClose, 300);\r\n  };\r\n\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const borderColor = useColorModeValue('gray.100', 'custom.4');\r\n\r\n  return (\r\n    <Collapse in={show} animateOpacity unmountOnExit>\r\n      <Box\r\n        width={80}\r\n        position=\"relative\"\r\n        borderRadius={5}\r\n        border=\"1px solid\"\r\n        borderColor={borderColor}\r\n        shadow=\"md\"\r\n        bg={bg}\r\n        mb={4}\r\n        mx={2}\r\n        pt={4}\r\n        pr={10}\r\n        pl={12}\r\n        pb={4}\r\n        overflow=\"hidden\"\r\n      >\r\n        <NotificationHeader {...notification} handleClose={handleClose} />\r\n        <NotificationContent {...notification}>{children}</NotificationContent>\r\n        <NotificationTimer {...notification} handleClose={handleClose} />\r\n      </Box>\r\n    </Collapse>\r\n  );\r\n};\r\n","import { Flex, Text, useColorModeValue } from '@chakra-ui/react';\r\n\r\nimport { Notification, NotificationType } from '@/store';\r\n\r\nimport {\r\n  AddLiquidityNotificationContent,\r\n  DepositNotificationContent,\r\n  MintAutoNotificationContent,\r\n  MintManualNotificationContent,\r\n  MintWICPNotificationContent,\r\n  MintXTCNotificationContent,\r\n  RemoveLiquidityNotificationContent,\r\n  SwapNotificationContent,\r\n  TransactionNotificationContent,\r\n  WithdrawNotificationContent,\r\n  WithdrawWICPNotificationContent,\r\n} from './components';\r\n\r\nexport type NotificationContentProps = Notification;\r\n\r\nexport const NotificationContent: React.FC<NotificationContentProps> = ({\r\n  children,\r\n  id,\r\n  type,\r\n  state,\r\n  title,\r\n  transactionLink,\r\n  errorMessage,\r\n}) => {\r\n  const messageColor = useColorModeValue('gray.400', 'gray.600');\r\n\r\n  const color = useColorModeValue('gray.800', 'gray.50');\r\n\r\n  const notificationContent = {\r\n    [NotificationType.Swap]: <SwapNotificationContent id={id} />,\r\n    [NotificationType.AddLiquidity]: (\r\n      <AddLiquidityNotificationContent id={id} />\r\n    ),\r\n    [NotificationType.RemoveLiquidity]: (\r\n      <RemoveLiquidityNotificationContent id={id} />\r\n    ),\r\n    [NotificationType.Withdraw]: <WithdrawNotificationContent id={id} />,\r\n    [NotificationType.Deposit]: <DepositNotificationContent id={id} />,\r\n    [NotificationType.WithdrawWICP]: (\r\n      <WithdrawWICPNotificationContent id={id} />\r\n    ),\r\n    [NotificationType.MintWICP]: <MintWICPNotificationContent id={id} />,\r\n    [NotificationType.Deposit]: <DepositNotificationContent id={id} />,\r\n    [NotificationType.MintXTC]: <MintXTCNotificationContent id={id} />,\r\n    [NotificationType.Success]: transactionLink ? (\r\n      <TransactionNotificationContent transactionLink={transactionLink} />\r\n    ) : null,\r\n    [NotificationType.MintAuto]: (\r\n      <MintAutoNotificationContent id={id} state={state} />\r\n    ),\r\n    [NotificationType.MintManual]: <MintManualNotificationContent id={id} />,\r\n    [NotificationType.Error]: errorMessage && (\r\n      <Text fontSize=\"sm\" color={messageColor}>\r\n        {errorMessage}\r\n      </Text>\r\n    ),\r\n  };\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"flex-start\">\r\n      <Text color={color} fontWeight={700} maxWidth={60}>\r\n        {title}\r\n      </Text>\r\n\r\n      {notificationContent[type]}\r\n\r\n      {children}\r\n    </Flex>\r\n  );\r\n};\r\n","import { Link, Text, useColorModeValue } from '@chakra-ui/react';\r\n\r\nexport enum ErrorNotificationType {\r\n  Swap = 'SWAP',\r\n}\r\n\r\nconst SWAP_ERROR_LINK = '#';\r\n\r\nconst SwapError = () => {\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n  return (\r\n    <Text color={color}>\r\n      Since the swap failed, your assets are now deposited in Sonic, you can\r\n      either retry the swap or{' '}\r\n      <Link\r\n        rel=\"noreferrer\"\r\n        target=\"_blank\"\r\n        href={SWAP_ERROR_LINK}\r\n        textDecoration=\"underline\"\r\n      >\r\n        withdraw the assets\r\n      </Link>\r\n      .\r\n    </Text>\r\n  );\r\n};\r\n\r\nexport const ERRORS = {\r\n  [ErrorNotificationType.Swap]: <SwapError />,\r\n};\r\n","import { Box, Spinner } from '@chakra-ui/react';\r\nimport { useMemo } from 'react';\r\n\r\nimport { closeSrc, redWarningSrc, transparentGreenCheckSrc } from '@/assets';\r\nimport {\r\n  Notification,\r\n  NotificationState,\r\n  NotificationType,\r\n  useNotificationStore,\r\n} from '@/store';\r\n\r\nconst NotificationIcon = ({ type, state }: Partial<Notification>) => {\r\n  const errorNode = (\r\n    <Box as=\"img\" src={redWarningSrc} position=\"absolute\" top={4} left={4} />\r\n  );\r\n  const pendingNode = <Spinner position=\"absolute\" top={4} left={4} />;\r\n  const successNode = (\r\n    <Box\r\n      as=\"img\"\r\n      src={transparentGreenCheckSrc}\r\n      position=\"absolute\"\r\n      top={4}\r\n      left={4}\r\n    />\r\n  );\r\n\r\n  switch (state) {\r\n    case NotificationState.Error:\r\n      return errorNode;\r\n    case NotificationState.Pending:\r\n      return pendingNode;\r\n    case NotificationState.Success:\r\n      return successNode;\r\n  }\r\n\r\n  switch (type) {\r\n    case NotificationType.Success:\r\n      return successNode;\r\n    case NotificationType.MintAuto:\r\n    case NotificationType.Error:\r\n      return errorNode;\r\n    case NotificationType.MintManual:\r\n    case NotificationType.MintWICP:\r\n    case NotificationType.WithdrawWICP:\r\n    case NotificationType.Swap:\r\n    case NotificationType.AddLiquidity:\r\n    case NotificationType.RemoveLiquidity:\r\n    case NotificationType.Deposit:\r\n    case NotificationType.MintXTC:\r\n    case NotificationType.Withdraw:\r\n      return pendingNode;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport type NotificationHeaderProps = Notification & {\r\n  handleClose: () => void;\r\n};\r\n\r\nexport const NotificationHeader: React.FC<NotificationHeaderProps> = ({\r\n  id,\r\n  type,\r\n  state,\r\n  handleClose,\r\n}) => {\r\n  const { notifications } = useNotificationStore();\r\n\r\n  const notification = useMemo(\r\n    () => notifications.find((n) => n.id === id),\r\n    [notifications, id]\r\n  );\r\n\r\n  const shouldShowCloseButton = useMemo(\r\n    () =>\r\n      type === NotificationType.Error ||\r\n      type === NotificationType.Success ||\r\n      notification?.state === NotificationState.Success,\r\n    [type, notification]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <NotificationIcon state={state} type={type} />\r\n      {shouldShowCloseButton && (\r\n        <Box\r\n          cursor=\"pointer\"\r\n          onClick={handleClose}\r\n          as=\"img\"\r\n          src={closeSrc}\r\n          position=\"absolute\"\r\n          top={4}\r\n          right={4}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { Flex } from '@chakra-ui/react';\r\n\r\nimport { useNotificationStore } from '@/store';\r\n\r\nimport { NotificationBox } from './notification-box';\r\nimport { ErrorNotificationType, ERRORS } from './notification-errors';\r\n\r\nexport const NotificationManager = () => {\r\n  const { notifications, popNotification } = useNotificationStore();\r\n\r\n  return (\r\n    <Flex position=\"fixed\" right={[0, 2, 8]} direction=\"column\" zIndex={2}>\r\n      {notifications.map((notification) => {\r\n        const { errorMessage } = notification;\r\n        const errorBody =\r\n          errorMessage && ERRORS.hasOwnProperty(errorMessage)\r\n            ? ERRORS[errorMessage as ErrorNotificationType]\r\n            : undefined;\r\n\r\n        return (\r\n          <NotificationBox\r\n            key={notification.id}\r\n            {...notification}\r\n            onClose={() => popNotification(notification.id)}\r\n          >\r\n            {errorBody}\r\n          </NotificationBox>\r\n        );\r\n      })}\r\n    </Flex>\r\n  );\r\n};\r\n","import { Box } from '@chakra-ui/react';\r\nimport { keyframes } from '@emotion/react';\r\nimport { useMemo } from 'react';\r\n\r\nimport { Notification, NotificationState, NotificationType } from '@/store';\r\n\r\nconst reduceWidth = keyframes`\r\n    from { width: 100%;}\r\n    to { width: 0px; };\r\n`;\r\n\r\nexport type NotificationTimerProps = Notification & {\r\n  handleClose: () => void;\r\n};\r\n\r\nexport const NotificationTimer: React.FC<NotificationTimerProps> = ({\r\n  type,\r\n  state,\r\n  timeout = '6s',\r\n  handleClose,\r\n}) => {\r\n  const color = useMemo(() => {\r\n    if (\r\n      type === NotificationType.Success ||\r\n      state === NotificationState.Success\r\n    ) {\r\n      return '#04CD95';\r\n    }\r\n    if (type === NotificationType.Error || state === NotificationState.Error) {\r\n      return '#FF646D';\r\n    }\r\n\r\n    return 'gray.500';\r\n  }, [type, state]);\r\n\r\n  if (\r\n    (type !== NotificationType.Success && type !== NotificationType.Error) ||\r\n    timeout === 'none'\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  const collapseAnimation = `${reduceWidth} ${timeout} forwards linear`;\r\n\r\n  return (\r\n    <Box\r\n      position=\"absolute\"\r\n      width=\"full\"\r\n      height={1}\r\n      bg={color}\r\n      bottom={0}\r\n      left={0}\r\n      right={0}\r\n      animation={collapseAnimation}\r\n      onAnimationEnd={handleClose}\r\n    />\r\n  );\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { MappedCapHistoryLog } from '@/integrations/cap';\r\nimport { LedgerTransaction } from '@/integrations/ledger';\r\nimport { AppTokenMetadataListObject } from '@/models';\r\nimport type { RootState } from '@/store';\r\nimport { FeatureState } from '@/store';\r\n\r\ntype ActivityEvent = MappedCapHistoryLog | LedgerTransaction;\r\n\r\ninterface ActivityViewState {\r\n  CAPstate: FeatureState;\r\n  LedgerState: FeatureState;\r\n  tokenList?: AppTokenMetadataListObject;\r\n  ledgerTransactions: LedgerTransaction[];\r\n  activityList: { [date: string]: ActivityEvent[] };\r\n  page?: number;\r\n  lastPage?: number;\r\n  fetchedPages: number[];\r\n}\r\n\r\nconst initialState: ActivityViewState = {\r\n  CAPstate: FeatureState?.Idle,\r\n  LedgerState: FeatureState?.Idle,\r\n  ledgerTransactions: [],\r\n  activityList: {},\r\n  page: undefined,\r\n  lastPage: undefined,\r\n  fetchedPages: [],\r\n};\r\n\r\nexport const activityViewSlice = createSlice({\r\n  name: 'activity',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setCAPState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.CAPstate = action.payload;\r\n    },\r\n    setLedgerState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.LedgerState = action.payload;\r\n    },\r\n    setTokenList: (\r\n      state,\r\n      action: PayloadAction<AppTokenMetadataListObject>\r\n    ) => {\r\n      state.tokenList = action.payload;\r\n    },\r\n    setPage: (state, action: PayloadAction<number>) => {\r\n      state.page = action.payload;\r\n    },\r\n    setLedgerTransactions: (\r\n      state,\r\n      action: PayloadAction<LedgerTransaction[]>\r\n    ) => {\r\n      state.ledgerTransactions = action.payload;\r\n    },\r\n    pushActivityList: (state, action: PayloadAction<MappedCapHistoryLog[]>) => {\r\n      const mergedTransactions = [\r\n        ...action.payload,\r\n        ...state.ledgerTransactions,\r\n      ] as ActivityEvent[];\r\n      const toFilterTransactions = mergedTransactions.reduce((acc, cur) => {\r\n        if ('timestamp' in cur) {\r\n          const dateString = cur['timestamp'].toDateString();\r\n          if (acc[dateString] || state.page === 0) {\r\n            acc[dateString] = [...(acc[dateString] || []), cur];\r\n          }\r\n        } else {\r\n          const dateString = new Date(cur['time']).toDateString();\r\n\r\n          acc[dateString] = [...(acc[dateString] || []), cur];\r\n        }\r\n\r\n        return acc;\r\n      }, state.activityList);\r\n\r\n      for (const key in toFilterTransactions) {\r\n        const alreadyAdded = new Set();\r\n        toFilterTransactions[key] = toFilterTransactions[key]\r\n          .filter((item) => {\r\n            const time =\r\n              'timestamp' in item ? item['timestamp'].getTime() : item['time'];\r\n            if (alreadyAdded.has(time)) {\r\n              return false;\r\n            }\r\n            alreadyAdded.add(time);\r\n            return true;\r\n          })\r\n          .sort((a, b) => {\r\n            const timeA =\r\n              'timestamp' in a ? a['timestamp'].getTime() : a['time'];\r\n            const timeB =\r\n              'timestamp' in b ? b['timestamp'].getTime() : b['time'];\r\n            return timeB - timeA;\r\n          });\r\n      }\r\n\r\n      state.activityList = toFilterTransactions;\r\n    },\r\n    setLastPage: (state, action: PayloadAction<number>) => {\r\n      state.lastPage = action.payload;\r\n      if (typeof state.page === 'undefined') {\r\n        state.page = action.payload;\r\n      }\r\n    },\r\n    pushFetchedPages: (state, action: PayloadAction<number>) => {\r\n      state.fetchedPages = Array.from(\r\n        new Set([...state.fetchedPages, action.payload])\r\n      );\r\n    },\r\n    clearActivityList: (state) => {\r\n      state.activityList = {};\r\n      state.ledgerTransactions = [];\r\n      state.page = undefined;\r\n      state.lastPage = undefined;\r\n      state.fetchedPages = [];\r\n    },\r\n  },\r\n});\r\n\r\nexport const activityViewActions = activityViewSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectActivityViewState = (state: RootState) => state.activityView;\r\n\r\nexport default activityViewSlice.reducer;\r\n","export * from './activity-view-slice';\r\nexport * from './use-activity-view-store';\r\nexport * from './use-activity-view';\r\n","import { selectActivityViewState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useActivityViewStore = () =>\r\n  useAppSelector(selectActivityViewState);\r\n","import { Principal } from '@dfinity/principal';\r\nimport { useCallback, useEffect } from 'react';\r\n\r\nimport { getUserTransactions } from '@/integrations/cap';\r\nimport { getUserLedgerTransactions } from '@/integrations/ledger';\r\nimport { FeatureState, useAppDispatch } from '@/store';\r\nimport { AppLog } from '@/utils';\r\nimport { parseResponseTokenList } from '@/utils/canister';\r\nimport { getAccountId } from '@/utils/icp';\r\n\r\nimport { usePlugStore, useSwapCanisterStore } from '..';\r\nimport { activityViewActions, useActivityViewStore } from '.';\r\n\r\nexport const useActivityView = () => {\r\n  const { principalId } = usePlugStore();\r\n  const { supportedTokenList } = useSwapCanisterStore();\r\n  const { page, lastPage, fetchedPages } = useActivityViewStore();\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!supportedTokenList) return;\r\n    dispatch(\r\n      activityViewActions.setTokenList(\r\n        parseResponseTokenList(supportedTokenList)\r\n      )\r\n    );\r\n  }, [supportedTokenList, dispatch]);\r\n\r\n  const getUserTransactionsPage = useCallback(\r\n    (_principalId: string, _page?: number) => {\r\n      dispatch(activityViewActions.setCAPState(FeatureState.Loading));\r\n      getUserTransactions(_principalId, _page)\r\n        .then((res) => {\r\n          dispatch(activityViewActions.pushActivityList(res.data));\r\n          dispatch(activityViewActions.setCAPState(FeatureState.Idle));\r\n          dispatch(activityViewActions.pushFetchedPages(res.page));\r\n\r\n          if (typeof lastPage === 'undefined' || res.page > lastPage) {\r\n            dispatch(activityViewActions.setLastPage(res.page));\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          AppLog.error(`Failed to get user transactions: page=${_page}`, err);\r\n          dispatch(activityViewActions.setCAPState(FeatureState.Error));\r\n        });\r\n    },\r\n    [dispatch, lastPage]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (principalId) {\r\n      if (typeof page !== 'undefined' && !fetchedPages.includes(page)) {\r\n        getUserTransactionsPage(principalId, page);\r\n      }\r\n    }\r\n  }, [page, principalId, dispatch, getUserTransactionsPage, fetchedPages]);\r\n\r\n  useEffect(() => {\r\n    if (principalId) {\r\n      getUserTransactionsPage(principalId);\r\n    } else {\r\n      dispatch(activityViewActions.clearActivityList());\r\n    }\r\n  }, [principalId]);\r\n\r\n  useEffect(() => {\r\n    if (principalId) {\r\n      dispatch(activityViewActions.setLedgerState(FeatureState.Loading));\r\n      getUserLedgerTransactions(\r\n        getAccountId(Principal.fromText(principalId), 0)\r\n      )\r\n        .then((transactions) => {\r\n          dispatch(activityViewActions.setLedgerState(FeatureState.Idle));\r\n          dispatch(activityViewActions.setLedgerTransactions(transactions));\r\n          dispatch(activityViewActions.pushActivityList([]));\r\n        })\r\n        .catch((err) => {\r\n          AppLog.error(\r\n            `Failed to get user ledger transactions: principal=${principalId}`,\r\n            err\r\n          );\r\n          dispatch(activityViewActions.setLedgerState(FeatureState.Error));\r\n        });\r\n    }\r\n  }, [principalId, dispatch]);\r\n};\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nimport { useAppSelector } from '@/store/hooks';\r\nimport { RootState } from '@/store/store';\r\n\r\nimport { fetchAllowance } from './async-thunk';\r\n\r\ninterface TokenAllowance {\r\n  allowance: number;\r\n  expiration: number;\r\n}\r\n\r\ninterface AllowanceState {\r\n  tokensAllowance: { [tokenId: string]: TokenAllowance };\r\n}\r\n\r\nconst initialState: AllowanceState = {\r\n  tokensAllowance: {},\r\n};\r\n\r\nexport const allowanceSlice = createSlice({\r\n  name: 'allowance',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setAllowance: (state, action) => {\r\n      const { tokenId, allowance, expiration } = action.payload;\r\n      state.tokensAllowance[tokenId] = { allowance, expiration };\r\n    },\r\n    clearAllowance: (state, action) => {\r\n      const { tokenId } = action.payload;\r\n      const { [tokenId]: _, ...rest } = state.tokensAllowance;\r\n      state.tokensAllowance = rest;\r\n    },\r\n  },\r\n});\r\n\r\nexport const allowanceActions = { ...allowanceSlice.actions, fetchAllowance };\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectAllowanceState = (state: RootState) => state.allowance;\r\n\r\nexport const useAllowanceStore = (): AllowanceState =>\r\n  useAppSelector(selectAllowanceState);\r\n\r\nexport default allowanceSlice.reducer;\r\n","// import { Principal } from '@dfinity/principal';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n// import { ENV } from '@/config';\r\n// import { createAnonTokenActor } from '@/integrations/actor';\r\nimport { RootState } from '@/store/store';\r\nimport { AppLog , getTokenAllowance} from '@/utils';\r\n\r\nimport { allowanceActions } from '../allowance-slice';\r\n\r\ntype FetchAllowance = { tokenId: string };\r\n\r\nexport const fetchAllowance = createAsyncThunk<void, FetchAllowance>(\r\n  'plug/disconnect',\r\n  async ({ tokenId }, { dispatch, getState }): Promise<void> => {\r\n    const { principalId } = (getState() as RootState).plug;\r\n    try {\r\n      if (!principalId) throw new Error('Plug is not connected');\r\n      const allowance = await getTokenAllowance(tokenId);\r\n      dispatch( allowanceActions.setAllowance({ tokenId,allowance: Number(allowance),expiration: Date.now() + 30000}) );\r\n    } catch (error) {\r\n      AppLog.error( `Allowance fetch error: token=${tokenId} principal=${principalId}`, error );\r\n      dispatch(allowanceActions.clearAllowance({ tokenId }));\r\n    }\r\n  }\r\n);\r\n","export * from './fetch-allowance';\r\n","export * from './allowance-slice';\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport type { RootState } from '@/store';\r\nimport { FeatureState } from '@/store';\r\nimport { getFromStorage, LocalStorageKey, saveToStorage } from '@/utils';\r\n\r\ninterface AssetsViewState {\r\n  isBannerOpened: boolean;\r\n  state: FeatureState;\r\n}\r\n\r\nconst initialState: AssetsViewState = {\r\n  isBannerOpened: !getFromStorage(LocalStorageKey.AssetsBannerDisabled),\r\n  state: FeatureState?.Idle,\r\n};\r\n\r\nexport const assetsViewSlice = createSlice({\r\n  name: 'assets',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setIsBannerOpened: (state, action: PayloadAction<boolean>) => {\r\n      saveToStorage(LocalStorageKey.AssetsBannerDisabled, !action.payload);\r\n      state.isBannerOpened = action.payload;\r\n    },\r\n    setState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.state = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const assetsViewActions = assetsViewSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectAssetsViewState = (state: RootState) => state.assetsView;\r\n\r\nexport default assetsViewSlice.reducer;\r\n","export * from './assets-view-slice';\r\nexport * from './use-assets-view-store';\r\n","import { selectWithdrawViewState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useWithdrawViewStore = () =>\r\n  useAppSelector(selectWithdrawViewState);\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { FeatureState, RootState } from '@/store';\r\n\r\nexport interface CyclesMintingCanisterState {\r\n  ICPXDRconversionRate?: string;\r\n  ICPXDRconversionRateState: FeatureState;\r\n}\r\n\r\nconst initialState: CyclesMintingCanisterState = {\r\n  ICPXDRconversionRate: undefined,\r\n  ICPXDRconversionRateState: 'idle' as FeatureState,\r\n};\r\n\r\nexport const cyclesMintingCanisterSlice = createSlice({\r\n  name: 'cyclesCanister',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setICPXDRConversionRate: (state, action: PayloadAction<string>) => {\r\n      state.ICPXDRconversionRate = action.payload;\r\n    },\r\n    setICPXDRConversionRateState: (\r\n      state,\r\n      action: PayloadAction<FeatureState>\r\n    ) => {\r\n      state.ICPXDRconversionRateState = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const cyclesMintingCanisterSliceActions =\r\n  cyclesMintingCanisterSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectCyclesMintingCanisterState = (state: RootState) =>\r\n  state.cyclesMinting;\r\n\r\nexport default cyclesMintingCanisterSlice.reducer;\r\n","export const DEFAULT_CYCLES_PER_XDR = 1_000_000_000_000;\r\nexport const TOKEN_SUBDIVIDABLE_BY = 100_000_000;\r\n","export * from './cycles-minting-canister-slice';\r\nexport * from './cycles-minting-canister.constants';\r\nexport * from './use-cycles-minting-canister-init';\r\nexport * from './use-cycles-minting-canister-store';\r\n","import { useCallback, useEffect } from 'react';\r\n\r\nimport { FeatureState, useAppDispatch } from '@/store';\r\nimport { AppLog } from '@/utils';\r\nimport { fetchICP2XDRConversionRate } from '@/utils/icp';\r\n\r\nimport { useKeepSync } from '../keep-sync';\r\nimport {\r\n  cyclesMintingCanisterSliceActions,\r\n  useCyclesMintingCanisterStore,\r\n} from '.';\r\n\r\nexport const useCyclesMintingCanisterInit = () => {\r\n  const { ICPXDRconversionRateState } = useCyclesMintingCanisterStore();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const getICPXDRConversionRate = useKeepSync(\r\n    'getICPXDRConversionRate',\r\n\r\n    useCallback(\r\n      async (isRefreshing?: boolean) => {\r\n        if (ICPXDRconversionRateState !== FeatureState.Loading) {\r\n          try {\r\n            dispatch(\r\n              cyclesMintingCanisterSliceActions.setICPXDRConversionRateState(\r\n                isRefreshing ? FeatureState.Updating : FeatureState.Loading\r\n              )\r\n            );\r\n\r\n            const response = await fetchICP2XDRConversionRate();\r\n\r\n            const conversionRate =\r\n              response.data.xdr_permyriad_per_icp.toString();\r\n\r\n            if (response) {\r\n              dispatch(\r\n                cyclesMintingCanisterSliceActions.setICPXDRConversionRate(\r\n                  conversionRate\r\n                )\r\n              );\r\n            } else {\r\n              throw new Error('No \"getICPXDRConversionRate\" response');\r\n            }\r\n\r\n            dispatch(\r\n              cyclesMintingCanisterSliceActions.setICPXDRConversionRateState(\r\n                FeatureState.Idle\r\n              )\r\n            );\r\n\r\n            return response;\r\n          } catch (error) {\r\n            AppLog.error(`ICP XDR conversion rate fetch error`, error);\r\n            dispatch(\r\n              cyclesMintingCanisterSliceActions.setICPXDRConversionRateState(\r\n                FeatureState.Error\r\n              )\r\n            );\r\n          }\r\n        }\r\n      },\r\n      [ICPXDRconversionRateState, dispatch]\r\n    )\r\n  );\r\n\r\n  useEffect(() => {\r\n    getICPXDRConversionRate();\r\n    // getICPXDRConversionRate cannot be added to the dependencies array\r\n    // because it is causing an infinite loop\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n};\r\n","import { selectCyclesMintingCanisterState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useCyclesMintingCanisterStore = () =>\r\n  useAppSelector(selectCyclesMintingCanisterState);\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport type { RootState } from '@/store';\r\nimport { FeatureState } from '@/store';\r\n\r\ninterface DepositViewState {\r\n  state: FeatureState;\r\n  amount: string;\r\n  tokenId?: string;\r\n}\r\n\r\nconst initialState: DepositViewState = {\r\n  state: FeatureState?.Idle,\r\n  amount: '',\r\n  tokenId: undefined,\r\n};\r\n\r\nexport const depositViewSlice = createSlice({\r\n  name: 'deposit',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.state = action.payload;\r\n    },\r\n    setAmount: (state, action: PayloadAction<string>) => {\r\n      state.amount = action.payload;\r\n    },\r\n    setTokenId: (state, action: PayloadAction<string>) => {\r\n      state.tokenId = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const depositViewActions = depositViewSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectDepositViewState = (state: RootState) => state.depositView;\r\n\r\nexport default depositViewSlice.reducer;\r\n","export * from './deposit-view-slice';\r\nexport * from './use-deposit-view-store';\r\n","import { selectDepositViewState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useDepositViewStore = () => { return  useAppSelector(selectDepositViewState); }\r\n","export * from './activity-view';\r\nexport * from './assets-view';\r\nexport * from './cycles-minting-canister';\r\nexport * from './deposit-view';\r\nexport * from './keep-sync';\r\nexport * from './liquidity-view';\r\nexport * from './modals';\r\nexport * from './notification';\r\nexport * from './plug';\r\nexport * from './price';\r\nexport * from './swap-canister';\r\nexport * from './swap-view';\r\nexport * from './withdraw-view';\r\nexport * from './allowance';\r\n","export * from './keep-sync-slice';\r\nexport * from './use-keep-sync';\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { RootState, store } from '@/store';\r\n\r\nexport const KEEP_SYNC_DEFAULT_INTERVAL = 15 * 1000;\r\n\r\nexport type KeepSync = {\r\n  callback: (refresh?: boolean) => Promise<any>;\r\n  interval: number;\r\n};\r\n\r\ntype TriggerAction = {\r\n  key: string;\r\n  interval?: KeepSync['interval'];\r\n};\r\n\r\ntype SetCallbackAction = {\r\n  key: string;\r\n  callback: KeepSync['callback'];\r\n};\r\n\r\n// Define a type for the slice state\r\ninterface KeepSyncState {\r\n  timers: {\r\n    [key: string]: NodeJS.Timeout;\r\n  };\r\n  callbacks: {\r\n    [key: string]: KeepSync['callback'];\r\n  };\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: KeepSyncState = {\r\n  timers: {},\r\n  callbacks: {},\r\n};\r\n\r\nexport const keepSyncSlice = createSlice({\r\n  name: 'keepSync',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    trigger: (state, action: PayloadAction<TriggerAction>) => {\r\n      const { key, interval = KEEP_SYNC_DEFAULT_INTERVAL } = action.payload;\r\n\r\n      if (state.timers[key]) clearInterval(state.timers[key]);\r\n      state.timers[key] = setInterval(() => {\r\n        store.getState().keepSync.callbacks[key](true);\r\n      }, interval);\r\n    },\r\n    setCallback: (state, action: PayloadAction<SetCallbackAction>) => {\r\n      const { key, callback } = action.payload;\r\n      state.callbacks[key] = callback;\r\n    },\r\n  },\r\n});\r\n\r\nexport const keepSyncActions = keepSyncSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectKeepSyncState = (state: RootState) => state.keepSync;\r\n\r\nexport default keepSyncSlice.reducer;\r\n","import { useEffect } from 'react';\r\n\r\nimport { useAppDispatch } from '@/store';\r\n\r\nimport { KeepSync, keepSyncActions } from './keep-sync-slice';\r\n\r\nexport type KeepSyncCallbackParams = {\r\n  interval?: number;\r\n  isRefreshing?: boolean;\r\n};\r\n\r\nexport type KeepSyncParams = {\r\n  interval?: number;\r\n};\r\n\r\nexport const useKeepSync = (\r\n  key: string,\r\n  runner: KeepSync['callback'],\r\n  { interval }: KeepSyncParams = {}\r\n) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(keepSyncActions.setCallback({ key, callback: runner }));\r\n  }, [runner]);\r\n\r\n  return ({\r\n    interval: _interval = interval,\r\n    isRefreshing = true,\r\n  }: KeepSyncCallbackParams = {}) => {\r\n    runner(isRefreshing);\r\n    dispatch(keepSyncActions.trigger({ key, interval: _interval }));\r\n  };\r\n};\r\n","export * from './liquidity-view-slice';\r\nexport * from './use-liquidity-view-init';\r\nexport * from './use-liquidity-view-store';\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { AppTokenMetadata, BaseTokenData, Pair } from '@/models';\r\nimport { FeatureState, RootState } from '@/store';\r\nimport { getFromStorage, LocalStorageKey, saveToStorage } from '@/utils';\r\n\r\nexport type LiquidityTokenDataKey = 'token0' | 'token1';\r\n\r\ninterface LiquidityViewState {\r\n  isBannerOpened: boolean;\r\n  pairState: FeatureState;\r\n  state: FeatureState;\r\n  token0: BaseTokenData;\r\n  token1: BaseTokenData;\r\n  removeAmountPercentage: number;\r\n  pair?: Pair;\r\n  slippage: string;\r\n  keepInSonic: boolean;\r\n}\r\n\r\nexport const INITIAL_LIQUIDITY_SLIPPAGE = '0.50';\r\n\r\nconst initialState: LiquidityViewState = {\r\n  isBannerOpened: !getFromStorage(LocalStorageKey.LiquidityBannerDisabled),\r\n  pair: undefined,\r\n  pairState: 'not-started' as FeatureState,\r\n  state: 'not-started' as FeatureState,\r\n  removeAmountPercentage: 100,\r\n  token0: {\r\n    metadata: undefined,\r\n    value: '',\r\n  },\r\n  token1: {\r\n    metadata: undefined,\r\n    value: '',\r\n  },\r\n  slippage: INITIAL_LIQUIDITY_SLIPPAGE,\r\n  keepInSonic: false,\r\n};\r\n\r\nexport const liquidityViewSlice = createSlice({\r\n  name: 'liquidity',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setIsBannerOpened: (state, action: PayloadAction<boolean>) => {\r\n      saveToStorage(LocalStorageKey.LiquidityBannerDisabled, !action.payload);\r\n      state.isBannerOpened = action.payload;\r\n    },\r\n    setState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.state = action.payload;\r\n    },\r\n    setPairState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.pairState = action.payload;\r\n    },\r\n    setRemoveAmountPercentage: (state, action: PayloadAction<number>) => {\r\n      state.removeAmountPercentage = action.payload;\r\n    },\r\n    setKeepInSonic: (state, action: PayloadAction<boolean>) => {\r\n      state.keepInSonic = action.payload;\r\n    },\r\n    setValue: (\r\n      state,\r\n      action: PayloadAction<{ data: LiquidityTokenDataKey; value: string }>\r\n    ) => {\r\n      state[action.payload.data].value = action.payload.value;\r\n    },\r\n    setToken: (\r\n      state,\r\n      action: PayloadAction<{\r\n        data: LiquidityTokenDataKey;\r\n        token?: AppTokenMetadata;\r\n      }>\r\n    ) => {\r\n      state[action.payload.data].metadata = action.payload.token;\r\n    },\r\n    setPair: (state, action: PayloadAction<Pair | undefined>) => {\r\n      if (\r\n        action.payload &&\r\n        state.token0.metadata?.id === action.payload.token1\r\n      ) {\r\n        state.pair = {\r\n          ...action.payload,\r\n          token0: action.payload.token1,\r\n          token1: action.payload.token0,\r\n          reserve0: action.payload.reserve1,\r\n          reserve1: action.payload.reserve0,\r\n        };\r\n      } else {\r\n        state.pair = action.payload;\r\n      }\r\n    },\r\n    setSlippage: (state, action: PayloadAction<string>) => {\r\n      state.slippage = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const liquidityViewActions = liquidityViewSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectLiquidityViewState = (state: RootState) =>\r\n  state.liquidityView;\r\n\r\nexport default liquidityViewSlice.reducer;\r\n","import { useCallback, useEffect } from 'react';\r\n\r\n// import { ENV } from '@/config';\r\nimport { Pair } from '@/models';\r\nimport { useAppDispatch } from '@/store';\r\n\r\nimport { useSwapCanisterStore } from '..';\r\nimport { liquidityViewActions, useLiquidityViewStore } from '.';\r\n\r\nexport const useLiquidityViewInit = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { token0, token1 } = useLiquidityViewStore();\r\n  const { supportedTokenList, allPairs } = useSwapCanisterStore();\r\n\r\n  const getPair = useCallback(async () => {\r\n    if (token0.metadata?.id && token1.metadata?.id) {\r\n      if (allPairs) {\r\n        const localPair = allPairs[token0.metadata.id]?.[token1.metadata.id] as unknown as Pair;\r\n        if (localPair) return dispatch(liquidityViewActions.setPair(localPair));\r\n      }\r\n    }\r\n    return dispatch(liquidityViewActions.setPair(undefined));\r\n  }, [dispatch, token0.metadata?.id, token1.metadata?.id, allPairs]);\r\n\r\n  useEffect(() => {\r\n    if (supportedTokenList && !token0.metadata?.id) {\r\n      const token = supportedTokenList[0];\r\n      dispatch(liquidityViewActions.setToken({ data: 'token0', token }));\r\n    }\r\n  }, [supportedTokenList, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (token0.metadata?.id && token1.metadata?.id) {\r\n      getPair();\r\n    }\r\n  }, [token0.metadata?.id, token1.metadata?.id, getPair]);\r\n};\r\n","import { selectLiquidityViewState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useLiquidityViewStore = () =>\r\n  useAppSelector(selectLiquidityViewState);\r\n","export * from './modals-slice';\r\nexport * from './use-modals-store';\r\nexport * from './use-token-modal-opener';\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { Batch } from '@/integrations/transactions';\r\nimport type { RootState } from '@/store';\r\n\r\nexport type ModalsCallback = (...args: unknown[]) => any;\r\n\r\nexport enum MintTokenSymbol {\r\n  XTC = 'XTC',\r\n  WICP = 'WICP',\r\n}\r\n\r\nexport enum MintModalDataStep {\r\n  LedgerTransfer = 'ledgerTransfer',\r\n  Mint = 'mint',\r\n  Approve = 'approve',\r\n  Deposit = 'deposit',\r\n}\r\n\r\nexport type MintModalData<\r\n  RetryCallback = ModalsCallback,\r\n  CancelCallback = ModalsCallback\r\n> = {\r\n  step?: MintModalDataStep | Batch.DefaultHookState;\r\n  steps?: (MintModalDataStep | Batch.DefaultHookState)[];\r\n  callbacks?: [RetryCallback, CancelCallback];\r\n};\r\n\r\nexport enum WithdrawWICPModalDataStep {\r\n  Withdraw = 'withdraw',\r\n  WithdrawWICP = 'withdrawWICP',\r\n}\r\nexport type WithdrawWICPModalData = {\r\n  step?: WithdrawWICPModalDataStep | Batch.DefaultHookState;\r\n  steps?: (WithdrawWICPModalDataStep | Batch.DefaultHookState)[];\r\n  callbacks?: [ModalsCallback, ModalsCallback];\r\n};\r\n\r\nexport enum SwapModalDataStep {\r\n  Getacnt= 'getacnt',\r\n  Approve = 'approve',\r\n  Deposit = 'deposit',\r\n  Swap = 'swap',\r\n  Withdraw = 'withdraw',\r\n}\r\nexport type SwapModalData = {\r\n  step?: SwapModalDataStep | Batch.DefaultHookState;\r\n  steps?: (SwapModalDataStep | Batch.DefaultHookState)[];\r\n  fromTokenSymbol?: string;\r\n  toTokenSymbol?: string;\r\n  callbacks?: [ModalsCallback, ModalsCallback, ModalsCallback];\r\n};\r\n\r\nexport enum DepositModalDataStep {\r\n  Approve = 'approve',\r\n  Deposit = 'deposit',\r\n  Getacnt = 'getacnt'\r\n\r\n}\r\nexport type DepositModalData = {\r\n  step?: DepositModalDataStep | Batch.DefaultHookState;\r\n  steps?: (DepositModalDataStep | Batch.DefaultHookState)[];\r\n  tokenSymbol?: string;\r\n  callbacks?: [ModalsCallback, ModalsCallback];\r\n};\r\n\r\nexport enum WithdrawModalDataStep {\r\n  Withdraw = 'withdraw',\r\n}\r\nexport type WithdrawModalData = {\r\n  step?: WithdrawModalDataStep | Batch.DefaultHookState;\r\n  steps?: (WithdrawModalDataStep | Batch.DefaultHookState)[];\r\n  tokenSymbol?: string;\r\n  callbacks?: [ModalsCallback, ModalsCallback];\r\n};\r\n\r\nexport enum AddLiquidityModalDataStep {\r\n  Getacnt = 'getacnt',\r\n  Approve0 = 'approve0',\r\n  Deposit0 = 'deposit0',\r\n  Approve1 = 'approve1',\r\n  Deposit1 = 'deposit1',\r\n  CreatePair = 'createPair',\r\n  AddLiquidity = 'addLiquidity',\r\n}\r\nexport type AddLiquidityModalData = {\r\n  step?: AddLiquidityModalDataStep | Batch.DefaultHookState;\r\n  steps?: (AddLiquidityModalDataStep | Batch.DefaultHookState)[];\r\n  token0Symbol?: string;\r\n  token1Symbol?: string;\r\n  callbacks?: [ModalsCallback, ModalsCallback];\r\n};\r\n\r\nexport enum RemoveLiquidityModalDataStep {\r\n  RemoveLiquidity = 'removeLiquidity',\r\n  Withdraw0 = 'withdraw0',\r\n  Withdraw1 = 'withdraw1',\r\n}\r\nexport type RemoveLiquidityModalData = {\r\n  step?: RemoveLiquidityModalDataStep | Batch.DefaultHookState;\r\n  steps?: (RemoveLiquidityModalDataStep | Batch.DefaultHookState)[];\r\n  token0Symbol?: string;\r\n  token1Symbol?: string;\r\n  callbacks?: [ModalsCallback, ModalsCallback];\r\n};\r\n\r\nexport type AllowanceVerifyModalData = {\r\n  tokenSymbol?: string | string[];\r\n  callbacks?: [ModalsCallback, ModalsCallback];\r\n};\r\n\r\nexport type TermsAndConditionsModalData = {\r\n  callbacks?: [ModalsCallback, ModalsCallback];\r\n};\r\n\r\ntype TokenSelectData = {\r\n  tokens: string;\r\n  selectedTokenIds?: string[];\r\n  isLoading?: boolean;\r\n  allowAddToken?: boolean;\r\n  onSelect: (tokenId?: string) => void;\r\n};\r\n\r\n// Define a type for the slice state\r\ninterface ModalsState {\r\n  mintXTCUncompleteBlockHeights?: string[];\r\n  mintWICPUncompleteBlockHeights?: string[];\r\n\r\n  mintManualModalOpened: boolean;\r\n  mintManualModalErrorMessage: string;\r\n  mintManualBlockHeight: string;\r\n  mintManualTokenSymbol: MintTokenSymbol;\r\n\r\n  isMintXTCProgressModalOpened: boolean;\r\n  isMintXTCFailModalOpened: boolean;\r\n  mintXTCModalData: MintModalData;\r\n\r\n  isMintWICPProgressModalOpened: boolean;\r\n  isMintWICPFailModalOpened: boolean;\r\n  mintWICPModalData: MintModalData;\r\n\r\n  isWithdrawWICPProgressModalOpened: boolean;\r\n  isWithdrawWICPFailModalOpened: boolean;\r\n  withdrawWICPModalData: WithdrawWICPModalData;\r\n\r\n  isSwapProgressModalOpened: boolean;\r\n  isSwapFailModalOpened: boolean;\r\n  swapModalData: SwapModalData;\r\n\r\n  isDepositProgressModalOpened: boolean;\r\n  isDepositFailModalOpened: boolean;\r\n  depositModalData: DepositModalData;\r\n\r\n  isWithdrawProgressModalOpened: boolean;\r\n  isWithdrawFailModalOpened: boolean;\r\n  withdrawModalData: WithdrawModalData;\r\n\r\n  isAddLiquidityProgressModalOpened: boolean;\r\n  isAddLiquidityFailModalOpened: boolean;\r\n  addLiquidityModalData: AddLiquidityModalData;\r\n\r\n  isRemoveLiquidityProgressModalOpened: boolean;\r\n  isRemoveLiquidityFailModalOpened: boolean;\r\n  removeLiquidityModalData: RemoveLiquidityModalData;\r\n\r\n  isTokenSelectModalModalOpened: boolean;\r\n  tokenSelectModalData: TokenSelectData;\r\n\r\n  isRemoveLiquidityModalOpened: boolean;\r\n\r\n  isAllowanceVerifyModalOpened: boolean;\r\n  allowanceModalData: AllowanceVerifyModalData;\r\n\r\n  isTermsAndConditionsModalOpened: boolean;\r\n  termsAndConditionsModalData: TermsAndConditionsModalData;\r\n}\r\n\r\nconst initialMintXTCModalData: MintModalData = {\r\n  step: undefined,\r\n};\r\n\r\nconst initialMintWICPModalData: MintModalData = {\r\n  step: undefined,\r\n};\r\n\r\nconst initialWithdrawWICPModalData: WithdrawWICPModalData = {\r\n  step: undefined,\r\n};\r\n\r\nconst initialSwapModalData: SwapModalData = {\r\n  step: undefined,\r\n};\r\n\r\nconst initialDepositModalData: DepositModalData = {\r\n  step: undefined,\r\n};\r\n\r\nconst initialWithdrawModalData: WithdrawModalData = {\r\n  step: undefined,\r\n};\r\n\r\nconst initialAddLiquidityModalData: AddLiquidityModalData = {\r\n  step: undefined,\r\n};\r\n\r\nconst initialRemoveLiquidityModalData: RemoveLiquidityModalData = {\r\n  step: undefined,\r\n};\r\n\r\nconst initialTokenSelectData: TokenSelectData = {\r\n  onSelect: () => null,\r\n  tokens: '[]',\r\n  selectedTokenIds: [],\r\n  isLoading: false,\r\n  allowAddToken: true,\r\n};\r\n\r\n// Define the initial state using that type\r\nconst initialState: ModalsState = {\r\n  mintManualModalOpened: false,\r\n  mintManualModalErrorMessage: '',\r\n  mintManualTokenSymbol: MintTokenSymbol.WICP,\r\n  mintManualBlockHeight: '',\r\n\r\n  isMintXTCProgressModalOpened: false,\r\n  isMintXTCFailModalOpened: false,\r\n  mintXTCModalData: initialMintXTCModalData,\r\n  mintXTCUncompleteBlockHeights: undefined,\r\n\r\n  isMintWICPProgressModalOpened: false,\r\n  isMintWICPFailModalOpened: false,\r\n  mintWICPModalData: initialMintWICPModalData,\r\n  mintWICPUncompleteBlockHeights: undefined,\r\n\r\n  isWithdrawWICPProgressModalOpened: false,\r\n  isWithdrawWICPFailModalOpened: false,\r\n  withdrawWICPModalData: initialWithdrawWICPModalData,\r\n\r\n  isSwapProgressModalOpened: false,\r\n  isSwapFailModalOpened: false,\r\n  swapModalData: initialSwapModalData,\r\n\r\n  isDepositProgressModalOpened: false,\r\n  isDepositFailModalOpened: false,\r\n  depositModalData: initialDepositModalData,\r\n\r\n  isWithdrawProgressModalOpened: false,\r\n  isWithdrawFailModalOpened: false,\r\n  withdrawModalData: initialWithdrawModalData,\r\n\r\n  isAddLiquidityProgressModalOpened: false,\r\n  isAddLiquidityFailModalOpened: false,\r\n  addLiquidityModalData: initialAddLiquidityModalData,\r\n\r\n  isRemoveLiquidityProgressModalOpened: false,\r\n  isRemoveLiquidityFailModalOpened: false,\r\n  removeLiquidityModalData: initialRemoveLiquidityModalData,\r\n\r\n  isTokenSelectModalModalOpened: false,\r\n  tokenSelectModalData: initialTokenSelectData,\r\n\r\n  isRemoveLiquidityModalOpened: false,\r\n\r\n  isAllowanceVerifyModalOpened: false,\r\n  allowanceModalData: {},\r\n\r\n  isTermsAndConditionsModalOpened: false,\r\n  termsAndConditionsModalData: {},\r\n};\r\n\r\nexport const modalsSlice = createSlice({\r\n  name: 'modals',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setMintManualTokenSymbol: (\r\n      state,\r\n      action: PayloadAction<MintTokenSymbol>\r\n    ) => {\r\n      state.mintManualTokenSymbol = action.payload;\r\n    },\r\n    setMintManualBlockHeight: (state, action: PayloadAction<string>) => {\r\n      state.mintManualBlockHeight = action.payload;\r\n    },\r\n    setMintManualModalErrorMessage: (state, action: PayloadAction<string>) => {\r\n      state.mintManualModalErrorMessage = action.payload;\r\n    },\r\n    openMintManualModal: (state) => {\r\n      state.mintManualModalOpened = true;\r\n    },\r\n    closeMintManualModal: (state) => {\r\n      state.mintManualModalOpened = false;\r\n    },\r\n\r\n    openMintXTCProgressModal: (state) => {\r\n      state.isMintXTCProgressModalOpened = true;\r\n    },\r\n    closeMintXTCProgressModal: (state) => {\r\n      state.isMintXTCProgressModalOpened = false;\r\n    },\r\n    openMintXTCFailModal: (state) => {\r\n      state.isMintXTCFailModalOpened = true;\r\n    },\r\n    closeMintXTCFailModal: (state) => {\r\n      state.isMintXTCFailModalOpened = false;\r\n    },\r\n    clearMintXTCModalData: (state) => {\r\n      state.mintXTCModalData = initialMintXTCModalData;\r\n    },\r\n    setMintXTCModalData: (state, action: PayloadAction<MintModalData>) => {\r\n      state.mintXTCModalData = {\r\n        ...state.mintXTCModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n    setMintXTCUncompleteBlockHeights: (\r\n      state,\r\n      action: PayloadAction<string[]>\r\n    ) => {\r\n      state.mintXTCUncompleteBlockHeights = action.payload;\r\n    },\r\n    addMintXTCUncompleteBlockHeight: (state, action: PayloadAction<string>) => {\r\n      if (state.mintXTCUncompleteBlockHeights === undefined) {\r\n        state.mintXTCUncompleteBlockHeights = [];\r\n      }\r\n      state.mintXTCUncompleteBlockHeights.push(action.payload);\r\n    },\r\n\r\n    openMintWICPProgressModal: (state) => {\r\n      state.isMintWICPProgressModalOpened = true;\r\n    },\r\n    closeMintWICPProgressModal: (state) => {\r\n      state.isMintWICPProgressModalOpened = false;\r\n    },\r\n    openMintWICPFailModal: (state) => {\r\n      state.isMintWICPFailModalOpened = true;\r\n    },\r\n    closeMintWICPFailModal: (state) => {\r\n      state.isMintWICPFailModalOpened = false;\r\n    },\r\n    clearMintWICPModalData: (state) => {\r\n      state.mintWICPModalData = initialMintWICPModalData;\r\n    },\r\n    setMintWICPModalData: (state, action: PayloadAction<MintModalData>) => {\r\n      state.mintWICPModalData = {\r\n        ...state.mintWICPModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n    setMintWICPUncompleteBlockHeights: (\r\n      state,\r\n      action: PayloadAction<string[]>\r\n    ) => {\r\n      state.mintWICPUncompleteBlockHeights = action.payload;\r\n    },\r\n    addMintWICPUncompleteBlockHeight: (\r\n      state,\r\n      action: PayloadAction<string>\r\n    ) => {\r\n      if (state.mintWICPUncompleteBlockHeights === undefined) {\r\n        state.mintWICPUncompleteBlockHeights = [];\r\n      }\r\n      state.mintWICPUncompleteBlockHeights.push(action.payload);\r\n    },\r\n\r\n    openWithdrawWICPProgressModal: (state) => {\r\n      state.isWithdrawWICPProgressModalOpened = true;\r\n    },\r\n    closeWithdrawWICPProgressModal: (state) => {\r\n      state.isWithdrawWICPProgressModalOpened = false;\r\n    },\r\n    openWithdrawWICPFailModal: (state) => {\r\n      state.isWithdrawWICPFailModalOpened = true;\r\n    },\r\n    closeWithdrawWICPFailModal: (state) => {\r\n      state.isWithdrawWICPFailModalOpened = false;\r\n    },\r\n    clearWithdrawWICPModalData: (state) => {\r\n      state.withdrawWICPModalData = initialWithdrawWICPModalData;\r\n    },\r\n    setWithdrawWICPModalData: (\r\n      state,\r\n      action: PayloadAction<WithdrawWICPModalData>\r\n    ) => {\r\n      state.withdrawWICPModalData = {\r\n        ...state.withdrawWICPModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n\r\n    openSwapProgressModal: (state) => {\r\n      state.isSwapProgressModalOpened = true;\r\n    },\r\n    closeSwapProgressModal: (state) => {\r\n      state.isSwapProgressModalOpened = false;\r\n    },\r\n    openSwapFailModal: (state) => {\r\n      state.isSwapFailModalOpened = true;\r\n    },\r\n    closeSwapFailModal: (state) => {\r\n      state.isSwapFailModalOpened = false;\r\n    },\r\n    clearSwapModalData: (state) => {\r\n      state.swapModalData = initialSwapModalData;\r\n    },\r\n    setSwapModalData: (state, action: PayloadAction<SwapModalData>) => {\r\n      state.swapModalData = {\r\n        ...state.swapModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n\r\n    openDepositProgressModal: (state) => {\r\n      state.isDepositProgressModalOpened = true;\r\n    },\r\n    closeDepositProgressModal: (state) => {\r\n      state.isDepositProgressModalOpened = false;\r\n    },\r\n    openDepositFailModal: (state) => {\r\n      state.isDepositFailModalOpened = true;\r\n    },\r\n    closeDepositFailModal: (state) => {\r\n      state.isDepositFailModalOpened = false;\r\n    },\r\n    clearDepositModalData: (state) => {\r\n      state.depositModalData = initialDepositModalData;\r\n    },\r\n    setDepositModalData: (state, action: PayloadAction<DepositModalData>) => {\r\n      state.depositModalData = {\r\n        ...state.depositModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n\r\n    openWithdrawProgressModal: (state) => {\r\n      state.isWithdrawProgressModalOpened = true;\r\n    },\r\n    closeWithdrawProgressModal: (state) => {\r\n      state.isWithdrawProgressModalOpened = false;\r\n    },\r\n    openWithdrawFailModal: (state) => {\r\n      state.isWithdrawFailModalOpened = true;\r\n    },\r\n    closeWithdrawFailModal: (state) => {\r\n      state.isWithdrawFailModalOpened = false;\r\n    },\r\n    clearWithdrawModalData: (state) => {\r\n      state.withdrawModalData = initialWithdrawModalData;\r\n    },\r\n    setWithdrawModalData: (state, action: PayloadAction<WithdrawModalData>) => {\r\n      state.withdrawModalData = {\r\n        ...state.withdrawModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n\r\n    openAddLiquidityProgressModal: (state) => {\r\n      state.isAddLiquidityProgressModalOpened = true;\r\n    },\r\n    closeAddLiquidityProgressModal: (state) => {\r\n      state.isAddLiquidityProgressModalOpened = false;\r\n    },\r\n    openAddLiquidityFailModal: (state) => {\r\n      state.isAddLiquidityFailModalOpened = true;\r\n    },\r\n    closeAddLiquidityFailModal: (state) => {\r\n      state.isAddLiquidityFailModalOpened = false;\r\n    },\r\n    clearAddLiquidityModalData: (state) => {\r\n      state.addLiquidityModalData = initialAddLiquidityModalData;\r\n    },\r\n    setAddLiquidityModalData: (\r\n      state,\r\n      action: PayloadAction<AddLiquidityModalData>\r\n    ) => {\r\n      state.addLiquidityModalData = {\r\n        ...state.addLiquidityModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n\r\n    openRemoveLiquidityProgressModal: (state) => {\r\n      state.isRemoveLiquidityProgressModalOpened = true;\r\n    },\r\n    closeRemoveLiquidityProgressModal: (state) => {\r\n      state.isRemoveLiquidityProgressModalOpened = false;\r\n    },\r\n    openRemoveLiquidityFailModal: (state) => {\r\n      state.isRemoveLiquidityFailModalOpened = true;\r\n    },\r\n    closeRemoveLiquidityFailModal: (state) => {\r\n      state.isRemoveLiquidityFailModalOpened = false;\r\n    },\r\n    clearRemoveLiquidityModalData: (state) => {\r\n      state.removeLiquidityModalData = initialRemoveLiquidityModalData;\r\n    },\r\n    setRemoveLiquidityModalData: (\r\n      state,\r\n      action: PayloadAction<RemoveLiquidityModalData>\r\n    ) => {\r\n      state.removeLiquidityModalData = {\r\n        ...state.removeLiquidityModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n\r\n    openTokenSelectModal: (state) => {\r\n      state.isTokenSelectModalModalOpened = true;\r\n    },\r\n    closeTokenSelectModal: (state) => {\r\n      state.isTokenSelectModalModalOpened = false;\r\n    },\r\n    clearTokenSelectModalData: (state) => {\r\n      state.tokenSelectModalData = initialTokenSelectData;\r\n    },\r\n    setTokenSelectModalData: (\r\n      state,\r\n      action: PayloadAction<TokenSelectData>\r\n    ) => {\r\n      state.tokenSelectModalData = action.payload;\r\n    },\r\n\r\n    openRemoveLiquidityModal: (state) => {\r\n      state.isRemoveLiquidityModalOpened = true;\r\n    },\r\n    closeRemoveLiquidityModal: (state) => {\r\n      state.isRemoveLiquidityModalOpened = false;\r\n    },\r\n\r\n    openAllowanceVerifyModal: (state) => {\r\n      state.isAllowanceVerifyModalOpened = true;\r\n    },\r\n    closeAllowanceVerifyModal: (state) => {\r\n      state.isAllowanceVerifyModalOpened = false;\r\n    },\r\n    setAllowanceVerifyModalData: (\r\n      state,\r\n      action: PayloadAction<AllowanceVerifyModalData>\r\n    ) => {\r\n      state.allowanceModalData = action.payload;\r\n    },\r\n\r\n    openTermsAndConditionsModal: (state) => {\r\n      state.isTermsAndConditionsModalOpened = true;\r\n    },\r\n    closeTermsAndConditionsModal: (state) => {\r\n      state.isTermsAndConditionsModalOpened = false;\r\n    },\r\n    setTermsAndConditionsModalData: (\r\n      state,\r\n      action: PayloadAction<TermsAndConditionsModalData>\r\n    ) => {\r\n      state.termsAndConditionsModalData = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const modalsSliceActions = modalsSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectModalsState = (state: RootState) => state.modals;\r\n\r\nexport default modalsSlice.reducer;\r\n","import { selectModalsState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useModalsStore = () => useAppSelector(selectModalsState);\r\n","import { serialize } from '@memecake/sonic-js';\r\n\r\nimport { AppTokenMetadata } from '@/models';\r\nimport { useAppDispatch } from '@/store';\r\n\r\nimport { modalsSliceActions } from '.';\r\n\r\ntype OpenSelectTokenModalOptions = {\r\n  metadata?: AppTokenMetadata[];\r\n  onSelect: (tokenId?: string) => void;\r\n  selectedTokenIds?: string[];\r\n};\r\n\r\nexport const useTokenModalOpener = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const openSelectTokenModal = ({\r\n    metadata,\r\n    onSelect,\r\n    selectedTokenIds,\r\n  }: OpenSelectTokenModalOptions) => {\r\n    dispatch(\r\n      modalsSliceActions.setTokenSelectModalData({\r\n        tokens: serialize(metadata),\r\n        onSelect,\r\n        selectedTokenIds,\r\n        // Add when we have a custom token selector\r\n        allowAddToken: false,\r\n      })\r\n    );\r\n    dispatch(modalsSliceActions.openTokenSelectModal());\r\n  };\r\n\r\n  return openSelectTokenModal;\r\n};\r\n","export * from './notification-slice';\r\nexport * from './use-notification-store';\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport React from 'react';\r\n\r\nimport type { RootState } from '@/store';\r\nimport { FeatureState } from '@/store';\r\n\r\nexport enum NotificationType {\r\n  Success,\r\n  Error,\r\n\r\n  Deposit,\r\n  Withdraw,\r\n\r\n  Swap,\r\n\r\n  AddLiquidity,\r\n  RemoveLiquidity,\r\n\r\n  MintXTC,\r\n  MintWICP,\r\n  WithdrawWICP,\r\n  MintAuto,\r\n  MintManual,\r\n}\r\n\r\nexport enum NotificationState {\r\n  Idle,\r\n  Pending,\r\n  Success,\r\n  Error,\r\n}\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  title: React.ReactNode;\r\n  errorMessage?: string;\r\n  type: NotificationType;\r\n  transactionLink?: string;\r\n  timeout?: string;\r\n  // TODO: Rewrite notifications to use this\r\n  state?: NotificationState;\r\n}\r\n\r\nexport interface NotificationsState {\r\n  notifications: Array<Notification>;\r\n  state: FeatureState;\r\n}\r\n\r\nconst initialState: NotificationsState = {\r\n  notifications: [],\r\n  state: FeatureState?.Idle,\r\n};\r\n\r\nexport const notificationSlice = createSlice({\r\n  name: 'notification',\r\n  initialState,\r\n  reducers: {\r\n    setState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.state = action.payload;\r\n    },\r\n    setNotificationData: (\r\n      state,\r\n      action: PayloadAction<{\r\n        data: Omit<Partial<Notification>, 'id'>;\r\n        id: string;\r\n      }>\r\n    ) => {\r\n      const notificationIndex = state.notifications.findIndex(\r\n        (notification) => notification.id === action.payload.id\r\n      );\r\n\r\n      if (typeof notificationIndex !== 'undefined') {\r\n        const newNotifications = state.notifications.map(\r\n          (notification, index) => {\r\n            if (index === notificationIndex) {\r\n              return {\r\n                ...notification,\r\n                ...action.payload.data,\r\n              };\r\n            }\r\n\r\n            return notification;\r\n          }\r\n        );\r\n\r\n        state.notifications = newNotifications;\r\n      }\r\n    },\r\n    addNotification: (state, action: PayloadAction<Notification>) => {\r\n      state.notifications.push(action.payload);\r\n    },\r\n    popNotification: (state, action: PayloadAction<string>) => {\r\n      const popId = action.payload;\r\n      const filteredNotifications = state.notifications.filter(\r\n        (obj) => obj.id !== popId\r\n      );\r\n\r\n      state.notifications = filteredNotifications;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setState: setNotificationSliceState,\r\n  addNotification,\r\n  popNotification,\r\n  setNotificationData,\r\n} = notificationSlice.actions;\r\n\r\nexport const selectNotificationState = (state: RootState) => state.notification;\r\n\r\nexport default notificationSlice.reducer;\r\n","import {\r\n  addNotification,\r\n  FeatureState,\r\n  Notification,\r\n  popNotification,\r\n  selectNotificationState,\r\n  setNotificationSliceState,\r\n} from '@/store';\r\nimport { useAppDispatch, useAppSelector } from '@/store';\r\n\r\nexport const useNotificationStore = () => {\r\n  const { notifications, state } = useAppSelector(selectNotificationState);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const _addNotification = (notification: Notification) => {\r\n    dispatch(addNotification(notification));\r\n  };\r\n\r\n  const _popNotification = (notificationId: string) => {\r\n    dispatch(popNotification(notificationId));\r\n  };\r\n\r\n  const _setNotificationState = (state: FeatureState) => {\r\n    dispatch(setNotificationSliceState(state));\r\n  };\r\n\r\n  return {\r\n    notifications,\r\n    state,\r\n    addNotification: _addNotification,\r\n    popNotification: _popNotification,\r\n    setNotificationState: _setNotificationState,\r\n  };\r\n};\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nimport { ENV } from '@/config';\r\nimport { plug } from '@/integrations/plug';\r\nimport { RootState } from '@/store/store';\r\nimport { AppLog } from '@/utils';\r\n\r\nimport { plugSlice, PlugState } from '../plug-slice';\r\nimport { disconnect } from './disconnect';\r\nimport { tokenList} from '@/utils'\r\n//import {artemis} from '@/utils';\r\n\r\nexport const connect = createAsyncThunk<void>(\r\n  'plug/connect',\r\n  async (_, { dispatch, getState }): Promise<void> => {\r\n    if ((getState() as RootState).plug.state === PlugState.Loading) return;\r\n    dispatch(plugSlice.actions.setState(PlugState.Loading));\r\n    var tknList= tokenList(\"obj\");\r\n    if (plug) {\r\n      try {\r\n        const accountChangeCallback = async (\r\n          newPrincipalId: string\r\n        ): Promise<void> => {\r\n          AppLog.warn(`Connected to Plug with principal ${newPrincipalId}`);\r\n          dispatch(plugSlice.actions.setPrincipalId(newPrincipalId));\r\n        };\r\n        await plug.requestConnect({\r\n          host: ENV.host,\r\n          whitelist: [...Object.values(ENV.canistersPrincipalIDs),...Object.keys(tknList)],\r\n          onConnectionUpdate: (data: any) => {\r\n            if (!data.sessionData) {\r\n              return dispatch(disconnect());\r\n            }\r\n            accountChangeCallback(data.sessionData.principalId);\r\n          },\r\n        });\r\n        \r\n       // artemis.connect('plug', { whitelist: Object.values(ENV.canistersPrincipalIDs)} );\r\n\r\n        const principal = await plug.getPrincipal();\r\n        await accountChangeCallback(\r\n          typeof principal === 'string' ? principal : principal.toText()\r\n        );\r\n      } catch (e) {\r\n        AppLog.error('Could not connect to Plug', e);\r\n        dispatch(plugSlice.actions.setState(PlugState.Disconnected));\r\n      }\r\n    } else {\r\n      dispatch(plugSlice.actions.setState(PlugState.NotInstalled));\r\n    }\r\n  }\r\n);\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nimport { plug } from '@/integrations/plug';\r\n\r\nimport { plugSlice, PlugState } from '../plug-slice';\r\n\r\nexport const disconnect = createAsyncThunk<void>(\r\n  'plug/disconnect',\r\n  async (_, { dispatch }): Promise<void> => {\r\n    dispatch(plugSlice.actions.setState(PlugState.Loading));\r\n\r\n    if (plug) {\r\n      dispatch(plugSlice.actions.setState(PlugState.Disconnected));\r\n      plug.disconnect();\r\n      localStorage.clear();\r\n      location.reload()\r\n    } else {\r\n      dispatch(plugSlice.actions.setState(PlugState.NotInstalled));\r\n    }\r\n  }\r\n);\r\n","export * from './connect';\r\nexport * from './disconnect';\r\n","export * from './plug-slice';\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport type { RootState } from '@/store';\r\nimport { useAppSelector } from '@/store/hooks';\r\n\r\nimport { connect, disconnect } from './async-thunk';\r\n\r\nexport enum PlugState {\r\n  NotInstalled,\r\n  Disconnected,\r\n  Loading,\r\n  Connected,\r\n}\r\n\r\ninterface PlugStoreState {\r\n  state: PlugState;\r\n  principalId?: string;\r\n  isConnected: boolean;\r\n}\r\n\r\nconst initialState: PlugStoreState = {\r\n  principalId: undefined,\r\n  state: PlugState.Disconnected,\r\n  isConnected: false,\r\n};\r\n\r\nexport const plugSlice = createSlice({\r\n  name: 'plug',\r\n  initialState,\r\n  reducers: {\r\n    setPrincipalId: (state, action: PayloadAction<string>) => {\r\n      state.state = PlugState.Connected;\r\n      state.principalId = action.payload;\r\n      state.isConnected = true;\r\n    },\r\n    setState: (\r\n      state,\r\n      action: PayloadAction<\r\n        PlugState.Disconnected | PlugState.Loading | PlugState.NotInstalled\r\n      >\r\n    ) => {\r\n      state.state = action.payload;\r\n      state.principalId = undefined;\r\n      state.isConnected = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const plugActions = { ...plugSlice.actions, connect, disconnect };\r\n\r\nconst selectPlugState = (state: RootState): PlugStoreState => state.plug;\r\n\r\nexport const usePlugStore = (): PlugStoreState =>\r\n  useAppSelector(selectPlugState);\r\n\r\nexport default plugSlice.reducer;\r\n","export * from './price-slice';\r\nexport * from './use-price-init';\r\nexport * from './use-price-store';\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { FeatureState, RootState } from '@/store';\r\n\r\nexport interface PriceState {\r\n  icpPrice?: string;\r\n  state: FeatureState;\r\n}\r\n\r\nconst initialState: PriceState = {\r\n  icpPrice: undefined,\r\n  state: 'not-started' as FeatureState,\r\n};\r\n\r\nexport const priceSlice = createSlice({\r\n  name: 'price',\r\n  initialState,\r\n  reducers: {\r\n    setState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.state = action.payload;\r\n    },\r\n    setPrice: (state, action: PayloadAction<string>) => {\r\n      state.icpPrice = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const priceActions = priceSlice.actions;\r\n\r\nexport const selectPriceState = (state: RootState) => state.price;\r\n\r\nexport default priceSlice.reducer;\r\n","import { toBigNumber } from '@memecake/sonic-js';\r\nimport BigNumber from 'bignumber.js';\r\nimport { useCallback, useEffect } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { FeatureState, useAppDispatch } from '@/store';\r\nimport { AppLog } from '@/utils';\r\nimport { fetchICPPrice } from '@/utils/icp';\r\n\r\nimport { swapCanisterActions, useSwapCanisterStore } from '..';\r\nimport { useKeepSync } from '../keep-sync';\r\nimport { priceActions, usePriceStore } from '.';\r\n\r\nexport const usePriceInit = () => {\r\n  const {\r\n    supportedTokenList,\r\n    supportedTokenListState,\r\n    allPairsState,\r\n    allPairs,\r\n  } = useSwapCanisterStore();\r\n  const { state, icpPrice } = usePriceStore();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    _getICPPrice({ isRefreshing: false });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      icpPrice &&\r\n      supportedTokenList &&\r\n      allPairs &&\r\n      supportedTokenListState !== FeatureState.Loading &&\r\n      allPairsState !== FeatureState.Loading\r\n    ) {\r\n      const supportedTokenListWithPrices = supportedTokenList.map((token) => {\r\n        let tokenPrice;\r\n\r\n        if (token.id === ENV.canistersPrincipalIDs.WICP) {\r\n          tokenPrice = icpPrice;\r\n        }\r\n\r\n        if (token.id !== ENV.canistersPrincipalIDs.WICP) {\r\n          const wicpToTokenPair =\r\n            allPairs?.[ENV.canistersPrincipalIDs.WICP]?.[token.id];\r\n          const tokenDecimals = supportedTokenList.find(\r\n            ({ id }) => id === token.id\r\n          )?.decimals;\r\n          const wicpDecimals = supportedTokenList.find(\r\n            ({ id }) => id === ENV.canistersPrincipalIDs.WICP\r\n          )?.decimals;\r\n\r\n          if (wicpToTokenPair && tokenDecimals && wicpDecimals) {\r\n            const wicpReserve =\r\n              wicpToTokenPair.token0 === ENV.canistersPrincipalIDs.WICP\r\n                ? wicpToTokenPair.reserve0\r\n                : wicpToTokenPair.reserve1;\r\n\r\n            const tokenReserve =\r\n              wicpToTokenPair.token0 === ENV.canistersPrincipalIDs.WICP\r\n                ? wicpToTokenPair.reserve1\r\n                : wicpToTokenPair.reserve0;\r\n\r\n            if (wicpReserve && tokenReserve) {\r\n              tokenPrice = new BigNumber(icpPrice)\r\n                .multipliedBy(\r\n                  toBigNumber(wicpReserve).applyDecimals(wicpDecimals)\r\n                )\r\n                .div(toBigNumber(tokenReserve).applyDecimals(tokenDecimals))\r\n                .toString();\r\n            }\r\n          } else {\r\n            tokenPrice = '0';\r\n          }\r\n        }\r\n\r\n        return {\r\n          ...token,\r\n          price: tokenPrice,\r\n        };\r\n      });\r\n\r\n      dispatch(\r\n        swapCanisterActions.setSupportedTokenList(supportedTokenListWithPrices)\r\n      );\r\n    }\r\n  }, [icpPrice, supportedTokenListState, allPairsState, dispatch, allPairs]);\r\n\r\n  const _getICPPrice = useKeepSync(\r\n    'getICPPrice',\r\n    useCallback(\r\n      async (isRefreshing?: boolean) => {\r\n        if (state !== FeatureState.Loading) {\r\n          try {\r\n            dispatch(\r\n              priceActions.setState(\r\n                isRefreshing ? FeatureState.Updating : FeatureState.Loading\r\n              )\r\n            );\r\n\r\n            const price = await fetchICPPrice();\r\n\r\n            if (price) {\r\n              dispatch(priceActions.setPrice(price));\r\n            } else {\r\n              throw new Error('No \"getICPPrice\" response');\r\n            }\r\n\r\n            dispatch(priceActions.setState(FeatureState.Idle));\r\n\r\n            return price;\r\n          } catch (error) {\r\n            AppLog.error('ICP price fetch error', error);\r\n            dispatch(priceActions.setState(FeatureState.Error));\r\n          }\r\n        }\r\n      },\r\n      [dispatch, state]\r\n    )\r\n  );\r\n};\r\n","import { useAppSelector } from '@/store';\r\n\r\nimport { selectPriceState } from '.';\r\n\r\nexport const usePriceStore = () => useAppSelector(selectPriceState);\r\n","export * from './swap-canister-slice';\r\nexport * from './use-swap-canister-init';\r\nexport * from './use-swap-canister-store';\r\n","import { Pair } from '@memecake/sonic-js';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { AppTokenMetadata, Balances, PairBalances } from '@/models';\r\nimport { FeatureState, RootState } from '@/store';\r\n\r\nexport interface SwapCanisterState {\r\n  supportedTokenListState: FeatureState;\r\n  balancesState: FeatureState;\r\n  allPairsState: FeatureState;\r\n  userLPBalancesState: FeatureState;\r\n\r\n  supportedTokenList?: AppTokenMetadata[];\r\n  sonicBalances?: Balances;\r\n  tokenBalances?: Balances;\r\n  icpBalance?: number;\r\n  allPairs?: Pair.List;\r\n  userLPBalances?: PairBalances;\r\n}\r\n\r\nconst initialState: SwapCanisterState = {\r\n  supportedTokenListState: 'not-started' as FeatureState,\r\n  balancesState: 'not-started' as FeatureState,\r\n  allPairsState: 'not-started' as FeatureState,\r\n  userLPBalancesState: 'not-started' as FeatureState,\r\n\r\n  supportedTokenList: undefined,\r\n  sonicBalances: undefined,\r\n  tokenBalances: undefined,\r\n  icpBalance: undefined,\r\n  allPairs: undefined,\r\n  userLPBalances: undefined,\r\n};\r\n\r\nexport const swapCanisterSlice = createSlice({\r\n  name: 'swapCanister',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setICPBalance: (state, action: PayloadAction<bigint>) => {\r\n      state.icpBalance = Number(action.payload);\r\n    },\r\n    setSupportedTokensListState: (\r\n      state,\r\n      action: PayloadAction<FeatureState>\r\n    ) => {\r\n      state.supportedTokenListState = action.payload;\r\n    },\r\n    setBalancesState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.balancesState = action.payload;\r\n    },\r\n    setSupportedTokenList: (\r\n      state,\r\n      action: PayloadAction<AppTokenMetadata[]>\r\n    ) => {\r\n      state.supportedTokenList = action.payload;\r\n    },\r\n    setSonicBalances: (\r\n      state,\r\n      action: PayloadAction<[string, bigint][] | undefined>\r\n    ) => {\r\n      const parsedBalances = action.payload?.reduce((acc, current) => {\r\n        return {\r\n          ...acc,\r\n          [current[0]]: Number(current[1]),\r\n        };\r\n      }, {} as Balances);\r\n      state.sonicBalances = parsedBalances;\r\n    },\r\n    setTokenBalances: (\r\n      state,\r\n      action: PayloadAction<[string, bigint][] | undefined>\r\n    ) => {\r\n      const parsedBalances = action.payload?.reduce((acc, current) => {\r\n        return {\r\n          ...acc,\r\n          [current[0]]: Number(current[1]),\r\n        };\r\n      }, {} as Balances);\r\n      state.tokenBalances = parsedBalances;\r\n    },\r\n    setAllPairsState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.allPairsState = action.payload;\r\n    },\r\n    setAllPairs: (state, action: PayloadAction<Pair.List>) => {\r\n      state.allPairs = action.payload;\r\n    },\r\n    setUserLPBalancesState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.userLPBalancesState = action.payload;\r\n    },\r\n    setUserLPBalances: (state, action: PayloadAction<PairBalances>) => {\r\n      state.userLPBalances = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const swapCanisterActions = swapCanisterSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectSwapCanisterState = (state: RootState) => state.swap;\r\n\r\nexport default swapCanisterSlice.reducer;\r\n","import { useCallback, useEffect } from 'react';\r\n\r\nimport { useAllPairs } from '@/hooks';\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { createAnonSwapActor } from '@/integrations/actor';\r\nimport { FeatureState, swapCanisterActions, useAppDispatch, usePlugStore, useSwapCanisterStore} from '@/store';\r\nimport { AppLog } from '@/utils';\r\nimport { parseResponseSupportedTokenList } from '@/utils/canister';\r\n\r\nimport { useKeepSync } from '../keep-sync';\r\n\r\nexport const useSwapCanisterInit = () => {\r\n  const { getBalances, getUserPositiveLPBalances } = useBalances();\r\n  const { principalId, isConnected, state: plugState } = usePlugStore();\r\n  const { supportedTokenListState } = useSwapCanisterStore();\r\n  const { getAllPairs } = useAllPairs();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!isConnected) {\r\n      dispatch(swapCanisterActions.setBalancesState(FeatureState.Idle));\r\n    }\r\n  }, [isConnected, plugState]);\r\n\r\n  useEffect(() => {\r\n    if (principalId) {\r\n      getBalances({ isRefreshing: false });\r\n      getUserPositiveLPBalances({ isRefreshing: false });\r\n    }\r\n  }, [principalId]);\r\n\r\n  useEffect(() => {\r\n    getSupportedTokenList({ isRefreshing: false });\r\n    getAllPairs({ isRefreshing: false });\r\n  }, []);\r\n\r\n  const getSupportedTokenList = useKeepSync( 'getSupportedTokenList',\r\n    useCallback(\r\n      async (isRefreshing?: boolean , loadAction?:string) => {\r\n        if (supportedTokenListState !== FeatureState.Loading) {\r\n          try {\r\n            dispatch( swapCanisterActions.setSupportedTokensListState( isRefreshing ? FeatureState.Updating : FeatureState.Loading));\r\n            const swapActor = await createAnonSwapActor();\r\n            const response = await swapActor.getSupportedTokenList();\r\n            if (response) {\r\n              dispatch( swapCanisterActions.setSupportedTokenList( parseResponseSupportedTokenList(response)));\r\n            } else {\r\n              throw new Error('No \"getSupportedTokenList\" response');\r\n            }\r\n            dispatch( swapCanisterActions.setSupportedTokensListState(FeatureState.Idle));\r\n            return response;\r\n          } catch (error) {\r\n            AppLog.error('Failed to fetch supported token list', error);\r\n            dispatch( swapCanisterActions.setSupportedTokensListState( FeatureState.Error));\r\n          }\r\n        }\r\n      },\r\n      [supportedTokenListState]\r\n    )\r\n  );\r\n};\r\n","import { selectSwapCanisterState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useSwapCanisterStore = () =>{\r\n  return useAppSelector(selectSwapCanisterState);\r\n}\r\n  \r\n","export * from './swap-view-slice';\r\nexport * from './use-swap-view-init';\r\nexport * from './use-swap-view-store';\r\n","import { MaximalPaths, Pair, Swap } from '@memecake/sonic-js';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { ENV } from '@/config';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport { AppTokenMetadata, AppTokenMetadataListObject, BaseTokenData } from '@/models';\r\n\r\nimport { FeatureState, RootState } from '@/store';\r\nimport { capitalize } from '@/utils/format';\r\nimport { getAmountOutFromPath } from '@/views';\r\n\r\n// import BigNumber from 'bignumber.js';\r\n\r\nexport type SwapTokenDataKey = 'from' | 'to';\r\n\r\nexport interface SwapTokenData<M = AppTokenMetadata> extends BaseTokenData<M> {\r\n  paths: MaximalPaths.PathList;\r\n}\r\n\r\ninterface SwapViewState {\r\n  state: FeatureState;\r\n  from: SwapTokenData;\r\n  to: SwapTokenData;\r\n  tokenList?: AppTokenMetadataListObject;\r\n  allPairs?: Pair.List;\r\n  slippage: string;\r\n  keepInSonic: boolean;\r\n  baseFromTokenPaths: MaximalPaths.PathList;\r\n  baseToTokenPaths: MaximalPaths.PathList;\r\n  allowance?: number;\r\n}\r\n\r\nexport const INITIAL_SWAP_SLIPPAGE = '0.5';\r\nfunction toJson(data: any) {\r\n  if(data) return JSON.stringify(data, (_, v) => typeof v === 'bigint' ? `${v}n` : v).replace(/\"(-?\\d+)n\"/g, (_, a) => a);\r\n  return '{}';\r\n}\r\nconst initialState: SwapViewState = {\r\n  state: FeatureState?.Idle,\r\n  from: { paths: {}, metadata: undefined, value: '' },\r\n  to: { paths: {}, metadata: undefined, value: '' },\r\n  tokenList: undefined,\r\n  allPairs: undefined,\r\n  slippage: INITIAL_SWAP_SLIPPAGE,\r\n  keepInSonic: false,\r\n  baseFromTokenPaths: {},\r\n  baseToTokenPaths: {},\r\n  allowance: undefined,\r\n};\r\nexport const swapViewSlice = createSlice({\r\n  name: 'swap',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => {\r\n      \r\n    },\r\n    setState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.state = action.payload;\r\n    },\r\n    setValue: (state, action: PayloadAction<{ data: SwapTokenDataKey; value: string }>) => {\r\n      const { allPairs, tokenList } = state;\r\n      const { data, value } = action.payload;\r\n\r\n      const metadata = data === 'from' ? state.from.metadata : state.to.metadata;\r\n      const oppositeMetadata = data === 'to' ? state.from.metadata : state.to.metadata;\r\n\r\n      const oppositeDataKey = data === 'from' ? 'to' : 'from';\r\n      state[data].value = value;\r\n      if (tokenList && metadata && oppositeMetadata && !(metadata.id === ICP_METADATA.id) && !(oppositeMetadata.id === ICP_METADATA.id)) {\r\n        const paths: any = getTokenPaths(allPairs as Pair.List, tokenList, metadata.id, state[data].value, data);\r\n\r\n        // Swap.getTokenPaths({\r\n        //   pairList: allPairs as Pair.List, tokenList, tokenId: metadata.id, amount: value, dataKey: data,\r\n        // });\r\n        state[data].paths = paths;\r\n\r\n        state[oppositeDataKey].value = getAmountOutFromPath(state[data] as SwapTokenData, state[oppositeDataKey] as SwapTokenData);\r\n\r\n        if (data === 'to' && paths[oppositeMetadata.id]) {\r\n          state.from.paths[metadata.id] = { amountOut: paths[oppositeMetadata.id].amountOut, path: [...paths[oppositeMetadata.id].path].reverse() };\r\n        }\r\n      }\r\n    },\r\n    setToken: (state, action: PayloadAction<{ data: SwapTokenDataKey; tokenId: string | undefined }>) => {\r\n      const { allPairs, tokenList } = state;\r\n      const { data, tokenId } = action.payload;\r\n\r\n      if (tokenId && tokenList && allPairs) {\r\n        const paths = getTokenPaths(allPairs as Pair.List, tokenList, tokenId, state[data].value, data);\r\n        // const paths = //Swap.getTokenPaths({ pairList: allPairs as Pair.List, tokenList, tokenId, amount: state[data].value, dataKey: data });  \r\n        state[data].metadata = { ...tokenList[tokenId] };\r\n        state[data].paths = paths;\r\n        const tokenPathsDataKey = `base${capitalize(data)}TokenPaths` as | 'baseToTokenPaths' | 'baseFromTokenPaths';\r\n        state[tokenPathsDataKey] = getTokenPaths(allPairs as Pair.List, tokenList, tokenId, state[data].value, data);\r\n        // Swap.getTokenPaths({ pairList: allPairs as Pair.List, tokenList, tokenId, dataKey: data });\r\n\r\n      } else { state[data].metadata = undefined; }\r\n      if (data === 'from') {\r\n        state.to.metadata = undefined;\r\n        state.to.value = '';\r\n      }\r\n    },\r\n    switchTokens: (state, action: PayloadAction<SwapTokenDataKey>) => {\r\n      const dataKey = action.payload;\r\n      const oppositeDataKey = dataKey === 'from' ? 'to' : 'from';\r\n      const oppositeMetadata = state[oppositeDataKey].metadata;\r\n\r\n      if (state.from.metadata && state.to.metadata && oppositeMetadata && state.tokenList && state.allPairs) {\r\n        // FIXME: Handle WICP/ICP specific case better/in other place\r\n\r\n        const isICPToWICPPair = state.from.metadata.id === ICP_METADATA.id && state.to.metadata.id === ENV.canistersPrincipalIDs.WICP;\r\n\r\n        const isWICPToICPPair = state.to.metadata.id === ICP_METADATA.id && state.from.metadata.id === ENV.canistersPrincipalIDs.WICP;\r\n\r\n        const isWICPAndICPPair = isICPToWICPPair || isWICPToICPPair;\r\n\r\n        const value = state[dataKey].value;\r\n\r\n        // const oppositeTokenPaths = Swap.getTokenPaths({\r\n        //   pairList: state.allPairs as Pair.List,\r\n        //   tokenList: state.tokenList,\r\n        //   tokenId: state[dataKey].metadata!.id,\r\n        //   amount: value,\r\n        //   dataKey: oppositeDataKey,\r\n        // });\r\n\r\n        const oppositeTokenPaths = getTokenPaths(state.allPairs as Pair.List, state.tokenList, state[dataKey].metadata!.id, value, oppositeDataKey);\r\n\r\n        const oppositeValue = getAmountOutFromPath( { ...state[dataKey], paths: oppositeTokenPaths },state[oppositeDataKey] as SwapTokenData );\r\n\r\n        // const tokenPaths = Swap.getTokenPaths({\r\n        //   pairList: state.allPairs as Pair.List,\r\n        //   tokenList: state.tokenList,\r\n        //   tokenId: state[oppositeDataKey].metadata!.id,\r\n        //   amount: oppositeValue,\r\n        //   dataKey: dataKey,\r\n        // });\r\n\r\n        const tokenPaths = getTokenPaths(state.allPairs as Pair.List, state.tokenList, state[oppositeDataKey].metadata!.id, oppositeValue, dataKey);\r\n\r\n        const tempMetadata = { ...state.from.metadata };\r\n        state.from.metadata = { ...state.to.metadata };\r\n        state.to.metadata = tempMetadata;\r\n\r\n        // In case of WICP/ICP or ICP/WICP switch -- leave values as they are\r\n        if (!isWICPAndICPPair) {\r\n          state[oppositeDataKey].paths = oppositeTokenPaths;\r\n          state[dataKey].paths = tokenPaths;\r\n\r\n          state[oppositeDataKey].value = value;\r\n          state[dataKey].value = oppositeValue;\r\n\r\n          const baseFromPaths = getTokenPaths(state.allPairs as Pair.List, state.tokenList, state.from.metadata.id);\r\n\r\n          // Swap.getTokenPaths({ pairList: state.allPairs as Pair.List,   tokenList: state.tokenList, tokenId: state.from.metadata.id });\r\n          \r\n          const baseToPaths = getTokenPaths(state.allPairs as Pair.List, state.tokenList, state.to.metadata.id);\r\n          \r\n          //Swap.getTokenPaths({ pairList: state.allPairs as Pair.List, tokenList: state.tokenList,tokenId: state.to.metadata.id, });\r\n\r\n          state.baseFromTokenPaths = baseFromPaths;\r\n          state.baseToTokenPaths = baseToPaths;\r\n        }\r\n      }\r\n    },\r\n    setTokenList: ( state, action: PayloadAction<AppTokenMetadataListObject>) => {\r\n      state.tokenList = action.payload;\r\n      const tokens = Object.values(action.payload);\r\n      const { allPairs, tokenList } = state;\r\n      if (!state.from.metadata) {\r\n        state.from.metadata = { ...tokens[0] };\r\n        state.from.paths = {};\r\n        state.from.value = '';\r\n        state.to.value = '';\r\n        if(state.from.metadata.id){\r\n          state.from.paths =  getTokenPaths(allPairs as Pair.List, tokenList, state.from.metadata.id, 0, \"from\");\r\n        }\r\n      }\r\n      if(state.from.metadata && !state.from.paths){\r\n        state.from.paths =  getTokenPaths(allPairs as Pair.List, tokenList, state.from.metadata.id, 0, \"from\");\r\n      }\r\n    },\r\n    setAllPairs: (state, action: PayloadAction<Pair.List | undefined>) => {\r\n      state.allPairs = action.payload;\r\n    },\r\n    setSlippage: (state, action: PayloadAction<string>) => {\r\n      state.slippage = action.payload;\r\n    },\r\n    setKeepInSonic: (state, action: PayloadAction<boolean>) => {\r\n      state.keepInSonic = action.payload;\r\n    },\r\n    setAllowance: (state, action: PayloadAction<number | undefined>) => {\r\n      state.allowance = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const swapViewActions = swapViewSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\n\r\nexport const selectSwapViewState = (state: RootState) => state.swapView;\r\n\r\n\r\n//getTokenPaths to avoid cpu load in built fn\r\n\r\nconst getTokenPaths = function(allPairs?: any, tokenList?: any, tokenId?: string, amount?: any, dataKey?: any) {\r\n  var allPairs = JSON.parse(toJson(allPairs)), tokenList = JSON.parse(toJson(tokenList)),tokenPaths: any = {};\r\n  if (tokenId) {\r\n    if(!allPairs[tokenId] ) return tokenPaths;\r\n    Object.keys(allPairs[tokenId]).forEach((x: string) => {\r\n      let fromValue = amount ? amount : 0;\r\n      var p = Swap.getAmountOut({ \r\n        amountIn: fromValue.toString(),decimalsIn: tokenList[tokenId]?.decimals, decimalsOut: tokenList[x]?.decimals,\r\n        reserveIn: allPairs[tokenId][x].reserve0,reserveOut: allPairs[tokenId][x].reserve1,\r\n      })\r\n      tokenPaths[x] = { amountOut: p, path: [tokenId, x] ,  }\r\n    })\r\n  }\r\n  return tokenPaths;\r\n}\r\nexport const getTokenPath = getTokenPaths;\r\nexport default swapViewSlice.reducer;\r\n","import { useEffect, useState } from 'react';\r\nimport { getICPTokenMetadata } from '@/constants';\r\nimport { useAppDispatch } from '@/store'; //selectSwapViewState selectSwapViewState, useAppSelector\r\nimport { parseResponseTokenList } from '@/utils/canister';\r\n\r\nimport { usePriceStore, useSwapCanisterStore } from '..';\r\nimport { swapViewActions } from '.';\r\nimport { AppTokenMetadataListObject } from '@/models';\r\n\r\nexport const useSwapView = (method: string) => {\r\n  const dispatch = useAppDispatch();\r\n  const { icpPrice } = usePriceStore();\r\n  const { allPairs, supportedTokenList } = useSwapCanisterStore();\r\n\r\n  const [isPairLoaded, setIsPairLoad] = useState<boolean>(false);\r\n  var tokenListTemp: AppTokenMetadataListObject = {};\r\n\r\n  useEffect(() => {\r\n    if (!supportedTokenList) return;\r\n    tokenListTemp = parseResponseTokenList([getICPTokenMetadata(icpPrice), ...supportedTokenList]);\r\n    if (method == 'swap') {\r\n      delete tokenListTemp.ICP;\r\n    } else if (method == 'mint') {\r\n      tokenListTemp = {\r\n        ICP: tokenListTemp.ICP,\r\n        \"utozz-siaaa-aaaam-qaaxq-cai\": tokenListTemp[\"utozz-siaaa-aaaam-qaaxq-cai\"],\r\n        \"aanaa-xaaaa-aaaah-aaeiq-cai\": tokenListTemp[\"aanaa-xaaaa-aaaah-aaeiq-cai\"],\r\n      };\r\n    }\r\n    dispatch(swapViewActions.setTokenList(tokenListTemp));\r\n\r\n    const setInitToken = async () => {\r\n      await dispatch(swapViewActions.setAllPairs(allPairs));\r\n      setIsPairLoad(true);\r\n    }\r\n\r\n    if (allPairs && Object.keys(tokenListTemp)) {\r\n      setInitToken();\r\n    }\r\n\r\n  }, [allPairs, supportedTokenList, dispatch, icpPrice]);\r\n\r\n  useEffect(() => {\r\n    if (method == 'mint') {\r\n      dispatch(swapViewActions.setToken({ data: 'from', tokenId: 'ICP' }));\r\n      dispatch(swapViewActions.setValue({ data: 'from', value: '' }));\r\n      dispatch(swapViewActions.setValue({ data: 'to', value: '' }));\r\n    }\r\n    tokenListTemp = parseResponseTokenList([...supportedTokenList || []]);\r\n    if (!isPairLoaded || !tokenListTemp) return;\r\n    if (method == 'swap') {\r\n      const temp = Object.keys(tokenListTemp)[0];\r\n      dispatch(swapViewActions.setToken({ data: \"from\", tokenId: tokenListTemp[temp]?.id }));\r\n      dispatch(swapViewActions.setValue({ data: 'from', value: '' }));\r\n      dispatch(swapViewActions.setValue({ data: 'to', value: '' }));\r\n    }\r\n  }, [isPairLoaded, method])\r\n};","import { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport { useTokenSelectionChecker } from '@/hooks';\r\nimport { AppTokenMetadata } from '@/models';\r\nimport { selectSwapViewState, useAppSelector } from '@/store';\r\n\r\nimport { useSwapCanisterStore } from '..';\r\n\r\nexport const useSwapViewStore = () => {\r\n  const state = useAppSelector(selectSwapViewState);\r\n  const { from, tokenList } = state;\r\n  const { allPairs } = useSwapCanisterStore();\r\n\r\n  const { isTokenSelected: isICPSelected } = useTokenSelectionChecker({ id0: from.metadata?.id,});\r\n\r\n  const { isTokenSelected: isWICPSelected } = useTokenSelectionChecker({\r\n    id0: from.metadata?.id,\r\n    targetId: ENV.canistersPrincipalIDs.WICP,\r\n  });\r\n\r\n  const [fromTokenOptions, toTokenOptions] = useMemo(() => {\r\n    if (!from.metadata || !tokenList) return [[], []];\r\n    \r\n    const fromTokenOptions = Object.values(tokenList);\r\n\r\n    if (!allPairs) { return [fromTokenOptions, []];}\r\n\r\n    if (isICPSelected) {\r\n      const wicpTokenMetadata = tokenList[ENV.canistersPrincipalIDs.WICP];\r\n      const xtcTokenMetadata = tokenList[ENV.canistersPrincipalIDs.XTC];\r\n      const icpToTokenOptions: AppTokenMetadata[] = [\r\n        ...(wicpTokenMetadata ? [wicpTokenMetadata] : []),\r\n        ...(xtcTokenMetadata ? [xtcTokenMetadata] : []),\r\n      ];\r\n      return [fromTokenOptions, icpToTokenOptions];\r\n    }\r\n    const toTokenPathsIds = Object.keys(from.paths);\r\n    \r\n    const toTokenOptions = fromTokenOptions.filter((token:{ id:string}) =>\r\n      toTokenPathsIds.includes(token.id)\r\n    );\r\n    if (isWICPSelected) {\r\n      const icpToken = fromTokenOptions.find((token) => token.id === ICP_METADATA.id);\r\n      if (icpToken) { toTokenOptions.unshift({ ...icpToken });}\r\n    }\r\n    return [fromTokenOptions, toTokenOptions];\r\n  }, [, from.metadata, from.paths, tokenList, isICPSelected,isWICPSelected]);\r\n\r\n  return { ...state, fromTokenOptions, toTokenOptions};\r\n};\r\n","export * from './withdraw-view-slice';\r\nexport * from './use-withdraw-view-store';\r\n","import { selectAssetsViewState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useAssetsViewStore = () => useAppSelector(selectAssetsViewState);\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport type { RootState } from '@/store';\r\nimport { FeatureState } from '@/store';\r\n\r\ninterface WithdrawViewState {\r\n  state: FeatureState;\r\n  amount: string;\r\n  tokenId?: string;\r\n}\r\n\r\nconst initialState: WithdrawViewState = {\r\n  state: FeatureState?.Idle,\r\n  amount: '',\r\n  tokenId: undefined,\r\n};\r\n\r\nexport const withdrawViewSlice = createSlice({\r\n  name: 'withdraw',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.state = action.payload;\r\n    },\r\n    setAmount: (state, action: PayloadAction<string>) => {\r\n      state.amount = action.payload;\r\n    },\r\n    setTokenId: (state, action: PayloadAction<string>) => {\r\n      state.tokenId = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const withdrawViewActions = withdrawViewSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectWithdrawViewState = (state: RootState) => state.withdrawView;\r\n\r\nexport default withdrawViewSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\n\r\nimport type { AppDispatch, RootState } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","export * from './features';\r\nexport * from './hooks';\r\nexport * from './models';\r\nexport * from './store';\r\n","export enum FeatureState {\r\n  NotStarted = 'not-started',\r\n  Idle = 'idle',\r\n  Loading = 'loading',\r\n  Error = 'error',\r\n  Updating = 'updating',\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport activityViewReducer from '@/store/features/activity-view/activity-view-slice';\r\nimport allowanceReducer from '@/store/features/allowance/allowance-slice';\r\nimport assetsViewReducer from '@/store/features/assets-view/assets-view-slice';\r\nimport cyclesMintingCanisterReducer from '@/store/features/cycles-minting-canister/cycles-minting-canister-slice';\r\nimport depositViewReducer from '@/store/features/deposit-view/deposit-view-slice';\r\nimport keepSyncReducer from '@/store/features/keep-sync/keep-sync-slice';\r\nimport liquidityViewReducer from '@/store/features/liquidity-view/liquidity-view-slice';\r\nimport modalsReducer from '@/store/features/modals/modals-slice';\r\nimport notificationReducer from '@/store/features/notification/notification-slice';\r\nimport plugReducer from '@/store/features/plug/plug-slice';\r\nimport priceReducer from '@/store/features/price/price-slice';\r\nimport swapReducer from '@/store/features/swap-canister/swap-canister-slice';\r\nimport swapViewReducer from '@/store/features/swap-view/swap-view-slice';\r\nimport withdrawViewReducer from '@/store/features/withdraw-view/withdraw-view-slice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    cyclesMinting: cyclesMintingCanisterReducer,\r\n    plug: plugReducer,\r\n    modals: modalsReducer,\r\n    notification: notificationReducer,\r\n    swap: swapReducer,\r\n    price: priceReducer,\r\n    keepSync: keepSyncReducer,\r\n\r\n    activityView: activityViewReducer,\r\n    assetsView: assetsViewReducer,\r\n    depositView: depositViewReducer,\r\n    liquidityView: liquidityViewReducer,\r\n    swapView: swapViewReducer,\r\n    withdrawView: withdrawViewReducer,\r\n    allowance: allowanceReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: false,\r\n    }),\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import type {\r\n  SystemStyleFunction,\r\n  SystemStyleObject,\r\n} from '@chakra-ui/theme-tools';\r\nimport { mode, transparentize } from '@chakra-ui/theme-tools';\r\n\r\nconst baseStyle: SystemStyleObject = {\r\n  lineHeight: '1.2',\r\n  borderRadius: 'xl',\r\n  fontWeight: 'semibold',\r\n  transitionProperty: 'common',\r\n  transitionDuration: 'normal',\r\n  _focus: {\r\n    boxShadow: 'outline',\r\n  },\r\n  _disabled: {\r\n    opacity: 0.4,\r\n    cursor: 'not-allowed',\r\n    boxShadow: 'none',\r\n  },\r\n  _hover: {\r\n    _disabled: {\r\n      bg: 'initial',\r\n    },\r\n  },\r\n};\r\n\r\nconst variantGhost: SystemStyleFunction = (props) => {\r\n  const { colorScheme: c, theme } = props;\r\n\r\n  if (c === 'gray') {\r\n    return {\r\n      color: mode(`inherit`, `whiteAlpha.900`)(props),\r\n      _hover: {\r\n        bg: mode(`gray.100`, `whiteAlpha.200`)(props),\r\n      },\r\n      _active: { bg: mode(`custom.200`, `whiteAlpha.300`)(props) },\r\n    };\r\n  }\r\n\r\n  const darkHoverBg = transparentize(`${c}.200`, 0.12)(theme);\r\n  const darkActiveBg = transparentize(`${c}.200`, 0.24)(theme);\r\n\r\n  return {\r\n    color: mode(`${c}.600`, `${c}.200`)(props),\r\n    bg: 'transparent',\r\n    _hover: {\r\n      bg: mode(`${c}.50`, darkHoverBg)(props),\r\n    },\r\n    _active: {\r\n      bg: mode(`${c}.100`, darkActiveBg)(props),\r\n    },\r\n  };\r\n};\r\n\r\nconst variantOutline: SystemStyleFunction = (props) => {\r\n  const { colorScheme: c } = props;\r\n  const borderColor = mode(`gray.200`, `whiteAlpha.300`)(props);\r\n  return {\r\n    border: '1px solid',\r\n    borderColor: c === 'gray' ? borderColor : 'currentColor',\r\n    ...variantGhost(props),\r\n  };\r\n};\r\n\r\ntype AccessibleColor = {\r\n  bg?: string;\r\n  color?: string;\r\n  hoverBg?: string;\r\n  activeBg?: string;\r\n};\r\n\r\n/** Accessible color overrides for less accessible colors. */\r\nconst accessibleColorMap: { [key: string]: AccessibleColor } = {\r\n  yellow: {\r\n    bg: 'yellow.400',\r\n    color: 'black',\r\n    hoverBg: 'yellow.500',\r\n    activeBg: 'yellow.600',\r\n  },\r\n  cyan: {\r\n    bg: 'cyan.400',\r\n    color: 'black',\r\n    hoverBg: 'cyan.500',\r\n    activeBg: 'cyan.600',\r\n  },\r\n};\r\n\r\nconst variantSolid: SystemStyleFunction = (props) => {\r\n  const { colorScheme: c } = props;\r\n\r\n  if (c === 'gray') {\r\n    const bg = mode(`gray.100`, `whiteAlpha.200`)(props);\r\n\r\n    return {\r\n      bg,\r\n      _hover: {\r\n        bg: mode(`gray.200`, `whiteAlpha.300`)(props),\r\n        _disabled: {\r\n          bg,\r\n        },\r\n      },\r\n      _active: { bg: mode(`gray.300`, `whiteAlpha.400`)(props) },\r\n    };\r\n  }\r\n\r\n  const {\r\n    bg = `${c}.500`,\r\n    color = 'white',\r\n    hoverBg = `${c}.600`,\r\n    activeBg = `${c}.700`,\r\n  } = accessibleColorMap[c] ?? {};\r\n\r\n  const background = mode(bg, `${c}.200`)(props);\r\n\r\n  return {\r\n    bg: background,\r\n    color: mode(color, `gray.800`)(props),\r\n    _hover: {\r\n      bg: mode(hoverBg, `${c}.300`)(props),\r\n      _disabled: {\r\n        bg: background,\r\n      },\r\n    },\r\n    _active: { bg: mode(activeBg, `${c}.400`)(props) },\r\n  };\r\n};\r\n\r\nconst variantLink: SystemStyleFunction = (props) => {\r\n  const { colorScheme: c } = props;\r\n  return {\r\n    padding: 0,\r\n    height: 'auto',\r\n    lineHeight: 'normal',\r\n    verticalAlign: 'baseline',\r\n    color: mode(`${c}.500`, `${c}.200`)(props),\r\n    _hover: {\r\n      textDecoration: 'underline',\r\n      _disabled: {\r\n        textDecoration: 'none',\r\n      },\r\n    },\r\n    _active: {\r\n      color: mode(`${c}.700`, `${c}.500`)(props),\r\n    },\r\n  };\r\n};\r\n\r\nconst variantGradient: SystemStyleFunction = (props) => {\r\n  const { colorScheme: c, theme } = props;\r\n\r\n  const gradientColor0 = mode(\r\n    theme.colors[c][400],\r\n    theme.colors[c][500]\r\n  )(props);\r\n  const gradientColor1 = mode(\r\n    theme.colors[c][600],\r\n    theme.colors[c][700]\r\n  )(props);\r\n\r\n  const background = `linear-gradient(180deg, ${gradientColor0} 0%, ${gradientColor1} 100%)`;\r\n\r\n  return {\r\n    ...variantSolid(props),\r\n    color: mode(`white`, `gray.50`)(props),\r\n    bg: background,\r\n    _disabled: {\r\n      background: mode('gray.200', 'gray.700')(props),\r\n      color: mode(`gray.800`, `gray.50`)(props),\r\n    },\r\n    _hover: {\r\n      background,\r\n      _disabled: {\r\n        background: mode('gray.200', 'gray.700')(props),\r\n        color: mode(`gray.800`, `gray.50`)(props),\r\n      },\r\n    },\r\n    _active: {\r\n      background,\r\n    },\r\n  };\r\n};\r\n\r\nconst variantUnstyled: SystemStyleObject = {\r\n  bg: 'none',\r\n  color: 'inherit',\r\n  display: 'inline',\r\n  lineHeight: 'inherit',\r\n  m: 0,\r\n  p: 0,\r\n};\r\n\r\nconst variants = {\r\n  ghost: variantGhost,\r\n  outline: variantOutline,\r\n  solid: variantSolid,\r\n  link: variantLink,\r\n  gradient: variantGradient,\r\n  unstyled: variantUnstyled,\r\n};\r\n\r\nconst sizes: Record<string, SystemStyleObject> = {\r\n  lg: {\r\n    h: 12,\r\n    minW: 12,\r\n    fontSize: 'lg',\r\n    px: 6,\r\n  },\r\n  md: {\r\n    h: 10,\r\n    minW: 10,\r\n    fontSize: 'md',\r\n    px: 4,\r\n  },\r\n  sm: {\r\n    h: 8,\r\n    minW: 8,\r\n    fontSize: 'sm',\r\n    px: 3,\r\n  },\r\n  xs: {\r\n    h: 6,\r\n    minW: 6,\r\n    fontSize: 'xs',\r\n    px: 2,\r\n  },\r\n};\r\n\r\nconst defaultProps = {\r\n  variant: 'solid',\r\n  size: 'md',\r\n  colorScheme: 'gray',\r\n};\r\n\r\nexport default {\r\n  baseStyle,\r\n  variants,\r\n  sizes,\r\n  defaultProps,\r\n};\r\n","const variantRounded = {\r\n  borderWidth: '1px',\r\n  borderStyle: 'solid',\r\n  borderColor: 'gray.200',\r\n  borderRadius: 'full',\r\n};\r\n\r\nconst variants = {\r\n  rounded: variantRounded,\r\n};\r\n\r\nexport default {\r\n  variants,\r\n};\r\n","import { menuAnatomy as parts } from '@chakra-ui/anatomy';\r\nimport type {\r\n  PartsStyleFunction,\r\n  SystemStyleFunction,\r\n  SystemStyleObject,\r\n} from '@chakra-ui/theme-tools';\r\nimport { mode } from '@chakra-ui/theme-tools';\r\n\r\nconst baseStyleList: SystemStyleFunction = (props) => {\r\n  return {\r\n    bg: mode('#fff', 'gray.700')(props),\r\n    boxShadow: mode('sm', 'dark-lg')(props),\r\n    color: 'inherit',\r\n    minW: '3xs',\r\n    py: '2',\r\n    zIndex: 1,\r\n    borderRadius: 'md',\r\n    borderWidth: '1px',\r\n  };\r\n};\r\n\r\nconst baseStyleItem: SystemStyleFunction = (props) => {\r\n  return {\r\n    py: '0.4rem',\r\n    px: '0.8rem',\r\n    transitionProperty: 'background',\r\n    transitionDuration: 'ultra-fast',\r\n    transitionTimingFunction: 'ease-in',\r\n    _focus: {\r\n      bg: mode('gray.100', 'whiteAlpha.100')(props),\r\n    },\r\n    _active: {\r\n      bg: mode('gray.200', 'whiteAlpha.200')(props),\r\n    },\r\n    _expanded: {\r\n      bg: mode('gray.100', 'whiteAlpha.100')(props),\r\n    },\r\n    _disabled: {\r\n      opacity: 0.4,\r\n      cursor: 'not-allowed',\r\n    },\r\n  };\r\n};\r\n\r\nconst baseStyleGroupTitle: SystemStyleObject = {\r\n  mx: 4,\r\n  my: 2,\r\n  fontWeight: 'semibold',\r\n  fontSize: 'sm',\r\n};\r\n\r\nconst baseStyleCommand: SystemStyleObject = {\r\n  opacity: 0.6,\r\n};\r\n\r\nconst baseStyleDivider: SystemStyleObject = {\r\n  border: 0,\r\n  borderBottom: '1px solid',\r\n  borderColor: 'inherit',\r\n  my: '0.5rem',\r\n  opacity: 0.6,\r\n};\r\n\r\nconst baseStyleButton: SystemStyleObject = {\r\n  transitionProperty: 'common',\r\n  transitionDuration: 'normal',\r\n};\r\n\r\nconst baseStyle: PartsStyleFunction<typeof parts> = (props) => ({\r\n  button: baseStyleButton,\r\n  list: baseStyleList(props),\r\n  item: baseStyleItem(props),\r\n  groupTitle: baseStyleGroupTitle,\r\n  command: baseStyleCommand,\r\n  divider: baseStyleDivider,\r\n});\r\n\r\nexport default {\r\n  parts: parts.keys,\r\n  baseStyle,\r\n};\r\n","import { modalAnatomy as parts } from '@chakra-ui/anatomy';\r\nimport type {\r\n  PartsStyleFunction,\r\n  PartsStyleObject,\r\n  SystemStyleFunction,\r\n  SystemStyleObject,\r\n} from '@chakra-ui/theme-tools';\r\nimport { mode } from '@chakra-ui/theme-tools';\r\n\r\nconst baseStyleOverlay: SystemStyleObject = {\r\n  bg: 'blackAlpha.600',\r\n  zIndex: 'modal',\r\n};\r\n\r\nconst baseStyleDialogContainer: SystemStyleFunction = (props) => {\r\n  const { isCentered, scrollBehavior } = props;\r\n\r\n  return {\r\n    display: 'flex',\r\n    zIndex: 'modal',\r\n    justifyContent: 'center',\r\n    alignItems: isCentered ? 'center' : 'flex-start',\r\n    overflow: scrollBehavior === 'inside' ? 'hidden' : 'auto',\r\n  };\r\n};\r\n\r\nconst baseStyleDialog: SystemStyleFunction = (props) => {\r\n  const { scrollBehavior } = props;\r\n\r\n  return {\r\n    borderRadius: 'xl',\r\n    bg: mode('white', 'custom.2')(props),\r\n    color: 'inherit',\r\n    my: '3.75rem',\r\n    mx: '1rem',\r\n    zIndex: 'modal',\r\n    maxH: scrollBehavior === 'inside' ? 'calc(100% - 7.5rem)' : undefined,\r\n    boxShadow: mode('lg', 'dark-lg')(props),\r\n  };\r\n};\r\n\r\nconst baseStyleHeader: SystemStyleObject = {\r\n  px: 6,\r\n  py: 4,\r\n  borderStyle: 'solid',\r\n  borderBottomWidth: '1px',\r\n  fontSize: 'xl',\r\n  fontWeight: 'semibold',\r\n  textAlign: 'center',\r\n};\r\n\r\nconst baseStyleCloseButton: SystemStyleObject = {\r\n  borderRadius: 'full',\r\n  position: 'absolute',\r\n  top: 2,\r\n  insetEnd: 3,\r\n};\r\n\r\nconst baseStyleBody: SystemStyleFunction = (props) => {\r\n  const { scrollBehavior } = props;\r\n  return {\r\n    px: 6,\r\n    py: 2,\r\n    flex: 1,\r\n    overflow: scrollBehavior === 'inside' ? 'auto' : undefined,\r\n  };\r\n};\r\n\r\nconst baseStyleFooter: SystemStyleObject = {\r\n  px: 6,\r\n  py: 4,\r\n};\r\n\r\nconst baseStyle: PartsStyleFunction<typeof parts> = (props) => ({\r\n  overlay: baseStyleOverlay,\r\n  dialogContainer: baseStyleDialogContainer(props),\r\n  dialog: baseStyleDialog(props),\r\n  header: baseStyleHeader,\r\n  closeButton: baseStyleCloseButton,\r\n  body: baseStyleBody(props),\r\n  footer: baseStyleFooter,\r\n});\r\n\r\n/**\r\n * Since the `maxWidth` prop references theme.sizes internally,\r\n * we can leverage that to size our modals.\r\n */\r\nfunction getSize(value: string): PartsStyleObject<typeof parts> {\r\n  if (value === 'full') {\r\n    return {\r\n      dialog: { maxW: '100vw', minH: '100vh', my: 0 },\r\n    };\r\n  }\r\n  return {\r\n    dialog: { maxW: value },\r\n  };\r\n}\r\n\r\nconst sizes = {\r\n  xs: getSize('xs'),\r\n  sm: getSize('sm'),\r\n  md: getSize('md'),\r\n  lg: getSize('lg'),\r\n  xl: getSize('xl'),\r\n  '2xl': getSize('2xl'),\r\n  '3xl': getSize('3xl'),\r\n  '4xl': getSize('4xl'),\r\n  '5xl': getSize('5xl'),\r\n  '6xl': getSize('6xl'),\r\n  full: getSize('full'),\r\n};\r\n\r\nconst defaultProps = {\r\n  size: 'md',\r\n};\r\n\r\nexport default {\r\n  parts: parts.keys,\r\n  baseStyle,\r\n  sizes,\r\n  defaultProps,\r\n};\r\n","import { popoverAnatomy as parts } from '@chakra-ui/anatomy';\r\nimport type {\r\n  PartsStyleFunction,\r\n  SystemStyleFunction,\r\n  SystemStyleObject,\r\n} from '@chakra-ui/theme-tools';\r\nimport { cssVar, mode } from '@chakra-ui/theme-tools';\r\n\r\nconst $popperBg = cssVar('popper-bg');\r\n\r\nconst $arrowBg = cssVar('popper-arrow-bg');\r\nconst $arrowShadowColor = cssVar('popper-arrow-shadow-color');\r\n\r\nconst baseStylePopper: SystemStyleObject = {\r\n  zIndex: 10,\r\n};\r\n\r\nconst baseStyleContent: SystemStyleFunction = (props) => {\r\n  const bg = mode('white', 'gray.800')(props);\r\n  const borderColor = mode('gray.100', 'custom.4')(props);\r\n\r\n  return {\r\n    [$popperBg.variable]: `colors.${bg}`,\r\n    bg: $popperBg.reference,\r\n    [$arrowBg.variable]: $popperBg.reference,\r\n    [$arrowShadowColor.variable]: 'transparent',\r\n    width: 'xs',\r\n    borderRadius: 'xl',\r\n    shadow: 'md',\r\n    border: '1px solid',\r\n    borderColor,\r\n    zIndex: 'inherit',\r\n    _focus: {\r\n      outline: 0,\r\n      boxShadow: 'outline',\r\n    },\r\n  };\r\n};\r\n\r\nconst baseStyleHeader: SystemStyleObject = {\r\n  mx: 4,\r\n  py: 4,\r\n  px: 1,\r\n  borderBottomWidth: '1px',\r\n  fontWeight: 'bold',\r\n};\r\n\r\nconst baseStyleBody: SystemStyleObject = {\r\n  mx: 4,\r\n  px: 1,\r\n  py: 4,\r\n};\r\n\r\nconst baseStyleFooter: SystemStyleObject = {\r\n  px: 3,\r\n  py: 2,\r\n  borderTopWidth: '1px',\r\n};\r\n\r\nconst baseStyleCloseButton: SystemStyleObject = {\r\n  position: 'absolute',\r\n  borderRadius: 'md',\r\n  top: 1,\r\n  insetEnd: 2,\r\n  padding: 2,\r\n};\r\n\r\nconst baseStyle: PartsStyleFunction<typeof parts> = (props) => ({\r\n  popper: baseStylePopper,\r\n  content: baseStyleContent(props),\r\n  header: baseStyleHeader,\r\n  body: baseStyleBody,\r\n  footer: baseStyleFooter,\r\n  closeButton: baseStyleCloseButton,\r\n});\r\n\r\nexport default {\r\n  parts: parts.keys,\r\n  baseStyle,\r\n};\r\n","import { tabsAnatomy as parts } from '@chakra-ui/anatomy';\r\nimport type {\r\n  PartsStyleFunction,\r\n  PartsStyleInterpolation,\r\n  PartsStyleObject,\r\n  SystemStyleFunction,\r\n  SystemStyleObject,\r\n} from '@chakra-ui/theme-tools';\r\nimport { getColor, mode } from '@chakra-ui/theme-tools';\r\n\r\nimport { theme } from '..';\r\n\r\nconst baseStyleRoot: SystemStyleFunction = (props) => {\r\n  const { orientation } = props;\r\n  return {\r\n    display: orientation === 'vertical' ? 'flex' : 'block',\r\n  };\r\n};\r\n\r\nconst baseStyleTab: SystemStyleFunction = (props) => {\r\n  const { isFitted } = props;\r\n\r\n  return {\r\n    flex: isFitted ? 1 : undefined,\r\n    transitionProperty: 'common',\r\n    transitionDuration: 'normal',\r\n    _focus: {\r\n      zIndex: 1,\r\n      boxShadow: 'outline',\r\n    },\r\n  };\r\n};\r\n\r\nconst baseStyleTablist: SystemStyleFunction = (props) => {\r\n  const { align = 'start', orientation } = props;\r\n\r\n  const alignments = {\r\n    end: 'flex-end',\r\n    center: 'center',\r\n    start: 'flex-start',\r\n  };\r\n\r\n  return {\r\n    justifyContent: alignments[align as keyof typeof alignments],\r\n    flexDirection: orientation === 'vertical' ? 'column' : 'row',\r\n  };\r\n};\r\n\r\nconst baseStyleTabpanel: SystemStyleObject = {\r\n  p: 4,\r\n};\r\n\r\nconst baseStyle: PartsStyleFunction<typeof parts> = (props) => ({\r\n  root: baseStyleRoot(props),\r\n  tab: baseStyleTab(props),\r\n  tablist: baseStyleTablist(props),\r\n  tabpanel: baseStyleTabpanel,\r\n});\r\n\r\nconst sizes: Record<string, PartsStyleObject<typeof parts>> = {\r\n  sm: {\r\n    tab: {\r\n      py: 1,\r\n      px: 4,\r\n      fontSize: 'sm',\r\n    },\r\n  },\r\n  md: {\r\n    tab: {\r\n      fontSize: 'md',\r\n      py: 2,\r\n      px: 4,\r\n    },\r\n  },\r\n  lg: {\r\n    tab: {\r\n      fontSize: 'lg',\r\n      py: 3,\r\n      px: 4,\r\n    },\r\n  },\r\n};\r\n\r\nconst variantLine: PartsStyleFunction<typeof parts> = (props) => {\r\n  const { colorScheme: c, orientation } = props;\r\n  const isVertical = orientation === 'vertical';\r\n  const borderProp =\r\n    orientation === 'vertical' ? 'borderStart' : 'borderBottom';\r\n  const marginProp = isVertical ? 'marginStart' : 'marginBottom';\r\n\r\n  return {\r\n    tablist: {\r\n      [borderProp]: '2px solid',\r\n      borderColor: 'inherit',\r\n    },\r\n    tab: {\r\n      [borderProp]: '2px solid',\r\n      borderColor: 'transparent',\r\n      [marginProp]: '-2px',\r\n      _selected: {\r\n        color: mode(`${c}.600`, `${c}.300`)(props),\r\n        borderColor: 'currentColor',\r\n      },\r\n      _active: {\r\n        bg: mode('gray.200', 'whiteAlpha.300')(props),\r\n      },\r\n      _disabled: {\r\n        opacity: 0.4,\r\n        cursor: 'not-allowed',\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nconst variantEnclosed: PartsStyleFunction<typeof parts> = (props) => {\r\n  const { colorScheme: c } = props;\r\n  return {\r\n    tab: {\r\n      borderTopRadius: 'md',\r\n      border: '1px solid',\r\n      borderColor: 'transparent',\r\n      mb: '-1px',\r\n      _selected: {\r\n        color: mode(`${c}.600`, `${c}.300`)(props),\r\n        borderColor: 'inherit',\r\n        borderBottomColor: mode(`white`, `gray.800`)(props),\r\n      },\r\n    },\r\n    tablist: {\r\n      mb: '-1px',\r\n      borderBottom: '1px solid',\r\n      borderColor: 'inherit',\r\n    },\r\n  };\r\n};\r\n\r\nconst variantEnclosedColored: PartsStyleFunction<typeof parts> = (props) => {\r\n  const { colorScheme: c } = props;\r\n  return {\r\n    tab: {\r\n      border: '1px solid',\r\n      borderColor: 'inherit',\r\n      bg: mode(`gray.50`, `whiteAlpha.50`)(props),\r\n      mb: '-1px',\r\n      _notLast: {\r\n        marginEnd: '-1px',\r\n      },\r\n      _selected: {\r\n        bg: mode('white', 'gray.800')(props),\r\n        color: mode(`${c}.600`, `${c}.300`)(props),\r\n        borderColor: 'inherit',\r\n        borderTopColor: 'currentColor',\r\n        borderBottomColor: 'transparent',\r\n      },\r\n    },\r\n    tablist: {\r\n      mb: '-1px',\r\n      borderBottom: '1px solid',\r\n      borderColor: 'inherit',\r\n    },\r\n  };\r\n};\r\n\r\nconst variantSoftRounded: PartsStyleFunction<typeof parts> = (props) => {\r\n  const { colorScheme: c, theme } = props;\r\n  return {\r\n    tab: {\r\n      borderRadius: 'full',\r\n      fontWeight: 'semibold',\r\n      color: 'gray.600',\r\n      _selected: {\r\n        color: getColor(theme, `${c}.700`),\r\n        bg: getColor(theme, `${c}.100`),\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nconst variantSolidRounded: PartsStyleFunction<typeof parts> = (props) => {\r\n  const { colorScheme: c } = props;\r\n\r\n  return {\r\n    tab: {\r\n      borderRadius: 'full',\r\n      fontWeight: 'semibold',\r\n      color: mode('gray.600', 'inherit')(props),\r\n      _selected: {\r\n        color: mode(`#fff`, 'gray.100')(props),\r\n        bg: mode(\r\n          `${c}.600`,\r\n          `linear-gradient(to right, ${theme.colors[c][500]}, ${theme.colors[c][600]})`\r\n        )(props),\r\n      },\r\n    },\r\n    tablist: {\r\n      shadow: mode('base', 'none')(props),\r\n      backgroundColor: mode(`gray.50`, `gray.800`)(props),\r\n      borderRadius: 'full',\r\n      p: '1.5',\r\n    },\r\n  };\r\n};\r\nconst variantUnstyled: PartsStyleObject<typeof parts> = {};\r\nconst variants: Record<string, PartsStyleInterpolation<typeof parts>> = {\r\n  line: variantLine,\r\n  enclosed: variantEnclosed,\r\n  'enclosed-colored': variantEnclosedColored,\r\n  'soft-rounded': variantSoftRounded,\r\n  'solid-rounded': variantSolidRounded,\r\n  unstyled: variantUnstyled,\r\n};\r\nconst defaultProps = {\r\n  size: 'md',\r\n  variant: 'line',\r\n  colorScheme: 'blue',\r\n};\r\n\r\nexport default {\r\n  parts: parts.keys,\r\n  baseStyle,\r\n  sizes,\r\n  variants,\r\n  defaultProps,\r\n};\r\n","export const colors = {\r\n  gray: {\r\n    50: '#F0F2F4',\r\n    100: '#D6D8DA',\r\n    200: '#BBBEC2',\r\n    300: '#9EA5AC',\r\n    400: '#818B95',\r\n    500: '#68727D',\r\n    600: '#515860',\r\n    700: '#3B3F44',\r\n    800: '#323350',\r\n    900: '#0B0D0F',\r\n  },\r\n  black: '#151515',\r\n  darkBlue:\"0C0D30\",\r\n  custom: {\r\n    1: '#888E8F',\r\n    2: \"#1c1f43\", // \"#1c1f43\",// '#1E1E1E',\r\n    3: \"#323350\", //'#282828',\r\n    4: '#373737',\r\n    5: '#FFFFFF',\r\n  },\r\n  ['dark-blue']: {\r\n    50: '#eceefe',\r\n    100: '#d8dcfd',\r\n    200: '#b1bafb',\r\n    300: '#8b97f8',\r\n    400: '#6475f6',\r\n    500: '#3d52f4',\r\n    600: '#3142c3',\r\n    700: '#253192',\r\n    800: '#182162',\r\n    900: '#0c1031',\r\n  },\r\n  app: {\r\n    background: {\r\n    body: {\r\n      dark: '#0C0D30',\r\n      light: '#FFFFFF',\r\n    }\r\n  }}\r\n};\r\n","export * from './colors';\r\n","import { extendTheme } from '@chakra-ui/react';\r\nimport { mode } from '@chakra-ui/theme-tools';\r\n\r\nimport Button from './components/button';\r\nimport CloseButton from './components/close-button';\r\nimport Menu from './components/menu';\r\nimport Modal from './components/modal';\r\nimport Popover from './components/popover';\r\nimport Tabs from './components/tabs';\r\nimport { colors } from './foundations';\r\n\r\nconst appTheme = {\r\n  styles: {\r\n    global: (props: any) => ({\r\n      html: {\r\n        fontSize: ['12px', '14px', '16px'],\r\n      },\r\n      body: {\r\n        // bg: mode('custom.5', 'black')(props),\r\n        bg: mode('app.background.body.light', 'app.background.body.dark')(props),\r\n      },\r\n    }),\r\n  },\r\n  fonts: {\r\n    heading: 'Nunito Sans',\r\n    body: 'Nunito Sans',\r\n  },\r\n  config: {\r\n    initialColorMode: 'dark',\r\n    useSystemColorMode: false,\r\n  },\r\n  sizes: {\r\n    modalHeight: '345px',\r\n  },\r\n  colors,\r\n  components: {\r\n    Button,\r\n    Tabs,\r\n    CloseButton,\r\n    Modal,\r\n    Popover,\r\n    Menu,\r\n  },\r\n};\r\n\r\nexport const theme = extendTheme(appTheme);\r\n","import { Principal } from '@dfinity/principal';\r\nimport { Pair } from '@memecake/sonic-js';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\nimport { ENV } from '@/config';\r\nimport { SwapIDL } from '@/did';\r\nimport { AppTokenMetadata, AppTokenMetadataListObject, PairBalances } from '@/models';\r\n\r\nimport { getFromStorage } from './local-storage';\r\n\r\nvar prorityOrder = ENV.prorityOrder;\r\n\r\nexport const desensitizationPrincipalId = (principalId?: string, firstLength = 5, lastLength = 3) => {\r\n  if (principalId) {\r\n    const firstPart = principalId.slice(0, firstLength);\r\n    const secondPart = principalId.slice(principalId.length - lastLength, principalId.length);\r\n    return `${firstPart}...${secondPart}`;\r\n  }\r\n};\r\n\r\nexport const parseResponseSupportedTokenList = (response: SwapIDL.TokenInfoExt[], price?: string): AppTokenMetadata[] => {\r\n  var a1: any = [], a2: any = [];\r\n  response.forEach((token) => {\r\n    const logo = getFromStorage(`${token.id}-logo`) || questionMarkSrc;\r\n    var tempTkn = { ...token, ...(price ? { price } : {}), logo }\r\n    var order = prorityOrder.findIndex(x => x == token.symbol);\r\n    var isBlocked = ENV.hiddenTokens.includes(token.id);\r\n    if (!isBlocked) {\r\n      if (order != -1) { a1[order] = tempTkn }\r\n      else { a2.push(tempTkn) }\r\n    }\r\n  })\r\n  var resetArr = [...a1, ...a2].filter(x => x ? true : false);\r\n  return resetArr;\r\n};\r\n\r\nexport const parseResponseTokenList = (response: AppTokenMetadata[]): AppTokenMetadataListObject => {\r\n  return response.reduce((list, token) => {\r\n    if (!list) return {};\r\n    if (ENV.hiddenTokens.includes(token.id))\r\n      return list;\r\n    list[token.id] = token;\r\n    return list;\r\n  }, {} as AppTokenMetadataListObject);\r\n};\r\n\r\nexport const parseResponsePair = (\r\n  pair: [] | [SwapIDL.PairInfoExt]\r\n): SwapIDL.PairInfoExt | undefined => {\r\n  if (pair.length === 0) { return undefined; }\r\n  const resultPair = pair[0];\r\n  for (const token of [resultPair.token0, resultPair.token1]) {\r\n    if (ENV.hiddenTokens.includes(token)) return undefined;\r\n  }\r\n  return pair[0];\r\n};\r\n\r\nexport const parseResponseAllPairs = (\r\n  response: SwapIDL.PairInfoExt[]\r\n): Pair.List => {\r\n  return response.reduce((list, pair) => {\r\n    const { token0, token1, reserve0, reserve1 } = pair;\r\n    for (const token of [token0, token1]) {\r\n      if (ENV.hiddenTokens.includes(token)) return list;\r\n    }\r\n    return {\r\n      ...list,\r\n      [token0]: { ...list[token0], [token1]: pair },\r\n      [token1]: { ...list[token1], [token0]: { ...pair, token0: token1, token1: token0, reserve0: reserve1, reserve1: reserve0 } },\r\n    } as Pair.List;\r\n  }, {} as Pair.List);\r\n};\r\n\r\nexport const parseResponseUserLPBalances = (\r\n  response: [tokenId: string, amount: bigint][]\r\n): PairBalances => {\r\n  return response.reduce((balances, [tokenId, amount]) => {\r\n    const tokenIds = tokenId.split(':');\r\n    for (const token of tokenIds) {\r\n      if (ENV.hiddenTokens.includes(token)) return balances;\r\n    }\r\n    const [token0Id, token1Id] = tokenIds;\r\n    return {\r\n      ...balances,\r\n      [token0Id]: { ...balances[token0Id], [token1Id]: Number(amount) },\r\n      [token1Id]: { ...balances[token1Id], [token0Id]: Number(amount) },\r\n    };\r\n  }, {} as PairBalances);\r\n};\r\n\r\nexport const validPrincipalId = (principalId: string) => {\r\n  try {\r\n    return Boolean(Principal.fromText(principalId));\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n","import { TokenIDL, SwapIDL } from '@/did';\nimport { useSwapCanisterStore, usePlugStore } from '@/store';\n\nimport { Principal } from '@dfinity/principal';\n\nimport Artemis from 'artemis-web3-adapter';\nimport { AppTokenMetadata } from '@/models';\n\nimport { ENV } from '@/config';\n\nvar supportedTokenList: any = [];\n\nvar tokenListObj: any = {};\n\nexport const artemis = new Artemis();\n\nexport const loadsupportedTokenList = async () => {\n  \n  var plugStat = usePlugStore();\n  supportedTokenList = useSwapCanisterStore()?.supportedTokenList;\n  if (!supportedTokenList || Object.keys(tokenListObj).length > 0) return false;\n  supportedTokenList.forEach((el: { id: string }) => { tokenListObj[el.id] = el });\n  if (plugStat.isConnected) { \n    [...Object.values(ENV.canistersPrincipalIDs),...Object.keys(supportedTokenList)]\n    artemis.connect('plug',); }\n}\n\nexport const tokenList = (returnType: 'array' | 'obj' , tokenId?:string): AppTokenMetadata[] | any => {\n  return (returnType == 'array' && !tokenId) ? supportedTokenList :\n    (!tokenId)? tokenListObj:tokenListObj[tokenId];\n};\n\nexport const getTokenActor = async (canisterId: string, isAnnon: boolean): Promise<any> => {\n\n  var token = tokenListObj?.[canisterId];\n  if (!token) return false;\n  var actor = false;\n  var idl: any = token.tokenType == 'DIP20' ? TokenIDL.DIP20.factory :\n    token.tokenType == 'YC' ? TokenIDL.DIP20.YCfactory :\n      token.tokenType == 'ICRC1' ? TokenIDL.ICRC1.factory : TokenIDL.DIP20.factory;\n\n  if(isAnnon==false && !artemis.provider){await artemis.connect('plug');}\n\n  actor = await artemis.getCanisterActor(token.id, idl, isAnnon);\n \n  return actor;\n}\n\nexport const getswapActor = async (isAnnon: boolean): Promise<SwapIDL.Factory> => {\n  if(!isAnnon && !artemis.provider){ await artemis.connect('plug');}\n  var actor = await artemis.getCanisterActor(ENV.canistersPrincipalIDs.swap, SwapIDL.factory, isAnnon);\n  return actor;\n}\n\nexport const getTokenLogo = async (canisterId: string): Promise<string> => {\n  var token = tokenListObj?.[canisterId];\n  if (!token) return '';\n  var tokenLogo = '';\n  var tokenActor = await getTokenActor(token.id, true);\n  if (!token?.tokenType || token?.tokenType == 'DIP20' || token?.tokenType == 'YC') {\n    tokenLogo = await tokenActor.logo();\n  } else if (token?.tokenType == 'ICRC1') {\n    tokenLogo = \"https://d15bmhsw4m27if.cloudfront.net/sonic/\"+token.id\n  }\n  return tokenLogo;\n}\n\nexport const getTokenBalance = async (canisterId: string , principalId?:string): Promise<bigint> => {\n  var tokenInfo = tokenListObj?.[canisterId];\n  var tokenBalance: bigint = BigInt(0);\n  if (!tokenInfo) { return tokenBalance;}\n  var prin = artemis.principalId?artemis.principalId:principalId;\n\n  if(!prin) return tokenBalance;\n\n  var tokenActor = await getTokenActor(tokenInfo.id, true);\n\n  if (tokenInfo?.tokenType == 'DIP20' || tokenInfo?.tokenType == 'YC') {\n    tokenBalance = await tokenActor.balanceOf(Principal.fromText(prin));\n  } else if (tokenInfo?.tokenType == 'ICRC1') {\n    tokenBalance = await tokenActor.icrc1_balance_of({ owner: Principal.fromText(prin), subaccount: [] });\n  }\n  return tokenBalance;\n}\n\nexport const getTokenAllowance = async (canisterId: string): Promise<bigint> => {\n\n  var allowance = BigInt(0);\n  var tokenInfo = tokenListObj?.[canisterId];\n  if (!tokenInfo || !artemis.principalId) return allowance;\n\n  var tokenActor = await getTokenActor(canisterId, true);\n  if (tokenInfo?.tokenType == 'DIP20' || tokenInfo?.tokenType == 'YC') {\n    allowance = await tokenActor.allowance(Principal.fromText(artemis.principalId), Principal.fromText(ENV.canistersPrincipalIDs.swap));\n  } else allowance = BigInt(0);\n\n  return allowance;\n}\n\nexport const toHexString = (byteArray:[])  =>{\n  return Array.from(byteArray, function(byte) {\n    return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n  }).join('')\n}\nexport const fromHexString = (hex:string):number[] => {\n  if(!hex) return [];\n  if (hex.substr(0,2) === \"0x\") hex = hex.substr(2);\n  for (var bytes:number[] = [], c = 0; c < hex.length; c += 2)\n  bytes.push(parseInt(hex.substr(c, 2), 16));\n  return bytes;\n}","import { ENV } from '@/config';\r\n\r\nexport abstract class ExternalLink {\r\n  static readonly discord = ENV.URLs.discord;\r\n\r\n  static readonly twitter = ENV.URLs.twitter;\r\n\r\n  static readonly medium = ENV.URLs.medium;\r\n\r\n  static readonly github = ENV.URLs.github;\r\n\r\n  static readonly sonicDocs = ENV.URLs.sonicDocs;\r\n\r\n  static readonly swapApiDocs = `${ENV.URLs.sonicDocs}/dev/swaps-api`;\r\n\r\n  static readonly failedMintDocs = `${ENV.URLs.sonicDocs}/product/swap/failed-swaps#failed-mints`;\r\n\r\n  static readonly termsAndConditions = ENV.URLs.termsAndConditions;\r\n\r\n  static readonly tokenRequestForm = ENV.URLs.tokenRequestForm;\r\n\r\n  static readonly analyticsApp = ENV.URLs.analyticsApp;\r\n\r\n  static readonly icpPrice = \"https://datapool.memecake.io/ticker/icpusdt\" \r\n\r\n  static ledgerTransaction(transaction: string): ExternalLink.URL {\r\n    return `${ENV.URLs.ledgerTransactions}/${transaction}`;\r\n  }\r\n\r\n  static capTransaction(transaction: string): ExternalLink.URL {\r\n    return `https://explorer.cap.ooo/app-transactions/${ENV.canistersPrincipalIDs.swap}/${transaction}`;\r\n  }\r\n}\r\n\r\nexport namespace ExternalLink {\r\n  export type URL = string;\r\n}\r\n","import { Bytes } from '@ethersproject/bytes';\r\nimport { Pair, toBigNumber } from '@memecake/sonic-js';\r\nimport BigNumber from 'bignumber.js';\r\nimport { ethers } from 'ethers';\r\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\r\n\r\nimport { AppTokenMetadata } from '@/models';\r\n\r\nexport type BigNumberish = BigNumber | Bytes | bigint | string | number;\r\n\r\n//BigNumber.config({ EXPONENTIAL_AT: 99 });\r\nBigNumber.config({ EXPONENTIAL_AT: 99 });\r\n\r\nexport const parseAmount = (val: string, decimals: string | number): bigint => {\r\n  try {\r\n    const fixedVal = new BigNumber(val).toFixed(Number(decimals)); // Fix for scientific notation string\r\n    const str = parseUnits(fixedVal, decimals).toString();\r\n    return BigInt(str);\r\n  } catch (err) {\r\n    return BigInt(0);\r\n  }\r\n};\r\nexport const roundBigInt = ( val:BigInt ,actualDecimals:string | number, roundOfdecimals:number ): bigint =>{\r\n  try {\r\n    var ad:number = parseInt(actualDecimals.toString());\r\n    var roundedNumber =  (Math.floor( (Number(val) / 10 ** ad) *(10**roundOfdecimals))/(10**roundOfdecimals)).toString();\r\n    var tmp:number = parseFloat(roundedNumber)*(10**ad);\r\n    tmp=Number(tmp.toFixed(0))\r\n    return BigInt(tmp);\r\n  }catch (err) {\r\n    return BigInt(0);\r\n  }\r\n}\r\n\r\n\r\nexport const formatValue = (\r\n  val: BigInt | number | string,\r\n  decimals: number\r\n): string => {\r\n  try {\r\n    return formatUnits(ethers.BigNumber.from(val.toString()), decimals);\r\n  } catch (err) {\r\n    return '0';\r\n  }\r\n};\r\n\r\nexport type GetValueWithoutFeesOptions = {\r\n  value: string;\r\n  fee: bigint;\r\n  decimals: number;\r\n  numberOfFees?: number;\r\n};\r\n\r\nexport const getValueWithoutFees = ({\r\n  value,\r\n  fee,\r\n  decimals,\r\n  numberOfFees = 1,\r\n}: GetValueWithoutFeesOptions) => {\r\n  const _value = new BigNumber(value);\r\n  const _feesAmount = toBigNumber(numberOfFees * Number(fee)).applyDecimals(\r\n    decimals\r\n  );\r\n\r\n  return _value.minus(_feesAmount);\r\n};\r\n\r\nexport const getMaxValue = (\r\n  token?: AppTokenMetadata,\r\n  balance?: number | bigint\r\n): BigNumber => {\r\n  if (!token || !balance) return new BigNumber(0);\r\n  var times = 1;\r\n  if(token.tokenType =='ICRC1'){\r\n    times = 2;\r\n  }else if(token.tokenType =='DIP20'){\r\n    times = 2;\r\n  }\r\n  const value = toBigNumber(Number(balance)).minus(Number(token.fee) * times);\r\n\r\n  if (value.isNegative() || value.isZero()) {\r\n    return new BigNumber(0);\r\n  }\r\n\r\n  return value.applyDecimals(token.decimals);\r\n};\r\n\r\nexport const capitalize = (str: string) => {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n};\r\n\r\nexport const getPairIdsFromPairList = (pairList: Pair.List): string[] => {\r\n  const idsSet = new Set<string>();\r\n\r\n  Object.values(pairList).forEach((paired) => {\r\n    Object.values(paired).forEach((pair) => {\r\n      idsSet.add(pair.id);\r\n    });\r\n  });\r\n\r\n  return Array.from(idsSet);\r\n};\r\n","let timer: NodeJS.Timer | null = null;\r\n\r\nexport const debounce = (\r\n  fn: (...args: unknown[]) => unknown,\r\n  awaitTime = 500\r\n) => {\r\n  if (timer) clearTimeout(timer);\r\n  timer = setTimeout(() => {\r\n    fn();\r\n  }, awaitTime || 0);\r\n};\r\n","import { Principal } from '@dfinity/principal';\r\nimport { ActorAdapter } from '@memecake/sonic-js';\r\nimport axios from 'axios';\r\nimport BigNumber from 'bignumber.js';\r\nimport crc32 from 'buffer-crc32';\r\nimport CryptoJS from 'crypto-js';\r\n\r\nimport { CyclesMintingIDL } from '@/did/sonic/cycles-minting.did';\r\nimport { createAnonLedgerActor } from '@/integrations/actor';\r\n\r\nimport { ExternalLink } from './external-link';\r\nimport { roundBigInt } from '@/utils/format';\r\nexport const ACCOUNT_DOMAIN_SEPERATOR = '\\x0Aaccount-id';\r\n\r\nexport const fetchICPBalance = async (principalId: string) => {\r\n  const ledgerActor = await createAnonLedgerActor();\r\n  const accountId = getAccountId(Principal.fromText(principalId || ''), 0);\r\n  if (accountId) {\r\n    const balance = ( await ledgerActor.account_balance_dfx({ account: accountId })).e8s;\r\n    var temp =  roundBigInt(balance, 8, 5);\r\n    const icpBalanceNoDecimals = new BigNumber(temp.toString()).div(new BigNumber('100000000')).toString();\r\n    return icpBalanceNoDecimals;\r\n  } else {\r\n    throw new Error('Account ID is required');\r\n  }\r\n};\r\n\r\nexport const fetchICP2XDRConversionRate = async () => {\r\n  const cmActor =\r\n    await ActorAdapter.createAnonymousActor<CyclesMintingIDL.Factory>(\r\n      'rkp4c-7iaaa-aaaaa-aaaca-cai', CyclesMintingIDL.factory,'https://ic0.app/'\r\n    );\r\n  return cmActor.get_icp_xdr_conversion_rate();\r\n};\r\n\r\nexport const fetchICPPrice = async () => {\r\n  try {\r\n    const response = await axios.get(ExternalLink.icpPrice);\r\n    if (response.status === 200) {\r\n      return response.data.price // ['internet-computer']['usd'];\r\n    } else {\r\n      throw new Error(response.statusText);\r\n    }\r\n  } catch (error) {\r\n    throw new Error((error as any).message);\r\n  }\r\n};\r\n\r\n/*\r\n    Used dfinity/keysmith/account/account.go as a base for the ID generation\r\n*/\r\nexport const getAccountId = ( principal: Principal, subAccount?: number): string => {\r\n  \r\n  const sha = CryptoJS.algo.SHA224.create();\r\n  sha.update(ACCOUNT_DOMAIN_SEPERATOR); // Internally parsed with UTF-8, like go does\r\n  sha.update(byteArrayToWordArray(principal.toUint8Array()));\r\n\r\n  const SUB_ACCOUNT_ZERO = Buffer.alloc(32);\r\n\r\n  const subBuffer = Buffer.from(SUB_ACCOUNT_ZERO);\r\n  if (subAccount) {\r\n    subBuffer.writeUInt32BE(subAccount);\r\n  }\r\n  sha.update(byteArrayToWordArray(subBuffer));\r\n  const hash = sha.finalize();\r\n\r\n  /// While this is backed by an array of length 28, it's canonical representation\r\n  /// is a hex string of length 64. The first 8 characters are the CRC-32 encoded\r\n  /// hash of the following 56 characters of hex. Both, upper and lower case\r\n  /// characters are valid in the input string and can even be mixed.\r\n  /// [ic/rs/rosetta-api/ledger_canister/src/account_identifier.rs]\r\n  const byteArray = wordArrayToByteArray(hash, 28);\r\n  const checksum = generateChecksum(byteArray);\r\n  const val = checksum + hash.toString();\r\n\r\n  return val;\r\n};\r\n\r\nconst byteArrayToWordArray = (byteArray: Uint8Array) => {\r\n  const wordArray = [] as any;\r\n  let i;\r\n  for (i = 0; i < byteArray.length; i += 1) {\r\n    wordArray[(i / 4) | 0] |= byteArray[i] << (24 - 8 * i);\r\n  }\r\n  // eslint-disable-next-line\r\n  const result = CryptoJS.lib.WordArray.create(wordArray, byteArray.length);\r\n  return result;\r\n};\r\n\r\nconst wordToByteArray = (word: number, length: number): number[] => {\r\n  const byteArray: number[] = [];\r\n  const xFF = 0xff;\r\n  if (length > 0) byteArray.push(word >>> 24);\r\n  if (length > 1) byteArray.push((word >>> 16) & xFF);\r\n  if (length > 2) byteArray.push((word >>> 8) & xFF);\r\n  if (length > 3) byteArray.push(word & xFF);\r\n\r\n  return byteArray;\r\n};\r\n\r\nconst wordArrayToByteArray = (wordArray: any, length: number) => {\r\n  if (\r\n    wordArray.hasOwnProperty('sigBytes') &&\r\n    wordArray.hasOwnProperty('words')\r\n  ) {\r\n    length = wordArray.sigBytes;\r\n    wordArray = wordArray.words;\r\n  }\r\n\r\n  let result: any = [];\r\n  let bytes;\r\n  let i = 0;\r\n  while (length > 0) {\r\n    bytes = wordToByteArray(wordArray[i], Math.min(4, length));\r\n    length -= bytes.length;\r\n    result = [...result, bytes];\r\n    i++;\r\n  }\r\n  return [].concat(...result) as unknown as Uint8Array;\r\n};\r\n\r\nexport const intToHex = (val: number) =>\r\n  val < 0 ? (Number(val) >>> 0).toString(16) : Number(val).toString(16);\r\n\r\n// We generate a CRC32 checksum, and trnasform it into a hexString\r\nexport const generateChecksum = (hash: Uint8Array) => {\r\n  const crc = crc32.unsigned(Buffer.from(hash));\r\n  const hex = intToHex(crc);\r\n  return hex.padStart(8, '0');\r\n};\r\n","export * from './external-link';\r\nexport * from './log';\r\nexport * from './canister';\r\nexport * from './navigator';\r\nexport * from './local-storage';\r\nexport * from './canisterDriver';\r\n","import { serialize } from '@memecake/sonic-js';\r\n\r\nimport { AppLog } from '@/utils';\r\n\r\nexport enum LocalStorageKey {\r\n  Logos = 'logos',\r\n  LiquidityBannerDisabled = 'liquidityBannerDisabled',\r\n  AssetsBannerDisabled = 'assetsBannerDisabled',\r\n  TermsAndConditionsAccepted = 'termsAndConditionsAccepted',\r\n\r\n  MintWICPUncompleteBlockHeights = 'mintWICPUncompleteBlockHeights',\r\n  MintXTCUncompleteBlockHeights = 'mintXTCUncompleteBlockHeights',\r\n}\r\n\r\nexport type MintUncompleteBlockHeights = {\r\n  [principalId: string]: string[];\r\n};\r\n\r\nexport function getFromStorage(key: LocalStorageKey | string): any | undefined {\r\n  try {\r\n    const serializedValue = localStorage.getItem(key);\r\n    return serializedValue ? JSON.parse(serializedValue) : undefined;\r\n  } catch (error) {\r\n    AppLog.warn(`Failed to get from storage: key=${key}`, error);\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport function saveToStorage(key: LocalStorageKey | string, value: any): void {\r\n  try {\r\n    const serializedValue = JSON.stringify(value);\r\n    localStorage.setItem(key, serializedValue);\r\n  } catch (error) {\r\n    AppLog.warn(\r\n      `Failed to save to storage: key=${key} value=${serialize(value)}`,\r\n      error\r\n    );\r\n  }\r\n}\r\n\r\nexport function removeFromStorage(key: LocalStorageKey | string): void {\r\n  try {\r\n    localStorage.removeItem(key);\r\n  } catch (error) {\r\n    AppLog.warn(`Failed to remove from storage: key=${key}`, error);\r\n  }\r\n}\r\n","export abstract class AppLog {\r\n  static readonly IDENTIFIER = '[Sonic]';\r\n\r\n  static error(label: string, ...args: unknown[]): void {\r\n    // eslint-disable-next-line no-console\r\n    console.error(this.IDENTIFIER, this.createLabel(label), ...args);\r\n  }\r\n\r\n  static warn(label: string, ...args: unknown[]): void {\r\n    // eslint-disable-next-line no-console\r\n    console.warn(this.IDENTIFIER, this.createLabel(label), ...args);\r\n  }\r\n\r\n  private static createLabel(label: string): string {\r\n    return `[${label}]`;\r\n  }\r\n}\r\n","import { addNotification, NotificationType, store } from '@/store';\r\n\r\nexport const copyToClipboard = (\r\n  text: string,\r\n  message = 'Copied to clipboard'\r\n): void => {\r\n  navigator.clipboard.writeText(text);\r\n  store.dispatch(\r\n    addNotification({\r\n      id: String(new Date().getTime()),\r\n      title: message,\r\n      type: NotificationType.Success,\r\n    })\r\n  );\r\n};\r\n","import { Heading, HStack, Stack } from '@chakra-ui/react';\r\nimport { FaPlus } from '@react-icons/all-files/fa/FaPlus';\r\n\r\nimport {\r\n  Asset,\r\n  AssetImageBlock,\r\n  AssetTitleBlock,\r\n  DisplayValue,\r\n} from '@/components';\r\nimport { useActivityViewStore } from '@/store';\r\n\r\nexport type AddLiquidityActivityProps = {\r\n  amount0: number;\r\n  amount1: number;\r\n  lpAmount: number;\r\n  pairId: string;\r\n  reserve0: number;\r\n  reserve1: number;\r\n  token0: string;\r\n  token1: string;\r\n  time: number;\r\n};\r\n\r\nexport const AddLiquidityActivity: React.FC<AddLiquidityActivityProps> = ({\r\n  token0: _token0,\r\n  token1: _token1,\r\n  amount0,\r\n  amount1,\r\n  time,\r\n}) => {\r\n  const { tokenList } = useActivityViewStore();\r\n\r\n  if (!tokenList) return null;\r\n\r\n  const token0 = tokenList[_token0];\r\n  const token1 = tokenList[_token1];\r\n\r\n  if (!token0 || !token1) return null;\r\n\r\n  return (\r\n    <Asset type=\"lp\" imageSources={[token0.logo, token1.logo]}>\r\n      <HStack spacing={4}>\r\n        <AssetImageBlock />\r\n        <AssetTitleBlock\r\n          title=\"Add Liquidity\"\r\n          subtitle={new Date(time).toLocaleTimeString('en-US')}\r\n        />\r\n      </HStack>\r\n      <Stack textAlign=\"end\">\r\n        <Heading as=\"h6\" size=\"sm\" display=\"flex\" alignItems=\"center\">\r\n          <DisplayValue\r\n            value={amount0}\r\n            decimals={token0.decimals}\r\n            suffix={' ' + token0.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n          &nbsp;\r\n          <FaPlus />\r\n          &nbsp;\r\n          <DisplayValue\r\n            value={amount1}\r\n            decimals={token1.decimals}\r\n            suffix={' ' + token1.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n        </Heading>\r\n      </Stack>\r\n    </Asset>\r\n  );\r\n};\r\n","import { Heading, HStack, Stack } from '@chakra-ui/react';\r\nimport { Principal } from '@dfinity/principal';\r\n\r\nimport {\r\n  Asset,\r\n  AssetImageBlock,\r\n  AssetTitleBlock,\r\n  DisplayValue,\r\n} from '@/components';\r\nimport { useActivityViewStore } from '@/store';\r\n\r\nexport type DepositActivityProps = {\r\n  amount: number;\r\n  balance: number;\r\n  fee: number;\r\n  from: Principal;\r\n  to: Principal;\r\n  tokenId: string;\r\n  totalSupply: number;\r\n  time: number;\r\n};\r\n\r\nexport const DepositActivity = ({\r\n  amount,\r\n  tokenId,\r\n  time,\r\n}: DepositActivityProps) => {\r\n  const { tokenList } = useActivityViewStore();\r\n\r\n  if (!tokenList) return null;\r\n\r\n  const token = tokenList[tokenId];\r\n\r\n  if (!token) return null;\r\n\r\n  return (\r\n    <Asset type=\"token\" imageSources={[token.logo]}>\r\n      <HStack spacing={4}>\r\n        <AssetImageBlock />\r\n        <AssetTitleBlock\r\n          title={`Deposit ${token.symbol}`}\r\n          subtitle={new Date(time).toLocaleTimeString('en-US')}\r\n        />\r\n      </HStack>\r\n      <Stack textAlign=\"end\">\r\n        <Heading as=\"h6\" size=\"sm\" display=\"flex\" alignItems=\"center\">\r\n          <DisplayValue\r\n            value={amount}\r\n            decimals={token.decimals}\r\n            suffix={' ' + token.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n        </Heading>\r\n      </Stack>\r\n    </Asset>\r\n  );\r\n};\r\n","export * from './add-liquidity-activity';\r\nexport * from './deposit-activity';\r\nexport * from './loading-activity';\r\nexport * from './remove-liquidity-activity';\r\nexport * from './swap-activity';\r\nexport * from './withdraw-activity';\r\nexport * from './ledger-transaction-activity';\r\n","import { Flex, Heading, HStack, Link } from '@chakra-ui/react';\r\nimport { FaCube } from '@react-icons/all-files/fa/FaCube';\r\nimport { useMemo } from 'react';\r\n\r\nimport {\r\n  Asset,\r\n  AssetImageBlock,\r\n  AssetTitleBlock,\r\n  DisplayValue,\r\n} from '@/components';\r\nimport { ENV } from '@/config';\r\nimport { LedgerTransaction } from '@/integrations/ledger';\r\nimport { AppTokenMetadata } from '@/models';\r\nimport { useSwapCanisterStore } from '@/store';\r\nimport { ExternalLink } from '@/utils';\r\n\r\nexport type LedgerTransactionActivityProps = LedgerTransaction;\r\n\r\nconst getTokenByAddress = (\r\n  address: string,\r\n  tokenList?: AppTokenMetadata[]\r\n): AppTokenMetadata | undefined => {\r\n  if (!tokenList) return;\r\n\r\n  const findToken = (tokenPrincipal: string) =>\r\n    tokenList.find((token) => token.id === tokenPrincipal);\r\n\r\n  switch (address) {\r\n    case ENV.accountIDs.WICP:\r\n      return findToken(ENV.canistersPrincipalIDs.WICP);\r\n    case ENV.accountIDs.XTC:\r\n      return findToken(ENV.canistersPrincipalIDs.XTC);\r\n  }\r\n};\r\n\r\nexport const LedgerTransactionActivity = ({\r\n  amount,\r\n  account1Address,\r\n  account2Address,\r\n  timestamp,\r\n  blockIndex,\r\n  hash,\r\n}: LedgerTransactionActivityProps) => {\r\n  const { supportedTokenList } = useSwapCanisterStore();\r\n\r\n  const [action, token] = useMemo(() => {\r\n    const from = getTokenByAddress(account1Address, supportedTokenList);\r\n    if (from) return ['from', from];\r\n\r\n    const to = getTokenByAddress(account2Address, supportedTokenList);\r\n    if (to) return ['to mint', to];\r\n\r\n    return ['unknown', undefined];\r\n  }, [account1Address, account2Address, supportedTokenList]);\r\n\r\n  if (!token) return null;\r\n\r\n  return (\r\n    <Asset type=\"token\" imageSources={[token.logo]}>\r\n      <HStack spacing={4}>\r\n        <AssetImageBlock />\r\n        <AssetTitleBlock\r\n          title={`ICP transfer ${action} ${token.symbol}`}\r\n          subtitle={timestamp.toLocaleTimeString('en-US')}\r\n        />\r\n      </HStack>\r\n      <Flex textAlign=\"end\" direction=\"column\">\r\n        <Heading\r\n          as=\"h6\"\r\n          size=\"sm\"\r\n          display=\"flex\"\r\n          alignItems=\"flex-end\"\r\n          justifyContent=\"flex-end\"\r\n          mt=\"1\"\r\n          mb=\"0.5\"\r\n        >\r\n          <DisplayValue\r\n            value={amount.toString()}\r\n            decimals={token.decimals}\r\n            suffix={' ICP'}\r\n            shouldDivideByDecimals\r\n          />\r\n        </Heading>\r\n        <Link\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          fontSize=\"sm\"\r\n          href={ExternalLink.ledgerTransaction(hash)}\r\n          target=\"_blank\"\r\n          color=\"gray.400\"\r\n        >\r\n          {blockIndex}&nbsp;\r\n          <FaCube />\r\n        </Link>\r\n      </Flex>\r\n    </Asset>\r\n  );\r\n};\r\n","import { Heading, HStack, Skeleton, Stack } from '@chakra-ui/react';\r\n\r\nimport { Asset, AssetImageBlock, AssetTitleBlock } from '@/components';\r\n\r\nexport const LoadingActivity = () => {\r\n  return (\r\n    <Asset type=\"token\" isLoading mb={2}>\r\n      <HStack spacing={4}>\r\n        <AssetImageBlock />\r\n        <AssetTitleBlock title={`Loading Title`} subtitle={'Loading'} />\r\n      </HStack>\r\n      <Stack textAlign=\"end\" alignSelf=\"flex-start\">\r\n        <Skeleton>\r\n          <Heading as=\"h6\" size=\"sm\" display=\"flex\" alignItems=\"center\" mb={2}>\r\n            Loading\r\n          </Heading>\r\n        </Skeleton>\r\n      </Stack>\r\n    </Asset>\r\n  );\r\n};\r\n","import { Heading, HStack, Stack } from '@chakra-ui/react';\r\nimport { FaPlus } from '@react-icons/all-files/fa/FaPlus';\r\n\r\nimport {\r\n  Asset,\r\n  AssetImageBlock,\r\n  AssetTitleBlock,\r\n  DisplayValue,\r\n} from '@/components';\r\nimport { useActivityViewStore } from '@/store';\r\n\r\nexport type RemoveLiquidityActivityProps = {\r\n  amount0: number;\r\n  amount1: number;\r\n  lpAmount: number;\r\n  pairId: string;\r\n  reserve0: number;\r\n  reserve1: number;\r\n  token0: string;\r\n  token1: string;\r\n  time: number;\r\n};\r\n\r\nexport const RemoveLiquidityActivity: React.FC<\r\n  RemoveLiquidityActivityProps\r\n> = ({ token0: _token0, token1: _token1, amount0, amount1, time }) => {\r\n  const { tokenList } = useActivityViewStore();\r\n\r\n  if (!tokenList) return null;\r\n\r\n  const token0 = tokenList[_token0];\r\n  const token1 = tokenList[_token1];\r\n\r\n  if (!token0 || !token1) return null;\r\n\r\n  return (\r\n    <Asset type=\"lp\" imageSources={[token0.logo, token1.logo]}>\r\n      <HStack spacing={4}>\r\n        <AssetImageBlock />\r\n        <AssetTitleBlock\r\n          title=\"Remove Liquidity\"\r\n          subtitle={new Date(time).toLocaleTimeString('en-US')}\r\n        />\r\n      </HStack>\r\n      <Stack textAlign=\"end\">\r\n        <Heading as=\"h6\" size=\"sm\" display=\"flex\" alignItems=\"center\">\r\n          <DisplayValue\r\n            value={amount0}\r\n            decimals={token0.decimals}\r\n            suffix={' ' + token0.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n          &nbsp;\r\n          <FaPlus />\r\n          &nbsp;\r\n          <DisplayValue\r\n            value={amount1}\r\n            decimals={token1.decimals}\r\n            suffix={' ' + token1.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n        </Heading>\r\n      </Stack>\r\n    </Asset>\r\n  );\r\n};\r\n","import { Heading, HStack, Stack } from '@chakra-ui/react';\r\nimport { FaArrowRight } from '@react-icons/all-files/fa/FaArrowRight';\r\n\r\nimport {\r\n  Asset,\r\n  AssetImageBlock,\r\n  AssetTitleBlock,\r\n  DisplayValue,\r\n} from '@/components';\r\nimport { useActivityViewStore } from '@/store';\r\n\r\nexport type SwapActivityProps = {\r\n  amountIn: number;\r\n  amountOut: number;\r\n  fee: number;\r\n  from: string;\r\n  pairId: string;\r\n  reserve0: number;\r\n  reserve1: number;\r\n  to: string;\r\n  time: number;\r\n};\r\n\r\nexport const SwapActivity = ({\r\n  from,\r\n  to,\r\n  time,\r\n  amountIn,\r\n  amountOut,\r\n}: SwapActivityProps) => {\r\n  const { tokenList } = useActivityViewStore();\r\n\r\n  if (!tokenList) return null;\r\n\r\n  const fromToken = tokenList[from];\r\n  const toToken = tokenList[to];\r\n\r\n  if (!fromToken || !toToken) return null;\r\n\r\n  return (\r\n    <Asset type=\"swap\" imageSources={[fromToken.logo, toToken.logo]}>\r\n      <HStack spacing={4}>\r\n        <AssetImageBlock />\r\n        <AssetTitleBlock\r\n          title={`Swap ${fromToken.symbol} to ${toToken.symbol}`}\r\n          subtitle={new Date(time).toLocaleTimeString('en-US')}\r\n        />\r\n      </HStack>\r\n      <Stack textAlign=\"end\">\r\n        <Heading as=\"h6\" size=\"sm\" display=\"flex\" alignItems=\"center\">\r\n          <DisplayValue\r\n            value={amountIn}\r\n            decimals={fromToken.decimals}\r\n            suffix={' ' + fromToken.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n          &nbsp;\r\n          <FaArrowRight />\r\n          &nbsp;\r\n          <DisplayValue\r\n            value={amountOut}\r\n            decimals={toToken.decimals}\r\n            suffix={' ' + toToken.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n        </Heading>\r\n      </Stack>\r\n    </Asset>\r\n  );\r\n};\r\n","import { Heading, HStack, Stack } from '@chakra-ui/react';\r\nimport { Principal } from '@dfinity/principal';\r\n\r\nimport {\r\n  Asset,\r\n  AssetImageBlock,\r\n  AssetTitleBlock,\r\n  DisplayValue,\r\n} from '@/components';\r\nimport { useActivityViewStore } from '@/store';\r\n\r\nexport type WithdrawActivityProps = {\r\n  amount: number;\r\n  balance: number;\r\n  fee: number;\r\n  from: Principal;\r\n  to: Principal;\r\n  tokenId: string;\r\n  totalSupply: number;\r\n  time: number;\r\n};\r\n\r\nexport const WithdrawActivity = ({\r\n  amount,\r\n  tokenId,\r\n  time,\r\n}: WithdrawActivityProps) => {\r\n  const { tokenList } = useActivityViewStore();\r\n\r\n  if (!tokenList) return null;\r\n\r\n  const token = tokenList[tokenId];\r\n\r\n  if (!token) return null;\r\n\r\n  return (\r\n    <Asset type=\"token\" imageSources={[token.logo]}>\r\n      <HStack spacing={4}>\r\n        <AssetImageBlock />\r\n        <AssetTitleBlock\r\n          title={`Withdraw ${token.symbol}`}\r\n          subtitle={new Date(time).toLocaleTimeString('en-US')}\r\n        />\r\n      </HStack>\r\n      <Stack textAlign=\"end\">\r\n        <Heading as=\"h6\" size=\"sm\" display=\"flex\" alignItems=\"center\">\r\n          <DisplayValue\r\n            value={amount}\r\n            decimals={token.decimals}\r\n            suffix={' ' + token.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n        </Heading>\r\n      </Stack>\r\n    </Asset>\r\n  );\r\n};\r\n","export * from './list';\r\n","import { Skeleton, Stack, Text, useColorModeValue } from '@chakra-ui/react';\r\nimport React, { Fragment, useEffect, useMemo } from 'react';\r\n\r\nimport { Header, PlugNotConnected } from '@/components';\r\nimport {\r\n  activityViewActions,\r\n  FeatureState,\r\n  useActivityView,\r\n  useActivityViewStore,\r\n  useAppDispatch,\r\n  usePlugStore,\r\n} from '@/store';\r\n\r\nimport {\r\n  AddLiquidityActivity,\r\n  DepositActivity,\r\n  LedgerTransactionActivity,\r\n  LoadingActivity,\r\n  RemoveLiquidityActivity,\r\n  SwapActivity,\r\n  WithdrawActivity,\r\n} from './components';\r\n\r\nexport const ActivityListView = () => {\r\n  useActivityView();\r\n  const { isConnected } = usePlugStore();\r\n  const { activityList, CAPstate, LedgerState, page, lastPage } =\r\n    useActivityViewStore();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n\r\n  useEffect(() => {\r\n    const scrollHandler = (): void => {\r\n      if (lastPage === 0 || page === 0 || CAPstate === FeatureState.Loading)\r\n        return;\r\n      const isBottom =\r\n        window.scrollY + window.innerHeight >= document.body.offsetHeight;\r\n      if (isBottom && page) {\r\n        dispatch(activityViewActions.setPage(page - 1));\r\n      }\r\n    };\r\n\r\n    scrollHandler();\r\n    window.addEventListener('scroll', scrollHandler);\r\n    return () => window.removeEventListener('scroll', scrollHandler);\r\n  }, [page, lastPage, CAPstate, dispatch]);\r\n\r\n  const isUpdating = useMemo(() => {\r\n    return (\r\n      CAPstate === FeatureState.Loading || LedgerState === FeatureState.Loading\r\n    );\r\n  }, [CAPstate, LedgerState]);\r\n\r\n  if (!isConnected) {\r\n    return (\r\n      <>\r\n        <Header title=\"Your Activity\" />\r\n        <PlugNotConnected message=\"Your transaction activity will appear here.\" />\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (isUpdating && Object.keys(activityList).length === 0) {\r\n    return (\r\n      <>\r\n        <Header title=\"Your Activity\" />\r\n        <Skeleton mb={2} h={4} w={40} />\r\n        <LoadingActivity />\r\n        <LoadingActivity />\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (Object.keys(activityList).length === 0) {\r\n    return (\r\n      <>\r\n        <Header\r\n          title=\"Your Activity\"\r\n          isUpdating={CAPstate === FeatureState.Loading}\r\n        />\r\n        <Text textAlign=\"center\" color={color}>\r\n          You have no activity\r\n        </Text>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header title=\"Your Activity\" isUpdating={isUpdating} />\r\n      <Stack mt={-5} mb={-5} spacing={4} overflowX=\"hidden\" position=\"relative\">\r\n        <Stack\r\n          overflowX=\"auto\"\r\n          pb={20}\r\n          pt={5}\r\n          css={{\r\n            '&::-webkit-scrollbar': {\r\n              display: 'none',\r\n            },\r\n            '&::-webkit-scrollbar-track': {\r\n              display: 'none',\r\n            },\r\n            '&::-webkit-scrollbar-thumb': {\r\n              display: 'none',\r\n            },\r\n          }}\r\n        >\r\n          {Object.entries(activityList)\r\n            .sort(\r\n              ([dateA], [dateB]) =>\r\n                new Date(dateB).getTime() - new Date(dateA).getTime()\r\n            )\r\n            .map(([date, transactions], index) => (\r\n              <Fragment key={index}>\r\n                <Text>{new Date(date).toDateString()}</Text>\r\n                {transactions.map((transaction, index) => {\r\n                  if ('timestamp' in transaction) {\r\n                    return (\r\n                      <LedgerTransactionActivity key={index} {...transaction} />\r\n                    );\r\n                  }\r\n\r\n                  const renderActivity = (\r\n                    Activity: React.FC<any>\r\n                  ): JSX.Element => (\r\n                    <Activity\r\n                      key={index}\r\n                      {...transaction.details}\r\n                      time={transaction.time}\r\n                    />\r\n                  );\r\n                  switch (transaction.operation) {\r\n                    case 'swap':\r\n                      return renderActivity(SwapActivity);\r\n                    case 'addLiquidity':\r\n                      return renderActivity(AddLiquidityActivity);\r\n                    case 'removeLiquidity':\r\n                      return renderActivity(RemoveLiquidityActivity);\r\n                    case 'withdraw':\r\n                      return renderActivity(WithdrawActivity);\r\n                    case 'deposit':\r\n                      return renderActivity(DepositActivity);\r\n                    default:\r\n                      return null;\r\n                  }\r\n                })}\r\n              </Fragment>\r\n            ))}\r\n        </Stack>\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n","import { Box, Button } from '@chakra-ui/react';\r\nimport { toBigNumber } from '@memecake/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport { plugCircleSrc } from '@/assets';\r\nimport { \r\n  Token, TokenContent, TokenData, TokenDataBalances,TokenDataPrice,TokenDetailsButton,\r\n  TokenDetailsLogo,TokenDetailsSymbol,TokenDataMetaInfo,TokenInput,ViewHeader,\r\n} from '@/components';\r\n\r\nimport { FeeBox } from '@/components/core/fee-box';\r\n\r\nimport { useQuery } from '@/hooks/use-query';\r\n\r\nimport { useTokenAllowance } from '@/hooks/use-token-allowance';\r\nimport {\r\n  depositViewActions, FeatureState, NotificationType, useAppDispatch, useDepositViewStore,\r\n  useNotificationStore, useSwapCanisterStore, useTokenModalOpener,\r\n} from '@/store';\r\n\r\nimport { getMaxValue } from '@/utils/format';\r\nimport { debounce } from '@/utils/function';\r\n\r\nimport {tokenList } from '@/utils';\r\n\r\nexport const AssetsDepositView = () => {\r\n  const query = useQuery();\r\n  const { supportedTokenList, tokenBalances, balancesState, supportedTokenListState } = useSwapCanisterStore();\r\n\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const { amount, tokenId } = useDepositViewStore();\r\n\r\n  const { addNotification } = useNotificationStore();\r\n  const openSelectTokenModal = useTokenModalOpener();\r\n\r\n  const selectedTokenMetadata =  tokenList('obj')[tokenId?tokenId:''];\r\n\r\n  const allowance = useTokenAllowance(selectedTokenMetadata?.id)\r\n  \r\n  const handleSelectTokenId = (tokenId?: string) => {\r\n    if (tokenId) {\r\n      dispatch(depositViewActions.setTokenId(tokenId));\r\n    }\r\n  };\r\n\r\n  const handleOpenSelectTokenModal = () => {\r\n    openSelectTokenModal({ metadata: supportedTokenList, onSelect: (tokenId) => handleSelectTokenId(tokenId), selectedTokenIds: []});\r\n  };\r\n\r\n  const handleDeposit = () => {\r\n    addNotification({\r\n      title: `Deposit ${amount} ${selectedTokenMetadata?.symbol}`,\r\n      type: NotificationType.Deposit,\r\n      id: String(new Date().getTime()),\r\n    });\r\n    debounce(() => dispatch(depositViewActions.setAmount('')), 300);\r\n  };\r\n\r\n  const handleMaxClick = () => {\r\n    if (tokenBalance && selectedTokenMetadata)\r\n      dispatch(\r\n        depositViewActions.setAmount(\r\n          getMaxValue(selectedTokenMetadata, tokenBalance).toString()\r\n        )\r\n      );\r\n  };\r\n\r\n  const [buttonDisabled, buttonMessage] = useMemo<[boolean, string]>(() => {\r\n\r\n    if (!selectedTokenMetadata?.id) return [true, 'Select a Token'];\r\n\r\n    if (typeof allowance !== 'number') return [true, 'Getting allowance...'];\r\n\r\n    const parsedFromValue = (amount && parseFloat(amount)) || 0;\r\n\r\n    if (parsedFromValue <= 0)\r\n      return [true, `Enter ${selectedTokenMetadata?.symbol} Amount`];\r\n\r\n    if (\r\n      parsedFromValue <= \r\n      toBigNumber(selectedTokenMetadata.fee).applyDecimals(selectedTokenMetadata.decimals).toNumber()\r\n    ) {\r\n      return [true, `Amount must be greater than fee`];\r\n    }\r\n\r\n    if (tokenBalances && selectedTokenMetadata) {\r\n      if (\r\n        parsedFromValue >\r\n        getMaxValue( selectedTokenMetadata,tokenBalances[selectedTokenMetadata.id]).toNumber()\r\n      ) {\r\n        return [true, `Insufficient ${selectedTokenMetadata.symbol} Balance`];\r\n      }\r\n    }\r\n\r\n    return [false, 'Deposit'];\r\n  }, [amount, tokenBalances, selectedTokenMetadata, allowance]);\r\n\r\n  const tokenBalance = useMemo(() => {\r\n    if (tokenBalances && tokenId) {\r\n      return tokenBalances[tokenId];\r\n    }\r\n\r\n    return 0;\r\n  }, [tokenBalances, tokenId]);\r\n\r\n  const isLoading = useMemo(() =>\r\n      supportedTokenListState === FeatureState.Loading ||\r\n      balancesState === FeatureState.Loading,\r\n    [supportedTokenListState, balancesState]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const tokenId = query.get('tokenId');\r\n    const fromQueryValue = query.get('amount');\r\n\r\n    if (fromQueryValue) {\r\n      dispatch(depositViewActions.setAmount(fromQueryValue));\r\n    }\r\n\r\n    if (tokenId) {\r\n      handleSelectTokenId(tokenId);\r\n    }\r\n\r\n    return () => {\r\n      dispatch(depositViewActions.setAmount(''));\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <ViewHeader title=\"Deposit Asset\" onArrowBack={() => navigate('/assets')}/>\r\n      <Box my={5}>\r\n        <Token\r\n          isLoading={isLoading}\r\n          value={amount}\r\n          setValue={(value) => dispatch(depositViewActions.setAmount(value))}\r\n          sources={[\r\n            {\r\n              name: 'Plug Wallet',\r\n              src: plugCircleSrc,\r\n              balance: tokenBalance,\r\n            },\r\n          ]}\r\n          tokenListMetadata={supportedTokenList}\r\n          tokenMetadata={selectedTokenMetadata}\r\n        >\r\n          <TokenContent>\r\n            <TokenDetailsButton onClick={handleOpenSelectTokenModal}>\r\n              <TokenDetailsLogo />\r\n              <TokenDetailsSymbol />\r\n            </TokenDetailsButton>\r\n            <TokenInput autoFocus />\r\n          </TokenContent>\r\n          <TokenData>\r\n            <TokenDataBalances onMaxClick={handleMaxClick} />\r\n            <TokenDataPrice />\r\n          </TokenData>\r\n          <TokenDataMetaInfo \r\n                tokenSymbol={selectedTokenMetadata?selectedTokenMetadata.symbol:''}\r\n                pageInfo=\"deposit\"\r\n                tokenValue={amount}></TokenDataMetaInfo>\r\n        </Token>\r\n      </Box>\r\n      <FeeBox token={selectedTokenMetadata} isDeposit />\r\n      \r\n      <Button  isFullWidth  size=\"lg\"  variant=\"gradient\" colorScheme=\"dark-blue\" \r\n      isDisabled={buttonDisabled} onClick={handleDeposit} isLoading={isLoading}>\r\n        {buttonMessage}\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n","export * from './deposit';\r\nexport * from './list';\r\nexport * from './withdraw';\r\n","import {\r\n  Flex,\r\n  HStack,\r\n  Icon,\r\n  // AlertDescription,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { toBigNumber } from '@memecake/sonic-js';\r\nimport { FaInfoCircle } from '@react-icons/all-files/fa/FaInfoCircle';\r\nimport { FaMinus } from '@react-icons/all-files/fa/FaMinus';\r\nimport { FaPlus } from '@react-icons/all-files/fa/FaPlus';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport {\r\n  Asset, AssetIconButton, AssetImageBlock, AssetTitleBlock, DisplayValue, Header,\r\n  InformationBox, PlugNotConnected, TokenBalancesPopover,\r\n} from '@/components';\r\nimport { getAppAssetsSources } from '@/config/utils';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { AppTokenMetadata } from '@/models';\r\nimport {\r\n  assetsViewActions, FeatureState, useAppDispatch,\r\n  useAssetsViewStore,\r\n  usePlugStore,\r\n  usePriceStore,\r\n  useSwapCanisterStore,\r\n} from '@/store';\r\n\r\nconst getAssetPriceByBalance = ( price?: string, balance?: number, decimals?: number) => {\r\n  if (price && balance && decimals) {\r\n    return (\r\n      Number(price) * Number(toBigNumber(balance).applyDecimals(decimals).toString())\r\n    );\r\n  }\r\n  return price;\r\n};\r\n\r\nexport const AssetsListView = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isBannerOpened } = useAssetsViewStore();\r\n  const { totalBalances, sonicBalances, tokenBalances } = useBalances();\r\n  const { supportedTokenListState, balancesState, supportedTokenList } = useSwapCanisterStore();\r\n  const { icpPrice } = usePriceStore();\r\n  const { isConnected } = usePlugStore();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const navigateToDeposit = (tokenId?: string) => {\r\n    if (tokenId) { navigate(`/assets/deposit?tokenId=${tokenId}`); }\r\n  };\r\n\r\n  const navigateToWithdraw = (tokenId?: string) => {\r\n    if (tokenId) { navigate(`/assets/withdraw?tokenId=${tokenId}`); }\r\n  };\r\n\r\n  const handleBannerClose = () => {\r\n    dispatch(assetsViewActions.setIsBannerOpened(false));\r\n  };\r\n\r\n\r\n  const notEmptyTokenList = useMemo(() => {\r\n    const supportedTokenListWithICP: AppTokenMetadata[] = [\r\n       ...(supportedTokenList || []),\r\n    ];\r\n    if (totalBalances) {\r\n      return supportedTokenListWithICP.filter(\r\n        (token) => totalBalances[token.id] !== 0\r\n      );\r\n    }\r\n    return [];\r\n  }, [supportedTokenList, totalBalances, icpPrice]);\r\n\r\n  const isTokenListPresent = useMemo(() => notEmptyTokenList && notEmptyTokenList.length > 0, [notEmptyTokenList]);\r\n\r\n  const isLoading = useMemo(() =>\r\n    supportedTokenListState === FeatureState.Loading ||\r\n    balancesState === FeatureState.Loading,\r\n    [supportedTokenListState, balancesState]\r\n  );\r\n\r\n  const isUpdating = useMemo(() =>\r\n    supportedTokenListState === FeatureState.Updating ||\r\n    balancesState === FeatureState.Updating,\r\n    [supportedTokenListState, balancesState]\r\n  );\r\n\r\n  const assetsDetailsTextColor = useColorModeValue('gray.800', 'custom.1');\r\n  const headerColor = useColorModeValue('gray.600', 'gray.400');\r\n\r\n  const getCanWithdraw = useCallback(\r\n    (tokenId: string) => {\r\n      return (tokenId !== ICP_METADATA.id && sonicBalances && sonicBalances[tokenId] > 0);\r\n    },\r\n    [sonicBalances]\r\n  );\r\n\r\n  const getCanDeposit = useCallback(\r\n    (tokenId: string) => {\r\n      return ( tokenId !== ICP_METADATA.id && tokenBalances && tokenBalances[tokenId] > 0);\r\n    },\r\n    [tokenBalances]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Header title=\"Your Assets\" isUpdating={isUpdating}>\r\n        {isBannerOpened && (\r\n          <InformationBox title=\"Assets Details\" mb={9} onClose={handleBannerClose}>\r\n            <Text color={assetsDetailsTextColor}>\r\n              View all the assets you have deposited or obtained on Sonic\r\n              through our Liquidity and Swaps protocols, and deposit more or\r\n              withdraw them to your wallet.\r\n            </Text>\r\n          </InformationBox>\r\n        )}\r\n      </Header>\r\n\r\n      {!isConnected ? (\r\n        <PlugNotConnected message=\"Your assets will appear here.\" />\r\n      ) : (\r\n        <Stack spacing={4} pb={8} flex={1}>\r\n          {isLoading ? (\r\n            <>\r\n              <Asset isLoading>\r\n                <AssetImageBlock />\r\n                <HStack>\r\n                  <AssetIconButton aria-label=\"Deposit\" icon={<FaPlus />} />\r\n                  <AssetIconButton aria-label=\"Withdraw\" icon={<FaMinus />} />\r\n                </HStack>\r\n              </Asset>\r\n\r\n              <Asset isLoading>\r\n                <AssetImageBlock />\r\n                <HStack>\r\n                  <AssetIconButton aria-label=\"Deposit\" icon={<FaPlus />} />\r\n                  <AssetIconButton aria-label=\"Withdraw\" icon={<FaMinus />} />\r\n                </HStack>\r\n              </Asset>\r\n            </>\r\n          ) : isTokenListPresent ? (\r\n            notEmptyTokenList.map(\r\n              ({ id, name, symbol, decimals, price, logo }) => (\r\n                <Asset key={id} imageSources={[logo]}>\r\n                  <HStack spacing={4} flex={2} minW={['100%', '200px', '200px']} overflow=\"hidden\" mr={4}>\r\n                    <AssetImageBlock />\r\n                    <AssetTitleBlock title={symbol} subtitle={name} maxW={['100%', '140px', '140px']} />\r\n                  </HStack>\r\n                  <TokenBalancesPopover\r\n                    sources={getAppAssetsSources({\r\n                      balances: {\r\n                        plug: id === ICP_METADATA.id ? totalBalances?.[id] : tokenBalances?.[id],\r\n                        sonic: sonicBalances?.[id],\r\n                      },\r\n                    })}\r\n                    decimals={decimals} symbol={symbol}\r\n                  >\r\n                    <Flex flex={1} direction=\"column\">\r\n                      <Text fontWeight=\"bold\" color={headerColor} display=\"flex\" alignItems=\"center\">\r\n                        Balance\r\n                        <Icon as={FaInfoCircle} w={4} h={4} ml={1.5} opacity={0.45} />\r\n                      </Text>\r\n                      <DisplayValue isUpdating={isUpdating} value={totalBalances?.[id]}\r\n                        decimals={decimals} fontWeight=\"bold\" disableTooltip shouldDivideByDecimals\r\n                      />\r\n                    </Flex>\r\n                  </TokenBalancesPopover>\r\n                  <Flex flex={1} direction=\"column\">\r\n                    <Text fontWeight=\"bold\" color={headerColor}>\r\n                      Price \r\n                    </Text>\r\n                    <DisplayValue isUpdating={isUpdating} fontWeight=\"bold\" prefix=\"~$\"\r\n                      value={ \r\n                        (id == 'ryjl3-tyaaa-aaaaa-aaaba-cai')?\r\n                        ((totalBalances?.[id])?(totalBalances?.[id] / 10**decimals):0)* (parseFloat(icpPrice || '1')) :\r\n                        getAssetPriceByBalance(price, totalBalances?.[id], decimals) ?? 0\r\n                      }\r\n                    />\r\n                  </Flex>\r\n                  <HStack>\r\n                    <AssetIconButton aria-label={`Withdraw ${symbol}`} icon={<FaMinus />}\r\n                      onClick={() => navigateToWithdraw(id)} isDisabled={!getCanWithdraw(id)}\r\n                    />\r\n                    <AssetIconButton colorScheme=\"dark-blue\" aria-label={`Deposit ${symbol}`} icon={<FaPlus />}\r\n                      onClick={() => navigateToDeposit(id)} isDisabled={!getCanDeposit(id)}\r\n                    />\r\n                  </HStack>\r\n                </Asset>\r\n              )\r\n            )\r\n          ) : (\r\n            <Text textAlign=\"center\" color={headerColor}>\r\n              No assets available\r\n            </Text>\r\n          )}\r\n        </Stack>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { Box, Button } from '@chakra-ui/react';\r\nimport { toBigNumber } from '@memecake/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport { sonicCircleSrc } from '@/assets';\r\nimport {\r\n  Token,\r\n  TokenContent,\r\n  TokenData,\r\n  TokenDataBalances,\r\n  TokenDataPrice,\r\n  TokenDetailsButton,\r\n  TokenDetailsLogo,\r\n  TokenDetailsSymbol,\r\n  TokenInput,\r\n  ViewHeader,\r\n} from '@/components';\r\nimport { FeeBox } from '@/components/core/fee-box';\r\nimport { useQuery } from '@/hooks/use-query';\r\nimport {\r\n  FeatureState,\r\n  NotificationType,\r\n  useAppDispatch,\r\n  useNotificationStore,\r\n  useSwapCanisterStore,\r\n  useTokenModalOpener,\r\n  useWithdrawViewStore,\r\n  withdrawViewActions,\r\n} from '@/store';\r\nimport { formatValue } from '@/utils/format';\r\nimport { debounce } from '@/utils/function';\r\n\r\nexport const AssetsWithdrawView = () => {\r\n  const query = useQuery();\r\n  const { amount, tokenId } = useWithdrawViewStore();\r\n  const {\r\n    supportedTokenList,\r\n    sonicBalances,\r\n    balancesState,\r\n    supportedTokenListState,\r\n  } = useSwapCanisterStore();\r\n\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const { addNotification } = useNotificationStore();\r\n  const openSelectTokenModal = useTokenModalOpener();\r\n\r\n  const selectedTokenMetadata = useMemo(() => {\r\n    if (tokenId && supportedTokenList) {\r\n      return supportedTokenList.find(({ id }) => id === tokenId);\r\n    }\r\n    return undefined;\r\n  }, [supportedTokenList, tokenId]);\r\n\r\n  const handleSelectTokenId = (tokenId?: string) => {\r\n    if (tokenId) {\r\n      dispatch(withdrawViewActions.setTokenId(tokenId));\r\n    }\r\n  };\r\n\r\n  const handleOpenSelectTokenModal = () => {\r\n    openSelectTokenModal({\r\n      metadata: supportedTokenList,\r\n      onSelect: (tokenId) => handleSelectTokenId(tokenId),\r\n      selectedTokenIds: [],\r\n    });\r\n  };\r\n\r\n  const [buttonDisabled, buttonMessage] = useMemo<[boolean, string]>(() => {\r\n    if (!selectedTokenMetadata?.id) return [true, 'Select a Token'];\r\n\r\n    const parsedFromValue = (amount && parseFloat(amount)) || 0;\r\n\r\n    if (parsedFromValue <= 0)\r\n      return [true, `Enter ${selectedTokenMetadata?.symbol} Amount`];\r\n\r\n    if (\r\n      parsedFromValue <=\r\n      toBigNumber(selectedTokenMetadata.fee)\r\n        .applyDecimals(selectedTokenMetadata.decimals)\r\n        .toNumber()\r\n    ) {\r\n      return [true, `Amount must be greater than fee`];\r\n    }\r\n\r\n    if (sonicBalances && selectedTokenMetadata) {\r\n      const parsedBalance = parseFloat(\r\n        formatValue(\r\n          sonicBalances[selectedTokenMetadata.id],\r\n          selectedTokenMetadata.decimals\r\n        )\r\n      );\r\n\r\n      if (parsedFromValue > parsedBalance) {\r\n        return [true, `Insufficient ${selectedTokenMetadata.symbol} Balance`];\r\n      }\r\n    }\r\n\r\n    return [false, 'Withdraw'];\r\n  }, [amount, sonicBalances, selectedTokenMetadata]);\r\n\r\n  const tokenBalance = useMemo(() => {\r\n    if (sonicBalances && tokenId) {\r\n      return sonicBalances[tokenId];\r\n    }\r\n\r\n    return 0;\r\n  }, [sonicBalances, tokenId]);\r\n\r\n  useEffect(() => {\r\n    const tokenId = query.get('tokenId');\r\n    const amount = query.get('amount');\r\n\r\n    if (amount) {\r\n      dispatch(withdrawViewActions.setAmount(amount));\r\n    }\r\n\r\n    if (tokenId) {\r\n      handleSelectTokenId(tokenId);\r\n    }\r\n\r\n    return () => {\r\n      dispatch(withdrawViewActions.setAmount(''));\r\n    };\r\n  }, []);\r\n\r\n  const handleWithdraw = () => {\r\n    addNotification({\r\n      title: `Withdraw ${amount} ${selectedTokenMetadata?.symbol}`,\r\n      type: NotificationType.Withdraw,\r\n      id: String(new Date().getTime()),\r\n    });\r\n\r\n    debounce(() => dispatch(withdrawViewActions.setAmount('')), 300);\r\n  };\r\n\r\n  const handleMaxClick = () => {\r\n    dispatch(\r\n      withdrawViewActions.setAmount(\r\n        toBigNumber(tokenBalance)\r\n          .applyDecimals(selectedTokenMetadata?.decimals ?? 0)\r\n          .toString()\r\n      )\r\n    );\r\n  };\r\n\r\n  const isLoading = useMemo(\r\n    () =>\r\n      supportedTokenListState === FeatureState.Loading ||\r\n      balancesState === FeatureState.Loading,\r\n    [balancesState, supportedTokenListState]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <ViewHeader\r\n        title=\"Withdraw Asset\"\r\n        onArrowBack={() => navigate('/assets')}\r\n      />\r\n      <Box my={5}>\r\n        <Token\r\n          value={amount}\r\n          setValue={(value) => dispatch(withdrawViewActions.setAmount(value))}\r\n          tokenListMetadata={supportedTokenList}\r\n          tokenMetadata={selectedTokenMetadata}\r\n          isLoading={isLoading}\r\n          sources={[\r\n            {\r\n              name: 'Sonic',\r\n              src: sonicCircleSrc,\r\n              balance: tokenBalance,\r\n            },\r\n          ]}\r\n        >\r\n          <TokenContent>\r\n            <TokenDetailsButton onClick={handleOpenSelectTokenModal}>\r\n              <TokenDetailsLogo />\r\n              <TokenDetailsSymbol />\r\n            </TokenDetailsButton>\r\n\r\n            <TokenInput autoFocus />\r\n          </TokenContent>\r\n          <TokenData>\r\n            <TokenDataBalances onMaxClick={handleMaxClick} />\r\n            <TokenDataPrice />\r\n          </TokenData>\r\n        </Token>\r\n      </Box>\r\n      <FeeBox token={selectedTokenMetadata} />\r\n      <Button\r\n        isFullWidth\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        size=\"lg\"\r\n        onClick={handleWithdraw}\r\n        isLoading={isLoading}\r\n        isDisabled={buttonDisabled}\r\n      >\r\n        {buttonMessage}\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n","export * from './activity';\r\nexport * from './assets';\r\nexport * from './liquidity';\r\nexport * from './swap';\r\nexport * from './test';\r\n","import {\r\n  Box, Button, Center, Flex, HStack, Icon, IconButton, Menu, MenuButton, MenuList, Popover, PopoverArrow, PopoverBody,\r\n  PopoverContent, PopoverHeader, PopoverTrigger, Skeleton, Stack, Text, Tooltip, useColorModeValue,\r\n} from '@chakra-ui/react';\r\n\r\nimport { Liquidity } from '@memecake/sonic-js';\r\nimport { FaCog } from '@react-icons/all-files/fa/FaCog';\r\nimport { FaEquals } from '@react-icons/all-files/fa/FaEquals';\r\nimport { FaInfoCircle } from '@react-icons/all-files/fa/FaInfoCircle';\r\nimport { FaPlus } from '@react-icons/all-files/fa/FaPlus';\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport {\r\n  DisplayValue, LPImageBlock, PlugButton, SlippageSettings, StackLine, Token, TokenContent, TokenData, TokenDataBalances, TokenDataPrice,\r\n  TokenDetailsButton, TokenDetailsLogo, TokenDetailsSymbol, TokenDataMetaInfo, TokenInput, ViewHeader,\r\n} from '@/components';\r\n\r\nimport { useTokenAllowance, useTokenBalanceMemo } from '@/hooks';\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useQuery } from '@/hooks/use-query';\r\n\r\nimport {\r\n  FeatureState, INITIAL_LIQUIDITY_SLIPPAGE, LiquidityTokenDataKey, liquidityViewActions, NotificationType, useAppDispatch,\r\n  useLiquidityViewStore, useNotificationStore, usePlugStore, usePriceStore, useSwapCanisterStore, useTokenModalOpener,\r\n} from '@/store';\r\n\r\nimport { AppLog } from '@/utils';\r\nimport { getMaxValue } from '@/utils/format';\r\nimport { debounce } from '@/utils/function';\r\n\r\nimport { useAddLiquidityMemo, useTokenSourceMemo } from './liquidity.utils';\r\n\r\nexport const LiquidityAddView = () => {\r\n  const query = useQuery();\r\n\r\n  const { isConnected } = usePlugStore();\r\n\r\n  const { addNotification } = useNotificationStore();\r\n  const { token0, token1, slippage, pair, pairState } = useLiquidityViewStore();\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const balances = useBalances();\r\n  const { tokenBalances, sonicBalances, totalBalances } = balances;\r\n  var { supportedTokenList, supportedTokenListState, balancesState } =\r\n    useSwapCanisterStore();\r\n  const { state: priceState } = usePriceStore();\r\n  const openSelectTokenModal = useTokenModalOpener();\r\n\r\n  const [isReviewing, setIsReviewing] = useState(false);\r\n  const [autoSlippage, setAutoSlippage] = useState(true);\r\n\r\n  const handlePreviousStep = () => {\r\n    if (isReviewing) {\r\n      setIsReviewing(false);\r\n    } else {\r\n      navigate('/liquidity');\r\n    }\r\n  };\r\n  const handleAddLiquidity = () => {\r\n    if (!isReviewing) {\r\n      setIsReviewing(true);\r\n      return;\r\n    }\r\n\r\n    addNotification({\r\n      title: `Add LP of ${token0.value} ${token0.metadata?.symbol} + ${token1.value} ${token1.metadata?.symbol}`,\r\n      type: NotificationType.AddLiquidity,\r\n      id: String(new Date().getTime()),\r\n    });\r\n\r\n    debounce(() => {\r\n      dispatch(liquidityViewActions.setValue({ data: 'token0', value: '' }));\r\n      dispatch(liquidityViewActions.setValue({ data: 'token1', value: '' }));\r\n      setIsReviewing(false);\r\n      navigate('/liquidity');\r\n    }, 300);\r\n  };\r\n\r\n  const handleTokenMaxClick = (dataKey: LiquidityTokenDataKey) => {\r\n    const token = dataKey === 'token0' ? token0 : token1;\r\n    const tokenBalance = dataKey === 'token0' ? token0Balance : token1Balance;\r\n\r\n    if (!token || !tokenBalance) return;\r\n\r\n    const maxValue = getMaxValue(token.metadata, tokenBalance).toString();\r\n\r\n    setInAndOutTokenValues(dataKey, maxValue);\r\n  };\r\n  const lockedPairsList = [['ryjl3-tyaaa-aaaaa-aaaba-cai', 'utozz-siaaa-aaaam-qaaxq-cai']];\r\n  lockedPairsList;\r\n\r\n  const handleSelectToken = (dataKey: LiquidityTokenDataKey) => {\r\n    if (!isReviewing) {\r\n\r\n      const excludeToken = (() => {\r\n        const foundPair = lockedPairsList.find(pair => {\r\n          if (dataKey === 'token0') {\r\n            return pair[0] === token1.metadata?.id || pair[1] === token1.metadata?.id;\r\n          } else if (dataKey === 'token1') {\r\n            return pair[0] === token0.metadata?.id || pair[1] === token0.metadata?.id;\r\n          }\r\n          return false;\r\n        });\r\n        return foundPair ? foundPair.find(x => x !== (token0.metadata?.id || token1.metadata?.id)) : '';\r\n      })();\r\n\r\n      const customTokenList = supportedTokenList ? supportedTokenList.filter(x => {\r\n        if (dataKey === 'token0') {\r\n          return x.id !== token1.metadata?.id && x.id !== excludeToken;\r\n        } else if (dataKey === 'token1') {\r\n          return x.id !== token0.metadata?.id && x.id !== excludeToken;\r\n        }\r\n      }) : [];\r\n\r\n      openSelectTokenModal({\r\n        metadata: customTokenList,\r\n        onSelect: (tokenId) => {\r\n          if (tokenId && supportedTokenList) {\r\n            if (token0.metadata?.id === tokenId || token1.metadata?.id === tokenId) {\r\n              return;\r\n            }\r\n            const foundToken = supportedTokenList.find(({ id }) => id === tokenId);\r\n\r\n            dispatch(liquidityViewActions.setToken({ data: dataKey, token: foundToken }));\r\n            dispatch(liquidityViewActions.setValue({ data: 'token0', value: '' }));\r\n            dispatch(liquidityViewActions.setValue({ data: 'token1', value: '' }));\r\n          }\r\n        },\r\n        selectedTokenIds,\r\n      });\r\n    }\r\n  };\r\n\r\n  type useTokenTaxCheckOptions = {\r\n    balances?: any;\r\n    tokenId?: string;\r\n    tokenDecimals?: number;\r\n    tokenValue?: string;\r\n    tokenSymbol?: string;\r\n    needAsNetValue?: boolean;\r\n  };\r\n\r\n  const useTokenTaxCheck = ({ balances, tokenId, tokenSymbol, tokenDecimals = 1, tokenValue = '', needAsNetValue = false }: useTokenTaxCheckOptions) => {\r\n    const { sonicBalances, tokenBalances, icpBalance } = balances;\r\n    const tokenInfo = { wallet: 0, sonic: 0, taxInfo: { input: 0, taxedValue: 0, nonTaxedValue: 0, netValue: 0 } }\r\n    if (tokenId != '' && tokenId != 'ICP' && sonicBalances && tokenBalances) {\r\n      var id = tokenId ? tokenId : '';\r\n      tokenInfo['wallet'] = tokenBalances[id] ? tokenBalances[id] : 0;\r\n      tokenInfo['sonic'] = sonicBalances[id] ? sonicBalances[id] : 0;\r\n    } else { tokenInfo['wallet'] = icpBalance ? icpBalance : 0; }\r\n    if (tokenValue) {\r\n      let tokenVal: number = parseFloat(tokenValue)\r\n      if (tokenSymbol == 'YC') {\r\n        let decimals = tokenDecimals ? (10 ** tokenDecimals) : 1\r\n        let sonicBalance = tokenInfo['sonic'] / decimals;\r\n\r\n        if ((sonicBalance > tokenVal)) {\r\n          tokenInfo.taxInfo.nonTaxedValue = tokenVal;\r\n          tokenInfo.taxInfo.taxedValue = 0;\r\n        } else {\r\n          tokenInfo.taxInfo.nonTaxedValue = sonicBalance;\r\n          tokenInfo.taxInfo.taxedValue = tokenVal - tokenInfo.taxInfo.nonTaxedValue;\r\n        }\r\n        if (needAsNetValue) {\r\n          // sonic balance + X * (89/100) = parsedLPValue\r\n          // X = (parsedLPValue - sonic balance)/0.89\r\n          // requestamount = sonic balance + ((parsedLPValue - sonic balance)/0.89)\r\n          // ~ balance + (estimate - balance)/0.89\r\n          if (tokenInfo.taxInfo.taxedValue > 0) {\r\n            tokenInfo.taxInfo.netValue = tokenInfo.taxInfo.nonTaxedValue + ((tokenVal - tokenInfo.taxInfo.nonTaxedValue) / 0.89);\r\n          } else {\r\n            tokenInfo.taxInfo.netValue = tokenInfo.taxInfo.nonTaxedValue;\r\n          }\r\n        } else {\r\n          tokenInfo.taxInfo.netValue = tokenInfo.taxInfo.nonTaxedValue + (tokenInfo.taxInfo.taxedValue * (89 / 100));\r\n        }\r\n      }\r\n    }\r\n    return tokenInfo\r\n  };\r\n  // Utils\r\n  const setInAndOutTokenValues = useCallback(\r\n    (dataKey: LiquidityTokenDataKey, value?: string) => {\r\n\r\n      const [amountIn, reserveIn, reserveOut, decimalsIn, decimalsOut] =\r\n        dataKey === 'token0'\r\n          ? [value ?? token0.value, String(pair?.reserve0), String(pair?.reserve1),\r\n          Number(token0.metadata?.decimals), Number(token1.metadata?.decimals)]\r\n          : [value ?? token1.value, String(pair?.reserve1), String(pair?.reserve0),\r\n          Number(token1.metadata?.decimals), Number(token0.metadata?.decimals)];\r\n\r\n      try {\r\n        var token = (dataKey == 'token0') ? token0 : token1;\r\n        var convertToken = (dataKey == 'token0') ? token1 : token0;\r\n        var fromAmount = amountIn;\r\n        if (token.metadata?.symbol == \"YC\") {\r\n          var info = useTokenTaxCheck({\r\n            balances: balances, tokenId: token.metadata.id, tokenSymbol: token.metadata.symbol, tokenDecimals: token.metadata.decimals, tokenValue: amountIn\r\n          });\r\n          fromAmount = info.taxInfo.netValue.toFixed(3);\r\n        }\r\n\r\n        const lpValue = Liquidity.getOppositeAmount({ amountIn: fromAmount ? fromAmount : '0', reserveIn, reserveOut, decimalsIn, decimalsOut });\r\n\r\n        var parsedLPValue = lpValue.toString();\r\n        if (convertToken.metadata?.symbol == \"YC\") {\r\n          var info = useTokenTaxCheck({\r\n            balances: balances, tokenId: convertToken.metadata.id, tokenSymbol: convertToken.metadata.symbol, tokenDecimals: convertToken.metadata.decimals,\r\n            tokenValue: parsedLPValue, needAsNetValue: true\r\n          });\r\n          parsedLPValue = info.taxInfo.netValue.toFixed(3);\r\n        }\r\n\r\n        dispatch(liquidityViewActions.setValue({ data: dataKey, value: amountIn }));\r\n\r\n        const reversedDataKey = dataKey === 'token0' ? 'token1' : 'token0';\r\n\r\n        if (lpValue.gt(0)) {\r\n          dispatch(liquidityViewActions.setValue({ data: reversedDataKey, value: parsedLPValue }));\r\n        }\r\n      } catch (e) {\r\n        if (e instanceof Error && e.message.startsWith('Minimal amountIn')) {\r\n          const minimalAmount = e.message.split(': ')[1];\r\n          setInAndOutTokenValues(dataKey, minimalAmount);\r\n        } else {\r\n          AppLog.warn('Failed to set token amount', e);\r\n        }\r\n      }\r\n    },\r\n    [dispatch, pair?.reserve0, pair?.reserve1, token0.metadata, token0.value, token1.metadata, token1.value]\r\n  );\r\n\r\n  // Memorized values\r\n  const token0Balance = useTokenBalanceMemo(token0.metadata?.id);\r\n  const token1Balance = useTokenBalanceMemo(token1.metadata?.id);\r\n\r\n  const token0Allowance = useTokenAllowance(token0.metadata?.id);\r\n  const token1Allowance = useTokenAllowance(token1.metadata?.id);\r\n\r\n  const isLoading = useMemo(\r\n    () =>\r\n      supportedTokenListState === FeatureState.Loading ||\r\n      pairState === FeatureState.Loading,\r\n    [supportedTokenListState, pairState]\r\n  );\r\n\r\n  const isBalancesUpdating = useMemo(\r\n    () => balancesState === FeatureState.Updating,\r\n    [balancesState]\r\n  );\r\n  const isPriceUpdating = useMemo(\r\n    () => priceState === FeatureState.Updating,\r\n    [priceState]\r\n  );\r\n\r\n  const [buttonDisabled, buttonMessage] = useMemo<[boolean, string]>(() => {\r\n    if (isLoading) return [true, 'Loading'];\r\n    if (!token0.metadata || !token1.metadata) return [true, 'Select Tokens'];\r\n\r\n    const parsedToken0Value = (token0.value && parseFloat(token0.value)) || 0;\r\n    const parsedToken1Value = (token1.value && parseFloat(token1.value)) || 0;\r\n\r\n    if (\r\n      typeof token0Allowance !== 'number' ||\r\n      typeof token1Allowance !== 'number'\r\n    ) {\r\n      return [true, 'Getting allowance'];\r\n    }\r\n\r\n    if (parsedToken0Value <= 0)\r\n      return [true, `Enter ${token0.metadata.symbol} Amount`];\r\n\r\n    if (parsedToken1Value <= 0)\r\n      return [true, `Enter ${token1.metadata.symbol} Amount`];\r\n\r\n    if (\r\n      totalBalances &&\r\n      typeof token0Balance === 'number' &&\r\n      typeof token1Balance === 'number'\r\n    ) {\r\n      if (\r\n        parsedToken0Value >\r\n        getMaxValue(token0.metadata, token0Balance).toNumber()\r\n      ) {\r\n        return [true, `Insufficient ${token0.metadata.symbol} Balance`];\r\n      }\r\n\r\n      if (\r\n        parsedToken1Value >\r\n        getMaxValue(token1.metadata, token1Balance).toNumber()\r\n      ) {\r\n        return [true, `Insufficient ${token1.metadata.symbol} Balance`];\r\n      }\r\n    }\r\n\r\n    if (isReviewing) return [false, 'Confirm Supply'];\r\n    return [false, 'Review Supply'];\r\n  }, [isLoading, token0, token1, totalBalances, token0Balance, token1Balance, isReviewing, token0Allowance, token1Allowance]);\r\n\r\n  const selectedTokenIds = useMemo(() => {\r\n    const selectedIds = [];\r\n    if (token0?.metadata?.id) selectedIds.push(token0.metadata.id);\r\n    if (token1?.metadata?.id) selectedIds.push(token1.metadata.id);\r\n\r\n    return selectedIds;\r\n  }, [token0?.metadata?.id, token1?.metadata?.id]);\r\n\r\n  const { fee0, fee1, price0, price1, shareOfPool, liquidityAmount } = useAddLiquidityMemo({ pair, token0, token1 });\r\n\r\n  const token0Sources = useTokenSourceMemo({ token: token0, tokenBalances, sonicBalances });\r\n  const token1Sources = useTokenSourceMemo({ token: token1, tokenBalances, sonicBalances });\r\n\r\n  useEffect(() => {\r\n    if (!isLoading && supportedTokenList) {\r\n      const token1Id = query.get('token1');\r\n      const token0Id = query.get('token0');\r\n\r\n      if (token0Id) {\r\n        const token0 = supportedTokenList.find(({ id }) => id === token0Id);\r\n        dispatch(liquidityViewActions.setToken({ data: 'token0', token: token0 }));\r\n        dispatch(liquidityViewActions.setValue({ data: 'token0', value: '' }));\r\n      }\r\n\r\n      if (token1Id) {\r\n        const token1 = supportedTokenList.find(({ id }) => id === token1Id);\r\n        dispatch(liquidityViewActions.setToken({ data: 'token1', token: token1 }));\r\n        dispatch(liquidityViewActions.setValue({ data: 'token1', value: '' }));\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isLoading]);\r\n\r\n  const handleSetIsAutoSlippage = (isAutoSlippage: boolean) => {\r\n    setAutoSlippage(isAutoSlippage);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    if (autoSlippage) {\r\n      dispatch(liquidityViewActions.setSlippage(INITIAL_LIQUIDITY_SLIPPAGE));\r\n    }\r\n  };\r\n\r\n  const menuListShadow = useColorModeValue('lg', 'none');\r\n  const menuListBg = useColorModeValue('gray.50', 'custom.3');\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n  const bg = useColorModeValue('gray.100', 'gray.800');\r\n  const iconBorderColor = useColorModeValue('gray.200', 'custom.4');\r\n  const textColor = useColorModeValue('gray.700', 'gray.300');\r\n\r\n  return (\r\n    <Stack spacing={4}>\r\n      <ViewHeader onArrowBack={handlePreviousStep} title=\"Add Liquidity\">\r\n        <Menu onClose={handleMenuClose}>\r\n          <Tooltip label=\"Adjust the slippage\">\r\n            <MenuButton as={IconButton} isRound size=\"sm\" aria-label=\"Adjust the slippage\" icon={<FaCog />} ml=\"auto\" />\r\n          </Tooltip>\r\n          <MenuList shadow={menuListShadow} bg={menuListBg} border=\"none\" borderRadius={20} py={0}>\r\n            <SlippageSettings slippage={slippage}\r\n              setSlippage={(value) =>\r\n                dispatch(liquidityViewActions.setSlippage(value))\r\n              }\r\n              isAutoSlippage={autoSlippage} setIsAutoSlippage={handleSetIsAutoSlippage}\r\n            />\r\n          </MenuList>\r\n        </Menu>\r\n      </ViewHeader>\r\n      <Flex direction=\"column\" alignItems=\"center\">\r\n        <Box width=\"100%\">\r\n          <Token value={token0.value} setValue={(value) => setInAndOutTokenValues('token0', value)} tokenListMetadata={supportedTokenList}\r\n            tokenMetadata={token0.metadata} isDisabled={isReviewing} sources={token0Sources} isLoading={isLoading}\r\n          >\r\n            <TokenContent>\r\n              <TokenDetailsButton onClick={() => handleSelectToken('token0')}>\r\n                <TokenDetailsLogo />\r\n                <TokenDetailsSymbol />\r\n              </TokenDetailsButton>\r\n\r\n              <TokenInput autoFocus />\r\n            </TokenContent>\r\n            <TokenData>\r\n              <TokenDataBalances isUpdating={isBalancesUpdating} onMaxClick={() => handleTokenMaxClick('token0')} />\r\n              <TokenDataPrice isUpdating={isPriceUpdating} />\r\n            </TokenData>\r\n            <TokenDataMetaInfo tokenId={token0.metadata ? token0.metadata.id : ''}\r\n              tokenSymbol={token0.metadata ? token0.metadata.symbol : ''} tokenDecimals={token0.metadata ? token0.metadata.decimals : 0}\r\n              pageInfo=\"liquidity\" tokenValue={token0.value}></TokenDataMetaInfo>\r\n          </Token>\r\n        </Box>\r\n\r\n        <Center borderRadius={12} width={10} height={10} border=\"1px solid\" borderColor={iconBorderColor}\r\n          bg={menuListBg} mt={-2} mb={-2} zIndex=\"docked\">\r\n          <Icon as={FaPlus} />\r\n        </Center>\r\n\r\n        <Box width=\"100%\">\r\n          <Token value={token1.value} setValue={(value) => setInAndOutTokenValues('token1', value)} tokenListMetadata={supportedTokenList}\r\n            tokenMetadata={token1.metadata} isDisabled={isReviewing} sources={token1Sources} isLoading={isLoading}\r\n          >\r\n            <TokenContent>\r\n              {token1.metadata ? (\r\n                <TokenDetailsButton onClick={() => handleSelectToken('token1')}>\r\n                  <TokenDetailsLogo />\r\n                  <TokenDetailsSymbol />\r\n                </TokenDetailsButton>\r\n              ) : (\r\n                <TokenDetailsButton onClick={() => handleSelectToken('token1')} variant={isLoading ? 'solid' : 'gradient'}\r\n                  colorScheme={isLoading ? 'gray' : 'dark-blue'}\r\n                >\r\n                  <Skeleton isLoaded={!isLoading}>Select a Token</Skeleton>\r\n                </TokenDetailsButton>\r\n              )}\r\n\r\n              <TokenInput />\r\n            </TokenContent>\r\n            <TokenData>\r\n              <TokenDataBalances isUpdating={isBalancesUpdating} onMaxClick={() => handleTokenMaxClick('token1')} />\r\n              <TokenDataPrice isUpdating={isPriceUpdating} />\r\n            </TokenData>\r\n            <TokenDataMetaInfo tokenId={token1.metadata ? token1.metadata.id : ''} tokenSymbol={token1.metadata ? token1.metadata.symbol : ''}\r\n              tokenDecimals={token1.metadata ? token1.metadata.decimals : 0} pageInfo=\"liquidity\" tokenValue={token1.value}>\r\n            </TokenDataMetaInfo>\r\n          </Token>\r\n        </Box>\r\n        {token0.metadata && token1.metadata && (\r\n          <>\r\n            {isReviewing && (\r\n              <>\r\n                <Center borderRadius={12} width={10} height={10} border=\"1px solid\" borderColor={iconBorderColor}\r\n                  bg={menuListBg} mt={-2} mb={-2} justifyContent=\"center\" alignItems=\"center\" zIndex=\"docked\"\r\n                >\r\n                  <Icon as={FaEquals} />\r\n                </Center>\r\n\r\n                <Token value={liquidityAmount} isDisabled shouldGlow>\r\n                  <TokenContent>\r\n                    <Flex borderRadius=\"full\" mr={5} minWidth=\"fit-content\" background={bg}\r\n                      height={10} px={4} justifyContent=\"center\" alignItems=\"center\" fontWeight=\"bold\"\r\n                    >\r\n                      <LPImageBlock imageSources={[token0.metadata?.logo, token1.metadata?.logo]} size=\"sm\" />\r\n                      <Text ml={2.5}>\r\n                        {`${token0.metadata?.symbol}-${token1.metadata?.symbol}`}\r\n                      </Text>\r\n\r\n                      <Popover trigger=\"hover\">\r\n                        <PopoverTrigger>\r\n                          <Flex>\r\n                            <Icon as={FaInfoCircle} ml={2.5} width={4} />\r\n                          </Flex>\r\n                        </PopoverTrigger>\r\n                        <PopoverContent>\r\n                          <PopoverArrow />\r\n                          <PopoverBody>\r\n                            This is your share of the liquidity pool represented\r\n                            as tokens\r\n                          </PopoverBody>\r\n                        </PopoverContent>\r\n                      </Popover>\r\n                    </Flex>\r\n\r\n                    <TokenInput />\r\n                  </TokenContent>\r\n                  <TokenData color={color}>\r\n                    Share of Pool:\r\n                    <Text flex={1} textAlign=\"right\">\r\n                      {shareOfPool}\r\n                    </Text>\r\n                  </TokenData>\r\n                </Token>\r\n              </>\r\n            )}\r\n\r\n            {liquidityAmount && (\r\n              <Flex alignItems=\"center\" justifyContent=\"space-between\" width=\"full\" mt={5} px={5}>\r\n                <Text color={textColor}>\r\n                  {`1 ${token0.metadata?.symbol} = `}{' '}\r\n                  <DisplayValue as=\"span\" value={price1} />{' '}\r\n                  {` ${token1.metadata?.symbol}`}\r\n                </Text>\r\n                <HStack>\r\n                  <Text color={textColor}>\r\n                    {`1 ${token1.metadata?.symbol} = `}{' '}\r\n                    <DisplayValue as=\"span\" value={price0} />{' '}\r\n                    {`${token0.metadata?.symbol}`}\r\n                  </Text>\r\n                  <Popover trigger=\"hover\">\r\n                    <PopoverTrigger>\r\n                      <Flex>\r\n                        <Icon\r\n                          as={FaInfoCircle}\r\n                          width={5}\r\n                          transition=\"opacity 200ms\"\r\n                          opacity={0.6}\r\n                        />\r\n                      </Flex>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent minWidth=\"25rem\">\r\n                      <PopoverHeader>Transaction Details</PopoverHeader>\r\n                      <PopoverArrow />\r\n                      <PopoverBody display=\"inline-block\">\r\n                        <Stack>\r\n                          <StackLine\r\n                            title={`${token0.metadata.name} Deposit Fee`}\r\n                            value={`${fee0} ${token0.metadata.symbol}`}\r\n                          />\r\n                          <StackLine\r\n                            title={`${token1.metadata.name} Deposit Fee`}\r\n                            value={`${fee1} ${token1.metadata.symbol}`}\r\n                          />\r\n                        </Stack>\r\n                      </PopoverBody>\r\n                    </PopoverContent>\r\n                  </Popover>\r\n                </HStack>\r\n              </Flex>\r\n            )}\r\n          </>\r\n        )}\r\n      </Flex>\r\n      {!isConnected ? (\r\n        <PlugButton variant=\"dark\" />\r\n      ) : (\r\n        <Button isFullWidth size=\"lg\" variant=\"gradient\" colorScheme=\"dark-blue\" onClick={handleAddLiquidity}\r\n          isDisabled={buttonDisabled || typeof token0Allowance !== 'number' || typeof token1Allowance !== 'number'}\r\n          isLoading={isLoading || typeof token0Allowance !== 'number' || typeof token1Allowance !== 'number'}\r\n        >\r\n          {buttonMessage}\r\n        </Button>\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n","export * from './paired-user-lp-token';\r\nexport * from './remove-liquidity-modal';\r\nexport * from './remove-liquidity-modal-asset';\r\n","import {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Flex,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { Liquidity, Pair } from '@memecake/sonic-js';\r\nimport { FaInfoCircle } from '@react-icons/all-files/fa/FaInfoCircle';\r\nimport { useMemo } from 'react';\r\n\r\nimport { DisplayValue, TokenImageBlock } from '@/components';\r\nimport { LPBreakdownPopover } from '@/components/core/lp-breakdown-popover';\r\nimport { UserLPMetrics } from '@/hooks';\r\nimport { AppTokenMetadata } from '@/models';\r\n\r\nexport interface PairedUserLPTokenProps {\r\n  pairId: string;\r\n  token0: AppTokenMetadata;\r\n  token1: AppTokenMetadata;\r\n  balance0: string;\r\n  balance1: string;\r\n  userShares: string;\r\n  totalShares?: string;\r\n  allPairs?: Pair.List;\r\n  pairMetrics?: UserLPMetrics[keyof UserLPMetrics];\r\n  handleRemove: (token0: AppTokenMetadata, token1: AppTokenMetadata) => void;\r\n  handleAdd: (token0?: string, token1?: string) => void;\r\n  isMetricsLoading?: boolean;\r\n  isLPBalanceLoading?: boolean;\r\n}\r\n\r\nexport const PairedUserLPToken: React.FC<PairedUserLPTokenProps> = ({\r\n  token0,\r\n  token1,\r\n  totalShares,\r\n  userShares,\r\n  allPairs,\r\n  balance0,\r\n  balance1,\r\n  pairMetrics,\r\n  handleAdd,\r\n  handleRemove,\r\n  isMetricsLoading,\r\n  isLPBalanceLoading,\r\n}) => {\r\n  const successColor = useColorModeValue('green.500', 'green.400');\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const shadow = useColorModeValue('base', 'none');\r\n  const headerColor = useColorModeValue('gray.600', 'gray.400');\r\n\r\n  const userLPValue = useMemo(() => {\r\n    const pair = allPairs?.[token0.id]?.[token1.id];\r\n\r\n    if (pair && token0.price && token1.price && totalShares && userShares) {\r\n      return Liquidity.getUserPositionValue({\r\n        price0: token0.price,\r\n        price1: token1.price,\r\n        reserve0: pair.reserve0,\r\n        reserve1: pair.reserve1,\r\n        decimals0: token0.decimals,\r\n        decimals1: token1.decimals,\r\n        totalShares,\r\n        userShares,\r\n      }).toString();\r\n    }\r\n\r\n    return '0';\r\n  }, [allPairs, token0, token1, totalShares, userShares]);\r\n\r\n  return (\r\n    <Flex direction=\"column\" borderRadius=\"xl\" bg={bg} shadow={shadow}>\r\n      <Flex\r\n        position=\"relative\"\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\"\r\n        px={5}\r\n        py={4}\r\n        gridGap={1.5}\r\n      >\r\n        <TokenImageBlock src={token0.logo} size={7} />\r\n        <TokenImageBlock src={token1.logo} size={7} />\r\n        <Text flex={1} fontWeight=\"bold\" fontSize=\"1.125rem\">\r\n          {token0.symbol}/{token1.symbol}\r\n        </Text>\r\n        <Button\r\n          variant=\"outline\"\r\n          borderColor=\"dark-blue.500\"\r\n          onClick={() => handleAdd(token0.id, token1.id)}\r\n          fontWeight=\"normal\"\r\n          width=\"4.5rem\"\r\n        >\r\n          Add\r\n        </Button>\r\n        <Button\r\n          variant=\"ghost\"\r\n          onClick={() => handleRemove(token0, token1)}\r\n          fontWeight=\"normal\"\r\n        >\r\n          Remove\r\n        </Button>\r\n      </Flex>\r\n\r\n      <Divider />\r\n\r\n      <Flex direction=\"row\" px={6} py={4}>\r\n        <Box flex={1}>\r\n          <Text color={headerColor}>LP Tokens</Text>\r\n          <LPBreakdownPopover\r\n            sources={[\r\n              {\r\n                src: token0.logo,\r\n                symbol: token0.symbol,\r\n                decimals: token0.decimals,\r\n                balance: balance0,\r\n              },\r\n              {\r\n                src: token1.logo,\r\n                symbol: token1.symbol,\r\n                decimals: token1.decimals,\r\n                balance: balance1,\r\n              },\r\n            ]}\r\n          >\r\n            <DisplayValue\r\n              value={userShares}\r\n              isUpdating={isLPBalanceLoading}\r\n              fontWeight=\"bold\"\r\n              disableTooltip\r\n              width=\"fit-content\"\r\n            />\r\n          </LPBreakdownPopover>\r\n        </Box>\r\n\r\n        <Box flex={1}>\r\n          <Text color={headerColor}>USD Value</Text>\r\n          <DisplayValue\r\n            isUpdating={isLPBalanceLoading}\r\n            prefix=\"$\"\r\n            value={userLPValue}\r\n            fontWeight=\"bold\"\r\n            decimals={8}\r\n            width=\"fit-content\"\r\n          />\r\n        </Box>\r\n\r\n        <Box\r\n          flex={1}\r\n          backgroundColor=\"#8888882f\"\r\n          mx={-3}\r\n          my={-1}\r\n          px={3}\r\n          py={1}\r\n          borderRadius=\"xl\"\r\n        >\r\n          <Text color={headerColor} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n            Fees Earned\r\n          </Text>\r\n          <Popover trigger=\"hover\">\r\n            <PopoverTrigger>\r\n              <Box>\r\n                <FaInfoCircle />\r\n              </Box>\r\n            </PopoverTrigger>\r\n\r\n            <PopoverContent color={useColorModeValue('black', 'white')}>\r\n              <PopoverArrow />\r\n              <PopoverBody>\r\n                Your fees earned are based on periodic snapshots of the\r\n                estimated prices of the assets your fees accrued in. Both the\r\n                prices & assets that make up your fees earned are subject to\r\n                change.\r\n              </PopoverBody>\r\n            </PopoverContent>\r\n          </Popover>\r\n\r\n          <DisplayValue\r\n            color={successColor}\r\n            isUpdating={isMetricsLoading}\r\n            prefix=\"$\"\r\n            value={pairMetrics?.fees ?? 0}\r\n            fontWeight=\"bold\"\r\n            decimals={8}\r\n            width=\"fit-content\"\r\n          />\r\n        </Box>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Image } from '@chakra-ui/image';\r\nimport { Box, Flex, HStack, Text, useColorModeValue } from '@chakra-ui/react';\r\nimport { Price } from '@memecake/sonic-js';\r\nimport { FC, useMemo } from 'react';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\nimport { DisplayValue } from '@/components';\r\nimport { AppTokenMetadata } from '@/models';\r\n\r\ntype RemoveLiquidityModalAssetProps = Partial<AppTokenMetadata> & {\r\n  balance: string;\r\n  isUpdating?: boolean;\r\n};\r\n\r\nexport const RemoveLiquidityModalAsset: FC<RemoveLiquidityModalAssetProps> = ({\r\n  symbol,\r\n  decimals,\r\n  logo = questionMarkSrc,\r\n  balance = 0,\r\n  price = 0,\r\n  isUpdating,\r\n}) => {\r\n  const balancePrice = useMemo(\r\n    () => Price.getByAmount({ amount: String(balance), price }).toString(),\r\n    [balance, price]\r\n  );\r\n\r\n  const bg = useColorModeValue('gray.100', 'gray.700');\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\">\r\n      <HStack pl={2} py={2} pr={4} bg={bg} borderRadius=\"full\" alignSelf=\"center\">\r\n        <Image src={logo} alt={symbol} boxSize={6} borderRadius=\"full\" />\r\n        <Text fontWeight=\"bold\">{symbol}</Text>\r\n      </HStack>\r\n      <Box textAlign=\"end\">\r\n        <Box fontSize=\"xl\" fontWeight=\"bold\">\r\n          <DisplayValue value={balance} isUpdating={isUpdating} decimals={decimals}/>\r\n        </Box>\r\n        <Box fontSize=\"xs\">\r\n          <DisplayValue value={balancePrice} prefix=\"~$\" isUpdating={isUpdating}/>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n","import {\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n} from '@chakra-ui/modal';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Center,\r\n  Checkbox,\r\n  Divider,\r\n  Flex,\r\n  FormControl,\r\n  Heading,\r\n  Input,\r\n  SimpleGrid,\r\n  Slider,\r\n  SliderFilledTrack,\r\n  SliderThumb,\r\n  SliderTrack,\r\n  Stack,\r\n  Tooltip,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { Liquidity } from '@memecake/sonic-js';\r\nimport { FaArrowDown } from '@react-icons/all-files/fa/FaArrowDown';\r\nimport { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport {\r\n  FeatureState,\r\n  liquidityViewActions,\r\n  modalsSliceActions,\r\n  NotificationType,\r\n  useAppDispatch,\r\n  useLiquidityViewStore,\r\n  useModalsStore,\r\n  useNotificationStore,\r\n  useSwapCanisterStore,\r\n} from '@/store';\r\nimport { debounce } from '@/utils/function';\r\n\r\nimport { RemoveLiquidityModalAsset } from './remove-liquidity-modal-asset';\r\n\r\nconst PERCENTAGE_PRESETS = [25, 50, 75, 100];\r\n\r\nexport const RemoveLiquidityModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isRemoveLiquidityModalOpened } = useModalsStore();\r\n  const { addNotification } = useNotificationStore();\r\n  const { token0, token1, removeAmountPercentage, keepInSonic } =\r\n    useLiquidityViewStore();\r\n  const { allPairs, userLPBalances, userLPBalancesState } =\r\n    useSwapCanisterStore();\r\n\r\n  const handleModalClose = () => {\r\n    dispatch(modalsSliceActions.closeRemoveLiquidityModal());\r\n  };\r\n\r\n  const handleRemoveLiquidity = () => {\r\n    addNotification({\r\n      title: `Removing LP of ${token0.metadata?.symbol} + ${token1.metadata?.symbol}`,\r\n      type: NotificationType.RemoveLiquidity,\r\n      id: String(new Date().getTime()),\r\n    });\r\n    debounce(() => {\r\n      dispatch(liquidityViewActions.setRemoveAmountPercentage(0));\r\n    }, 300);\r\n    handleModalClose();\r\n  };\r\n\r\n  const handleSliderChange = (value: number) => {\r\n    dispatch(liquidityViewActions.setRemoveAmountPercentage(value));\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target;\r\n    if (value === '')\r\n      return dispatch(liquidityViewActions.setRemoveAmountPercentage(NaN));\r\n    const newValue = Math.max(1, Math.min(100, Number(value)));\r\n    dispatch(liquidityViewActions.setRemoveAmountPercentage(newValue));\r\n  };\r\n\r\n  const isBalancesUpdating = useMemo(\r\n    () => userLPBalancesState === FeatureState.Updating,\r\n    [userLPBalancesState]\r\n  );\r\n\r\n  const { balance0, balance1 } = useMemo(() => {\r\n    if (userLPBalances && allPairs && token0.metadata && token1.metadata) {\r\n      const lpBalance =\r\n        userLPBalances[token0.metadata.id]?.[token1.metadata.id];\r\n      const pair = allPairs[token0.metadata.id]?.[token1.metadata.id];\r\n\r\n      const { balance0, balance1 } = Liquidity.getTokenBalances({\r\n        decimals0: token0.metadata.decimals,\r\n        decimals1: token1.metadata.decimals,\r\n        reserve0: pair?.reserve0 ?? 0,\r\n        reserve1: pair?.reserve1 ?? 0,\r\n        totalSupply: pair?.totalSupply ?? 0,\r\n        lpBalance,\r\n      });\r\n\r\n      return {\r\n        balance0: balance0\r\n          .multipliedBy(removeAmountPercentage / 100)\r\n          .toString(),\r\n        balance1: balance1\r\n          .multipliedBy(removeAmountPercentage / 100)\r\n          .toString(),\r\n      };\r\n    }\r\n\r\n    return {\r\n      balance0: '0',\r\n      balance1: '0',\r\n    };\r\n  }, [\r\n    userLPBalances,\r\n    allPairs,\r\n    token0.metadata,\r\n    token1.metadata,\r\n    removeAmountPercentage,\r\n  ]);\r\n\r\n  const { buttonMessage, isAmountIsLow } = useMemo(() => {\r\n    const AMOUNT_TOO_LOW_LABEL = 'Amount is too low';\r\n\r\n    if (userLPBalances && token0.metadata && token1.metadata) {\r\n      const tokensLPBalance =\r\n        userLPBalances[token0.metadata.id]?.[token1.metadata.id];\r\n      const lpAmount = (removeAmountPercentage / 100) * tokensLPBalance;\r\n\r\n      const isAmountIsLow =\r\n        lpAmount <= ENV.swapCanisterFee || !removeAmountPercentage;\r\n\r\n      return {\r\n        buttonMessage: isAmountIsLow ? AMOUNT_TOO_LOW_LABEL : 'Remove',\r\n        isAmountIsLow,\r\n      };\r\n    }\r\n\r\n    return {\r\n      buttonMessage: AMOUNT_TOO_LOW_LABEL,\r\n      isAmountIsLow: true,\r\n    };\r\n  }, [\r\n    removeAmountPercentage,\r\n    token0.metadata,\r\n    token1.metadata,\r\n    userLPBalances,\r\n  ]);\r\n\r\n  const borderColor = useColorModeValue('gray.300', 'gray.700');\r\n\r\n  const checkboxColorKeepInSonic = useColorModeValue('black', 'white');\r\n  const checkboxColorNotKeepInSonic = useColorModeValue('gray.600', 'custom.1');\r\n  const checkboxColor = keepInSonic\r\n    ? checkboxColorKeepInSonic\r\n    : checkboxColorNotKeepInSonic;\r\n\r\n  return (\r\n    <Modal\r\n      isCentered\r\n      isOpen={isRemoveLiquidityModalOpened}\r\n      onClose={handleModalClose}\r\n    >\r\n      <ModalOverlay />\r\n\r\n      <ModalContent>\r\n        <ModalCloseButton />\r\n        <ModalHeader>\r\n          <Heading as=\"h3\" size=\"sm\">\r\n            Remove Liquidity\r\n          </Heading>\r\n        </ModalHeader>\r\n        <ModalBody textAlign=\"center\">\r\n          <Heading as=\"h4\" size=\"xs\" color=\"gray.500\" mt={2}>\r\n            Amount\r\n          </Heading>\r\n          <Heading\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            as=\"h6\"\r\n            size=\"xl\"\r\n            fontWeight=\"bold\"\r\n            mt={2}\r\n            mb={4}\r\n          >\r\n            <Input\r\n              w={`${String(removeAmountPercentage || 1).length * 23 + 5}px`}\r\n              variant=\"unstyled\"\r\n              value={String(removeAmountPercentage || '')}\r\n              onChange={handleInputChange}\r\n              size=\"xl\"\r\n              fontWeight=\"bold\"\r\n              textAlign=\"right\"\r\n              type=\"number\"\r\n              step={1}\r\n            />\r\n            %\r\n          </Heading>\r\n          <Box px={6}>\r\n            <Slider\r\n              value={removeAmountPercentage || 1}\r\n              onChange={handleSliderChange}\r\n              colorScheme=\"dark-blue\"\r\n              focusThumbOnChange={false}\r\n              min={1}\r\n              max={100}\r\n            >\r\n              <SliderTrack>\r\n                <SliderFilledTrack />\r\n              </SliderTrack>\r\n              <SliderThumb />\r\n            </Slider>\r\n          </Box>\r\n\r\n          <SimpleGrid columns={4} spacing={4} py={6}>\r\n            {PERCENTAGE_PRESETS.map((preset) => (\r\n              <Tooltip\r\n                key={preset}\r\n                label={`${preset}% of your liquidity position`}\r\n              >\r\n                <Button\r\n                  lineHeight=\"1\"\r\n                  colorScheme=\"dark-blue\"\r\n                  variant=\"outline\"\r\n                  disabled={removeAmountPercentage === preset}\r\n                  onClick={() => handleSliderChange(preset)}\r\n                >\r\n                  {preset}%\r\n                </Button>\r\n              </Tooltip>\r\n            ))}\r\n          </SimpleGrid>\r\n\r\n          <Flex alignItems=\"center\" mx={-6}>\r\n            <Divider />\r\n            <Center\r\n              p={2.5}\r\n              borderWidth=\"1px\"\r\n              borderStyle=\"solid\"\r\n              borderColor={borderColor}\r\n              borderRadius=\"md\"\r\n            >\r\n              <FaArrowDown />\r\n            </Center>\r\n\r\n            <Divider />\r\n          </Flex>\r\n\r\n          <Stack mt={6} mb={4}>\r\n            <RemoveLiquidityModalAsset\r\n              {...token0.metadata}\r\n              balance={balance0}\r\n              isUpdating={isBalancesUpdating}\r\n            />\r\n            <RemoveLiquidityModalAsset\r\n              {...token1.metadata}\r\n              balance={balance1}\r\n              isUpdating={isBalancesUpdating}\r\n            />\r\n          </Stack>\r\n\r\n          <Flex direction=\"row\" alignItems=\"center\" borderRadius={5} pt={4}>\r\n            <FormControl dir=\"row\" alignItems=\"center\">\r\n              <Checkbox\r\n                isChecked={keepInSonic}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    liquidityViewActions.setKeepInSonic(e.target.checked)\r\n                  )\r\n                }\r\n                colorScheme=\"dark-blue\"\r\n                size=\"md\"\r\n                color={checkboxColor}\r\n                fontWeight={600}\r\n              >\r\n                Keep tokens in Sonic after removing liquidity\r\n              </Checkbox>\r\n            </FormControl>\r\n          </Flex>\r\n        </ModalBody>\r\n\r\n        <ModalFooter>\r\n          <Button\r\n            variant=\"gradient\"\r\n            colorScheme=\"dark-blue\"\r\n            mb={3}\r\n            size=\"lg\"\r\n            isFullWidth\r\n            isDisabled={isAmountIsLow}\r\n            onClick={handleRemoveLiquidity}\r\n          >\r\n            {buttonMessage}\r\n          </Button>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n","export * from './add';\r\nexport * from './liquidity.utils';\r\nexport * from './list';\r\nexport * from './components';\r\n","import { Liquidity, toBigNumber } from '@memecake/sonic-js';\r\nimport { useMemo } from 'react';\r\n\r\nimport { AppAssetSource, getAppAssetsSources } from '@/config/utils';\r\nimport { SwapIDL } from '@/did';\r\nimport { Balances, BaseTokenData } from '@/models';\r\n\r\nexport const getShareOfPoolString = (\r\n  params: Liquidity.GetShareOfPoolParams\r\n) => {\r\n  const percentage = Liquidity.getShareOfPool(params).multipliedBy(100);\r\n\r\n  if (percentage.isEqualTo(0)) return '0%';\r\n\r\n  if (percentage.isLessThanOrEqualTo(0.01)) {\r\n    return '<0.01%';\r\n  }\r\n\r\n  return `${percentage.toFixed(2)}%`;\r\n};\r\n\r\nexport interface AddLiquidityMemoParams {\r\n  token0: BaseTokenData;\r\n  token1: BaseTokenData;\r\n  pair?: SwapIDL.PairInfoExt;\r\n}\r\n\r\nexport interface AddLiquidityMemo {\r\n  fee0: string;\r\n  fee1: string;\r\n  price0: string;\r\n  price1: string;\r\n  liquidityAmount?: string;\r\n  shareOfPool?: string;\r\n}\r\n\r\nexport const useAddLiquidityMemo = ({\r\n  token0,\r\n  token1,\r\n  pair,\r\n}: AddLiquidityMemoParams) =>\r\n  useMemo<AddLiquidityMemo>(() => {\r\n    try {\r\n      if (token0.metadata && token1.metadata && token0.value && token1.value) {\r\n        const fee0 = toBigNumber(token0.metadata.fee)\r\n          .multipliedBy(2)\r\n          .applyDecimals(token0.metadata.decimals)\r\n          .toString();\r\n\r\n        const fee1 = toBigNumber(token1.metadata.fee)\r\n          .multipliedBy(2)\r\n          .applyDecimals(token1.metadata.decimals)\r\n          .toString();\r\n\r\n        if (pair && Number(pair.reserve0) && Number(pair.reserve1)) {\r\n          // If pair exists and have reserves\r\n          const price0 = Liquidity.getOppositeAmount({\r\n            amountIn: '1',\r\n            reserveIn: pair.reserve1,\r\n            reserveOut: pair.reserve0,\r\n            decimalsIn: token1.metadata.decimals,\r\n            decimalsOut: token0.metadata.decimals,\r\n          }).toString();\r\n\r\n          const price1 = Liquidity.getOppositeAmount({\r\n            amountIn: '1',\r\n            reserveIn: pair.reserve0,\r\n            reserveOut: pair.reserve1,\r\n            decimalsIn: token0.metadata.decimals,\r\n            decimalsOut: token1.metadata.decimals,\r\n          }).toString();\r\n\r\n          const options = {\r\n            amount0: token0.value,\r\n            amount1: token1.value,\r\n            decimals0: token0.metadata?.decimals,\r\n            decimals1: token1.metadata?.decimals,\r\n            reserve0: pair.reserve0,\r\n            reserve1: pair.reserve1,\r\n            totalSupply: pair.totalSupply,\r\n          };\r\n\r\n          const liquidityAmount = Liquidity.getPosition(options)\r\n            .applyDecimals(Liquidity.PAIR_DECIMALS)\r\n            .toString();\r\n\r\n          const shareOfPool = getShareOfPoolString(options);\r\n\r\n          return {\r\n            fee0,\r\n            fee1,\r\n            price0,\r\n            price1,\r\n            liquidityAmount,\r\n            shareOfPool,\r\n          };\r\n        } else {\r\n          // If pair doesn't exist or doesn't have reserves\r\n          const price0 = toBigNumber(token0.value)\r\n            .div(token1.value)\r\n            .dp(token0.metadata.decimals)\r\n            .toString();\r\n\r\n          const price1 = toBigNumber(token1.value)\r\n            .div(token0.value)\r\n            .dp(token1.metadata.decimals)\r\n            .toString();\r\n\r\n          const liquidityAmount = Liquidity.getPosition({\r\n            amount0: token0.value,\r\n            amount1: token1.value,\r\n            decimals0: token0.metadata.decimals,\r\n            decimals1: token1.metadata.decimals,\r\n            reserve0: 0,\r\n            reserve1: 0,\r\n            totalSupply: 0,\r\n          })\r\n            .applyDecimals(Liquidity.PAIR_DECIMALS)\r\n            .toString();\r\n\r\n          return {\r\n            fee0,\r\n            fee1,\r\n            price0,\r\n            price1,\r\n            shareOfPool: '100%',\r\n            liquidityAmount,\r\n          };\r\n        }\r\n      }\r\n\r\n      throw new Error('Empty token data');\r\n    } catch {\r\n      // If token data is empty or invalid values\r\n      return {\r\n        fee0: '0',\r\n        fee1: '0',\r\n        price0: '0',\r\n        price1: '0',\r\n      };\r\n    }\r\n  }, [token0, token1, pair]);\r\n\r\nexport interface TokenSourceMemoParams {\r\n  token: BaseTokenData;\r\n  tokenBalances?: Balances;\r\n  sonicBalances?: Balances;\r\n}\r\n\r\nexport const useTokenSourceMemo = ({\r\n  token,\r\n  tokenBalances,\r\n  sonicBalances,\r\n}: TokenSourceMemoParams) =>\r\n  useMemo<AppAssetSource[] | undefined>(() => {\r\n    if (token.metadata) {\r\n      return getAppAssetsSources({\r\n        balances: {\r\n          plug: tokenBalances ? tokenBalances[token.metadata.id] : 0,\r\n          sonic: sonicBalances ? sonicBalances[token.metadata.id] : 0,\r\n        },\r\n      });\r\n    }\r\n  }, [token.metadata, tokenBalances, sonicBalances]);\r\n","import { Box, Stack, Text, useColorModeValue } from '@chakra-ui/react';\r\nimport { Liquidity, toBigNumber } from '@memecake/sonic-js';\r\nimport { useMemo } from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport { Asset, Header, InformationBox, PlugNotConnected, TokenImageBlock } from '@/components';\r\nimport { useUserMetrics } from '@/hooks';\r\nimport { AppTokenMetadata } from '@/models';\r\n\r\nimport {\r\n  FeatureState, liquidityViewActions, modalsSliceActions, useAppDispatch, useLiquidityViewStore,\r\n  usePlugStore, useSwapCanisterStore,\r\n} from '@/store';\r\n\r\nimport { PairedUserLPToken, PairedUserLPTokenProps, RemoveLiquidityModal } from './components';\r\n\r\nconst INFORMATION_TITLE = 'Liquidity Provider Rewards';\r\nconst INFORMATION_DESCRIPTION = `Liquidity providers earn a 0.3% fee on all trades proportional to their share of the pool. Fees are added to the pool, \r\n  accrue in real time and can be claimed by withdrawing your liquidity. If you want to learn `;\r\n\r\nconst INFORMATION_LINK = 'https://docs.sonic.ooo/product/adding-liquidity/claiming-your-rewards';\r\n\r\nconst InformationDescription = () => {\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n\r\n  return (\r\n    <Text color={color}>\r\n      {INFORMATION_DESCRIPTION}\r\n      <Box as=\"a\" color={color} href={INFORMATION_LINK} textDecoration=\"underline\" _visited={{ color: color }}>\r\n        review our documentation\r\n      </Box>\r\n      .\r\n    </Text>\r\n  );\r\n};\r\n\r\nexport const LiquidityListView = () => {\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const { isConnected } = usePlugStore();\r\n\r\n  const { allPairs, allPairsState, userLPBalances, userLPBalancesState, supportedTokenList, supportedTokenListState } = useSwapCanisterStore();\r\n  const { isBannerOpened } = useLiquidityViewStore();\r\n  const { isLoading: isMetricsLoading, userPairMetrics } = useUserMetrics();\r\n\r\n  const moveToAddLiquidityView = (token0?: string, token1?: string) => {\r\n    const query = token0 || token1\r\n        ? `?${token0 ? `token0=${token0}` : ''}${token1 ? `&token1=${token1}` : ''\r\n        }`\r\n        : '';\r\n    navigate(`/liquidity/add${query}`);\r\n  };\r\n\r\n  const handleInformationClose = () => { dispatch(liquidityViewActions.setIsBannerOpened(false));};\r\n\r\n  const handleOpenRemoveLiquidityModal = ( token0: AppTokenMetadata, token1: AppTokenMetadata) => {\r\n    dispatch(liquidityViewActions.setToken({ data: 'token0', token: token0 }));\r\n    dispatch(liquidityViewActions.setToken({ data: 'token1', token: token1 }));\r\n    dispatch(modalsSliceActions.openRemoveLiquidityModal());\r\n  };\r\n\r\n  const isLoading = useMemo(() => {\r\n    return (\r\n      allPairsState === FeatureState.Loading ||\r\n      supportedTokenListState === FeatureState.Loading ||\r\n      userLPBalancesState === FeatureState.Loading\r\n    );\r\n  }, [allPairsState, supportedTokenListState, userLPBalancesState]);\r\n\r\n  const isUserLPBalancesUpdating = useMemo(() => {\r\n    return userLPBalancesState === FeatureState.Updating;\r\n  }, [userLPBalancesState]);\r\n\r\n  const isUpdating = useMemo(() => {\r\n    return (\r\n      allPairsState === FeatureState.Updating ||\r\n      supportedTokenListState === FeatureState.Updating ||\r\n      isUserLPBalancesUpdating\r\n    );\r\n  }, [allPairsState, supportedTokenListState, isUserLPBalancesUpdating]);\r\n\r\n  const pairedUserLPTokens = useMemo(() => {\r\n    if (userLPBalances && supportedTokenList && allPairs) {\r\n      const lpBalancesPairIDs = Object.keys(userLPBalances);\r\n      const existentPairs = new Set();\r\n\r\n      return lpBalancesPairIDs.reduce((acc, tokenId0) => {\r\n        const pairedList: PairedUserLPTokenProps[] = [];\r\n\r\n        for (const tokenId1 in userLPBalances[tokenId0]) {\r\n          if (existentPairs.has(`${tokenId1}:${tokenId0}`)) continue;\r\n          existentPairs.add(`${tokenId0}:${tokenId1}`);\r\n\r\n          const token0 = supportedTokenList.find((token) => token.id === tokenId0);\r\n          const token1 = supportedTokenList.find((token) => token.id === tokenId1);\r\n\r\n          let balance0, balance1;\r\n\r\n          if (userLPBalances && allPairs && token0 && token1) {\r\n            const lpBalance = userLPBalances[token0.id]?.[token1.id];\r\n            const pair = allPairs[token0.id]?.[token1.id];\r\n\r\n            const balances = Liquidity.getTokenBalances({\r\n              decimals0: token0.decimals,\r\n              decimals1: token1.decimals,\r\n              reserve0: pair?.reserve0 ?? 0,\r\n              reserve1: pair?.reserve1 ?? 0,\r\n              totalSupply: pair?.totalSupply ?? 0,\r\n              lpBalance,\r\n            });\r\n\r\n            balance0 = balances.balance0.toString();\r\n            balance1 = balances.balance1.toString();\r\n          }\r\n\r\n          const userShares = toBigNumber(userLPBalances[tokenId0][tokenId1]).applyDecimals(Liquidity.PAIR_DECIMALS).toString();\r\n\r\n          const totalShares = toBigNumber(\r\n            allPairs?.[tokenId0]?.[tokenId1]?.totalSupply\r\n          ).applyDecimals(Liquidity.PAIR_DECIMALS).toString();\r\n\r\n          pairedList.push({\r\n            pairId: allPairs?.[tokenId0]?.[tokenId1]?.id,\r\n            token0,\r\n            token1,\r\n            balance0,\r\n            balance1,\r\n            userShares,\r\n            totalShares,\r\n            allPairs,\r\n          } as PairedUserLPTokenProps);\r\n        }\r\n\r\n        return [...acc, ...pairedList];\r\n      }, [] as PairedUserLPTokenProps[]);\r\n    }\r\n  }, [userLPBalances, supportedTokenList, allPairs]);\r\n\r\n  const headerColor = useColorModeValue('gray.600', 'gray.400');\r\n\r\n  return (\r\n    <div>\r\n      <Header\r\n        title=\"Your Liquidity Positions\"\r\n        buttonText=\"Create Position\"\r\n        onButtonClick={() => moveToAddLiquidityView()}\r\n        isUpdating={isUpdating}\r\n      >\r\n        {isBannerOpened && (\r\n          <InformationBox\r\n            onClose={handleInformationClose}\r\n            title={INFORMATION_TITLE}\r\n            mb={9}\r\n          >\r\n            <InformationDescription />\r\n          </InformationBox>\r\n        )}\r\n      </Header>\r\n\r\n      <RemoveLiquidityModal />\r\n\r\n      {!isConnected ? (\r\n        <PlugNotConnected message=\"Your liquidity positions will appear here.\" />\r\n      ) : isLoading ? (\r\n        <Stack spacing={4}>\r\n          <Asset isLoading justifyContent=\"flex-start\" gridGap={2}>\r\n            <TokenImageBlock size={7} isLoading />\r\n            <TokenImageBlock size={7} isLoading />\r\n          </Asset>\r\n\r\n          <Asset isLoading justifyContent=\"flex-start\" gridGap={2}>\r\n            <TokenImageBlock size={7} isLoading />\r\n            <TokenImageBlock size={7} isLoading />\r\n          </Asset>\r\n\r\n          <Asset isLoading justifyContent=\"flex-start\" gridGap={2}>\r\n            <TokenImageBlock size={7} isLoading />\r\n            <TokenImageBlock size={7} isLoading />\r\n          </Asset>\r\n        </Stack>\r\n      ) : !pairedUserLPTokens?.length ? (\r\n        <Text textAlign=\"center\" color={headerColor}>\r\n          You have no liquidity positions\r\n        </Text>\r\n      ) : (\r\n        <Stack\r\n          css={{ msOverflowStyle: 'none', scrollbarWidth: 'none','&::-webkit-scrollbar': { display: 'none'}}}\r\n          spacing={4} pb={40} overflow=\"auto\">\r\n          {pairedUserLPTokens.map((userLPToken) => {\r\n            return (\r\n              <PairedUserLPToken {...userLPToken} key={userLPToken.pairId} handleRemove={handleOpenRemoveLiquidityModal}\r\n                handleAdd={moveToAddLiquidityView} pairMetrics={userPairMetrics?.[userLPToken.pairId]}\r\n                isMetricsLoading={isMetricsLoading} isLPBalanceLoading={isUserLPBalancesUpdating}\r\n              />\r\n            );\r\n          })}\r\n        </Stack>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  Flex,\r\n  Image,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { FaArrowRight } from '@react-icons/all-files/fa/FaArrowRight';\r\nimport { FaLink } from '@react-icons/all-files/fa/FaLink';\r\nimport { useMemo } from 'react';\r\n\r\nimport { SwapTokenData, useSwapViewStore } from '@/store';\r\n\r\nexport interface ChainPopoverProps {\r\n  from: SwapTokenData;\r\n  to: SwapTokenData;\r\n}\r\n\r\nexport const ChainPopover: React.FC<ChainPopoverProps> = ({ from, to }) => {\r\n  const { tokenList } = useSwapViewStore();\r\n  const [path, isChained] = useMemo(() => {\r\n    if (to.metadata) {\r\n      const path = from.paths[to.metadata.id];\r\n      return [path, path?.path?.length > 2];\r\n    }\r\n    return [];\r\n  }, [from, to]);\r\n\r\n  const bg = useColorModeValue('gray.200', 'gray.700');\r\n\r\n  if (!path || !tokenList || !isChained)\r\n    return (\r\n      <Flex justifyContent=\"center\" alignItems=\"center\">\r\n        {from.metadata?.symbol}\r\n        &nbsp;\r\n        <FaArrowRight />\r\n        &nbsp;\r\n        {to.metadata?.symbol}\r\n      </Flex>\r\n    );\r\n\r\n  return (\r\n    <Popover trigger=\"hover\">\r\n      <PopoverTrigger>\r\n        <Flex justifyContent=\"center\" alignItems=\"center\">\r\n          {from.metadata?.symbol}\r\n          &nbsp;\r\n          <FaLink />\r\n          &nbsp;\r\n          {to.metadata?.symbol}\r\n        </Flex>\r\n      </PopoverTrigger>\r\n\r\n      <PopoverContent width=\"320px\" minWidth=\"fit-content\">\r\n        <PopoverArrow />\r\n        <PopoverBody>\r\n          <Flex width=\"full\" justifyContent=\"space-between\" alignItems=\"center\">\r\n            {path.path.map((item, index) => (\r\n              <div key={index}>\r\n                <Flex\r\n                  px={2}\r\n                  py={1}\r\n                  borderRadius={4}\r\n                  backgroundColor={bg}\r\n                  fontSize=\"0.75rem\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Image src={tokenList[item].logo} width={3} mr={1} />\r\n                  {tokenList[item].symbol}\r\n                </Flex>\r\n\r\n                {index !== path.path.length - 1 && (\r\n                  <FaArrowRight size={12} style={{ margin: '0 5px' }} />\r\n                )}\r\n              </div>\r\n            ))}\r\n          </Flex>\r\n        </PopoverBody>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n","import {\r\n  Flex,\r\n  Icon,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Portal,\r\n  Stack,\r\n  Text,\r\n} from '@chakra-ui/react';\r\nimport { toBigNumber } from '@memecake/sonic-js';\r\nimport { FaArrowRight } from '@react-icons/all-files/fa/FaArrowRight';\r\nimport { FaInfoCircle } from '@react-icons/all-files/fa/FaInfoCircle';\r\nimport BigNumber from 'bignumber.js';\r\nimport React, { useMemo } from 'react';\r\n\r\nimport { DisplayValue, StackLine } from '@/components';\r\nimport { ENV } from '@/config';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport { useBalances, useTokenSelectionChecker } from '@/hooks';\r\nimport { useCyclesMintingCanisterStore, useSwapViewStore } from '@/store';\r\nimport { formatValue } from '@/utils/format';\r\n\r\nimport { getSwapAmountOutMin } from '..';\r\nimport { getAmountOutRatio, getXTCValueByXDRRate } from '../swap.utils';\r\nimport { ChainPopover } from './chain-popover';\r\n\r\nexport type ExchangeBoxProps = {\r\n  priceImpact?: string;\r\n};\r\n\r\nexport const ExchangeBox: React.FC<ExchangeBoxProps> = ({ priceImpact }) => {\r\n  const { from, to, slippage, keepInSonic, allPairs } = useSwapViewStore();\r\n\r\n  const { sonicBalances } = useBalances();\r\n\r\n  const { ICPXDRconversionRate } = useCyclesMintingCanisterStore();\r\n\r\n  const { isFirstIsSelected: isFromTokenIsICP,\r\n    isSecondIsSelected: isToTokenIsICP } = useTokenSelectionChecker({ id0: from.metadata?.id, id1: to.metadata?.id });\r\n\r\n  const {\r\n    isFirstIsSelected: isFromTokenIsWICP,\r\n    isSecondIsSelected: isToTokenIsWICP,\r\n  } = useTokenSelectionChecker({ id0: from.metadata?.id, id1: to.metadata?.id, targetId: ENV.canistersPrincipalIDs.WICP });\r\n\r\n  const {\r\n    isFirstIsSelected: isFromTokenIsXTC,\r\n    isSecondIsSelected: isToTokenIsXTC,\r\n  } = useTokenSelectionChecker({\r\n    id0: from.metadata?.id,\r\n    id1: to.metadata?.id,\r\n    targetId: ENV.canistersPrincipalIDs.XTC,\r\n  });\r\n\r\n  const { depositFee, withdrawFee } = useMemo(() => {\r\n    if (from.metadata?.id && to.metadata?.id && sonicBalances) {\r\n      const hasDeposit = sonicBalances[from.metadata.id] < Number(from.value);\r\n      const depositFee =\r\n        hasDeposit && Number(from.metadata.fee) > 0\r\n          ? toBigNumber(BigInt(2) * from.metadata.fee)\r\n            .applyDecimals(from.metadata.decimals)\r\n            .toString()\r\n          : undefined;\r\n\r\n      const withdrawFee =\r\n        !keepInSonic && Number(to.metadata.fee) > 0\r\n          ? toBigNumber(to.metadata.fee)\r\n            .applyDecimals(to.metadata.decimals)\r\n            .toString()\r\n          : undefined;\r\n\r\n      return { depositFee, withdrawFee };\r\n    }\r\n\r\n    return {};\r\n  }, [from, to, sonicBalances, keepInSonic]);\r\n\r\n  const { icpMetadata, operation, fee, feeSymbol } = useMemo(() => {\r\n\r\n    const icpMetadata = isFromTokenIsICP ? from.metadata: isToTokenIsICP? to.metadata: undefined;\r\n    const xtcMetadata = isToTokenIsXTC && to.metadata;\r\n\r\n    const operation = isFromTokenIsWICP? 'Unwrap': isToTokenIsWICP ? 'Wrap' : isFromTokenIsXTC ? 'Swap' : isToTokenIsXTC ? 'Mint XTC': undefined;\r\n\r\n    const icpFeeInXTC = xtcMetadata && ICPXDRconversionRate?\r\n      getXTCValueByXDRRate({\r\n         amount: formatValue(ICP_METADATA.fee, ICP_METADATA.decimals), conversionRate: ICPXDRconversionRate,\r\n        }).minus(formatValue(xtcMetadata.fee, xtcMetadata.decimals)): new BigNumber(0);\r\n\r\n    const xtcFees = icpMetadata? \r\n    toBigNumber( (to.metadata?.fee ?? BigInt(0)) * (keepInSonic ? BigInt(3) : BigInt(1)))\r\n        .applyDecimals(to.metadata?.decimals ?? 0).plus(icpFeeInXTC.multipliedBy(2)).toString()\r\n      : '0';\r\n\r\n    const wicpFee = icpMetadata? toBigNumber(icpMetadata.fee).applyDecimals(icpMetadata.decimals).toString(): '0';\r\n\r\n    const fee = isToTokenIsXTC ? xtcFees : wicpFee;\r\n    const feeSymbol = isToTokenIsXTC ? 'XTC' : 'ICP';\r\n    return { icpMetadata, operation, fee, feeSymbol };\r\n    \r\n  }, [ isFromTokenIsICP, from.metadata, isToTokenIsICP, to.metadata, isToTokenIsXTC,isFromTokenIsWICP,\r\n    isToTokenIsWICP,isFromTokenIsXTC, ICPXDRconversionRate,keepInSonic,\r\n  ]);\r\n\r\n  const pathAmountOut = useMemo( () => getAmountOutRatio(from, to, allPairs), [from, to, allPairs]);\r\n\r\n  const amountOutMin = useMemo( () =>\r\n      getSwapAmountOutMin({ from, to, slippage, allPairs, hasDeposit: Boolean(depositFee), hasWithdraw: keepInSonic}),\r\n    [allPairs, depositFee, from, keepInSonic, slippage, to]\r\n  );\r\n\r\n  if (!from.metadata || !to.metadata) return null;\r\n\r\n  if (icpMetadata) {\r\n    return (\r\n      <Flex opacity={0.4} alignItems=\"center\" px={4} fontWeight={400}>\r\n        <Text display=\"flex\" alignItems=\"center\">\r\n          {from.metadata.symbol}&nbsp;\r\n          <FaArrowRight />\r\n          &nbsp;{to.metadata.symbol}\r\n        </Text>\r\n        <Text flex={1} textAlign=\"right\">\r\n          {operation} Fee = <DisplayValue as=\"span\" value={fee} /> {feeSymbol}\r\n        </Text>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" px={4} fontWeight={400}>\r\n      <ChainPopover from={from} to={to} />\r\n      <Text flex={1} textAlign=\"right\" mx={2}>\r\n        1&nbsp;{from.metadata.symbol}&nbsp;=&nbsp;\r\n        {pathAmountOut}\r\n        &nbsp;\r\n        {to.metadata.symbol}\r\n      </Text>\r\n      <Popover trigger=\"hover\">\r\n        <PopoverTrigger>\r\n          <Flex>\r\n            <Icon as={FaInfoCircle} width={5} transition=\"opacity 200ms\" />\r\n          </Flex>\r\n        </PopoverTrigger>\r\n        <Portal>\r\n          <PopoverContent minWidth=\"25rem\">\r\n            <PopoverHeader>Transaction Details</PopoverHeader>\r\n            <PopoverArrow />\r\n            <PopoverBody display=\"inline-block\">\r\n              <Stack>\r\n                <StackLine\r\n                  title=\"Minimum Received\"\r\n                  value={`${amountOutMin} ${to.metadata.symbol}`}\r\n                />\r\n                <StackLine\r\n                  title=\"Price Impact\"\r\n                  value={\r\n                    <DisplayValue as=\"span\" value={priceImpact} suffix=\"%\" />\r\n                  }\r\n                />\r\n                <StackLine title=\"Allowed Slippage\" value={`${slippage}%`} />\r\n                {depositFee && (\r\n                  <StackLine\r\n                    title=\"Deposit Fee\"\r\n                    value={`${depositFee} ${from.metadata.symbol}`}\r\n                  />\r\n                )}\r\n                {withdrawFee && (\r\n                  <StackLine\r\n                    title=\"Withdraw Fee\"\r\n                    value={`${withdrawFee} ${to.metadata.symbol}`}\r\n                  />\r\n                )}\r\n              </Stack>\r\n            </PopoverBody>\r\n          </PopoverContent>\r\n        </Portal>\r\n      </Popover>\r\n    </Flex>\r\n  );\r\n};\r\n","export * from './exchange-box';\r\nexport * from './keep-in-sonic-box';\r\nexport * from './topmenu';\r\n","import {\r\n  Checkbox,\r\n  Flex,\r\n  FormControl,\r\n  Icon,\r\n  Link,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n  Portal,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { FaInfoCircle } from '@react-icons/all-files/fa/FaInfoCircle';\r\nimport { useMemo } from 'react';\r\n\r\nimport { swapViewActions, useAppDispatch, useSwapViewStore } from '@/store';\r\n\r\nexport enum OperationType {\r\n  Swap = 'swap',\r\n  Wrap = 'wrap',\r\n  Mint = 'mint',\r\n}\r\n\r\ntype KeepInSonicBoxProps = {\r\n  symbol?: string;\r\n  operation?: OperationType;\r\n  canHeldInSonic?: boolean;\r\n};\r\n\r\nconst KEEP_IN_SONIC_LINK =\r\n  'https://docs.sonic.ooo/product/assets#keeping-assets-in-sonic-after-a-swap';\r\n\r\nexport const KeepInSonicBox: React.FC<KeepInSonicBoxProps> = ({\r\n  symbol,\r\n  operation = 'swap',\r\n  canHeldInSonic = true,\r\n}) => {\r\n  const { keepInSonic } = useSwapViewStore();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const linkColor = useColorModeValue('dark-blue.300', 'dark-blue.500');\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const shadow = useColorModeValue('base', 'none');\r\n\r\n  const checkboxColorKeepInSonic = useColorModeValue('black', 'white');\r\n  const checkboxColorNotKeepInSonic = useColorModeValue('gray.600', 'custom.1');\r\n  const checkboxColor = keepInSonic ? checkboxColorKeepInSonic : checkboxColorNotKeepInSonic;\r\n\r\n  const { label, popoverLabel } = useMemo(() => {\r\n    switch (operation) {\r\n      case 'swap':\r\n        return {\r\n          label: `Keep ${symbol ? symbol : 'tokens'\r\n            } in Sonic after ${operation}`,\r\n          popoverLabel: (\r\n            <>\r\n              Keeping tokens in Sonic (instead of withdrawing to Plug) is good\r\n              for high frequency trading where a few extra seconds matter a lot.\r\n              By doing this, you can skip the deposit step on your next trades\r\n              and save 2-3 seconds each time.&nbsp;\r\n              <Link href={KEEP_IN_SONIC_LINK} color={linkColor}>\r\n                Learn More\r\n              </Link>\r\n              .\r\n            </>\r\n          ),\r\n        };\r\n      case 'mint':\r\n      case 'wrap':\r\n        return {\r\n          label: `Deposit ${symbol ? symbol : 'tokens'\r\n            } to Sonic after ${operation}`,\r\n          popoverLabel: (\r\n            <>\r\n              If you keep your tokens deposited in Sonic (instead of withdrawing\r\n              to Plug) you can start swaps or add liquidity faster on your next\r\n              operation. &nbsp;\r\n              <Link href={KEEP_IN_SONIC_LINK} color={linkColor}>\r\n                Learn More\r\n              </Link>\r\n              .\r\n            </>\r\n          ),\r\n        };\r\n      default:\r\n        return {\r\n          label: 'Keep in Sonic',\r\n          popoverLabel: 'Keep in Sonic',\r\n        };\r\n    }\r\n  }, [operation, symbol]);\r\n\r\n  return (\r\n    <Flex\r\n      direction=\"row\"\r\n      justifyContent=\"space-between\"\r\n      alignItems=\"center\"\r\n      borderRadius=\"xl\"\r\n      bg={bg}\r\n      shadow={shadow}\r\n      px={5}\r\n      py={4}\r\n      mb={5}\r\n    >\r\n      {canHeldInSonic ? (\r\n        <>\r\n          <FormControl dir=\"row\" alignItems=\"center\">\r\n            <Checkbox\r\n              isChecked={keepInSonic}\r\n              onChange={(e) =>\r\n                dispatch(swapViewActions.setKeepInSonic(e.target.checked))\r\n              }\r\n              colorScheme=\"dark-blue\"\r\n              color={checkboxColor}\r\n              fontWeight={600}\r\n            >\r\n              {label}\r\n            </Checkbox>\r\n          </FormControl>\r\n          <Popover trigger=\"hover\">\r\n            <PopoverTrigger>\r\n              <Flex>\r\n                <Icon\r\n                  as={FaInfoCircle}\r\n                  width={5}\r\n                  transition=\"opacity 200ms\"\r\n                  opacity={keepInSonic ? 1 : 0.5}\r\n                />\r\n              </Flex>\r\n            </PopoverTrigger>\r\n            <Portal>\r\n              <PopoverContent>\r\n                <PopoverArrow />\r\n                <PopoverBody display=\"inline-block\">{popoverLabel}</PopoverBody>\r\n              </PopoverContent>\r\n            </Portal>\r\n          </Popover>\r\n        </>\r\n      ) : (\r\n        <Text fontWeight=\"bold\" color=\"gray.400\">\r\n          {symbol} can’t be held in the Sonic canister\r\n        </Text>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n","import React from 'react';\n\nimport { Flex, Button } from '@chakra-ui/react';\nimport { Link } from 'react-router-dom';\ntype options = {\n    tabname?: string;\n};\n\nexport const SwapSubTab: React.FC<options> = ({ tabname }) => {\n    var url = location.pathname;\n    return (\n        <Flex gap={4} direction='row' align='center' alignItems='center' style={ {justifyContent: 'center'}}>\n            <Button style={\n                { backgroundColor: (url == '/swap')?'#3F51B5' :'transparent' , border:\"1\" , color:'white' , borderColor:'#3F51B5' }} \n                as={Link} colorScheme='blue'  to={'/swap'} variant='outline' px={6}>\n              Swap\n            </Button>\n            <Button  style={\n                { backgroundColor: (url == '/swap/mint')?'#3F51B5' :'transparent' , border:\"1\" , color:'white' , borderColor:'#3F51B5' }} \n                as={Link} colorScheme='blue'  to={'/swap/mint'} variant='outline'  px={6}>\n            Mint\n            </Button>\n        </Flex>\n    );\n}","export * from './use-swap-view-data';\r\n","import { Link } from '@chakra-ui/react';\r\nimport { Pair, Swap, toBigNumber } from '@memecake/sonic-js';\r\nimport BigNumber from 'bignumber.js';\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { batch } from 'react-redux';\r\n\r\nimport { PLUG_WALLET_WEBSITE_URL } from '@/components';\r\nimport { ENV } from '@/config';\r\nimport { getAppAssetsSources } from '@/config/utils';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport { useBalances, useQuery, useTokenAllowance, useTokenBalanceMemo, useTokenSelectionChecker } from '@/hooks';\r\n\r\nimport { checkIfPlugProviderVersionCompatible } from '@/integrations/plug';\r\nimport {\r\n  FeatureState, INITIAL_SWAP_SLIPPAGE, NotificationType, SwapTokenDataKey, swapViewActions, useAppDispatch, useCyclesMintingCanisterStore,\r\n  useNotificationStore, usePlugStore, usePriceStore, useSwapCanisterStore, useSwapViewStore, useTokenModalOpener, getTokenPath\r\n} from '@/store';\r\n\r\nimport { formatValue, getMaxValue } from '@/utils/format';\r\nimport { debounce } from '@/utils/function';\r\n\r\nimport { OperationType } from '../components';\r\nimport {\r\n  getAmountOutFromPath, getICPValueByXDRRate, getXTCValueByXDRRate,\r\n} from '../swap.utils';\r\n\r\nexport enum SwapStep { Home, Review }\r\n\r\nexport const useSwapViewData = (action:string) => {\r\n  const dispatch = useAppDispatch();\r\n  const [lastChangedInputDataKey, setLastChangedInputDataKey] = useState<SwapTokenDataKey>('from');\r\n\r\n  const [step, setStep] = useState(SwapStep.Home);\r\n  const [isAutoSlippage, setIsAutoSlippage] = useState(true);\r\n\r\n  const query = useQuery();\r\n  const { addNotification } = useNotificationStore();\r\n  const { fromTokenOptions, toTokenOptions, from, to, tokenList, keepInSonic } = useSwapViewStore();\r\n  \r\n  const {\r\n    sonicBalances, tokenBalances, icpBalance, balancesState, supportedTokenListState,\r\n    supportedTokenList, allPairsState, allPairs,\r\n  } = useSwapCanisterStore();\r\n\r\n  const { totalBalances } = useBalances();\r\n\r\n  const { ICPXDRconversionRate } = useCyclesMintingCanisterStore();\r\n  const { state: priceState } = usePriceStore();\r\n  const { isConnected } = usePlugStore();\r\n\r\n  const openSelectTokenModal = useTokenModalOpener();\r\n\r\n  const {\r\n    isFirstIsSelected: isFromTokenIsICP,\r\n    isSecondIsSelected: isToTokenIsICP,\r\n    isTokenSelected: isICPSelected,\r\n  } = useTokenSelectionChecker({ id0: from.metadata?.id, id1: to.metadata?.id });\r\n\r\n  const {\r\n    isTokenSelected: isWICPSelected,\r\n    isFirstIsSelected: isFromTokenIsWICP,\r\n    isSecondIsSelected: isToTokenIsWICP,\r\n  } = useTokenSelectionChecker({ id0: from.metadata?.id, id1: to.metadata?.id, targetId: ENV.canistersPrincipalIDs.WICP });\r\n\r\n  const {\r\n    isSecondIsSelected: isToTokenIsXTC, isTokenSelected: isXTCSelected } =\r\n    useTokenSelectionChecker({ id0: from.metadata?.id, id1: to.metadata?.id, targetId: ENV.canistersPrincipalIDs.XTC });\r\n\r\n  const fromBalance = useTokenBalanceMemo(from.metadata?.id);\r\n  const toBalance = useTokenBalanceMemo(to.metadata?.id);\r\n\r\n  function handleICPToWICPChange(newValue: string, dataKey: SwapTokenDataKey) {\r\n    const oppositeDataKey = dataKey === 'from' ? 'to' : 'from';\r\n\r\n    const _newValue = new BigNumber(newValue);\r\n    const icpFee = formatValue(ICP_METADATA.fee, ICP_METADATA.decimals);\r\n\r\n    const value =\r\n      dataKey === 'from' ? _newValue.minus(icpFee) : _newValue.plus(icpFee);\r\n\r\n    dispatch(\r\n      swapViewActions.setValue({\r\n        data: oppositeDataKey,\r\n        value: value.toNumber() > 0 ? value.dp(ICP_METADATA.decimals).toString() : '',\r\n      })\r\n    );\r\n  }\r\n\r\n  function handleICPToXTCChange(newValue: string, dataKey: SwapTokenDataKey) {\r\n    const oppositeDataKey = dataKey === 'from' ? 'to' : 'from';\r\n\r\n    const xtcMetadata = tokenList?.[ENV.canistersPrincipalIDs.XTC];\r\n\r\n    if (ICPXDRconversionRate && xtcMetadata) {\r\n      const handler =\r\n        dataKey === 'from' ? getXTCValueByXDRRate : getICPValueByXDRRate;\r\n\r\n      const xtcFee = new BigNumber(\r\n        formatValue(xtcMetadata.fee, xtcMetadata.decimals)\r\n      );\r\n\r\n      const icpFeesConvertedToXTC = getXTCValueByXDRRate({\r\n        amount: formatValue(ICP_METADATA.fee, ICP_METADATA.decimals),\r\n        conversionRate: ICPXDRconversionRate,\r\n      }).minus(xtcFee).multipliedBy(2);\r\n\r\n      const xtcFees = xtcFee.multipliedBy(keepInSonic ? 4 : 2);\r\n\r\n      const amount =\r\n        dataKey === 'from'\r\n          ? newValue\r\n          : new BigNumber(newValue).plus(xtcFees).plus(icpFeesConvertedToXTC).toString();\r\n\r\n      const rateBasedAmount = handler({ amount, conversionRate: ICPXDRconversionRate});\r\n\r\n      const resultAmount =\r\n        dataKey === 'from'\r\n          ? rateBasedAmount.minus(icpFeesConvertedToXTC).minus(xtcFees)\r\n          : rateBasedAmount.dp(ICP_METADATA.decimals);\r\n\r\n      dispatch(\r\n        swapViewActions.setValue({\r\n          data: oppositeDataKey,\r\n          value: resultAmount.toNumber() > 0 ? resultAmount.toString() : '',\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  function handleICPToTokenChange(newValue: string, dataKey: SwapTokenDataKey) {\r\n    const oppositeDataKey = dataKey === 'from' ? 'to' : 'from';\r\n    const data = dataKey === 'from' ? from : to;\r\n    const oppositeData = dataKey === 'from' ? to : from;\r\n\r\n    const wrappedICPMetadata = supportedTokenList?.find((token) => token.id === ENV.canistersPrincipalIDs.WICP);\r\n\r\n    if (wrappedICPMetadata && tokenList && allPairs) {\r\n      const paths = getTokenPath({\r\n        pairList: allPairs as unknown as Pair.List, tokenList,\r\n        tokenId: wrappedICPMetadata.id, amount: newValue,\r\n      });\r\n      const dataWICP = { ...data, metadata: wrappedICPMetadata, paths };\r\n      dispatch(swapViewActions.setValue({ data: oppositeDataKey, value: getAmountOutFromPath(dataWICP, oppositeData) }));\r\n    }\r\n  }\r\n\r\n  const handleSetValue = (value: string, dataKey: SwapTokenDataKey) => {\r\n    dispatch(swapViewActions.setValue({ data: dataKey, value }));\r\n  };\r\n\r\n  const resetViewState = useCallback(() => {\r\n    setStep(SwapStep.Home);\r\n    dispatch(swapViewActions.setValue({ data: 'from', value: '' }));\r\n    dispatch(swapViewActions.setValue({ data: 'to', value: '' }));\r\n  }, [dispatch]);\r\n\r\n  const resetStepToHome = useCallback(() => {\r\n    if (step === SwapStep.Review) {\r\n      setStep(SwapStep.Home);\r\n    }\r\n  }, [step]);\r\n\r\n  const handleChangeValue = (value: string, dataKey: SwapTokenDataKey) => {\r\n    if (!from.metadata || !allPairs) return;\r\n    resetStepToHome();\r\n    handleSetValue(value, dataKey);\r\n\r\n    if (isICPSelected && isWICPSelected) {\r\n      handleICPToWICPChange(value, dataKey);\r\n      return;\r\n    }\r\n\r\n    if (isICPSelected && isXTCSelected) {\r\n      handleICPToXTCChange(value, dataKey);\r\n      return;\r\n    }\r\n\r\n    if (isICPSelected) {\r\n      handleICPToTokenChange(value, dataKey);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleSwitchTokens = () => {\r\n    resetStepToHome();\r\n\r\n    if (!to.metadata || (isFromTokenIsICP && isToTokenIsXTC)) {\r\n      dispatch(swapViewActions.switchTokens(lastChangedInputDataKey));\r\n      dispatch(swapViewActions.setToken({ data: 'to', tokenId: '' }));\r\n    } else {\r\n      dispatch(swapViewActions.switchTokens(lastChangedInputDataKey));\r\n      setLastChangedInputDataKey(\r\n        lastChangedInputDataKey === 'from' ? 'to' : 'from'\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleMaxClick = (dataKey: SwapTokenDataKey) => {\r\n    const balance = dataKey === 'from' ? fromBalance : toBalance;\r\n    const metadata = dataKey === 'from' ? from.metadata : to.metadata;\r\n\r\n    if (!balance) { return }\r\n\r\n    const maxValue = getMaxValue(metadata, balance).toString();\r\n    handleChangeValue(maxValue, dataKey);\r\n  };\r\n\r\n  const handleSelectToken = (dataKey: SwapTokenDataKey) => {\r\n    resetStepToHome();\r\n\r\n    const options = dataKey === 'from' ? fromTokenOptions : toTokenOptions;\r\n    const oppositeDataKey = dataKey === 'from' ? 'to' : 'from';\r\n    const oppositeTokenId = dataKey === 'from' ? to.metadata?.id : from.metadata?.id;\r\n\r\n    openSelectTokenModal({\r\n      metadata: options,\r\n      onSelect: (tokenId) => {\r\n        batch(() => {\r\n          if (\r\n            (dataKey === 'from' && from?.metadata?.id === tokenId) ||\r\n            (dataKey === 'to' && to?.metadata?.id === tokenId)\r\n          ) {\r\n            return;\r\n          }\r\n          if (oppositeTokenId === tokenId) {\r\n            dispatch(swapViewActions.setToken({ data: oppositeDataKey, tokenId: undefined }));\r\n            dispatch(swapViewActions.setToken({ data: dataKey, tokenId }));\r\n          } else if (tokenId === ENV.canistersPrincipalIDs.XTC && to.metadata?.id === ICP_METADATA.id) {\r\n            dispatch(swapViewActions.setToken({ data: dataKey, tokenId }));\r\n            dispatch(swapViewActions.setToken({ data: oppositeDataKey, tokenId: '' }));\r\n          } else {\r\n            dispatch(swapViewActions.setToken({ data: dataKey, tokenId }));\r\n          }\r\n        });\r\n      },\r\n      selectedTokenIds,\r\n    });\r\n  };\r\n\r\n  const checkIsPlugProviderVersionCompatible = useCallback(() => {\r\n    if (checkIfPlugProviderVersionCompatible()) {\r\n      return true;\r\n    }\r\n\r\n    addNotification({\r\n      title: (\r\n        <div>\r\n          You're using an outdated version of Plug, please update to the latest\r\n          one{' '}\r\n          <Link color=\"blue.400\" href={PLUG_WALLET_WEBSITE_URL} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            here\r\n          </Link>\r\n          .\r\n        </div>\r\n      ),\r\n      type: NotificationType.Error, id: String(new Date().getTime()),\r\n    });\r\n    return false;\r\n  }, [addNotification]);\r\n\r\n  const handleMintXTC = useCallback(() => {\r\n    if (checkIsPlugProviderVersionCompatible()) {\r\n      addNotification({\r\n        title: `Minting ${to.value} ${to.metadata?.symbol}`,\r\n        type: NotificationType.MintXTC,\r\n        id: String(new Date().getTime()),\r\n      });\r\n      debounce(resetViewState, 300);\r\n    }\r\n  }, [\r\n    addNotification,\r\n    checkIsPlugProviderVersionCompatible,\r\n    resetViewState,\r\n    to.metadata?.symbol,\r\n    to.value,\r\n  ]);\r\n\r\n  const handleMintWICP = useCallback(() => {\r\n    if (checkIsPlugProviderVersionCompatible()) {\r\n      addNotification({\r\n        title: `Wrapping ${from.value} ${from.metadata?.symbol}`,\r\n        type: NotificationType.MintWICP,\r\n        id: String(new Date().getTime()),\r\n      });\r\n      debounce(resetViewState, 300);\r\n    }\r\n  }, [addNotification, checkIsPlugProviderVersionCompatible, from.metadata?.symbol, from.value, resetViewState]);\r\n\r\n  const handleWithdrawWICP = useCallback(() => {\r\n    addNotification({\r\n      title: `Unwrapping ${from.value} ${from.metadata?.symbol}`,\r\n      type: NotificationType.WithdrawWICP,\r\n      id: String(new Date().getTime()),\r\n    });\r\n    debounce(resetViewState, 300);\r\n  }, [addNotification, from.metadata?.symbol, from.value, resetViewState]);\r\n\r\n  useEffect(() => { handleChangeValue(from.value, 'from'); }, [to.metadata]);\r\n\r\n  const handleApproveSwap = useCallback(() => {\r\n    addNotification({\r\n      title: `Swap ${from.value} ${from.metadata?.symbol} for ${to.value} ${to.metadata?.symbol}`,\r\n      type: NotificationType.Swap, id: String(new Date().getTime()),\r\n    });\r\n\r\n    debounce(resetViewState, 300);\r\n  }, [addNotification, from.metadata?.symbol, from.value, resetViewState, to.metadata?.symbol, to.value]);\r\n\r\n  const allowance = useTokenAllowance(from.metadata?.id);\r\n\r\n  const handleSetIsAutoSlippage = (isAutoSlippage: boolean) => {\r\n    setIsAutoSlippage(isAutoSlippage);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    if (isAutoSlippage) {\r\n      dispatch(swapViewActions.setSlippage(INITIAL_SWAP_SLIPPAGE));\r\n    }\r\n  };\r\n\r\n  const handleSetSlippage = (slippage: string) => {\r\n    dispatch(swapViewActions.setSlippage(slippage));\r\n  };\r\n\r\n  const isFetchingNotStarted = useMemo(\r\n    () =>\r\n      allPairsState === FeatureState.NotStarted ||\r\n      supportedTokenListState === FeatureState.NotStarted,\r\n    [supportedTokenListState, allPairsState]\r\n  );\r\n\r\n  const isLoading = useMemo(\r\n    () =>\r\n      balancesState === FeatureState.Loading ||\r\n      supportedTokenListState === FeatureState.Loading ||\r\n      allPairsState === FeatureState.Loading,\r\n    [balancesState, supportedTokenListState, allPairsState]\r\n  );\r\n\r\n  const isBalancesUpdating = useMemo(\r\n    () => balancesState === FeatureState.Updating,\r\n    [balancesState]\r\n  );\r\n  const isPriceUpdating = useMemo(\r\n    () => priceState === FeatureState.Updating,\r\n    [priceState]\r\n  );\r\n\r\n  const [isButtonDisabled, buttonMessage, handleButtonClick] = useMemo<\r\n    [boolean, string, (() => void)?]\r\n  >(() => {\r\n    if (isLoading) return [true, 'Loading'];\r\n    if (isFetchingNotStarted || !from.metadata) return [true, 'Fetching'];\r\n    if (!to.metadata) return [true, 'Select a Token'];\r\n\r\n    if (toTokenOptions && toTokenOptions.length <= 0)\r\n      return [true, 'No pairs available'];\r\n\r\n    const parsedFromValue = (from.value && parseFloat(from.value)) || 0;\r\n\r\n    if (parsedFromValue <= 0)\r\n      return [true, `Enter ${from.metadata.symbol} Amount`];\r\n\r\n    if (\r\n      parsedFromValue <= toBigNumber(from.metadata.fee).applyDecimals(from.metadata.decimals).toNumber()\r\n    ) {\r\n      return [true, `${from.metadata.symbol} amount must be greater than fee`];\r\n    }\r\n\r\n    const parsedToValue = (to.value && parseFloat(to.value)) || 0;\r\n\r\n    if (\r\n      parsedToValue <= toBigNumber(to.metadata.fee).applyDecimals(to.metadata.decimals).toNumber()\r\n    ) {\r\n      return [true, `${to.metadata.symbol} amount must be greater than fee`];\r\n    }\r\n\r\n    if (totalBalances && typeof fromBalance === 'number') {\r\n      if (parsedFromValue > Number(getMaxValue(from.metadata, fromBalance))) {\r\n        return [true, `Insufficient ${from.metadata.symbol} Balance`];\r\n      }\r\n    }\r\n\r\n    if (isFromTokenIsICP && isToTokenIsWICP) {\r\n      return [false, 'Wrap', handleMintWICP];\r\n    }\r\n\r\n    if (isFromTokenIsWICP && isToTokenIsICP) {\r\n      return [false, 'Unwrap', handleWithdrawWICP];\r\n    }\r\n\r\n    if (isFromTokenIsICP && isToTokenIsXTC) {\r\n      return [false, 'Mint XTC', handleMintXTC];\r\n    }\r\n\r\n    const handleButtonClick = () => {\r\n      if (step !== SwapStep.Review) {\r\n        setStep(SwapStep.Review);\r\n      }\r\n\r\n      if (step === SwapStep.Review) {\r\n        handleApproveSwap();\r\n      }\r\n    };\r\n    const buttonText = step === SwapStep.Review ? 'Swap' : 'Review Swap';\r\n    const waitingForAllowance = step === SwapStep.Review && typeof allowance === 'undefined';\r\n\r\n    return [waitingForAllowance, buttonText, handleButtonClick];\r\n  }, [\r\n    isLoading, isFetchingNotStarted, from.metadata, from.value, to.metadata, to.value, toTokenOptions, totalBalances,\r\n    fromBalance, isFromTokenIsICP, isToTokenIsWICP, isFromTokenIsWICP, isToTokenIsICP, isToTokenIsXTC, step, allowance,\r\n    handleMintWICP, handleWithdrawWICP, handleMintXTC, handleApproveSwap,\r\n  ]);\r\n\r\n  const headerTitle = useMemo(() => {\r\n    if (isFromTokenIsICP && isToTokenIsXTC) {\r\n      return 'Mint XTC';\r\n    }\r\n\r\n    if (isFromTokenIsICP && isToTokenIsWICP) {\r\n      return 'Wrap';\r\n    }\r\n\r\n    if (isFromTokenIsWICP && isToTokenIsICP) {\r\n      return 'Unwrap';\r\n    }\r\n\r\n    return action=='swap'? 'Swap':action=='mint'? 'Mint':'';\r\n  }, [\r\n    isFromTokenIsICP,\r\n    isToTokenIsXTC,\r\n    isToTokenIsWICP,\r\n    isFromTokenIsWICP,\r\n    isToTokenIsICP,\r\n  ]);\r\n\r\n  const priceImpact = useMemo(\r\n    () => {\r\n      return Swap.getPriceImpact({\r\n        amountIn: parseFloat(from.value) > 0 ? from.value : '0',\r\n        amountOut: to.value,\r\n        priceIn: from.metadata?.price ?? '0',\r\n        priceOut: to.metadata?.price ?? '0',\r\n      }).toString();\r\n    },\r\n    [from, to]\r\n  );\r\n\r\n  const selectedTokenIds = useMemo(() => {\r\n    const selectedIds = [];\r\n    if (from?.metadata?.id) {\r\n      selectedIds.push(from.metadata.id);\r\n    }\r\n\r\n    return selectedIds;\r\n  }, [from?.metadata?.id]);\r\n\r\n  const [isSelectTokenButtonDisabled, selectTokenButtonText] = useMemo(() => {\r\n    if (toTokenOptions && toTokenOptions.length <= 0)\r\n      return [true, 'No pairs available'];\r\n    return [false, 'Select a Token'];\r\n  }, [toTokenOptions]);\r\n\r\n  const fromSources = useMemo(() => {\r\n    if (from.metadata) {\r\n      if (from.metadata.id === ICP_METADATA.id) {\r\n        return getAppAssetsSources({\r\n          balances: {\r\n            plug: icpBalance ?? 0,\r\n          },\r\n        });\r\n      }\r\n\r\n      return getAppAssetsSources({\r\n        balances: {\r\n          plug: tokenBalances ? tokenBalances[from.metadata.id] : 0,\r\n          sonic: sonicBalances ? sonicBalances[from.metadata.id] : 0,\r\n        },\r\n      });\r\n    }\r\n  }, [from.metadata, tokenBalances, sonicBalances, icpBalance]);\r\n\r\n  const toSources = useMemo(() => {\r\n    if (to.metadata) {\r\n      if (to.metadata.id === ICP_METADATA.id) {\r\n        return getAppAssetsSources({\r\n          balances: {\r\n            plug: icpBalance ?? 0,\r\n          },\r\n        });\r\n      }\r\n\r\n      return getAppAssetsSources({\r\n        balances: {\r\n          plug: tokenBalances ? tokenBalances[to.metadata.id] : 0,\r\n          sonic: sonicBalances ? sonicBalances[to.metadata.id] : 0,\r\n        },\r\n      });\r\n    }\r\n  }, [to.metadata, tokenBalances, sonicBalances, icpBalance]);\r\n\r\n  const isExplanationTooltipVisible = useMemo(() => {\r\n    return isToTokenIsXTC && isFromTokenIsICP;\r\n  }, [isFromTokenIsICP, isToTokenIsXTC]);\r\n\r\n  const currentOperation = useMemo(\r\n    () =>\r\n      isFromTokenIsICP && isToTokenIsWICP\r\n        ? OperationType.Wrap\r\n        : isFromTokenIsICP && isToTokenIsXTC\r\n          ? OperationType.Mint\r\n          : OperationType.Swap,\r\n    [isFromTokenIsICP, isToTokenIsWICP, isToTokenIsXTC]\r\n  );\r\n\r\n  const canHeldInSonic = useMemo(() => !isToTokenIsICP, [isToTokenIsICP]);\r\n\r\n  useEffect(() => {\r\n    // Get tokens from query params after loading\r\n    if (!isLoading && fromTokenOptions && toTokenOptions) {\r\n      const tokenFromId = query.get('from');\r\n      const tokenToId = query.get('to');\r\n\r\n      if (tokenFromId) {\r\n        const from = fromTokenOptions.find(({ id }) => id === tokenFromId);\r\n        if (from?.id) {\r\n          dispatch(swapViewActions.setToken({ data: 'from', tokenId: from.id }));\r\n          dispatch(swapViewActions.setValue({ data: 'from', value: '' }));\r\n        }\r\n      }\r\n\r\n      if (tokenToId) {\r\n        const to = toTokenOptions.find(({ id }) => id === tokenToId);\r\n        if (to?.id) {\r\n          dispatch(swapViewActions.setToken({ data: 'to', tokenId: to.id }));\r\n          dispatch(swapViewActions.setValue({ data: 'to', value: '' }));\r\n        }\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isLoading]);\r\n\r\n  return {\r\n    step, allowance, isButtonDisabled, buttonMessage, canHeldInSonic, isAutoSlippage, headerTitle, isConnected, isLoading, isBalancesUpdating,\r\n    isPriceUpdating, priceImpact, fromSources, toSources, currentOperation, isICPSelected, isExplanationTooltipVisible,\r\n    isSelectTokenButtonDisabled, selectTokenButtonText, setStep, setLastChangedInputDataKey,onButtonClick: handleButtonClick,\r\n    onMenuClose: handleMenuClose, onSetSlippage: handleSetSlippage,onSetIsAutoSlippage: handleSetIsAutoSlippage, onChangeValue: handleChangeValue,\r\n    onSelectToken: handleSelectToken,onMaxClick: handleMaxClick, onSwitchTokens: handleSwitchTokens,\r\n  };\r\n};\r\n","export * from './components';\r\nexport * from './hooks';\r\nexport * from './swap';\r\nexport * from './mint';\r\nexport * from './swap.utils';\r\n","import {\n  Box, Button, Flex, Icon, IconButton, Link, Menu, MenuButton, MenuList, Popover, PopoverArrow, PopoverBody,\n  PopoverContent, PopoverTrigger, Skeleton, Stack, Text, Tooltip, useColorModeValue,\n} from '@chakra-ui/react';\n\nimport { FaArrowDown } from '@react-icons/all-files/fa/FaArrowDown';\nimport { FaCog } from '@react-icons/all-files/fa/FaCog';\nimport { FaInfoCircle } from '@react-icons/all-files/fa/FaInfoCircle';\n\nimport {\n  PlugButton, SlippageSettings, Token, TokenContent, TokenData, TokenDataBalances, TokenDataPrice,\n  TokenDataMetaInfo, TokenDetailsButton, TokenDetailsLogo, TokenDetailsSymbol, TokenInput, ViewHeader,\n} from '@/components';\n\nimport { useSwapView, useSwapViewStore } from '@/store';\n\nimport { SwapStep } from './';\nimport { ExchangeBox, KeepInSonicBox, SwapSubTab } from './components';\nimport { useSwapViewData } from './hooks';\n\nimport { useEffect } from 'react';\n\nimport { swapViewActions, useAppDispatch } from '@/store';\n\nexport const MintView = () => {\n  useSwapView('mint');\n  const dispatch = useAppDispatch();\n\n  const swapPlacementButtonBg = useColorModeValue('gray.50', 'custom.3');\n  const menuListShadow = useColorModeValue('lg', 'none');\n  const menuListBg = useColorModeValue('gray.50', 'custom.3');\n  const linkColor = useColorModeValue('dark-blue.500', 'dark-blue.400');\n  useEffect(() => { dispatch(swapViewActions.setKeepInSonic(false)) }, []);\n\n  \n  const {\n    allowance, step, headerTitle, isAutoSlippage, isICPSelected, isLoading, isBalancesUpdating, isPriceUpdating, isExplanationTooltipVisible,\n    isSelectTokenButtonDisabled, selectTokenButtonText, currentOperation, priceImpact, fromSources, toSources, canHeldInSonic,\n    isConnected, isButtonDisabled, buttonMessage, setStep, setLastChangedInputDataKey, onButtonClick, onChangeValue,\n    onSetIsAutoSlippage, onSetSlippage, onMenuClose, onMaxClick, onSelectToken, onSwitchTokens,\n  } = useSwapViewData('mint');\n\n  const { fromTokenOptions, toTokenOptions, from, to, slippage } = useSwapViewStore();\n\n  return (\n    <Stack spacing={4}>\n      <SwapSubTab tabname={'mint'} />\n      <ViewHeader title={headerTitle}\n        onArrowBack={step === SwapStep.Review ? () => setStep(SwapStep.Home) : undefined}\n      >\n        <Menu onClose={onMenuClose}>\n          <Tooltip label=\"Adjust the slippage\">\n            <MenuButton as={IconButton} isRound size=\"sm\" aria-label=\"Adjust the slippage\"\n              icon={<FaCog />} ml=\"auto\" isDisabled={isICPSelected}\n            />\n          </Tooltip>\n          <MenuList bg={menuListBg} shadow={menuListShadow} borderRadius={20} ml={-20} py={0}>\n            <SlippageSettings slippage={slippage} isAutoSlippage={isAutoSlippage} setSlippage={onSetSlippage} setIsAutoSlippage={onSetIsAutoSlippage} />\n          </MenuList>\n        </Menu>\n      </ViewHeader>\n      <Flex direction=\"column\" alignItems=\"center\">\n        <Box width=\"full\">\n          <Token value={from.value} setValue={(value) => onChangeValue(value, 'from')}\n            tokenListMetadata={fromTokenOptions} tokenMetadata={from.metadata}\n            isLoading={isLoading} sources={fromSources}\n          >\n            <TokenContent>\n              <TokenDetailsButton onClick={() => onSelectToken('from')}>\n                <TokenDetailsLogo />\n                <TokenDetailsSymbol />\n              </TokenDetailsButton>\n\n              <TokenInput autoFocus onChange={() => setLastChangedInputDataKey('from')} />\n            </TokenContent>\n            <TokenData>\n              <TokenDataBalances\n                isUpdating={isBalancesUpdating}\n                onMaxClick={() => onMaxClick('from')}\n              />\n              <TokenDataPrice isUpdating={isPriceUpdating} />\n            </TokenData>\n            <TokenDataMetaInfo\n              tokenSymbol={from.metadata ? from.metadata.symbol : ''} tokenValue={from.value}\n              tokenId={from.metadata ? from.metadata.id : ''} tokenDecimals={from.metadata ? from.metadata.decimals : 0}\n              pageInfo=\"swap\"\n            ></TokenDataMetaInfo>\n          </Token>\n        </Box>\n\n        <Flex direction=\"column-reverse\" w=\"full\">\n\n          <Box width=\"full\">\n            <Token value={to.value} setValue={(value) => onChangeValue(value, 'to')} tokenListMetadata={toTokenOptions}\n              tokenMetadata={to.metadata} isLoading={isLoading} sources={toSources}\n              shouldGlow={step === SwapStep.Review}\n            >\n              <TokenContent>\n                {to.metadata ? (\n                  <TokenDetailsButton onClick={() => onSelectToken('to')}>\n                    <TokenDetailsLogo />\n                    <TokenDetailsSymbol />\n                  </TokenDetailsButton>\n                ) : (\n                  <TokenDetailsButton onClick={() => onSelectToken('to')}\n                    isDisabled={isSelectTokenButtonDisabled} variant={isLoading ? 'solid' : 'gradient'}\n                    colorScheme={isLoading ? 'gray' : 'dark-blue'}\n                  >\n                    <Skeleton isLoaded={!isLoading}>\n                      {selectTokenButtonText}\n                    </Skeleton>\n                  </TokenDetailsButton>\n                )}\n                <TokenInput onChange={() => setLastChangedInputDataKey('to')} />\n              </TokenContent>\n              <TokenData>\n                <TokenDataBalances isUpdating={isBalancesUpdating} />\n                <TokenDataPrice isUpdating={isPriceUpdating} priceImpact={priceImpact}>\n                  {isExplanationTooltipVisible && (\n                    <Popover trigger=\"hover\">\n                      <PopoverTrigger>\n                        <Box tabIndex={0}>\n                          <FaInfoCircle />\n                        </Box>\n                      </PopoverTrigger>\n                      <PopoverContent>\n                        <PopoverArrow />\n                        <PopoverBody>\n                          <Text>\n                            This price & percentage shows the current difference\n                            between minting and swapping to XTC from ICP. If\n                            negative, it's better to swap; if positive, it's\n                            better to mint.{' '}\n                            <Link\n                              color={linkColor}\n                              rel=\"noopener noreferrer\"\n                              target=\"_blank\"\n                              href=\"https://sonic-ooo.medium.com/xtc-in-sonic-minting-vs-swapping-and-price-differences-67965228e52e\"\n                            >\n                              Learn More.\n                            </Link>\n                          </Text>\n                        </PopoverBody>\n                      </PopoverContent>\n                    </Popover>\n                  )}\n                </TokenDataPrice>\n              </TokenData>\n            </Token>\n          </Box>\n          <Tooltip label=\"Switch placement\">\n            <IconButton aria-label=\"Switch placement\"\n              icon={<Icon as={FaArrowDown} transition=\"transform 250ms\" />}\n              variant=\"outline\" mt={-2} mb={-2} w=\"fit-content\" mx=\"auto\"\n              bg={swapPlacementButtonBg} onClick={onSwitchTokens}\n              pointerEvents={!to.metadata ? 'none' : 'all'}\n              _hover={{\n                '& > svg': {\n                  transform: 'rotate(180deg)',\n                },\n              }}\n            />\n          </Tooltip>\n        </Flex>\n      </Flex>\n\n      <ExchangeBox priceImpact={priceImpact} />\n\n      <KeepInSonicBox canHeldInSonic={canHeldInSonic} symbol={to.metadata?.symbol} operation={currentOperation} />\n\n      {isConnected ? (\n        <Button isFullWidth variant=\"gradient\" colorScheme=\"dark-blue\" size=\"lg\" onClick={onButtonClick}\n          isLoading={\n            isLoading ||\n            (step === SwapStep.Review && typeof allowance !== 'number')\n          }\n          isDisabled={isButtonDisabled}\n        >\n          {buttonMessage}\n        </Button>\n      ) : (\n        <PlugButton variant=\"dark\" />\n      )}\n    </Stack>\n  );\n};\n","import {\r\n  Box, Button, Flex, Icon, IconButton, Link, Menu, MenuButton, MenuList, Popover, PopoverArrow, PopoverBody,\r\n  PopoverContent, PopoverTrigger, Skeleton, Stack, Text, Tooltip, useColorModeValue,\r\n} from '@chakra-ui/react';\r\n\r\nimport { FaArrowDown } from '@react-icons/all-files/fa/FaArrowDown';\r\nimport { FaCog } from '@react-icons/all-files/fa/FaCog';\r\nimport { FaInfoCircle } from '@react-icons/all-files/fa/FaInfoCircle';\r\n\r\nimport {\r\n  PlugButton, SlippageSettings, Token, TokenContent, TokenData, TokenDataBalances, TokenDataPrice,\r\n  TokenDataMetaInfo, TokenDetailsButton, TokenDetailsLogo, TokenDetailsSymbol, TokenInput, ViewHeader,\r\n} from '@/components';\r\n\r\nimport { useSwapView, useSwapViewStore } from '@/store';\r\n\r\nimport { SwapStep } from './';\r\nimport { ExchangeBox, KeepInSonicBox, SwapSubTab } from './components';\r\nimport { useSwapViewData } from './hooks';\r\n\r\nimport { useEffect } from 'react';\r\n\r\nimport { swapViewActions, useAppDispatch } from '@/store';\r\n\r\nexport const SwapView = () => {\r\n  useSwapView('swap');\r\n  const dispatch = useAppDispatch();\r\n  const {\r\n    allowance, step, headerTitle, isAutoSlippage, isICPSelected, isLoading, isBalancesUpdating, isPriceUpdating, isExplanationTooltipVisible,\r\n    isSelectTokenButtonDisabled, selectTokenButtonText, currentOperation, priceImpact, fromSources, toSources, canHeldInSonic,\r\n    isConnected, isButtonDisabled, buttonMessage, setStep, setLastChangedInputDataKey, onButtonClick, onChangeValue,\r\n    onSetIsAutoSlippage, onSetSlippage, onMenuClose, onMaxClick, onSelectToken, onSwitchTokens,\r\n  } = useSwapViewData('swap');\r\n\r\n  const swapPlacementButtonBg = useColorModeValue('gray.50', 'custom.3');\r\n  const menuListShadow = useColorModeValue('lg', 'none');\r\n  const menuListBg = useColorModeValue('gray.50', 'custom.3');\r\n  const linkColor = useColorModeValue('dark-blue.500', 'dark-blue.400');\r\n\r\n  useEffect(() => { dispatch(swapViewActions.setKeepInSonic(true)); }, []);\r\n\r\n  const { fromTokenOptions, toTokenOptions, from, to, slippage } = useSwapViewStore();\r\n  return (\r\n    <Stack spacing={4}>\r\n      <SwapSubTab tabname={'swap'} />\r\n      <ViewHeader title={headerTitle}\r\n        onArrowBack={step === SwapStep.Review ? () => setStep(SwapStep.Home) : undefined}\r\n      >\r\n        <Menu onClose={onMenuClose}>\r\n          <Tooltip label=\"Adjust the slippage\">\r\n            <MenuButton as={IconButton} isRound size=\"sm\" aria-label=\"Adjust the slippage\"\r\n              icon={<FaCog />} ml=\"auto\" isDisabled={isICPSelected}\r\n            />\r\n          </Tooltip>\r\n          <MenuList bg={menuListBg} shadow={menuListShadow} borderRadius={20} ml={-20} py={0}>\r\n            <SlippageSettings slippage={slippage} isAutoSlippage={isAutoSlippage} setSlippage={onSetSlippage} setIsAutoSlippage={onSetIsAutoSlippage} />\r\n          </MenuList>\r\n        </Menu>\r\n      </ViewHeader>\r\n      <Flex direction=\"column\" alignItems=\"center\">\r\n        <Box width=\"full\">\r\n          <Token value={from.value} setValue={(value) => onChangeValue(value, 'from')}\r\n            tokenListMetadata={fromTokenOptions} tokenMetadata={from.metadata}\r\n            isLoading={isLoading} sources={fromSources}\r\n          >\r\n            <TokenContent>\r\n              <TokenDetailsButton onClick={() => onSelectToken('from')}>\r\n                <TokenDetailsLogo />\r\n                <TokenDetailsSymbol />\r\n              </TokenDetailsButton>\r\n\r\n              <TokenInput autoFocus onChange={() => setLastChangedInputDataKey('from')} />\r\n            </TokenContent>\r\n            <TokenData>\r\n              <TokenDataBalances\r\n                isUpdating={isBalancesUpdating}\r\n                onMaxClick={() => onMaxClick('from')}\r\n              />\r\n              <TokenDataPrice isUpdating={isPriceUpdating} />\r\n            </TokenData>\r\n            <TokenDataMetaInfo\r\n              tokenSymbol={from.metadata ? from.metadata.symbol : ''} tokenValue={from.value}\r\n              tokenId={from.metadata ? from.metadata.id : ''} tokenDecimals={from.metadata ? from.metadata.decimals : 0}\r\n              pageInfo=\"swap\"\r\n            ></TokenDataMetaInfo>\r\n          </Token>\r\n        </Box>\r\n\r\n        <Flex direction=\"column-reverse\" w=\"full\">\r\n\r\n          <Box width=\"full\">\r\n            <Token value={to.value} setValue={(value) => onChangeValue(value, 'to')} tokenListMetadata={toTokenOptions}\r\n              tokenMetadata={to.metadata} isLoading={isLoading} sources={toSources}\r\n              shouldGlow={step === SwapStep.Review}\r\n            >\r\n              <TokenContent>\r\n                {to.metadata ? (\r\n                  <TokenDetailsButton onClick={() => onSelectToken('to')}>\r\n                    <TokenDetailsLogo />\r\n                    <TokenDetailsSymbol />\r\n                  </TokenDetailsButton>\r\n                ) : (\r\n                  <TokenDetailsButton onClick={() => onSelectToken('to')}\r\n                    isDisabled={isSelectTokenButtonDisabled} variant={isLoading ? 'solid' : 'gradient'}\r\n                    colorScheme={isLoading ? 'gray' : 'dark-blue'}\r\n                  >\r\n                    <Skeleton isLoaded={!isLoading}>\r\n                      {selectTokenButtonText}\r\n                    </Skeleton>\r\n                  </TokenDetailsButton>\r\n                )}\r\n                <TokenInput onChange={() => setLastChangedInputDataKey('to')} />\r\n              </TokenContent>\r\n              <TokenData>\r\n                <TokenDataBalances isUpdating={isBalancesUpdating} />\r\n                <TokenDataPrice isUpdating={isPriceUpdating} priceImpact={priceImpact}>\r\n                  {isExplanationTooltipVisible && (\r\n                    <Popover trigger=\"hover\">\r\n                      <PopoverTrigger>\r\n                        <Box tabIndex={0}>\r\n                          <FaInfoCircle />\r\n                        </Box>\r\n                      </PopoverTrigger>\r\n                      <PopoverContent>\r\n                        <PopoverArrow />\r\n                        <PopoverBody>\r\n                          <Text>\r\n                            This price & percentage shows the current difference\r\n                            between minting and swapping to XTC from ICP. If\r\n                            negative, it's better to swap; if positive, it's\r\n                            better to mint.{' '}\r\n                            <Link\r\n                              color={linkColor}\r\n                              rel=\"noopener noreferrer\"\r\n                              target=\"_blank\"\r\n                              href=\"https://sonic-ooo.medium.com/xtc-in-sonic-minting-vs-swapping-and-price-differences-67965228e52e\"\r\n                            >\r\n                              Learn More.\r\n                            </Link>\r\n                          </Text>\r\n                        </PopoverBody>\r\n                      </PopoverContent>\r\n                    </Popover>\r\n                  )}\r\n                </TokenDataPrice>\r\n              </TokenData>\r\n            </Token>\r\n          </Box>\r\n          <Tooltip label=\"Switch placement\">\r\n            <IconButton aria-label=\"Switch placement\"\r\n              icon={<Icon as={FaArrowDown} transition=\"transform 250ms\" />}\r\n              variant=\"outline\" mt={-2} mb={-2} w=\"fit-content\" mx=\"auto\"\r\n              bg={swapPlacementButtonBg} onClick={onSwitchTokens}\r\n              pointerEvents={!to.metadata ? 'none' : 'all'}\r\n              _hover={{\r\n                '& > svg': {\r\n                  transform: 'rotate(180deg)',\r\n                },\r\n              }}\r\n            />\r\n          </Tooltip>\r\n        </Flex>\r\n      </Flex>\r\n\r\n      <ExchangeBox priceImpact={priceImpact} />\r\n\r\n      <KeepInSonicBox canHeldInSonic={canHeldInSonic} symbol={to.metadata?.symbol} operation={currentOperation} />\r\n\r\n      {isConnected ? (\r\n        <Button isFullWidth variant=\"gradient\" colorScheme=\"dark-blue\" size=\"lg\" onClick={onButtonClick}\r\n          isLoading={\r\n            isLoading ||\r\n            (step === SwapStep.Review && typeof allowance !== 'number')\r\n          }\r\n          isDisabled={isButtonDisabled}\r\n        >\r\n          {buttonMessage}\r\n        </Button>\r\n      ) : (\r\n        <PlugButton variant=\"dark\" />\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n","import { Pair, Swap, toBigNumber } from '@memecake/sonic-js';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nimport {\r\n  DEFAULT_CYCLES_PER_XDR,\r\n  SwapTokenData,\r\n  TOKEN_SUBDIVIDABLE_BY,\r\n} from '@/store';\r\nimport { getValueWithoutFees } from '@/utils/format';\r\n\r\nexport type GetXTCValueByXDRRateOptions = {\r\n  amount: string;\r\n  conversionRate: string;\r\n};\r\n\r\nexport type GetICPValueByXDRRateOptions = {\r\n  amount: string;\r\n  conversionRate: string;\r\n};\r\n\r\nexport function getXTCValueByXDRRate({\r\n  amount,\r\n  conversionRate,\r\n}: GetXTCValueByXDRRateOptions) {\r\n  const _amount = new BigNumber(amount);\r\n  const _conversionRate = new BigNumber(conversionRate);\r\n  const _defaultCyclesPerXDR = new BigNumber(DEFAULT_CYCLES_PER_XDR);\r\n  const _subdividableBy = new BigNumber(TOKEN_SUBDIVIDABLE_BY * 100_000_000);\r\n\r\n  // XTCValueByXDRRate = amount * conversionRate * defaultCyclesPerXDR / subdividableBy\r\n  const result = _amount\r\n    .multipliedBy(_conversionRate)\r\n    .multipliedBy(_defaultCyclesPerXDR)\r\n    .dividedBy(_subdividableBy);\r\n\r\n  return result;\r\n}\r\n\r\nexport function getICPValueByXDRRate({\r\n  amount,\r\n  conversionRate,\r\n}: GetXTCValueByXDRRateOptions) {\r\n  const _amount = new BigNumber(amount);\r\n  const _defaultCyclesPerXDR = new BigNumber(DEFAULT_CYCLES_PER_XDR);\r\n  const _subdividableBy = new BigNumber(TOKEN_SUBDIVIDABLE_BY * 100_000_000);\r\n\r\n  const _conversionRate = new BigNumber(conversionRate);\r\n\r\n  // ICPValueByXDRRate = amount / conversionRate / defaultCyclesPerXDR * subdividableBy\r\n  const result = _amount\r\n    .multipliedBy(_subdividableBy)\r\n    .dividedBy(_defaultCyclesPerXDR)\r\n    .dividedBy(_conversionRate);\r\n\r\n  return result;\r\n}\r\n\r\nexport const getAmountOutFromPath = (\r\n  tokenIn: SwapTokenData,\r\n  tokenOut: SwapTokenData\r\n): string => {\r\n  if (!tokenIn.metadata || !tokenOut.metadata || !tokenIn.value) return '';\r\n\r\n  const path = tokenIn.paths[tokenOut.metadata.id];\r\n\r\n  if (path) {\r\n    return new BigNumber(path.amountOut)\r\n      .dp(tokenOut.metadata.decimals)\r\n      .toString();\r\n  }\r\n\r\n  return '';\r\n};\r\n\r\nexport type GetSwapAmountOutMinOptions = {\r\n  from: SwapTokenData;\r\n  to: SwapTokenData;\r\n  slippage: string;\r\n  allPairs?: Pair.List;\r\n  hasDeposit?: boolean;\r\n  hasWithdraw?: boolean;\r\n};\r\n\r\nexport const getSwapAmountOutMin = ({\r\n  from,\r\n  to,\r\n  slippage,\r\n  allPairs,\r\n  hasDeposit,\r\n  hasWithdraw,\r\n}: GetSwapAmountOutMinOptions) => {\r\n  if (\r\n    !from.metadata ||\r\n    new BigNumber(from.value).isZero() ||\r\n    new BigNumber(from.value).isNaN() ||\r\n    !to.metadata ||\r\n    new BigNumber(to.value).isZero() ||\r\n    new BigNumber(to.value).isNaN() ||\r\n    !allPairs\r\n  )\r\n    return '0';\r\n\r\n  const pair = allPairs[from.metadata.id]?.[to.metadata.id];\r\n  if (!pair) return '0';\r\n\r\n  let fromValue = new BigNumber(from.value);\r\n\r\n  if (hasDeposit) {\r\n    fromValue = getValueWithoutFees({\r\n      value: from.value,\r\n      fee: from.metadata.fee,\r\n      decimals: from.metadata.decimals,\r\n      numberOfFees: 2,\r\n    });\r\n  }\r\n\r\n  const toValue = Swap.getAmountOut({\r\n    amountIn: fromValue.toString(),\r\n    decimalsIn: from.metadata.decimals,\r\n    decimalsOut: to.metadata.decimals,\r\n    reserveIn: Number(pair.reserve0),\r\n    reserveOut: Number(pair.reserve1),\r\n  }).toString();\r\n\r\n  let result = Swap.getAmountMin({\r\n    amount: Math.max(Number(toValue), 0).toString(),\r\n    slippage,\r\n    decimals: to.metadata.decimals,\r\n  });\r\n\r\n  if (hasWithdraw) {\r\n    result = getValueWithoutFees({\r\n      value: result.toString(),\r\n      fee: to.metadata.fee,\r\n      decimals: to.metadata.decimals,\r\n      numberOfFees: 2,\r\n    });\r\n  }\r\n\r\n  return result.dp(Number(to.metadata.decimals)).toString();\r\n};\r\n\r\nexport const getAmountOutRatio = (\r\n  from: SwapTokenData,\r\n  to: SwapTokenData,\r\n  allPairs?: Pair.List\r\n): string => {\r\n  if (!from.metadata || !to.metadata) return '0';\r\n\r\n  if (from.value && to.value) {\r\n    const ratio = toBigNumber(to.value)\r\n      .div(from.value)\r\n      .dp(to.metadata.decimals);\r\n    if (ratio.isZero())\r\n      return `less than ${toBigNumber(1)\r\n        .applyDecimals(to.metadata.decimals)\r\n        .toString()}`;\r\n    return ratio.toString();\r\n  }\r\n\r\n  if (!allPairs) return '0';\r\n\r\n  const pair = allPairs[from.metadata.id]?.[to.metadata.id];\r\n\r\n  if (!pair) return '0';\r\n\r\n  return Swap.getAmountOut({\r\n    amountIn: '1',\r\n    decimalsIn: from.metadata.decimals,\r\n    decimalsOut: to.metadata.decimals,\r\n    reserveIn: Number(pair.reserve0),\r\n    reserveOut: Number(pair.reserve1),\r\n  }).toString();\r\n};\r\n","export * from './test';\nexport * from './todos';\nexport * from './test2'","import { useState , useEffect , createContext, useContext , useRef , useReducer , useCallback ,useMemo  } from \"react\";\nconst UserContext = createContext({});\n\nimport Todos2 from './todos';\nimport useFetch from './useFetch';\n\n\n\nconst initialTodos = [\n    {\n      id: 1,\n      title: \"Todo 1\",\n      complete: false,\n    },\n    {\n      id: 2,\n      title: \"Todo 2\",\n      complete: false,\n    },\n  ];\n\n  const reducer = (state:any, action:any) => {\n    switch (action.type) {\n      case \"COMPLETE\":\n        return state.map((todo:any) => {\n          if (todo.id === action.id) {\n           var p= { ...todo, complete: !todo.complete }\n            return p;\n          } else {\n            return todo;\n          }\n        });\n      default:\n        return state;\n    }\n  };\n\n  function Todos() {\n\n    const [todos, dispatch] = useReducer(reducer, initialTodos);\n\n    const handleComplete = (todo:any) => {\n      dispatch({ type: \"COMPLETE\", id: todo.id });\n    };\n  \n    return (\n      <>\n        {todos.map((todo:any) => (\n          <div key={todo.id}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.complete}\n                onChange={() => handleComplete(todo)}\n              />\n              {todo.title}\n            </label>\n          </div>\n        ))}\n      </>\n    );\n  }\nfunction App() {\n    const [inputValue, setInputValue] = useState(\"\");\n    const previousInputValue = useRef(\"\");\n  \n    useEffect(() => {\n      previousInputValue.current = inputValue;\n    }, [inputValue]);\n  \n    return (\n      <>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n        />\n        <h2>Current Value: {inputValue}</h2>\n        <h2>Previous Value: {previousInputValue.current}</h2>\n      </>\n    );\n  }\n  \n\nfunction Component1() {\n  \n\n    const [user, setUser] = useState(\"Jesse Hall\");\n    setUser;\n    return (\n        <UserContext.Provider value={{user:user , number:1222}}>\n      <div>\n        <h1>{`Hello ${user}!`}</h1>\n        <Component2 />\n      </div>\n        \n      </UserContext.Provider>\n    //  \n    );\n  }\n  \n  function Component2() {\n    return (\n      <>\n        <h1>Component 2  </h1>\n        <Component3 />\n      </>\n    );\n  }\n  \n  function Component3() {\n    const value:any = useContext(UserContext);\n    return (\n      <>\n        <h1>Component 3 user {value.user}</h1>\n        <Component4 />\n      </>\n    );\n  }\n  \n  function Component4() {\n    return (\n      <>\n        <h1>Component 4</h1>\n        <Component5 />\n      </>\n    );\n  }\n  \n  function Component5() {\n    const value:any = useContext(UserContext);\n  \n    return (\n      <>\n        <h1>Component 5</h1>\n        <h2>{`Hello ${value.user} again!`}</h2>\n      </>\n    );\n  }\n\nfunction Timer() {\n    const [count, setCount] = useState(0);\n    // setInterval(() => {\n    //     setCount((count) => count + 2);\n    // }, 3000);\n    setCount;\n    useEffect(() => {\n    //     setCount((count) => count + 2);\n    //   console.log('count updated' ,count)\n    },[count]);\n  \n    return <h1>I've rendered {count} times!</h1>;\n  }\n // Timer;\n\n\nconst App2 = () => {\n  const [count, setCount] = useState(0);\n  const [todos, setTodos] = useState([\"todo 1\", \"todo 2\"]);\n\n  const increment = () => {\n    setCount(count+1)\n    setTodos(() => [...todos, \"new Task\"+count]);\n  };\n\n\n\n  const addTodo = useCallback(() => {\n    setCount(count+1) \n    setTodos((t) => [...t, \"New Todo \"+ count]);}, [todos]);\n\n    const expensiveCalculation = (num:number) => {\n\n      console.log(\"Calculating...\");\n      for (let i = 0; i < 1000000000; i++) {\n        num += 1;\n      }\n      return num;\n    };\n\n   // const calculation = expensiveCalculation(count);\n   const calculation =  useMemo(() => expensiveCalculation(count), [count]);\n\n  return (\n    <div>\n      <Todos2 todos={todos} addTodo={addTodo}  />\n      <hr />\n      <div>\n        Count: {count}\n        <button onClick={increment}>+</button>\n      </div>\n      <br/>\n      <br/>\n      <hr />\n\n      <div>\n        Count: {count}\n        <button onClick={increment}>+</button>\n        <h2>Expensive Calculation</h2>\n        {calculation}\n      </div>\n    </div>\n  );\n};\n\n\nconst Home = () => {\n //const [data, setData] = useState<[{id?:string , title?:string}]>([{}]);\n\n  type  d= [{id?:string , title?:string}];\n const data:d= useFetch(\"https://jsonplaceholder.typicode.com/todos\");\n\n//  useMemo(():any => {\n\n//   setTimeout(() => {\n//     fetch(\"https://jsonplaceholder.typicode.com/todos\").then(\n//       (res) => res.json()\n//   ).then((data) => setData(data) );\n//   }, 10*1000);\n//  },[]);\n\n\n  return data.length>1 ?(\n    <>\n      <h1>HOME</h1>\n      {data.length>1 &&\n        data.map((item ) => {\n          return <p key={item.id} >{item.title}</p>;\n        })}\n    </>\n  ): (<></>);\n};\n\nexport const TestView = () => {\n    const [count, setCount] = useState(0);\n    const [color, setColor] = useState(\"\");\n  \n\n    useEffect(() => {\n       \n      console.log( 'count' , count , color)\n    },[count , color]);\n\n   \n\n    \n\n    return (<div>\n        <h1>My favorite color is {color}!</h1>\n      <button\n        type=\"button\"\n        onClick={() => setColor(\"blue\")}\n      >Blue</button> , \n\n<button\n        type=\"button\"\n        onClick={() => setColor(\"red\")}\n      >Red</button> ,\n       <button\n        type=\"button\"\n        onClick={() => setColor(\"pink\")}\n      >Pink</button> , \n      <button\n        type=\"button\"\n        onClick={() => setColor(\"green\")}\n      >Green</button>\n    <br/>\n    ----------------------------------------------------------------------------------\n\n    <h1>I've rendered {count} times! </h1>\n    <button\n        type=\"button\"\n        onClick={() => setCount(count+1)}\n      >count</button>\n\n      <Timer></Timer>\n      <br/>\n      ----------------------------------------------------------------------------------\n\n      <Component1 />\n      ----------------------------------------------------------------------------------\n      <br/>\n      <App/>\n      ----------------------------------------------------------------------------------\n      <br/>\n\n      <Todos />\n\n      <App2/>\n      <br/>\n      <br/>\n      <br/>\n\n      <Home/>\n    </div>\n    \n    )\n}\n","import { useState, useEffect , useMemo } from \"react\";\n\n\nexport const TestViewt1 = () => {\n\n    const [count, setCount] = useState(0);\n\n    useEffect(() => {\n      let timer = setTimeout(() => {\n      setCount((count) => count + 1);\n    }, 5000);\n  \n    return () => clearTimeout(timer)\n    }, [count]);\n  \n    return <h1>I've rendered {count} times!</h1>;\n}\n\nexport const TestViewt2 = () => {\n    const [count, setCount] = useState(0);\n    const [todos, setTodos] =  useState<string[]>(['']);\n    const calculation = useMemo(() => expensiveCalculation(count), [count]);\n  \n    const increment = () => {\n      setCount((c) => c + 1);\n    };\n    const addTodo = () => {\n      setTodos((t) => {\n        var s:string[] = [...t, \"New Todo\"]\n        return s;\n      }  );\n    };\n  \n    return (\n      <div>\n        <div>\n          <h2>My Todos</h2>\n          {todos.map((todo, index) => {\n            return <p key={index}>{todo}</p>;\n          })}\n          <button onClick={addTodo}>Add Todo</button>\n        </div>\n        <hr />\n        <div>\n          Count: {count}\n          <button onClick={increment}>+</button>\n          <h2>Expensive Calculation</h2>\n          {calculation}\n        </div>\n      </div>\n    );\n  };\n  \n  const expensiveCalculation = (num:number) => {\n    console.log(\"Calculating...\");\n    for (let i = 0; i < 1000000000; i++) {\n      num += 1;\n    }\n    return num;\n}\n","import React, { memo  } from 'react';\n\ntype TodosProps={\n    todos:string[],\n    addTodo:() => any;\n}\nconst Todos2: React.FC<TodosProps>  = ( {todos, addTodo} ) => {\n    console.log(\"child render\");\n    return (\n      <div>\n        ---------------------------------------\n        <br/>\n        <h2>My Todos</h2>\n        {todos.map((todo, index) => {\n          return <p key={index}>{todo}</p>;\n        })}\n         <button onClick={addTodo}>Add Todo</button>\n      </div>\n    );\n};\n\nexport default memo(Todos2);\n","import { useState, useEffect } from \"react\";\n\nconst useFetch = (url: string): any => {\n    const [data, setData] = useState([]);\n    useEffect(() => {\n        fetch(url).then(\n            (res) => res.json()\n        ).then((data) => setData(data));\n    }, [url]);\n    return data;\n};\n\nexport default useFetch;"],"names":["ActorAdapter","DEFAULT_HOST","ENV","host","Default","IC_HOST","App","useCyclesMintingCanisterInit","usePlugInit","usePriceInit","useSwapCanisterInit","useLiquidityViewInit","useBlockHeightsInit","useTokenLogosFetcherInit","useNetworkErrorNotifications","loadsupportedTokenList","BrowserRouter","basename","Layout","NotificationManager","TermsAndConditionsModal","TokenSelectModal","AllowanceVerifyModal","MintManualModal","SwapProgressModal","SwapFailModal","WithdrawProgressModal","DepositProgressModal","AddLiquidityProgressModal","AddLiquidityFailModal","RemoveLiquidityProgressModal","RemoveLiquidityFailModal","WithdrawWICPProgressModal","WithdrawWICPFailModal","MintXTCProgressModal","MintXTCFailModal","MintWICPProgressModal","MintWICPFailModal","Routes","Route","path","element","SwapView","MintView","AssetsListView","AssetsWithdrawView","AssetsDepositView","LiquidityListView","LiquidityAddView","ActivityListView","TestView","TestViewt1","TestViewt2","Navigate","to","AppUpdatedModal","isNotiOpen","AnalyticsApi","constructor","this","axios","create","baseURL","analyticsHost","method","transformRequest","data","serialize","transformResponse","deserialize","headers","async","request","principalId","pairId","response","operationName","query","variables","user","positionMetrics","JSONbig","strict","RosettaErrorType","Object","freeze","NotFound","Timeout","NetworkError","RosettaError","Error","message","status","super","errorType","Transaction","rosettaTransaction","blockIndex","hash","transaction_identifier","timestampMs","metadata","timestamp","div","toNumber","Date","operations","length","type","account1Address","account","address","amount","value","isZero","negated","account2Address","fee","memo","RosettaApi","process","env","REACT_APP_ROSETTA_BASE_URL","stringify","parse","networkIdentifier","networksList","then","res","network_identifiers","find","blockchain","accountAddress","accountBalanceByAddress","balances","error","isAxiosError","networkStatus","current_block_identifier","index","transactionHash","responseTransactions","transactionsByHash","transactions","transaction","block_identifier","undefined","limit","maxBlockIndex","offset","Math","max","transactionCount","min","i","push","getTransactionByBlock","transactionsByAccount","Promise","all","map","blockTransaction","reverse","blockByIndex","block","url","network_identifier","account_identifier","default","AssetProvider","useAssetContext","createContext","name","errorMessage","Asset","imageSources","questionMarkSrc","isLoading","props","bg","useColorModeValue","shadow","Flex","position","direction","borderRadius","alignItems","justifyContent","px","py","flexWrap","gap","AssetIconButton","ariaLabel","tooltipProps","SkeletonCircle","h","w","minW","isLoaded","Tooltip","label","IconButton","isRound","variant","AssetTitleBlock","title","subtitle","color","subtitleColor","Box","ml","Skeleton","mb","width","Heading","as","fontSize","fontWeight","openDelay","Text","textOverflow","whiteSpace","overflow","maxW","AssetImageBlock","swap","SwapImageBlock","lp","LPImageBlock","token","TokenImageBlock","src","Checkbox","checked","onClick","borderColor","cursor","height","border","Fade","in","Image","checkPlainSrc","DisplayValue","forwardRef","decimals","isUpdating","prefix","suffix","disableTooltip","shouldDivideByDecimals","textProps","ref","blinker","keyframes","formattedValue","tooltipAmount","isDisabled","useMemo","toBigNumber","applyDecimals","toString","dp","formatAmount","String","animation","Emoji","children","chakra","span","role","mt","transform","FeeBox","isDeposit","BigInt","opacity","display","FaArrowRight","flex","textAlign","mx","symbol","GradientBox","size","background","pt","sm","md","lg","Header","buttonText","onButtonClick","top","setTop","useState","paddingToLine","marginTop","backgroundColor","useHeaderResizeEffect","clientHeight","transition","zIndex","flexDirection","pb","Spinner","Button","colorScheme","Divider","boxSize","skeletonSize","alt","left","bottom","right","InformationBox","onClose","collapse","setCollapse","titleColor","Collapse","unmountOnExit","CloseButton","setTimeout","LogoBox","stackBg","Link","href","style","textDecoration","boxShadow","Stack","align","userSelect","Logo","viewBox","fill","xmlns","fillRule","clipRule","d","id","x1","y1","x2","y2","gradientUnits","stopColor","LPBreakdownPopoverItem","balance","justify","_last","HStack","minWidth","LPBreakdownPopover","sources","filteredSources","filter","source","Number","Popover","trigger","PopoverTrigger","PopoverContent","PopoverArrow","PopoverHeader","PopoverBody","NumberInput","placeholder","onChange","setValue","Input","outline","_placeholder","event","target","isNaN","SearchBar","search","setSearch","boxSizing","searchSrc","mr","inputValue","SlippageSettings","slippage","setSlippage","isAutoSlippage","setIsAutoSlippage","inputBorderColorDisabled","inputBorderColor","inputColorDisabled","inputColorEnabled","inputColor","yellowColor","redColor","messageColor","warningMessage","InputGroup","borderStyle","borderWidth","num","replace","onBlur","e","pr","pl","InputRightElement","spacing","Icon","FaExclamationTriangle","StackLine","StackItem","TokenBalancesPopoverItem","_balance","TokenBalancesPopover","TokenProvider","useTokenContext","Token","shouldGlow","htmlProps","tokenProps","borderGlow","borderNotGlow","backgroundGlow","backgroundNotGlow","TokenGlow","TokenContent","TokenDetailsButton","FaChevronDown","TokenDetailsLogo","tokenMetadata","logoSrc","logo","minH","TokenDetailsSymbol","TokenData","TokenDataPrice","priceImpact","isActive","parseFloat","price","Price","getByAmount","defaultColorActive","defaultColorInactive","defaultColor","priceImpactNumber","isPrice","TokenDataBalances","onMaxClick","totalTokenBalance","reduce","acc","current","shouldRenderMaxButton","getMaxValue","TokenInput","handleChange","useCallback","_value","nat","split","newValue","parseInt","includes","slice","activeColor","inactiveColor","TokenDataMetaInfo","tokenSymbol","tokenValue","tokenDecimals","tokenId","pageInfo","info","useTokenTaxCheck","calcPrice","taxInfo","netValue","toFixed","className","ViewHeader","onArrowBack","titleRightAdjustment","titleLeftAdjustment","borderTopRadius","borderBottomRadius","icon","FaArrowLeft","spin","CircleIcon","iconSrc","spinAnimation","bgDark","StepStatus","Disabled","bgLight","checkOpacity","Done","borderTop","greenCheckSrc","PlusIcon","NAVBAR_HEIGHT","FOOTER_HEIGHT","NAVIGATION_TABS","isConnected","usePlugStore","dispatch","useAppDispatch","location","useLocation","headerHeight","setHeaderHeight","currentTabIndex","findIndex","pathname","backgroundColorValue","useToken","colorMode","toggleColorMode","useColorMode","menuBg","menuShadow","Container","maxWidth","margin","p","nav","Tabs","TabList","Tab","ExternalLink","analyticsApp","FiArrowUpRight","PlugMenu","PlugButton","Menu","placement","MenuButton","FaEllipsisH","MenuList","isDarkModeEnabled","MenuItem","FaSun","FaMoon","modalsSliceActions","openMintManualModal","FaRedo","MenuDivider","twitter","rel","FaTwitter","discord","FaDiscord","medium","FaMedium","sonicDocs","FaBook","swapApiDocs","FaNetworkWired","footer","pointerEvents","version","Maintenance","m","verticalAlign","isAddLiquidityFailModalOpened","isAddLiquidityFailOpened","addLiquidityModalData","addLiquidityData","useModalsStore","callbacks","addLiquidityCallback","closeCallback","handleClose","closeAddLiquidityFailModal","TransactionFailedModal","isOpen","isCentered","isFullWidth","isAddLiquidityProgressModalOpened","steps","token1Symbol","token0Symbol","step","activeStep","getStepStatus","useStepStatus","TransactionProgressModal","closeAddLiquidityProgressModal","AddLiquidityModalDataStep","Getacnt","TransactionStep","chevron","CreatePair","plusSrc","Approve0","Deposit0","depositSrc","Approve1","Deposit1","AddLiquidity","dropSrc","isAllowanceVerifyModalOpened","allowanceModalData","_tokenSymbol","closeAllowanceVerifyModal","Active","appVer","localStorage","getItem","isModelOpen","setisModelOpen","useEffect","Modal","setItem","ModalOverlay","ModalContent","ModalCloseButton","ImportTokenImage","ImportToken","handleImport","understandRisk","setUnderstandRisk","redTriangleWarningSrc","isChecked","alignSelf","disabled","modalProps","ModalHeader","ModalBody","ModalFooter","rowGap","colorDisabled","colorEnabled","weight","FaChevronRight","my","TransactionType","DepositFailModal","isDepositFailModalOpened","depositModalData","retryCallback","closeDepositFailModal","isDepositProgressModalOpened","closeDepositProgressModal","DepositModalDataStep","Approve","Deposit","TOKEN_OPTIONS","useConst","MintTokenSymbol","WICP","XTC","mintManualModalOpened","mintManualBlockHeight","mintManualTokenSymbol","mintManualModalErrorMessage","addNotification","useNotificationStore","blockHeightErrorMessage","setBlockHeightErrorMessage","tokenErrorMessage","setTokenErrorMessage","handleMint","checkIfPlugProviderVersionCompatible","NotificationType","MintManual","getTime","PLUG_WALLET_WEBSITE_URL","resetModalData","setMintManualModalErrorMessage","closeMintManualModal","linkColor","activityTabURL","learnMoreURL","failedMintDocs","onSubmit","preventDefault","noValidate","borderBottom","FormControl","isRequired","isInvalid","Boolean","FormLabel","Select","setMintManualTokenSymbol","option","FormErrorMessage","onKeyDown","key","setMintManualBlockHeight","FormHelperText","leftIcon","FaRedoAlt","isMintWICPFailModalOpened","mintWICPModalData","closeMintWICPFailModal","isMintWICPProgressModalOpened","closeMintWICPProgressModal","MintModalDataStep","LedgerTransfer","withdrawSrc","Mint","swapSrc","isMintXTCFailModalOpened","isRemoveLiquidityFailOpened","mintXTCModalData","closeMintXTCFailModal","isMintXTCProgressModalOpened","closeMintXTCProgressModal","isRemoveLiquidityFailModalOpened","removeLiquidityModalData","closeRemoveLiquidityFailModal","isRemoveLiquidityProgressModalOpened","closeRemoveLiquidityProgressModal","RemoveLiquidityModalDataStep","RemoveLiquidity","Withdraw0","Withdraw1","isSwapFailModalOpened","swapModalData","withdrawCallback","closeSwapFailModal","isSwapProgressModalOpened","fromTokenSymbol","toTokenSymbol","closeSwapProgressModal","SwapModalDataStep","Swap","Withdraw","isTermsAndConditionsModalOpened","isOpened","termsAndConditionsModalData","successCallback","closeTermsAndConditionsModal","termsAndConditions","tokenSelectModalData","tokenSelectData","isTokenSelectModalModalOpened","isTokenSelectOpened","tokens","onSelect","selectedTokenIds","allowAddToken","addToken","setAddToken","importTokenData","setImportTokenData","parsedTokens","filteredList","setFilteredList","totalBalances","useBalances","filteredItems","lowerSearch","toLowerCase","handleTokenSelectClose","closeTokenSelectModal","emptyColor","scrollBehavior","_hover","arrowBackSrc","Array","TokenSelectItemSkeleton","TokenSelectItem","isSelected","FaHdd","tokenData","balancesState","isBalancesUpdating","FeatureState","Updating","nameColor","selectedStepIndex","indexOf","activeStepIndex","isWithdrawProgressModalOpened","withdrawModalData","closeWithdrawProgressModal","WithdrawModalDataStep","isWithdrawWICPFailModalOpened","withdrawWICPModalData","closeWithdrawWICPFailModal","isWithdrawWICPProgressModalOpened","closeWithdrawWICPProgressModal","WithdrawWICPModalDataStep","WithdrawWICP","state","isPlugPAPIExists","window","ic","plug","PlugState","Loading","colorDark","bgHoverDark","colorLight","bgHoverLight","bgHover","before","PlugLogo","content","Disconnected","plugActions","connect","NotInstalled","open","Connected","_disabled","_active","_before","socketColor","clipPath","stopOpacity","shortPrincipalId","desensitizationPrincipalId","copyToClipboard","FiCopy","disconnect","BiExit","PlugNotConnected","FaInbox","PATHS","All","Home","ROUTES","ERRORS","swapCanisterFee","SWAP_CANISTER_FEE","canistersPrincipalIDs","ledger","cyclesMinting","swapCapRoot","accountIDs","URLs","DISCORD_URL","TWITTER_URL","MEDIUM_URL","github","GITHUB_URL","TERMS_AND_CONDITIONS_URL","tokenRequestForm","TOKEN_REQUEST_FORM_URL","ledgerTransactions","LEDGER_TRANSACTIONS_URL","hiddenTokens","maintenanceMode","prorityOrder","getAppAssetsSources","plugCircleSrc","sonicCircleSrc","sonic","ICP_METADATA","totalSupply","icpSrc","tokenType","getICPTokenMetadata","LedgerIDL","factory","IDL","AccountIdentifier","ICPTs","Record","e8s","Nat64","AccountBalanceArgs","SubAccount","Vec","Nat8","BlockHeight","NotifyCanisterArgs","to_subaccount","Opt","from_subaccount","to_canister","Principal","max_fee","block_height","Memo","TimeStamp","timestamp_nanos","SendArgs","created_at_time","Service","account_balance_dfx","Func","notify_dfx","send_dfx","CyclesMintingIDL","IcpXdrConversionRate","xdr_permyriad_per_icp","timestamp_seconds","IcpXdrConversionRateCertifiedResponse","certificate","hash_tree","SetAuthorizedSubnetworkListArgs","who","subnets","TransactionNotification","from","CyclesResponse","Variant","Refunded","Tuple","CanisterCreated","ToppedUp","Null","Result","Ok","Err","get_average_icp_xdr_conversion_rate","get_icp_xdr_conversion_rate","set_authorized_subnetwork_list","transaction_notification","SwapStorageIDL","Operation__1","lpTransfer","lpApprove","withdraw","tokenTransfer","addLiquidity","createPair","deposit","removeLiquidity","lpTransferFrom","tokenTransferFrom","tokenApprove","Time","Int","Operation","TxRecord","op","Nat","amount0","amount1","caller","Status","memSize","storageId","cycles","start","Bucket","addRecords","getStatus","getTransaction","getTransactions","BucketInfoExt","bucketId","Status__1","recordsPerBucket","owner","txAmount","flushing","Bool","bufferSize","chunkSize","dswap","buckets","TxRecord__1","addRecord","flush","getBucket","getUserTransactionAmount","getUserTransactions","historySize","newBucket","setDSwapCanisterId","SwapIDL","TxReceipt","ok","err","TokenInfoExt","PairInfoExt","price0CumulativeLast","creator","reserve0","reserve1","lptoken","token0","token1","price1CumulativeLast","kLast","blockTimestampLast","TokenInfoWithType","SwapInfo","pairs","UserInfo","lpBalances","UserInfoPage","addAuth","addTokenTypes","addTokenWithType","allowance","approve","balanceOf","burn","depositTo","exportBalances","exportLPTokens","exportPairs","exportTokenTypes","exportTokens","getAllPairs","getHolders","getLPTokenId","getNumPairs","getPair","getPairs","getSupportedTokenList","getSupportedTokenListByName","getSupportedTokenListSome","getSwapInfo","getUserBalances","getUserInfo","getUserInfoAbove","getUserInfoByNamePageAbove","getUserLPBalances","getUserLPBalancesAbove","initateTransfer","initiateICRC1Transfer","logMessageClear","logMessageGet","removeAuth","setFeeForToken","setFeeOn","setFeeTo","setGlobalTokenFee","setMaxTokens","setOwner","setPairSupply","setPermissionless","swapExactTokensForTokens","swapTokensForExactTokens","transfer","transferFrom","updateAllTokenMetadata","updateTokenFees","updateTokenMetadata","withdrawTo","TokenIDL","DIP20","ICRC1","TxError","InsufficientAllowance","InsufficientBalance","ErrorOperationStyle","Unauthorized","LedgerTrap","ErrorTo","Other","BlockUsed","AmountTooSmall","Metadata","TokenInfo","holderNumber","deployTime","feeTo","getAllowanceSize","getBlockUsed","getMetadata","getTokenInfo","getUserApprovals","isBlockUsed","mint","setFee","setGenesis","setLogo","setName","YCfactory","GetTransactionsRequest","Account","subaccount","Burn","Transfer","kind","ArchivedTransactionRange","callback","GetTransactionsResponse","first_index","log_length","archived_transactions","HttpRequest","body","HttpResponse","status_code","Nat16","Value","Blob","StandardRecord","TransferArg","TransferError","GenericError","error_code","TemporarilyUnavailable","BadBurn","min_burn_amount","Duplicate","duplicate_of","BadFee","expected_fee","CreatedInFuture","ledger_time","TooOld","InsufficientFunds","get_transactions","http_request","icrc1_balance_of","icrc1_decimals","icrc1_fee","icrc1_metadata","icrc1_minting_account","icrc1_name","icrc1_supported_standards","icrc1_symbol","icrc1_total_supply","icrc1_transfer","XTCIDL","NotifyDfxFailed","UnexpectedCyclesResponse","InsufficientXTCFee","FetchRateFailed","TransactionId","BurnError","InvalidTokenContract","NotSufficientLiquidity","BurnResult","TransactionStatus","FAILED","SUCCEEDED","EventDetail","canister","CanisterCalled","method_name","TransferFrom","Event","EventsConnection","next_offset","next_canister_id","canisterCalled","canisterCreated","MintError","MintResult","Stats","transfers_count","mints_count","transfers_from_count","canisters_created_count","supply","burns_count","approvals_count","proxy_calls_count","history_events","TxReceiptLegacy","ResultCall","return","CreateResult","canister_id","ResultSend","events","get_map_block_used","get_transaction","halt","mint_by_icp","nameErc20","stats","transferErc20","wallet_balance","wallet_call","args","wallet_create_canister","controller","wallet_create_wallet","wallet_send","useAllPairs","useDispatch","allPairsState","allPairs","useSwapCanisterStore","useKeepSync","isRefreshing","swapCanisterActions","setAllPairsState","swapActor","getswapActor","setAllPairs","parseResponseAllPairs","Idle","AppLog","interval","directGetAllPairs","sonicBalances","icpBalance","tokenBalances","userLPBalancesState","getUserPositiveLPBalances","setUserLPBalancesState","fromText","setUserLPBalances","parseResponseUserLPBalances","getBalances","tokenInfo","tokenList","setBalancesState","tokenCanisterId","tokenFeeLen","roundBigInt","tokenBalance","getTokenBalance","fetchICPBalance","setICPBalance","parseAmount","setSonicBalances","setTokenBalances","sumBalances","entries","forEach","canisterId","notificationId","popNotification","totalBlockHeightsWICP","getFromStorage","LocalStorageKey","MintWICPUncompleteBlockHeights","totalBlockHeightsXTC","MintXTCUncompleteBlockHeights","blockHeightsXTC","blockHeightsWICP","totalLength","setMintWICPUncompleteBlockHeights","setMintXTCUncompleteBlockHeights","MINT_AUTO_NOTIFICATION_TITLES","NotificationState","MintAuto","resizeObserver","ResizeObserver","header","document","getElementById","observe","useNotificationEffect","notifications","timeout","supportedTokenListState","priceState","balanceState","useAppSelector","useQuery","get","URLSearchParams","delete","history","replaceState","useTokenAllowance","tokensAllowance","useAllowanceStore","validPrincipalId","now","expiration","allowanceActions","fetchAllowance","useTokenBalanceMemo","wallet","input","taxedValue","nonTaxedValue","tokenVal","sonicBalance","supportedTokenList","storageKey","tokenLogo","getTokenLogo","saveToStorage","useTokenSelectionChecker","id0","id1","targetId","isFirstIsSelected","isSecondIsSelected","isTokenSelected","useUserMetrics","setIsLoading","userLPMetrics","setUserLPMetrics","getUserLPMetrics","pairIds","getPairIdsFromPairList","analyticsApi","promises","queryUserLPMetrics","_userPairMetrics","resolve","debounce","KEEP_SYNC_DEFAULT_INTERVAL","userPairMetrics","getUserMetrics","Render","render","ColorModeScript","initialColorMode","theme","config","ChakraProvider","resetCSS","store","createAnonLedgerActor","createAnonymousActor","createSwapActor","createActor","createAnonSwapActor","createTokenActor","createAnonTokenActor","getCapRootInstance","CapRoot","init","page","capRoot","result","get_user_transactions","parseCapHistoryLog","values","time","details","aux","ADDRESS_TO_FILTER","getUserLedgerTransactions","accountId","rosetta","getTransactionsByAccount","isArray","t","ua","navigator","userAgent","isAndroid","isiOs","isMobile","exposeProviderWithWalletConnect","debug","requestConnect","checkIsConnected","getPrincipal","requestBalance","versions","provider","parseVersion","v","providerVersion","requiredVersion","setState","reject","principal","toText","clearTimeout","catch","setPrincipalId","BatchTransactions","handleRetry","Batch","State","onSuccess","handleTransactionSuccess","onFail","prevResponses","handleTransactionFail","Running","batchTransactionResolver","batchTransactionRejector","getState","responses","pop","finishPromise","retryResponse","nextTxArgs","resolved","firstTransaction","otherTransactions","txData","batchTransactions","getAmountDependsOnBalance","fromValue","getDepositTransactions","approveTx","depositTx","txNames","requiredAllowance","getTransactionName","blockHeight","removeBlockHeightFromStorage","localStorageKey","totalBlockHeights","userBlockHeights","newBlockHeights","_blockHeight","saveBlockHeightToStorage","prevMintWICPBlockHeight","updateFailedBlockHeight","failedBlockHeight","useAddLiquidityBatch","addLiquidityParams","pair","useLiquidityViewStore","deposit0Params","allowance0","deposit1Params","allowance1","createPairParams","approve0","deposit0","approve1","deposit1","getICRCAcnt","tx0complete","tx1complete","batchLoad","DepositBatch","batch","openBatchModal","token0Type","token1Type","token0Amt","token1Amt","intitICRCTokenDeposit","useApproveTransactionMemo","useDepositTransactionMemo","useICRCTransferMemo","tokenAcnt","useCreatePairTransactionMemo","useAddLiquidityTransactionMemo","TrxFull","_transactions","setAddLiquidityModalData","openAddLiquidityFailModal","openAddLiquidityProgressModal","keys","useBatch","batchFnUpdate","useDepositBatch","setDepositModalData","openDepositProgressModal","openDepositFailModal","getAcnt","useMintBatch","amountIn","amountOut","keepInSonic","useSwapViewStore","mintXTCUncompleteBlockHeights","mintWICPUncompleteBlockHeights","canisterPrincipalId","canisterAccountID","mintTransaction","openFailModal","getMintTransaction","mintTransactionData","handler","getMintXTCTransaction","uncompleteBlockHeights","setMintUncompleteBlockHeights","getMintWICPTransaction","setMintWICPModalData","openMintWICPProgressModal","openMintWICPFailModal","setMintXTCModalData","openMintXTCProgressModal","openMintXTCFailModal","depositParams","ledgerTransfer","useLedgerTransferTransactionMemo","toAccountId","setMintModalData","useMintMultipleBatch","blockHeights","setTransactions","updateTransactions","transactionName","getTransactionNames","useMintSingleBatch","useRemoveLiquidityBatch","removeLiquidityParams","withdraw0Params","amount0Min","withdraw1Params","amount1Min","useRemoveLiquidityTransactionMemo","withdraw0","useWithdrawTransactionMemo","withdraw1","setRemoveLiquidityModalData","openRemoveLiquidityProgressModal","openRemoveLiquidityFailModal","useSwapBatch","swapParams","navigate","useNavigate","entryVal","withdrawParams","useSwapExactTokensTransactionMemo","amountOutMin","setSwapModalData","openSwapProgressModal","openSwapFailModal","execute","reqAmt","useWithdrawBatch","withdrawMemo","openWithdrawFailModal","setWithdrawModalData","openWithdrawProgressModal","useWithdrawWICPBatch","withdrawWICP","useWithdrawWICPTransactionMemo","setWithdrawWICPModalData","openWithdrawWICPProgressModal","openWithdrawWICPFailModal","parsedAmount","toApproveAmount","idl","methodName","JSON","setData","actor","canId","subacc","useICRCDepositMemo","tokenTrx","settokenTrxData","getTokenActor","fromHexString","resp","token0Value","token1Value","_temp","substring","amount0Desired","amount1Desired","getAmountMin","currentTime","lpAmount","round","options","argBlockHeight","outAmountMin","paths","useSwapForExactTokensTransactionMemo","amountInMin","DefaultHookState","setError","states","newBatch","transactionsList","txSuccessResponse","prevRes","handleError","useMintErrorHandler","isBlockUsedError","isUnauthorizedError","isOtherError","isOperationStyleError","isErrorToError","isAmountToSmallError","errorText","removeLastProcessedTransaction","prevMintBlockHeightData","newBlockHeightData","_","AddLiquidityNotificationContent","liquidityViewStore","batchData","handleStateChange","handleOpenModal","setAllowanceVerifyModalData","openAllowanceVerifyModal","clearAddLiquidityModalData","Success","transactionLink","finally","DepositNotificationContent","depositViewStore","useDepositViewStore","selectedToken","clearDepositModalData","Pending","MintAutoNotificationContent","setSteps","setStep","handleMintError","doneStepColor","activeStepColor","disabledStepColor","setNotificationData","removeFromStorage","transactionNames","_step","stepStatus","isDoneStep","isActiveStep","isDisabledStep","stepColor","stepLabel","MintManualNotificationContent","MintWICPNotificationContent","swapViewStore","MintXTCNotificationContent","RemoveLiquidityNotificationContent","userLPBalances","removeLiquidityBatchParams","removeAmountPercentage","multipliedBy","dividedBy","clearRemoveLiquidityModalData","SwapNotificationContent","clearSwapModalData","TransactionNotificationContent","NavLink","WithdrawNotificationContent","useWithdrawViewStore","clearWithdrawModalData","WithdrawWICPNotificationContent","getAccountId","NotificationBox","notification","show","setShow","animateOpacity","NotificationHeader","NotificationContent","NotificationTimer","notificationContent","MintWICP","MintXTC","ErrorNotificationType","NotificationIcon","errorNode","redWarningSrc","pendingNode","successNode","transparentGreenCheckSrc","n","shouldShowCloseButton","closeSrc","errorBody","hasOwnProperty","reduceWidth","collapseAnimation","onAnimationEnd","initialState","CAPstate","LedgerState","activityList","lastPage","fetchedPages","activityViewSlice","createSlice","reducers","setCAPState","action","payload","setLedgerState","setTokenList","setPage","setLedgerTransactions","pushActivityList","toFilterTransactions","cur","dateString","toDateString","alreadyAdded","Set","item","has","add","sort","a","b","timeA","setLastPage","pushFetchedPages","clearActivityList","activityViewActions","actions","selectActivityViewState","activityView","reducer","useActivityViewStore","useActivityView","parseResponseTokenList","getUserTransactionsPage","_principalId","_page","allowanceSlice","setAllowance","clearAllowance","rest","selectAllowanceState","createAsyncThunk","getTokenAllowance","isBannerOpened","AssetsBannerDisabled","assetsViewSlice","setIsBannerOpened","assetsViewActions","selectAssetsViewState","assetsView","selectWithdrawViewState","ICPXDRconversionRate","ICPXDRconversionRateState","cyclesMintingCanisterSlice","setICPXDRConversionRate","setICPXDRConversionRateState","cyclesMintingCanisterSliceActions","selectCyclesMintingCanisterState","DEFAULT_CYCLES_PER_XDR","TOKEN_SUBDIVIDABLE_BY","useCyclesMintingCanisterStore","getICPXDRConversionRate","fetchICP2XDRConversionRate","conversionRate","depositViewSlice","setAmount","setTokenId","depositViewActions","selectDepositViewState","depositView","keepSyncSlice","timers","clearInterval","setInterval","keepSync","setCallback","keepSyncActions","selectKeepSyncState","runner","_interval","INITIAL_LIQUIDITY_SLIPPAGE","LiquidityBannerDisabled","pairState","liquidityViewSlice","setPairState","setRemoveAmountPercentage","setKeepInSonic","setToken","setPair","liquidityViewActions","selectLiquidityViewState","liquidityView","localPair","initialMintXTCModalData","initialMintWICPModalData","initialWithdrawWICPModalData","initialSwapModalData","initialDepositModalData","initialWithdrawModalData","initialAddLiquidityModalData","initialRemoveLiquidityModalData","initialTokenSelectData","isWithdrawFailModalOpened","isRemoveLiquidityModalOpened","modalsSlice","clearMintXTCModalData","addMintXTCUncompleteBlockHeight","clearMintWICPModalData","addMintWICPUncompleteBlockHeight","clearWithdrawWICPModalData","closeWithdrawFailModal","openTokenSelectModal","clearTokenSelectModalData","setTokenSelectModalData","openRemoveLiquidityModal","closeRemoveLiquidityModal","openTermsAndConditionsModal","setTermsAndConditionsModalData","selectModalsState","modals","useTokenModalOpener","notificationSlice","notificationIndex","newNotifications","popId","filteredNotifications","obj","setNotificationSliceState","selectNotificationState","setNotificationState","plugSlice","tknList","accountChangeCallback","newPrincipalId","warn","whitelist","onConnectionUpdate","sessionData","clear","reload","selectPlugState","icpPrice","priceSlice","setPrice","priceActions","selectPriceState","usePriceStore","_getICPPrice","supportedTokenListWithPrices","tokenPrice","wicpToTokenPair","wicpDecimals","wicpReserve","tokenReserve","setSupportedTokenList","fetchICPPrice","swapCanisterSlice","setSupportedTokensListState","parsedBalances","selectSwapCanisterState","plugState","loadAction","parseResponseSupportedTokenList","toJson","INITIAL_SWAP_SLIPPAGE","baseFromTokenPaths","baseToTokenPaths","swapViewSlice","reset","oppositeMetadata","oppositeDataKey","getTokenPaths","getAmountOutFromPath","capitalize","switchTokens","dataKey","isICPToWICPPair","isWICPToICPPair","isWICPAndICPPair","oppositeTokenPaths","oppositeValue","tokenPaths","tempMetadata","baseFromPaths","baseToPaths","swapViewActions","selectSwapViewState","swapView","x","getAmountOut","decimalsIn","decimalsOut","reserveIn","reserveOut","getTokenPath","useSwapView","isPairLoaded","setIsPairLoad","tokenListTemp","ICP","setInitToken","temp","isICPSelected","isWICPSelected","fromTokenOptions","toTokenOptions","wicpTokenMetadata","xtcTokenMetadata","toTokenPathsIds","icpToken","unshift","useAssetsViewStore","withdrawViewSlice","withdrawViewActions","withdrawView","useSelector","configureStore","middleware","getDefaultMiddleware","serializableCheck","variantGhost","c","mode","darkHoverBg","transparentize","darkActiveBg","accessibleColorMap","yellow","hoverBg","activeBg","cyan","variantSolid","variants","ghost","solid","link","padding","lineHeight","gradient","colors","unstyled","baseStyle","transitionProperty","transitionDuration","_focus","sizes","xs","defaultProps","rounded","baseStyleList","baseStyleItem","transitionTimingFunction","_expanded","baseStyleGroupTitle","baseStyleCommand","baseStyleDivider","baseStyleButton","parts","button","list","groupTitle","command","divider","baseStyleOverlay","baseStyleDialogContainer","baseStyleDialog","maxH","baseStyleHeader","borderBottomWidth","baseStyleCloseButton","insetEnd","baseStyleBody","baseStyleFooter","getSize","dialog","xl","full","overlay","dialogContainer","closeButton","$popperBg","cssVar","$arrowBg","$arrowShadowColor","baseStylePopper","baseStyleContent","variable","reference","borderTopWidth","popper","baseStyleRoot","orientation","baseStyleTab","isFitted","baseStyleTablist","end","center","baseStyleTabpanel","line","borderProp","tablist","tab","_selected","enclosed","borderBottomColor","_notLast","marginEnd","borderTopColor","getColor","root","tabpanel","gray","black","darkBlue","custom","app","dark","light","appTheme","styles","global","html","fonts","heading","useSystemColorMode","modalHeight","components","extendTheme","firstLength","lastLength","a1","a2","tempTkn","order","parseResponsePair","resultPair","tokenIds","token0Id","token1Id","tokenListObj","artemis","plugStat","el","returnType","isAnnon","getCanisterActor","tokenActor","prin","toHexString","byteArray","byte","join","hex","substr","bytes","static","EXPONENTIAL_AT","val","fixedVal","str","parseUnits","actualDecimals","roundOfdecimals","ad","roundedNumber","floor","tmp","formatValue","formatUnits","ethers","BigNumber","getValueWithoutFees","numberOfFees","_feesAmount","minus","times","isNegative","charAt","toUpperCase","pairList","idsSet","paired","timer","fn","awaitTime","ACCOUNT_DOMAIN_SEPERATOR","ledgerActor","statusText","subAccount","sha","algo","SHA224","update","byteArrayToWordArray","toUint8Array","SUB_ACCOUNT_ZERO","Buffer","alloc","subBuffer","writeUInt32BE","finalize","wordArrayToByteArray","generateChecksum","wordArray","lib","WordArray","wordToByteArray","word","sigBytes","words","concat","intToHex","crc","unsigned","padStart","serializedValue","removeItem","console","IDENTIFIER","createLabel","text","clipboard","writeText","AddLiquidityActivity","_token0","_token1","toLocaleTimeString","FaPlus","DepositActivity","getTokenByAddress","findToken","tokenPrincipal","LedgerTransactionActivity","ledgerTransaction","FaCube","LoadingActivity","RemoveLiquidityActivity","SwapActivity","fromToken","toToken","WithdrawActivity","scrollHandler","scrollY","innerHeight","offsetHeight","addEventListener","removeEventListener","overflowX","css","dateA","dateB","date","Fragment","renderActivity","Activity","operation","openSelectTokenModal","selectedTokenMetadata","handleSelectTokenId","buttonDisabled","buttonMessage","parsedFromValue","fromQueryValue","tokenListMetadata","autoFocus","getAssetPriceByBalance","notEmptyTokenList","supportedTokenListWithICP","isTokenListPresent","assetsDetailsTextColor","headerColor","getCanWithdraw","getCanDeposit","FaMinus","FaInfoCircle","isReviewing","setIsReviewing","autoSlippage","setAutoSlippage","handleTokenMaxClick","token0Balance","token1Balance","maxValue","setInAndOutTokenValues","lockedPairsList","handleSelectToken","excludeToken","foundPair","customTokenList","foundToken","needAsNetValue","convertToken","fromAmount","lpValue","Liquidity","getOppositeAmount","parsedLPValue","reversedDataKey","gt","startsWith","minimalAmount","token0Allowance","token1Allowance","isPriceUpdating","parsedToken0Value","parsedToken1Value","selectedIds","fee0","fee1","price0","price1","shareOfPool","liquidityAmount","useAddLiquidityMemo","token0Sources","useTokenSourceMemo","token1Sources","menuListShadow","menuListBg","iconBorderColor","textColor","FaCog","Center","FaEquals","PairedUserLPToken","totalShares","userShares","balance0","balance1","pairMetrics","handleAdd","handleRemove","isMetricsLoading","isLPBalanceLoading","successColor","userLPValue","getUserPositionValue","decimals0","decimals1","gridGap","fees","RemoveLiquidityModalAsset","balancePrice","PERCENTAGE_PRESETS","RemoveLiquidityModal","handleModalClose","handleSliderChange","lpBalance","getTokenBalances","isAmountIsLow","AMOUNT_TOO_LOW_LABEL","tokensLPBalance","checkboxColorKeepInSonic","checkboxColorNotKeepInSonic","checkboxColor","NaN","Slider","focusThumbOnChange","SliderTrack","SliderFilledTrack","SliderThumb","SimpleGrid","columns","preset","FaArrowDown","dir","getShareOfPoolString","params","percentage","getShareOfPool","isEqualTo","isLessThanOrEqualTo","getPosition","PAIR_DECIMALS","InformationDescription","_visited","moveToAddLiquidityView","handleOpenRemoveLiquidityModal","isUserLPBalancesUpdating","pairedUserLPTokens","lpBalancesPairIDs","existentPairs","tokenId0","pairedList","tokenId1","msOverflowStyle","scrollbarWidth","userLPToken","ChainPopover","isChained","FaLink","ExchangeBox","isFromTokenIsICP","isToTokenIsICP","isFromTokenIsWICP","isToTokenIsWICP","isFromTokenIsXTC","isToTokenIsXTC","depositFee","withdrawFee","icpMetadata","feeSymbol","xtcMetadata","icpFeeInXTC","getXTCValueByXDRRate","xtcFees","plus","wicpFee","pathAmountOut","getAmountOutRatio","getSwapAmountOutMin","hasDeposit","hasWithdraw","Portal","OperationType","KEEP_IN_SONIC_LINK","KeepInSonicBox","canHeldInSonic","popoverLabel","SwapSubTab","tabname","SwapStep","useSwapViewData","lastChangedInputDataKey","setLastChangedInputDataKey","isXTCSelected","fromBalance","toBalance","resetViewState","resetStepToHome","Review","handleChangeValue","handleSetValue","handleICPToWICPChange","_newValue","icpFee","handleICPToXTCChange","getICPValueByXDRRate","xtcFee","icpFeesConvertedToXTC","rateBasedAmount","resultAmount","handleICPToTokenChange","oppositeData","wrappedICPMetadata","dataWICP","checkIsPlugProviderVersionCompatible","handleMintXTC","handleMintWICP","handleWithdrawWICP","handleApproveSwap","isFetchingNotStarted","NotStarted","isButtonDisabled","handleButtonClick","headerTitle","getPriceImpact","priceIn","priceOut","isSelectTokenButtonDisabled","selectTokenButtonText","fromSources","toSources","isExplanationTooltipVisible","currentOperation","Wrap","tokenFromId","tokenToId","onMenuClose","onSetSlippage","onSetIsAutoSlippage","onChangeValue","onSelectToken","oppositeTokenId","onSwitchTokens","swapPlacementButtonBg","tabIndex","_amount","_conversionRate","_defaultCyclesPerXDR","_subdividableBy","tokenIn","tokenOut","toValue","ratio","UserContext","initialTodos","complete","todo","Todos","todos","useReducer","handleComplete","setInputValue","previousInputValue","useRef","Component1","setUser","Provider","number","Component2","Component3","useContext","Component4","Component5","Timer","count","setCount","App2","setTodos","increment","addTodo","calculation","log","expensiveCalculation","setColor","fetch","json"],"sourceRoot":""}