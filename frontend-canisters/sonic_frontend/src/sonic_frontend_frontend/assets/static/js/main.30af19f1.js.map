{"version":3,"file":"static/js/main.30af19f1.js","mappings":"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","sources":["webpack://sonic-app/./src/App.tsx","webpack://sonic-app/./src/apis/analytics.ts","webpack://sonic-app/./src/apis/index.ts","webpack://sonic-app/./src/apis/rosetta.ts","webpack://sonic-app/./src/assets/index.tsx","webpack://sonic-app/./src/components/core/asset/asset.tsx","webpack://sonic-app/./src/components/core/asset/index.ts","webpack://sonic-app/./src/components/core/check-box/check-box.tsx","webpack://sonic-app/./src/components/core/check-box/index.ts","webpack://sonic-app/./src/components/core/display-value/display-value.tsx","webpack://sonic-app/./src/components/core/display-value/index.ts","webpack://sonic-app/./src/components/core/emoji/emoji.tsx","webpack://sonic-app/./src/components/core/emoji/index.ts","webpack://sonic-app/./src/components/core/fee-box/fee-box.tsx","webpack://sonic-app/./src/components/core/fee-box/index.ts","webpack://sonic-app/./src/components/core/gradient-box/gradient-box.tsx","webpack://sonic-app/./src/components/core/gradient-box/index.ts","webpack://sonic-app/./src/components/core/header/header.tsx","webpack://sonic-app/./src/components/core/header/index.ts","webpack://sonic-app/./src/components/core/image-block/index.ts","webpack://sonic-app/./src/components/core/image-block/lp-image-block.tsx","webpack://sonic-app/./src/components/core/image-block/swap-image-block.tsx","webpack://sonic-app/./src/components/core/image-block/token-image-block.tsx","webpack://sonic-app/./src/components/core/index.ts","webpack://sonic-app/./src/components/core/information-box/index.ts","webpack://sonic-app/./src/components/core/information-box/information-box.tsx","webpack://sonic-app/./src/components/core/logo-box/index.ts","webpack://sonic-app/./src/components/core/logo-box/logo-box.tsx","webpack://sonic-app/./src/components/core/logo/index.ts","webpack://sonic-app/./src/components/core/logo/logo.tsx","webpack://sonic-app/./src/components/core/lp-breakdown-popover/index.ts","webpack://sonic-app/./src/components/core/lp-breakdown-popover/lp-breakdown-popover-item.tsx","webpack://sonic-app/./src/components/core/lp-breakdown-popover/lp-breakdown-popover.tsx","webpack://sonic-app/./src/components/core/number-input/index.ts","webpack://sonic-app/./src/components/core/number-input/number-input.tsx","webpack://sonic-app/./src/components/core/search-bar/index.ts","webpack://sonic-app/./src/components/core/search-bar/search-bar.tsx","webpack://sonic-app/./src/components/core/slippage-settings/index.ts","webpack://sonic-app/./src/components/core/slippage-settings/slippage-settings.tsx","webpack://sonic-app/./src/components/core/stack-line/index.ts","webpack://sonic-app/./src/components/core/stack-line/stack-line.tsx","webpack://sonic-app/./src/components/core/token-balances-popover/index.ts","webpack://sonic-app/./src/components/core/token-balances-popover/token-balances-popover-item.tsx","webpack://sonic-app/./src/components/core/token-balances-popover/token-balances-popover.tsx","webpack://sonic-app/./src/components/core/token/index.ts","webpack://sonic-app/./src/components/core/token/token.tsx","webpack://sonic-app/./src/components/core/token/tokenCreditinfo.tsx","webpack://sonic-app/./src/components/core/view-header/index.ts","webpack://sonic-app/./src/components/core/view-header/view-header.tsx","webpack://sonic-app/./src/components/icons/circle-icon/circle-icon.tsx","webpack://sonic-app/./src/components/icons/circle-icon/index.ts","webpack://sonic-app/./src/components/icons/index.ts","webpack://sonic-app/./src/components/icons/plus/index.ts","webpack://sonic-app/./src/components/icons/plus/plus-icon.tsx","webpack://sonic-app/./src/components/index.ts","webpack://sonic-app/./src/components/layout/index.ts","webpack://sonic-app/./src/components/layout/layout.constants.tsx","webpack://sonic-app/./src/components/layout/layout.tsx","webpack://sonic-app/./src/components/maintenance/index.ts","webpack://sonic-app/./src/components/maintenance/maintenance.tsx","webpack://sonic-app/./src/components/modals/add-liquidity-fail-modal.tsx","webpack://sonic-app/./src/components/modals/add-liquidity-progress-modal.tsx","webpack://sonic-app/./src/components/modals/allowance-verify-modal.tsx","webpack://sonic-app/./src/components/modals/app-Updated.tsx","webpack://sonic-app/./src/components/modals/components/import-token/import-token-image.tsx","webpack://sonic-app/./src/components/modals/components/import-token/import-token.tsx","webpack://sonic-app/./src/components/modals/components/import-token/index.ts","webpack://sonic-app/./src/components/modals/components/index.ts","webpack://sonic-app/./src/components/modals/components/transaction/index.ts","webpack://sonic-app/./src/components/modals/components/transaction/transaction-failed-modal-content.tsx","webpack://sonic-app/./src/components/modals/components/transaction/transaction-progress-modal-content.tsx","webpack://sonic-app/./src/components/modals/components/transaction/transaction-step.tsx","webpack://sonic-app/./src/components/modals/components/transaction/transaction.utils.ts","webpack://sonic-app/./src/components/modals/deposit-fail-modal.tsx","webpack://sonic-app/./src/components/modals/deposit-info.tsx","webpack://sonic-app/./src/components/modals/deposit-progress-modal.tsx","webpack://sonic-app/./src/components/modals/index.ts","webpack://sonic-app/./src/components/modals/mint-manual-modal.tsx","webpack://sonic-app/./src/components/modals/mint-wicp-fail-modal.tsx","webpack://sonic-app/./src/components/modals/mint-wicp-progress-modal.tsx","webpack://sonic-app/./src/components/modals/mint-xtc-fail-modal.tsx","webpack://sonic-app/./src/components/modals/mint-xtc-progress-modal.tsx","webpack://sonic-app/./src/components/modals/remove-liquidity-fail-modal.tsx","webpack://sonic-app/./src/components/modals/remove-liquidity-progress-modal.tsx","webpack://sonic-app/./src/components/modals/retryDeposit.tsx","webpack://sonic-app/./src/components/modals/swap-fail-modal.tsx","webpack://sonic-app/./src/components/modals/swap-progress-modal.tsx","webpack://sonic-app/./src/components/modals/terms-and-conditions-modal.tsx","webpack://sonic-app/./src/components/modals/token-select-modal.tsx","webpack://sonic-app/./src/components/modals/transfer-progress-modal.tsx","webpack://sonic-app/./src/components/modals/use-step-status.ts","webpack://sonic-app/./src/components/modals/wallet-list.tsx","webpack://sonic-app/./src/components/modals/withdraw-progress-modal.tsx","webpack://sonic-app/./src/components/modals/withdraw-wicp-fail-modal.tsx","webpack://sonic-app/./src/components/modals/withdraw-wicp-progress-modal.tsx","webpack://sonic-app/./src/components/wallet/index.ts","webpack://sonic-app/./src/components/wallet/wallet-menu.tsx","webpack://sonic-app/./src/components/wallet/wallet-not-connected.tsx","webpack://sonic-app/./src/components/wallet/walletbutton.tsx","webpack://sonic-app/./src/config/constants.ts","webpack://sonic-app/./src/config/env.ts","webpack://sonic-app/./src/config/index.ts","webpack://sonic-app/./src/config/utils.ts","webpack://sonic-app/./src/constants/index.ts","webpack://sonic-app/./src/constants/token.ts","webpack://sonic-app/./src/did/dfinity/index.ts","webpack://sonic-app/./src/did/dfinity/ledger.did.ts","webpack://sonic-app/./src/did/index.ts","webpack://sonic-app/./src/did/sonic/capCanReg.did.ts","webpack://sonic-app/./src/did/sonic/cycles-minting.did.ts","webpack://sonic-app/./src/did/sonic/index.ts","webpack://sonic-app/./src/did/sonic/swap.did.ts","webpack://sonic-app/./src/did/sonic/token.did.ts","webpack://sonic-app/./src/did/sonic/xtc.did.ts","webpack://sonic-app/./src/hooks/index.ts","webpack://sonic-app/./src/hooks/use-all-pairs.ts","webpack://sonic-app/./src/hooks/use-balances.ts","webpack://sonic-app/./src/hooks/use-block-heights-init.ts","webpack://sonic-app/./src/hooks/use-header-resize-effect.ts","webpack://sonic-app/./src/hooks/use-network-error-notifications.ts","webpack://sonic-app/./src/hooks/use-query.ts","webpack://sonic-app/./src/hooks/use-token-allowance.ts","webpack://sonic-app/./src/hooks/use-token-balance.ts","webpack://sonic-app/./src/hooks/use-token-fee.ts","webpack://sonic-app/./src/hooks/use-token-logos-fetcher-init.ts","webpack://sonic-app/./src/hooks/use-token-selection-detector.ts","webpack://sonic-app/./src/hooks/use-user-metrics.ts","webpack://sonic-app/./src/index.tsx","webpack://sonic-app/./src/integrations/artemis/index.ts","webpack://sonic-app/./src/integrations/artemis/walletInit.ts","webpack://sonic-app/./src/integrations/cap/connection.ts","webpack://sonic-app/./src/integrations/cap/features/get-user-transactions.ts","webpack://sonic-app/./src/integrations/cap/features/index.ts","webpack://sonic-app/./src/integrations/cap/index.ts","webpack://sonic-app/./src/integrations/cap/utils.ts","webpack://sonic-app/./src/integrations/ledger/index.ts","webpack://sonic-app/./src/integrations/ledger/ledger-transactions.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/batch.utils.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/index.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-add-liquidity-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-deposit-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-mint-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-mint-multiple-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-mint-single-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-remove-liquidity-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-swap-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-transfer-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-withdraw-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/batch/use-withdraw-wicp-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/index.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/approve.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/create-pair.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/deposit.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/icrcTransfer.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/index.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/ledger-transfer.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/liquidity.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/mint-wicp.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/mint-xtc.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/swap.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/transfer.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/withdraw-wicp.ts","webpack://sonic-app/./src/integrations/transactions/hooks/transactions/withdraw.ts","webpack://sonic-app/./src/integrations/transactions/hooks/use-batch.ts","webpack://sonic-app/./src/integrations/transactions/hooks/use-mint-error-handler.ts","webpack://sonic-app/./src/integrations/transactions/index.ts","webpack://sonic-app/./src/integrations/transactions/models/batch.ts","webpack://sonic-app/./src/integrations/transactions/models/index.ts","webpack://sonic-app/./src/integrations/transactions/models/transactions/index.ts","webpack://sonic-app/./src/notifications/components/add-liquidity-notification-content.tsx","webpack://sonic-app/./src/notifications/components/deposit-notification-content.tsx","webpack://sonic-app/./src/notifications/components/index.ts","webpack://sonic-app/./src/notifications/components/mint-auto-notification-content.tsx","webpack://sonic-app/./src/notifications/components/mint-manual-notification-content.tsx","webpack://sonic-app/./src/notifications/components/mint-wicp-notification-content.tsx","webpack://sonic-app/./src/notifications/components/mint-xtc-notification-content.tsx","webpack://sonic-app/./src/notifications/components/remove-liquidity-notifcation-content.tsx","webpack://sonic-app/./src/notifications/components/swap-notification-content.tsx","webpack://sonic-app/./src/notifications/components/transaction-notification-content.tsx","webpack://sonic-app/./src/notifications/components/transfer-notification-content.tsx","webpack://sonic-app/./src/notifications/components/withdraw-notification-content.tsx","webpack://sonic-app/./src/notifications/components/withdraw-wicp-notification-content.tsx","webpack://sonic-app/./src/notifications/index.ts","webpack://sonic-app/./src/notifications/notification-box.tsx","webpack://sonic-app/./src/notifications/notification-content.tsx","webpack://sonic-app/./src/notifications/notification-errors.tsx","webpack://sonic-app/./src/notifications/notification-header.tsx","webpack://sonic-app/./src/notifications/notification-manager.tsx","webpack://sonic-app/./src/notifications/notification-timer.tsx","webpack://sonic-app/./src/store/features/activity-view/activity-view-slice.ts","webpack://sonic-app/./src/store/features/activity-view/index.ts","webpack://sonic-app/./src/store/features/activity-view/use-activity-view-store.ts","webpack://sonic-app/./src/store/features/activity-view/use-activity-view.ts","webpack://sonic-app/./src/store/features/allowance/allowance-slice.ts","webpack://sonic-app/./src/store/features/allowance/async-thunk/fetch-allowance.ts","webpack://sonic-app/./src/store/features/allowance/async-thunk/index.ts","webpack://sonic-app/./src/store/features/allowance/index.ts","webpack://sonic-app/./src/store/features/assets-view/assets-view-slice.ts","webpack://sonic-app/./src/store/features/assets-view/index.ts","webpack://sonic-app/./src/store/features/assets-view/use-assets-view-store.ts","webpack://sonic-app/./src/store/features/cycles-minting-canister/cycles-minting-canister-slice.ts","webpack://sonic-app/./src/store/features/cycles-minting-canister/cycles-minting-canister.constants.ts","webpack://sonic-app/./src/store/features/cycles-minting-canister/index.ts","webpack://sonic-app/./src/store/features/cycles-minting-canister/use-cycles-minting-canister-init.ts","webpack://sonic-app/./src/store/features/cycles-minting-canister/use-cycles-minting-canister-store.ts","webpack://sonic-app/./src/store/features/deposit-view/deposit-view-slice.ts","webpack://sonic-app/./src/store/features/deposit-view/index.ts","webpack://sonic-app/./src/store/features/deposit-view/use-deposit-view-store.ts","webpack://sonic-app/./src/store/features/dfinitywallet/index.ts","webpack://sonic-app/./src/store/features/dfinitywallet/wallet-slice.ts","webpack://sonic-app/./src/store/features/index.ts","webpack://sonic-app/./src/store/features/keep-sync/index.ts","webpack://sonic-app/./src/store/features/keep-sync/keep-sync-slice.ts","webpack://sonic-app/./src/store/features/keep-sync/use-keep-sync.ts","webpack://sonic-app/./src/store/features/liquidity-view/index.ts","webpack://sonic-app/./src/store/features/liquidity-view/liquidity-view-slice.ts","webpack://sonic-app/./src/store/features/liquidity-view/use-liquidity-view-init.ts","webpack://sonic-app/./src/store/features/liquidity-view/use-liquidity-view-store.ts","webpack://sonic-app/./src/store/features/modals/index.ts","webpack://sonic-app/./src/store/features/modals/modals-slice.ts","webpack://sonic-app/./src/store/features/modals/use-modals-store.ts","webpack://sonic-app/./src/store/features/modals/use-token-modal-opener.ts","webpack://sonic-app/./src/store/features/notification/index.ts","webpack://sonic-app/./src/store/features/notification/notification-slice.ts","webpack://sonic-app/./src/store/features/notification/use-notification-store.ts","webpack://sonic-app/./src/store/features/price/index.ts","webpack://sonic-app/./src/store/features/price/price-slice.ts","webpack://sonic-app/./src/store/features/price/use-price-init.ts","webpack://sonic-app/./src/store/features/price/use-price-store.ts","webpack://sonic-app/./src/store/features/swap-canister/index.ts","webpack://sonic-app/./src/store/features/swap-canister/swap-canister-slice.ts","webpack://sonic-app/./src/store/features/swap-canister/use-swap-canister-init.ts","webpack://sonic-app/./src/store/features/swap-canister/use-swap-canister-store.ts","webpack://sonic-app/./src/store/features/swap-view/index.ts","webpack://sonic-app/./src/store/features/swap-view/swap-view-slice.ts","webpack://sonic-app/./src/store/features/swap-view/use-swap-view-init.ts","webpack://sonic-app/./src/store/features/swap-view/use-swap-view-store.ts","webpack://sonic-app/./src/store/features/transfer-view/index.ts","webpack://sonic-app/./src/store/features/transfer-view/transfer-view-slice.ts","webpack://sonic-app/./src/store/features/transfer-view/use-transfer-view-store.ts","webpack://sonic-app/./src/store/features/withdraw-view/index.ts","webpack://sonic-app/./src/store/features/withdraw-view/use-withdraw-view-store.ts","webpack://sonic-app/./src/store/features/withdraw-view/withdraw-view-slice.ts","webpack://sonic-app/./src/store/hooks.ts","webpack://sonic-app/./src/store/index.ts","webpack://sonic-app/./src/store/models.ts","webpack://sonic-app/./src/store/store.ts","webpack://sonic-app/./src/theme/components/button.ts","webpack://sonic-app/./src/theme/components/close-button.ts","webpack://sonic-app/./src/theme/components/menu.ts","webpack://sonic-app/./src/theme/components/modal.ts","webpack://sonic-app/./src/theme/components/popover.ts","webpack://sonic-app/./src/theme/components/tabs.ts","webpack://sonic-app/./src/theme/foundations/colors.ts","webpack://sonic-app/./src/theme/foundations/index.ts","webpack://sonic-app/./src/theme/index.ts","webpack://sonic-app/./src/utils/canister.ts","webpack://sonic-app/./src/utils/canisterDriver.ts","webpack://sonic-app/./src/utils/external-link.ts","webpack://sonic-app/./src/utils/format.ts","webpack://sonic-app/./src/utils/function.ts","webpack://sonic-app/./src/utils/icp.ts","webpack://sonic-app/./src/utils/index.ts","webpack://sonic-app/./src/utils/local-storage.ts","webpack://sonic-app/./src/utils/log.ts","webpack://sonic-app/./src/utils/navigator.tsx","webpack://sonic-app/./src/views/activity/components/add-liquidity-activity.tsx","webpack://sonic-app/./src/views/activity/components/deposit-activity.tsx","webpack://sonic-app/./src/views/activity/components/index.ts","webpack://sonic-app/./src/views/activity/components/ledger-transaction-activity.tsx","webpack://sonic-app/./src/views/activity/components/loading-activity.tsx","webpack://sonic-app/./src/views/activity/components/remove-liquidity-activity.tsx","webpack://sonic-app/./src/views/activity/components/swap-activity.tsx","webpack://sonic-app/./src/views/activity/components/withdraw-activity.tsx","webpack://sonic-app/./src/views/activity/index.ts","webpack://sonic-app/./src/views/activity/list.tsx","webpack://sonic-app/./src/views/assets/deposit.tsx","webpack://sonic-app/./src/views/assets/index.ts","webpack://sonic-app/./src/views/assets/list.tsx","webpack://sonic-app/./src/views/assets/transfer.tsx","webpack://sonic-app/./src/views/assets/withdraw.tsx","webpack://sonic-app/./src/views/index.ts","webpack://sonic-app/./src/views/liquidity/add.tsx","webpack://sonic-app/./src/views/liquidity/components/index.ts","webpack://sonic-app/./src/views/liquidity/components/paired-user-lp-token.tsx","webpack://sonic-app/./src/views/liquidity/components/remove-liquidity-modal-asset.tsx","webpack://sonic-app/./src/views/liquidity/components/remove-liquidity-modal.tsx","webpack://sonic-app/./src/views/liquidity/index.ts","webpack://sonic-app/./src/views/liquidity/liquidity.utils.ts","webpack://sonic-app/./src/views/liquidity/list.tsx","webpack://sonic-app/./src/views/swap/components/chain-popover.tsx","webpack://sonic-app/./src/views/swap/components/exchange-box.tsx","webpack://sonic-app/./src/views/swap/components/index.ts","webpack://sonic-app/./src/views/swap/components/keep-in-sonic-box.tsx","webpack://sonic-app/./src/views/swap/components/topmenu.tsx","webpack://sonic-app/./src/views/swap/hooks/index.ts","webpack://sonic-app/./src/views/swap/hooks/use-swap-view-data.tsx","webpack://sonic-app/./src/views/swap/index.ts","webpack://sonic-app/./src/views/swap/mint.tsx","webpack://sonic-app/./src/views/swap/swap.tsx","webpack://sonic-app/./src/views/swap/swap.utils.ts","webpack://sonic-app/./src/views/test/index.ts","webpack://sonic-app/./src/views/test/test.tsx","webpack://sonic-app/./src/views/test/test2.tsx","webpack://sonic-app/./src/views/test/todos.tsx","webpack://sonic-app/./src/views/test/useFetch.ts"],"sourcesContent":["import { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom';\r\n\r\nimport { NotificationManager } from '@/notifications';\r\nimport { ActivityListView, AssetsDepositView, AssetsListView, AssetsWithdrawView, LiquidityAddView, LiquidityListView, SwapView , MintView  , AssetsTransferView} from '@/views';\r\n\r\nimport { TestView , TestViewt1 , TestViewt2}  from '@/views';\r\n\r\nimport { Layout } from './components';\r\nimport {\r\n  AddLiquidityFailModal, AddLiquidityProgressModal, AllowanceVerifyModal, DepositProgressModal, MintManualModal, MintWICPFailModal,\r\n  MintWICPProgressModal, MintXTCFailModal, MintXTCProgressModal, RemoveLiquidityFailModal, RemoveLiquidityProgressModal, SwapFailModal,\r\n  SwapProgressModal, TermsAndConditionsModal, TokenSelectModal, WithdrawProgressModal, WithdrawWICPFailModal, WithdrawWICPProgressModal,\r\n  WalletListModal, TransferProgressModal\r\n} from './components/modals';\r\n\r\nimport { useNetworkErrorNotifications, } from './hooks';\r\nimport { useBlockHeightsInit } from './hooks/use-block-heights-init';\r\n\r\nimport { useWalletInit } from '@/integrations/artemis'\r\n\r\nimport { useCyclesMintingCanisterInit, useLiquidityViewInit, usePriceInit, useSwapCanisterInit } from './store';\r\nimport {loadsupportedTokenList} from '@/utils'\r\n\r\nloadsupportedTokenList;\r\nexport const App = () => {\r\n  useCyclesMintingCanisterInit();\r\n  useWalletInit();\r\n  usePriceInit();\r\n  useSwapCanisterInit();\r\n  useLiquidityViewInit();\r\n  useBlockHeightsInit();\r\n  useNetworkErrorNotifications();\r\n  loadsupportedTokenList();\r\n  return (\r\n    <BrowserRouter basename=\"/\">\r\n      <Layout>\r\n        <WalletListModal/>\r\n        <NotificationManager />\r\n\r\n        <TermsAndConditionsModal />\r\n        <TokenSelectModal />\r\n        <AllowanceVerifyModal />\r\n        <MintManualModal />\r\n\r\n        <SwapProgressModal />\r\n        <SwapFailModal />\r\n\r\n        <WithdrawProgressModal />\r\n\r\n        <DepositProgressModal />\r\n\r\n        <TransferProgressModal />\r\n\r\n        <AddLiquidityProgressModal />\r\n        <AddLiquidityFailModal />\r\n\r\n        <RemoveLiquidityProgressModal />\r\n        <RemoveLiquidityFailModal />\r\n\r\n        <WithdrawWICPProgressModal />\r\n        <WithdrawWICPFailModal />\r\n\r\n        <MintXTCProgressModal />\r\n        <MintXTCFailModal />\r\n\r\n        <MintWICPProgressModal />\r\n        <MintWICPFailModal />\r\n\r\n        <Routes>\r\n          <Route path=\"/swap\" element={<SwapView />} />\r\n          <Route path=\"/swap/mint\" element={<MintView />} />\r\n          <Route path=\"/assets\" element={<AssetsListView />} />\r\n          <Route path=\"/assets/withdraw\" element={<AssetsWithdrawView />} />\r\n          <Route path=\"/assets/deposit\" element={<AssetsDepositView />} />\r\n          <Route path=\"/assets/transfer\" element={<AssetsTransferView />} />\r\n          <Route path=\"/liquidity\" element={<LiquidityListView />} />\r\n          <Route path=\"/liquidity/add\" element={<LiquidityAddView />} />\r\n          <Route path=\"/activity\" element={<ActivityListView />} />\r\n          <Route path=\"/test\" element={<TestView />} />\r\n          <Route path=\"/test/t1\" element={<TestViewt1 />} />\r\n          <Route path=\"/test/t2\" element={<TestViewt2 />} />\r\n          <Route path=\"*\" element={<Navigate to=\"/swap\" />} />\r\n        </Routes>\r\n      </Layout>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n","import { deserialize, serialize } from '@sonicdex/sonic-js';\r\nimport axios from 'axios';\r\n\r\nimport { ENV } from '@/config';\r\n\r\nexport class AnalyticsApi {\r\n  public axios;\r\n  constructor() {\r\n    this.axios = axios.create({\r\n      baseURL: ENV.analyticsHost,\r\n      method: 'post',\r\n      transformRequest: (data) => serialize(data),\r\n      transformResponse: (data) => deserialize(data),\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  }\r\n\r\n  async request<T = any>(data: AnalyticsApi.GraphqlQuery): Promise<T> {\r\n    return (await this.axios.request({ data: data })).data.data;\r\n  }\r\n\r\n  async queryUserLPMetrics( principalId: string, pairId?: string): Promise<AnalyticsApi.PositionMetrics> {\r\n    const response = await this.request<AnalyticsApi.UserLPMetricsQuery>({\r\n      operationName: null,\r\n      query: `\r\n            query {\r\n              user(id: \"${principalId}\") {\r\n                positionMetrics${pairId ? `(pairId: \"${pairId}\")` : ''} {\r\n                  impLoss,\r\n                  fees\r\n                }\r\n              }\r\n            }\r\n            `,\r\n      variables: {},\r\n    });\r\n    return response?.user?.positionMetrics;\r\n  }\r\n}\r\n\r\nexport namespace AnalyticsApi {\r\n  export interface GraphqlQuery {\r\n    operationName: string | null;\r\n    query: string;\r\n    variables: any;\r\n  }\r\n\r\n  export interface PositionMetrics {\r\n    impLoss: string;\r\n    fees: string;\r\n  }\r\n\r\n  export interface UserLPMetricsQuery {\r\n    user: {\r\n      positionMetrics: PositionMetrics;\r\n    };\r\n  }\r\n}\r\n","export * from './rosetta';\r\nexport * from './analytics';\r\n","/**\r\n * @file RosettaApi\r\n * @copyright Copyright (c) 2018-2021 Dylan Miller and dfinityexplorer contributors\r\n * @license MIT License\r\n */\r\n\r\nimport axios from 'axios';\r\nimport BigNumber from 'bignumber.js';\r\nimport jsonBigint from 'json-bigint';\r\n\r\n// Set useNativeBigInt to true and use BigInt once BigInt is widely supported.\r\nconst JSONbig = jsonBigint({ strict: true });\r\n\r\n/**\r\n * Types of Rosetta API errors.\r\n */\r\nexport const RosettaErrorType = Object.freeze({\r\n  NotFound: 0,\r\n  Timeout: 1,\r\n  NetworkError: 2,\r\n});\r\n\r\n/**\r\n * Describes the cause of a Rosetta API error.\r\n */\r\nexport class RosettaError extends Error {\r\n  /**\r\n   * Create a RosettaError.\r\n   * @param {String} message An error message describing the error.\r\n   * @param {Number} status number The HTTP response status.\r\n   */\r\n  public errorType;\r\n  constructor(message: string, status?: number | string) {\r\n    super(message);\r\n    switch (status) {\r\n      case 408:\r\n        this.errorType = RosettaErrorType.Timeout;\r\n        break;\r\n      case 500:\r\n        this.errorType = RosettaErrorType.NotFound;\r\n        break;\r\n      default:\r\n        this.errorType = RosettaErrorType.NetworkError;\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Contains information about a transaction.\r\n */\r\nexport class Transaction {\r\n  /**\r\n   * Create a Transaction.\r\n   * @param {Any} rosettaTransaction The Rosetta Transaction object of the transaction.\r\n   * @param {Number} blockIndex The index.tsx of the block containing the transaction.\r\n   * milliseconds since the Unix Epoch.\r\n   */\r\n  public blockIndex;\r\n  public hash;\r\n  public timestamp;\r\n  public type;\r\n  public status;\r\n  public account1Address;\r\n  public account2Address;\r\n  public amount: BigNumber;\r\n  public fee;\r\n  public memo;\r\n\r\n  constructor(rosettaTransaction: any, blockIndex: number) {\r\n    this.blockIndex = blockIndex;\r\n    this.hash = rosettaTransaction.transaction_identifier.hash;\r\n    const timestampMs = rosettaTransaction.metadata.timestamp\r\n      .div(1000000)\r\n      .toNumber();\r\n    this.timestamp = new Date(timestampMs);\r\n    const operations = rosettaTransaction.operations;\r\n    if (operations.length >= 1) {\r\n      this.type = operations[0].type;\r\n      this.status = operations[0].status;\r\n      this.account1Address = operations[0].account.address;\r\n      this.amount = new BigNumber(operations[0].amount.value);\r\n      // Negate amount for TRANSACTION and BURN, so that they appear in the UI as positive values.\r\n      if (\r\n        (operations[0].type === 'TRANSACTION' ||\r\n          operations[0].type === 'BURN') &&\r\n        !this.amount.isZero()\r\n      ) {\r\n        this.amount = this.amount.negated();\r\n      }\r\n    } else {\r\n      this.type = '';\r\n      this.status = '';\r\n      this.account1Address = '';\r\n      this.amount = new BigNumber(0);\r\n    }\r\n    if (operations.length >= 2 && operations[1].type === 'TRANSACTION')\r\n      this.account2Address = operations[1].account.address;\r\n    else this.account2Address = '';\r\n    if (operations.length >= 3 && operations[2].type === 'FEE')\r\n      this.fee = new BigNumber(-operations[2].amount.value);\r\n    else this.fee = new BigNumber(0);\r\n    this.memo = new BigNumber(rosettaTransaction.metadata.memo);\r\n  }\r\n}\r\n\r\n/**\r\n * Manages Rosetta API calls.\r\n */\r\nexport default class RosettaApi {\r\n  /**\r\n   * Create a RosettaApi.\r\n   */\r\n  public networkIdentifier;\r\n  public axios;\r\n  constructor() {\r\n    this.axios = axios.create({\r\n      baseURL:\r\n        process.env.REACT_APP_ROSETTA_BASE_URL ||\r\n        'https://rosetta-api.internetcomputer.org/',\r\n      method: 'post',\r\n      transformRequest: (data) => JSONbig.stringify(data),\r\n      transformResponse: (data) => JSONbig.parse(data),\r\n      headers: { 'Content-Type': 'application/json;charset=utf-8' },\r\n    });\r\n\r\n    this.networkIdentifier = this.networksList().then((res) =>\r\n      res.network_identifiers.find(\r\n        (networkIdentifier: any) =>\r\n          networkIdentifier.blockchain === 'Internet Computer'\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the ICP account balance of the specified account.\r\n   * @param {string} accountAddress The account address to get the ICP balance of.\r\n   * @returns {Promise<BigNumber|RosettaError>} The ICP account balance of the specified account, or\r\n   * a RosettaError for error.\r\n   */\r\n  async getAccountBalance(accountAddress: string) {\r\n    try {\r\n      const response = await this.accountBalanceByAddress(accountAddress);\r\n      return new BigNumber(response.balances[0].value);\r\n    } catch (error: any) {\r\n      return new RosettaError(\r\n        error.message,\r\n        axios.isAxiosError(error) ? error?.response?.status : ''\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the latest block index.tsx.\r\n   * @returns {Promise<number>} The latest block index.tsx, or a RosettaError for error.\r\n   */\r\n  async getLastBlockIndex() {\r\n    try {\r\n      const response = await this.networkStatus();\r\n      return response.current_block_identifier.index;\r\n    } catch (error: any) {\r\n      return new RosettaError(\r\n        error.message,\r\n        axios.isAxiosError(error) ? error?.response?.status : ''\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the Transaction object with the specified hash.\r\n   * @param {string} transactionHash The hash of the transaction to return.\r\n   * @returns {Transaction|null} The Transaction object with the specified hash, or a RosettaError\r\n   * for error.\r\n   */\r\n  async getTransaction(transactionHash: string) {\r\n    try {\r\n      const responseTransactions = await this.transactionsByHash(\r\n        transactionHash\r\n      );\r\n      if (responseTransactions.transactions.length === 0)\r\n        return new RosettaError('Transaction not found.', 500);\r\n\r\n      return new Transaction(\r\n        responseTransactions.transactions[0].transaction,\r\n        responseTransactions.transactions[0].block_identifier.index\r\n      );\r\n    } catch (error: any) {\r\n      return new RosettaError(\r\n        error.message,\r\n        axios.isAxiosError(error) ? error?.response?.status : undefined\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return an array of Transaction objects based on the specified parameters, or an empty array if\r\n   * none found.\r\n   * @param limit {number} The maximum number of transactions to return in one call.\r\n   * @param maxBlockIndex {number} The block index.tsx to start at. If not specified, start at current\r\n   * block.\r\n   * @param offset {number} The offset from maxBlockIndex to start returning transactions.\r\n   * @returns {Promise<Array<Transaction>|null>} An array of Transaction objects, or a RosettaError\r\n   * for error.\r\n   */\r\n  async getTransactions(limit: number, maxBlockIndex: number, offset: number) {\r\n    try {\r\n      // This function can be simplified once /search/transactions supports using the properties\r\n      // max_block, offset, and limit.\r\n      let blockIndex;\r\n      if (maxBlockIndex) blockIndex = maxBlockIndex;\r\n      else {\r\n        // Get the latest block index.tsx.\r\n        const response = await this.networkStatus();\r\n        blockIndex = response.current_block_identifier.index;\r\n      }\r\n      if (offset) blockIndex = Math.max(blockIndex - offset, -1);\r\n      const transactionCount = Math.min(limit, blockIndex + 1);\r\n      const transactions = [];\r\n      for (let i = 0; i < transactionCount; i++)\r\n        transactions.push(await this.getTransactionByBlock(blockIndex - i));\r\n      return transactions;\r\n    } catch (error: any) {\r\n      return new RosettaError(\r\n        error.message,\r\n        axios.isAxiosError(error) ? error?.response?.status : undefined\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return an array of Transaction objects based on the specified parameters, or an empty array if\r\n   * none found.\r\n   * @param {string} accountAddress The account address to get the transactions of.\r\n   * @returns {Promise<Array<Transaction>|null>} An array of Transaction objects, or a RosettaError\r\n   * for error.\r\n   */\r\n  async getTransactionsByAccount(accountAddress: string) {\r\n    try {\r\n      const response = await this.transactionsByAccount(accountAddress);\r\n      const transactions = await Promise.all(\r\n        response.transactions.map((blockTransaction: any) => {\r\n          return new Transaction(\r\n            blockTransaction.transaction,\r\n            blockTransaction.block_identifier.index\r\n          );\r\n        })\r\n      );\r\n      return transactions.reverse();\r\n    } catch (error: any) {\r\n      return new RosettaError(\r\n        error.message,\r\n        axios.isAxiosError(error) ? error?.response?.status : undefined\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the Transaction corresponding to the specified block index.tsx (i.e., block height).\r\n   * @param {number} blockIndex The index.tsx of the block to return the Transaction for.\r\n   * @returns {Promise<Transaction>} The Transaction corresponding to the specified block index.tsx.\r\n   * @private\r\n   */\r\n  async getTransactionByBlock(blockIndex: number) {\r\n    const response = await this.blockByIndex(blockIndex);\r\n    return new Transaction(response.block.transactions[0], blockIndex);\r\n  }\r\n\r\n  /**\r\n   * Perform the specified http request and return the response data.\r\n   * @param {string} url The server URL that will be used for the request.\r\n   * @param {object} data The data to be sent as the request body.\r\n   * @returns {Promise<any>} The response body that was provided by the server.\r\n   * @private\r\n   */\r\n  async request(url: string, data: any) {\r\n    return (await this.axios.request({ url: url, data: data })).data;\r\n  }\r\n\r\n  /**\r\n   * Return the /network/list response, containing a list of NetworkIdentifiers that the Rosetta\r\n   * server supports.\r\n   * @returns {Promise<any>} The response body that was provided by the server.\r\n   * @private\r\n   */\r\n  networksList() {\r\n    return this.request('/network/list', {});\r\n  }\r\n\r\n  /**\r\n   * Return /network/status response, describing the current status of the network.\r\n   * @returns {Promise<any>} The response body that was provided by the server.\r\n   * @private\r\n   */\r\n  async networkStatus() {\r\n    const networkIdentifier = await this.networkIdentifier;\r\n    return this.request('/network/status', {\r\n      network_identifier: networkIdentifier,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return the /account/balance response for the specified account.\r\n   * @param {string} accountAddress The account address to get the balance of.\r\n   * @returns {Promise<any>} The response body that was provided by the server.\r\n   * @private\r\n   */\r\n  async accountBalanceByAddress(accountAddress: string) {\r\n    const networkIdentifier = await this.networkIdentifier;\r\n    return this.request('/account/balance', {\r\n      network_identifier: networkIdentifier,\r\n      account_identifier: { address: accountAddress },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return the /block response for the block corresponding to the specified block index.tsx (i.e.,\r\n   * block height).\r\n   * @param {number} blockIndex The index.tsx of the block to return.\r\n   * @returns {Promise<any>} The response body that was provided by the server.\r\n   * @private\r\n   */\r\n  async blockByIndex(blockIndex: number) {\r\n    const networkIdentifier = await this.networkIdentifier;\r\n    return this.request('/block', {\r\n      network_identifier: networkIdentifier,\r\n      block_identifier: { index: blockIndex },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return the /search/transactions response for transactions containing an operation that affects\r\n   * the specified account.\r\n   * @param {string} accountAddress The account address to get the transactions of.\r\n   * @returns {Promise<any>} The response body that was provided by the server.\r\n   * @private\r\n   */\r\n  async transactionsByAccount(accountAddress: string) {\r\n    const networkIdentifier = await this.networkIdentifier;\r\n    return this.request('/search/transactions', {\r\n      network_identifier: networkIdentifier,\r\n      account_identifier: { address: accountAddress },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return the /search/transactions response for transactions (only one) with the specified hash.\r\n   * @param {string} transactionHash The hash of the transaction to return.\r\n   * @returns {Promise<any>} The response body that was provided by the server.\r\n   * @private\r\n   */\r\n  async transactionsByHash(transactionHash: string) {\r\n    const networkIdentifier = await this.networkIdentifier;\r\n    return this.request('/search/transactions', {\r\n      network_identifier: networkIdentifier,\r\n      transaction_identifier: { hash: transactionHash },\r\n    });\r\n  }\r\n}\r\n","export { default as arrowBackSrc } from './arrow-back.svg';\r\nexport { default as arrowDownSrc } from './arrow-down.svg';\r\nexport { default as closeSrc } from './close.svg';\r\nexport { default as checkSrc } from './check.svg';\r\nexport { default as checkPlainSrc } from './check-plain.svg';\r\nexport { default as depositSrc } from './deposit.svg';\r\nexport { default as dropSrc } from './drop.svg';\r\nexport { default as doubleRightChevronSrc } from './double-right-chevron.svg';\r\nexport { default as equalSrc } from './equal.svg';\r\nexport { default as icpSrc } from './icp.svg';\r\nexport { default as greenCheckSrc } from './green-check.svg';\r\nexport { default as logoSrc } from './logo.png';\r\nexport { default as plugCircleSrc } from './plug-circle.svg';\r\nexport { default as plusSrc } from './plus.svg';\r\nexport { default as questionMarkSrc } from './question-mark.svg';\r\nexport { default as redWarningSrc } from './red-warning.svg';\r\nexport { default as redTriangleWarningSrc } from './red-triangle-warning.svg';\r\nexport { default as searchSrc } from './search.svg';\r\nexport { default as sonicCircleSrc } from './sonic-circle.svg';\r\nexport { default as swapSrc } from './swap.svg';\r\nexport { default as transparentGreenCheckSrc } from './transparent-green-check.svg';\r\nexport { default as withdrawSrc } from './withdraw.svg';\r\n","import {\r\n  Box,\r\n  BoxProps,\r\n  Flex,\r\n  FlexProps,\r\n  Heading,\r\n  IconButton,\r\n  IconButtonProps,\r\n  Skeleton,\r\n  SkeletonCircle,\r\n  Text,\r\n  Tooltip,\r\n  TooltipProps,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { createContext } from '@chakra-ui/react-utils';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\n\r\nimport { LPImageBlock, SwapImageBlock, TokenImageBlock } from '..';\r\n\r\nexport type AssetType = 'swap' | 'lp' | 'token';\r\n\r\nexport type AssetUniqueProps = {\r\n  type?: AssetType;\r\n  imageSources?: string[];\r\n  isLoading?: boolean;\r\n};\r\n\r\nexport type AssetProps = FlexProps & AssetUniqueProps;\r\n\r\nconst [AssetProvider, useAssetContext] = createContext<AssetUniqueProps>({\r\n  name: 'CardContext',\r\n  errorMessage:\r\n    'useCardContext: `context` is undefined. Seems you forgot to wrap all card components within `<Card />`',\r\n});\r\n\r\nexport const Asset = ({\r\n  type,\r\n  imageSources = [questionMarkSrc],\r\n  isLoading = false,\r\n  ...props\r\n}: AssetProps) => {\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const shadow = useColorModeValue('base', 'none');\r\n\r\n  return (\r\n    <AssetProvider value={{ isLoading, type, imageSources }}>\r\n      <Flex\r\n        position=\"relative\"\r\n        direction=\"row\"\r\n        borderRadius=\"xl\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\"\r\n        bg={bg}\r\n        shadow={shadow}\r\n        px={5}\r\n        py={4}\r\n        flexWrap=\"wrap\"\r\n        gap={2}\r\n        {...props}\r\n      />\r\n    </AssetProvider>\r\n  );\r\n};\r\n\r\ntype AssetIconButtonProps = IconButtonProps & {\r\n  tooltipProps?: Partial<TooltipProps>;\r\n};\r\n\r\nexport const AssetIconButton = ({\r\n  'aria-label': ariaLabel,\r\n  tooltipProps,\r\n  ...props\r\n}: AssetIconButtonProps) => {\r\n  const { isLoading } = useAssetContext();\r\n\r\n  return (\r\n    <SkeletonCircle h={10} w={10} minW=\"fit-content\" isLoaded={!isLoading}>\r\n      <Tooltip label={ariaLabel} {...tooltipProps}>\r\n        <IconButton\r\n          isRound\r\n          aria-label={ariaLabel}\r\n          variant=\"outline\"\r\n          {...props}\r\n        />\r\n      </Tooltip>\r\n    </SkeletonCircle>\r\n  );\r\n};\r\n\r\ntype AssetTitleBlockProps = BoxProps & {\r\n  title: string;\r\n  subtitle?: string;\r\n};\r\n\r\nexport const AssetTitleBlock = ({\r\n  title,\r\n  subtitle,\r\n  ...props\r\n}: AssetTitleBlockProps) => {\r\n  const { isLoading } = useAssetContext();\r\n  const color = useColorModeValue('gray.800', 'gray.50');\r\n  const subtitleColor = useColorModeValue('gray.600', 'gray.400');\r\n\r\n  return (\r\n    <Box ml={4} {...props}>\r\n      <Skeleton\r\n        isLoaded={!isLoading}\r\n        mb={isLoading ? 2 : 0}\r\n        width={isLoading ? 60 : 'unset'}\r\n      >\r\n        <Heading as=\"h3\" fontSize=\"lg\" fontWeight={700} color={color}>\r\n          {title}\r\n        </Heading>\r\n      </Skeleton>\r\n      <Skeleton isLoaded={!isLoading} width={isLoading ? 40 : 'unset'}>\r\n        <Tooltip label={subtitle} openDelay={1000}>\r\n          <Text\r\n            fontSize=\"sm\"\r\n            color={subtitleColor}\r\n            textOverflow=\"ellipsis\"\r\n            whiteSpace=\"nowrap\"\r\n            overflow=\"hidden\"\r\n            maxW=\"100%\"\r\n          >\r\n            {subtitle}\r\n          </Text>\r\n        </Tooltip>\r\n      </Skeleton>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const AssetImageBlock = () => {\r\n  const {\r\n    type = 'token',\r\n    imageSources = [questionMarkSrc, questionMarkSrc],\r\n    isLoading,\r\n  } = useAssetContext();\r\n\r\n  const views = {\r\n    swap: <SwapImageBlock imageSources={imageSources} isLoading={isLoading} />,\r\n    lp: <LPImageBlock imageSources={imageSources} isLoading={isLoading} />,\r\n    token: <TokenImageBlock src={imageSources[0]} isLoading={isLoading} />,\r\n  };\r\n\r\n  return views[type] ?? null;\r\n};\r\n","export * from './asset';\r\n","import { Fade, Flex, Image, useColorModeValue } from '@chakra-ui/react';\r\nimport { MouseEvent } from 'react';\r\n\r\nimport { checkPlainSrc } from '@/assets';\r\n\r\ntype CheckboxProps = {\r\n  checked: boolean;\r\n  onClick: (event: MouseEvent<HTMLDivElement>) => any;\r\n};\r\n\r\nexport const Checkbox = ({ checked, onClick }: CheckboxProps) => {\r\n  const borderColor = useColorModeValue('gray.600', 'custom.1');\r\n\r\n  return (\r\n    <Flex\r\n      cursor=\"pointer\"\r\n      borderRadius={1.5}\r\n      width={6}\r\n      height={6}\r\n      onClick={onClick}\r\n      border={checked ? 'none' : '1.5px solid'}\r\n      borderColor={borderColor}\r\n      bg={checked ? 'dark-blue.400' : ''}\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n    >\r\n      <Fade in={checked}>\r\n        <Image src={checkPlainSrc} width={4} height={4} />\r\n      </Fade>\r\n    </Flex>\r\n  );\r\n};\r\n","export * from './check-box';\r\n","import { forwardRef, keyframes,Text,TextProps,Tooltip,\r\n} from '@chakra-ui/react';\r\n\r\nimport { formatAmount, toBigNumber } from '@sonicdex/sonic-js';\r\nimport { useMemo } from 'react';\r\n\r\nexport type DisplayValueProps = TextProps & {\r\n  isUpdating?: boolean;\r\n  value?: number | string;\r\n  decimals?: number;\r\n  prefix?: string;\r\n  suffix?: string;\r\n  disableTooltip?: boolean;\r\n  shouldDivideByDecimals?: boolean;\r\n};\r\n\r\nexport const DisplayValue = forwardRef<DisplayValueProps, 'p'>((\r\n    { \r\n      value = 0,decimals = 4, isUpdating, prefix, suffix,disableTooltip,\r\n      shouldDivideByDecimals, ...textProps},ref\r\n  ) => {\r\n    const blinker = keyframes`50% { opacity: 0.35;}`;\r\n\r\n    const [formattedValue, tooltipAmount, isDisabled] = useMemo(() => {\r\n      const tooltipAmount = shouldDivideByDecimals\r\n        ? toBigNumber(value).applyDecimals(decimals).toString()\r\n        : toBigNumber(value).dp(decimals).toString();\r\n\r\n      const formattedValue = formatAmount(tooltipAmount);\r\n      \r\n      return [formattedValue, tooltipAmount, disableTooltip || String(tooltipAmount).length <= 4,];\r\n    }, [value, decimals, disableTooltip, shouldDivideByDecimals]);\r\n  \r\n    return (\r\n      <Tooltip label={tooltipAmount} isDisabled={isDisabled}>\r\n        <Text ref={ref} {...textProps} animation={isUpdating ? `${blinker} 1s linear infinite` : undefined}>\r\n          {prefix}\r\n          {formattedValue}\r\n          {suffix}\r\n        </Text>\r\n      </Tooltip>\r\n    );\r\n  }\r\n);\r\n","export * from './display-value';\r\n","import { chakra, forwardRef } from '@chakra-ui/system';\r\nimport React from 'react';\r\n\r\nexport type EmojiProps = {\r\n  label: string;\r\n  children: string;\r\n};\r\n\r\nexport const Emoji: React.FC<EmojiProps> = forwardRef<EmojiProps, 'svg'>(\r\n  ({ children, label }, ref) => {\r\n    return (\r\n      <chakra.span\r\n        ref={ref}\r\n        role=\"img\"\r\n        aria-label={label}\r\n        title={label}\r\n        fontSize=\"md\"\r\n        ml={1}\r\n        mt={0.5}\r\n        transform=\"scale(1)\"\r\n      >\r\n        {children}\r\n      </chakra.span>\r\n    );\r\n  }\r\n);\r\n","export * from './emoji';\r\n","import { Flex, Text } from '@chakra-ui/react';\r\nimport { toBigNumber } from '@sonicdex/sonic-js';\r\nimport { FaArrowRight } from '@react-icons/all-files/fa/FaArrowRight';\r\nimport React, { useMemo } from 'react';\r\n\r\nimport { AppTokenMetadata } from '@/models';\r\nimport {artemis} from '@/integrations/artemis';\r\n\r\nexport type FeeBoxProps = {\r\n  token?: AppTokenMetadata;\r\n  isDeposit?: boolean;\r\n  isTransfer?: boolean;\r\n};\r\n\r\nexport const FeeBox: React.FC<FeeBoxProps> = ({ isDeposit = false, token  , isTransfer= false}) => {\r\n\r\n  var connectedWalletInfo = artemis.connectedWalletInfo;\r\n  \r\n  const fee = useMemo(() => {\r\n    if (token) {\r\n      return toBigNumber(BigInt(isDeposit ? 2 : 1) * token.fee).applyDecimals(token.decimals).toString();\r\n    }\r\n  }, [isDeposit, token]);\r\n\r\n  if (!token) return null;\r\n\r\n  return (\r\n    <Flex opacity={0.5} alignItems=\"center\" px={4} fontWeight={400} mb={5}>\r\n      {!isTransfer?(\r\n      <Text display=\"flex\" alignItems=\"center\">\r\n        {isDeposit ? connectedWalletInfo.name : 'Sonic'}&nbsp;\r\n        <FaArrowRight />\r\n        &nbsp;{isDeposit ? 'Sonic' : connectedWalletInfo.name}\r\n      </Text>):\r\n      (<Text display=\"flex\" alignItems=\"center\">From {connectedWalletInfo.name}</Text>)\r\n      }\r\n      \r\n      <Text flex={1} textAlign=\"right\" mx={2}>\r\n        {token.symbol}&nbsp;Fee =&nbsp;\r\n        {fee}\r\n        &nbsp;{token.symbol}\r\n      </Text>\r\n    </Flex>\r\n  );\r\n};\r\n","export * from './fee-box';\r\nexport * from './index';\r\n","import { useColorModeValue } from '@chakra-ui/color-mode';\r\nimport { Box, Flex } from '@chakra-ui/react';\r\nimport { FC, HTMLAttributes } from 'react';\r\n\r\ntype GradientBoxProps = HTMLAttributes<HTMLDivElement> & {\r\n  size?: 'sm' | 'md' | 'lg';\r\n};\r\n\r\n/*\r\n   _before={{\r\ncontent: '\"\"',\r\nposition: 'absolute',\r\ntop: 0,\r\nright: 0,\r\nbottom: 0,\r\nleft: 0,\r\nmargin: '-4px',\r\nborderRadius: 'inherit',\r\nzIndex: 'hide',\r\nbackground:\r\n'linear-gradient(93.07deg,#ffd719 0.61%,#f754d4 33.98%,#1fd1ec 65.84%,#48fa6b 97.7%)',\r\n}}\r\n */\r\n\r\nexport const GradientBox: FC<GradientBoxProps> = ({\r\n  size = 'md',\r\n  children,\r\n  ...props\r\n}: GradientBoxProps) => {\r\n  const bg = useColorModeValue('gray.100', 'gray.800');\r\n\r\n  const boxProps = {\r\n    sm: {\r\n      w: '4',\r\n      h: '4',\r\n    },\r\n    md: {\r\n      w: '6',\r\n      h: '6',\r\n    },\r\n    lg: {\r\n      w: '8',\r\n      h: '8',\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      borderRadius=\"full\"\r\n      background={bg}\r\n      pt={-1}\r\n      {...boxProps[size]}\r\n    >\r\n      <Box\r\n        position=\"absolute\"\r\n        bg=\"linear-gradient(93.07deg,#ffd719 0.61%,#f754d4 33.98%,#1fd1ec 65.84%,#48fa6b 97.7%)\"\r\n        width={7}\r\n        height={7}\r\n        borderRadius=\"full\"\r\n      />\r\n      <Box\r\n        position=\"absolute\"\r\n        bg=\"gray.900\"\r\n        height={6}\r\n        width={6}\r\n        borderRadius=\"full\"\r\n      />\r\n      {children}\r\n    </Flex>\r\n  );\r\n};\r\n","export * from './gradient-box';\r\n","import {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Flex,\r\n  Spinner,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport React, { useState } from 'react';\r\n\r\nimport { useHeaderResizeEffect } from '@/hooks';\r\n\r\ntype HeaderProps = {\r\n  title: string;\r\n  buttonText?: string;\r\n  onButtonClick?: React.MouseEventHandler<HTMLButtonElement>;\r\n  isUpdating?: boolean;\r\n};\r\n\r\nexport const Header: React.FC<HeaderProps> = ({\r\n  title,\r\n  buttonText,\r\n  onButtonClick,\r\n  isUpdating,\r\n  children,\r\n}) => {\r\n  const [top, setTop] = useState('116px');\r\n  const paddingToLine = buttonText && onButtonClick ? '17px' : '24px';\r\n  const marginTop = buttonText && onButtonClick ? '-8px' : '0px';\r\n\r\n  const color = useColorModeValue('gray.800', 'gray.50');\r\n  const backgroundColor = useColorModeValue('app.background.body.light', 'app.background.body.dark');\r\n\r\n  useHeaderResizeEffect((element) => {\r\n    setTop(`${element.clientHeight - 1}px`);\r\n  });\r\n\r\n  return (\r\n    <Flex position=\"sticky\" top={top} pt={5} mt={1} mb={5}\r\n      backgroundColor={backgroundColor} transition=\"background-color 200ms\" zIndex={1} flexDirection=\"column\"\r\n    >\r\n      {children}\r\n      <Flex\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        pb={paddingToLine}\r\n        mt={marginTop}\r\n      >\r\n        <Box as=\"h3\" fontWeight={700} color={color}>\r\n          {title}\r\n          {isUpdating && <Spinner width={3} height={3} mx={3} />}\r\n        </Box>\r\n        {buttonText && onButtonClick && (\r\n          <Button\r\n            variant=\"gradient\"\r\n            colorScheme=\"dark-blue\"\r\n            onClick={onButtonClick}\r\n          >\r\n            {buttonText}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n      <Divider />\r\n    </Flex>\r\n  );\r\n};\r\n","export * from './header';\r\n","export * from './lp-image-block';\r\nexport * from './swap-image-block';\r\nexport * from './token-image-block';\r\n","import { Box, Image, SkeletonCircle } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\n\r\nexport type LPImageBlockProps = {\r\n  size?: 'sm' | 'md' | 'lg';\r\n  isLoading?: boolean;\r\n  imageSources?: (string | undefined)[];\r\n};\r\n\r\nexport const LPImageBlock: React.FC<LPImageBlockProps> = ({\r\n  size = 'md',\r\n  isLoading,\r\n  imageSources = [questionMarkSrc, questionMarkSrc],\r\n}) => {\r\n  const boxSize = {\r\n    lg: 10,\r\n    md: 9,\r\n    sm: 8,\r\n  };\r\n\r\n  const skeletonSize = {\r\n    lg: 7,\r\n    md: 6,\r\n    sm: 5,\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      width={boxSize[size]}\r\n      height={boxSize[size]}\r\n      position=\"relative\"\r\n      minW=\"fit-content\"\r\n    >\r\n      <SkeletonCircle\r\n        h={skeletonSize[size]}\r\n        w={skeletonSize[size]}\r\n        isLoaded={!isLoading}\r\n      >\r\n        <Image\r\n          alt=\"token0\"\r\n          position=\"absolute\"\r\n          width={skeletonSize[size]}\r\n          height={skeletonSize[size]}\r\n          top={0}\r\n          left={0}\r\n          src={imageSources[0]}\r\n          borderRadius=\"full\"\r\n        />\r\n      </SkeletonCircle>\r\n      <SkeletonCircle\r\n        h={skeletonSize[size]}\r\n        w={skeletonSize[size]}\r\n        isLoaded={!isLoading}\r\n      >\r\n        <Image\r\n          alt=\"token1\"\r\n          position=\"absolute\"\r\n          width={skeletonSize[size]}\r\n          height={skeletonSize[size]}\r\n          bottom={0}\r\n          right={0}\r\n          src={imageSources[1]}\r\n          borderRadius=\"full\"\r\n        />\r\n      </SkeletonCircle>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, Image, SkeletonCircle, Text } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\n\r\nexport type SwapImageBlockProps = {\r\n  isLoading?: boolean;\r\n  imageSources?: string[];\r\n};\r\n\r\nexport const SwapImageBlock: React.FC<SwapImageBlockProps> = ({\r\n  isLoading,\r\n  imageSources = [questionMarkSrc, questionMarkSrc],\r\n}) => {\r\n  return (\r\n    <Box width={10} height={10} position=\"relative\" minW=\"fit-content\">\r\n      <SkeletonCircle h={6} w={6} isLoaded={!isLoading}>\r\n        <Image\r\n          alt=\"token from\"\r\n          position=\"absolute\"\r\n          width={6}\r\n          height={6}\r\n          top={0}\r\n          left={0}\r\n          src={imageSources[0]}\r\n          borderRadius=\"full\"\r\n        />\r\n      </SkeletonCircle>\r\n      <Text>&#x21AA;</Text>\r\n      <SkeletonCircle h={6} w={6} isLoaded={!isLoading}>\r\n        <Image\r\n          alt=\"token to\"\r\n          position=\"absolute\"\r\n          width={6}\r\n          height={6}\r\n          bottom={0}\r\n          right={0}\r\n          src={imageSources[1]}\r\n          borderRadius=\"full\"\r\n        />\r\n      </SkeletonCircle>\r\n    </Box>\r\n  );\r\n};\r\n","import { Image, LayoutProps, SkeletonCircle } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\n\r\nexport type TokenImageBlockProps = {\r\n  isLoading?: boolean;\r\n  src?: string | number;\r\n  size?: LayoutProps['width'];\r\n};\r\n\r\nexport const TokenImageBlock: React.FC<TokenImageBlockProps> = ({\r\n  isLoading,\r\n  src = questionMarkSrc,\r\n  size = 10,\r\n}) => {\r\n  return (\r\n    <SkeletonCircle h={size} w={size} minW={size} isLoaded={!isLoading}>\r\n      <Image\r\n        width={size}\r\n        height={size}\r\n        src={src}\r\n        borderRadius=\"full\"\r\n        alt=\"token\"\r\n      />\r\n    </SkeletonCircle>\r\n  );\r\n};\r\n","export * from './asset';\r\nexport * from './check-box';\r\nexport * from './display-value';\r\nexport * from './emoji';\r\nexport * from './gradient-box';\r\nexport * from './header';\r\nexport * from './image-block';\r\nexport * from './information-box';\r\nexport * from './logo';\r\nexport * from './logo-box';\r\nexport * from './number-input';\r\nexport * from './search-bar';\r\nexport * from './slippage-settings';\r\nexport * from './stack-line';\r\nexport * from './token';\r\nexport * from './token-balances-popover';\r\nexport * from './view-header';\r\n","export * from './information-box';\r\n","import {\r\n  Box,\r\n  BoxProps,\r\n  CloseButton,\r\n  Collapse,\r\n  Flex,\r\n  Tooltip,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { ReactNode, useState } from 'react';\r\n\r\ntype InformationBoxTypes = BoxProps & {\r\n  title: string;\r\n  children: ReactNode;\r\n  onClose?: () => void;\r\n};\r\n\r\nexport const InformationBox = ({\r\n  title,\r\n  children,\r\n  onClose,\r\n  ...props\r\n}: InformationBoxTypes) => {\r\n  const [collapse, setCollapse] = useState(true);\r\n\r\n  const handleClose = () => {\r\n    setCollapse(false);\r\n    if (onClose) {\r\n      setTimeout(onClose, 200);\r\n    }\r\n  };\r\n\r\n  const titleColor = useColorModeValue('gray.800', 'gray.50');\r\n  const bg = useColorModeValue('dark-blue.100', 'rgba(57, 77, 231, 0.2)');\r\n\r\n  return (\r\n    <Collapse in={collapse} unmountOnExit={true}>\r\n      <Box bg={bg} pt={4} px={5} pb={5} mb={5} borderRadius=\"xl\" {...props}>\r\n        <Flex direction=\"row\" justifyContent=\"space-between\" mb={2}>\r\n          <Box as=\"h3\" fontSize=\"lg\" fontWeight=\"bold\" color={titleColor}>\r\n            {title}\r\n          </Box>\r\n          <Tooltip label=\"Close\">\r\n            <CloseButton size=\"sm\" variant=\"rounded\" onClick={handleClose} />\r\n          </Tooltip>\r\n        </Flex>\r\n        {children}\r\n      </Box>\r\n    </Collapse>\r\n  );\r\n};\r\n","export * from './logo-box';\r\n","import { Stack, Text } from '@chakra-ui/layout';\r\nimport { useColorModeValue , Link} from '@chakra-ui/react';\r\nimport { Logo } from '../logo';\r\n\r\nexport const LogoBox = () => {\r\n  const stackBg = useColorModeValue('gray.50', 'custom.2');\r\n  const shadow = useColorModeValue('base', 'none');\r\n\r\n  return (\r\n    <Link href={'/'} style={{ textDecoration: \"none\" , boxShadow:'none'}}>\r\n      <Stack direction=\"row\" align=\"center\" bg={stackBg} shadow={shadow} px={4} h=\"12\" borderRadius=\"full\" userSelect=\"none\">\r\n        <Logo w=\"5\" h=\"7\" />\r\n      <Text fontWeight=\"bold\">Sonic</Text>\r\n    </Stack>\r\n    </Link>\r\n  );\r\n};\r\n","export * from './logo';\r\n","import Icon, { IconProps } from '@chakra-ui/icon';\r\nimport { forwardRef } from '@chakra-ui/system';\r\n\r\nexport const Logo = forwardRef<IconProps, 'svg'>((props, ref) => {\r\n  return (\r\n    <Icon\r\n      ref={ref}\r\n      viewBox=\"0 0 438 576\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      {...props}\r\n    >\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        clipRule=\"evenodd\"\r\n        d=\"M340.824 535.768C379.219 518.987 437.117 439.772 437.117 390.054C437.117 334.21 407.602 288.94 371.194 288.94C336.932 288.94 308.153 330.958 304.881 382.453C288.283 381.461 268.324 383.097 244.345 388.171C206.535 396.171 168.296 402.991 129.803 406.442C57.0437 412.965 7.93594 433.479 6.33618 475.073C6.33618 526.705 87.4154 575.959 191.128 575.959C250.135 575.959 304.725 559.482 340.824 535.768Z\"\r\n        fill=\"url(#paint0_linear_1_72)\"\r\n      />\r\n      <path\r\n        d=\"M431.082 399.358C409.569 446.2 276.464 399.358 180.2 358.186C85.5077 314.698 19.6274 274.889 35.963 231.091C57.4758 184.248 216.976 175.2 311.669 218.688C406.361 262.177 449.16 344.136 431.082 399.358Z\"\r\n        fill=\"#1A2A86\"\r\n      />\r\n      <path\r\n        d=\"M374.138 69.3708C384.394 119.087 320.932 132.999 188.881 160.24C87.0951 181.238 11.4238 311.976 0.761834 175.541C-3.33268 123.147 47.4486 30.0377 149.235 9.03976C251.021 -11.9582 356.187 15.0277 374.138 69.3708Z\"\r\n        fill=\"url(#paint1_linear_1_72)\"\r\n      />\r\n      <path\r\n        d=\"M255.951 276.809C249.286 301.418 186.793 340.881 120.989 323.06C55.1857 305.239 2.92729 230.251 9.59206 205.642C16.0479 181.804 66.5027 159.144 141.51 196.194C146.444 198.631 151.682 200.8 156.957 202.368C311.009 248.148 262.503 252.613 255.951 276.809Z\"\r\n        fill=\"#1A2A86\"\r\n      />\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        clipRule=\"evenodd\"\r\n        d=\"M374.111 69.1391C375.404 75.4067 375.55 81.1086 374.56 86.3413C361.134 50.7476 312.018 27.5309 248.718 24.1348C154.337 19.0713 117.36 51.9478 112.384 95.654C112.384 128.443 144.403 163.36 194.809 176.264L278.252 207.049C289.844 210.552 300.928 214.662 311.24 219.398C386.125 253.789 428.402 312.354 433.588 362.536C435.224 371.361 436.1 380.68 436.1 390.314C436.1 449.085 381.215 513.798 344.208 533.277C308.222 558.327 251.683 576 190.377 576C86.6639 576 6.58354 527.417 6.58354 476.113C6.58354 470.345 7.55766 464.978 9.43422 459.995C9.36668 461.02 9.33263 462.05 9.33263 463.084C9.33263 511.079 82.6754 549.986 173.148 549.986C263.621 549.986 336.964 511.079 336.964 463.084C336.964 430.639 303.448 402.347 253.78 387.42C253.796 387.418 253.811 387.415 253.826 387.412C228.596 378.279 203.431 368.097 180.388 358.242C122.201 331.519 74.9448 306.192 51.1264 280.465C31.8405 261.447 17.9268 240.196 12.507 224.111C7.14857 214.388 3.44721 198.782 1.58671 175.445C-2.63373 122.508 47.833 28.5814 149.407 7.62722C250.981 -13.327 356.05 14.1987 374.111 69.1391Z\"\r\n        fill=\"url(#paint2_linear_1_72)\"\r\n      />\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        clipRule=\"evenodd\"\r\n        d=\"M374.111 69.1392C375.404 75.4068 375.55 81.1088 374.56 86.3414C361.135 50.7477 312.018 27.531 248.718 24.135C154.337 19.0715 117.36 51.948 112.384 95.6541C112.384 128.443 144.403 163.36 194.809 176.265L278.252 207.049C289.844 210.552 300.928 214.662 311.24 219.398C386.125 253.789 428.403 312.354 433.589 362.536C435.224 371.361 436.1 380.68 436.1 390.315C436.1 449.085 381.215 513.798 344.208 533.277C308.222 558.327 251.683 576 190.377 576C86.6639 576 6.5836 527.417 6.5836 476.113C6.5836 470.345 7.55772 464.978 9.43428 459.995C9.36674 461.02 9.33269 462.05 9.33269 463.084C9.33269 511.079 82.6754 549.986 173.148 549.986C263.621 549.986 336.964 511.079 336.964 463.084C336.964 430.639 303.448 402.348 253.78 387.42C253.796 387.418 253.811 387.415 253.826 387.412C228.596 378.279 203.431 368.097 180.388 358.242C122.201 331.519 74.9449 306.192 51.1265 280.465C31.8406 261.447 17.9268 240.196 12.5071 224.111C7.14864 214.388 3.44727 198.782 1.58677 175.445C-2.63367 122.508 47.833 28.5815 149.407 7.62734C250.981 -13.3269 356.051 14.1988 374.111 69.1392Z\"\r\n        fill=\"url(#paint3_linear_1_72)\"\r\n      />\r\n      <defs>\r\n        <linearGradient\r\n          id=\"paint0_linear_1_72\"\r\n          x1=\"352.703\"\r\n          y1=\"431.619\"\r\n          x2=\"4.2183\"\r\n          y2=\"491.079\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop stopColor=\"#1A2A86\" />\r\n          <stop offset=\"1\" stopColor=\"#2C44FF\" />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"paint1_linear_1_72\"\r\n          x1=\"108.269\"\r\n          y1=\"104.295\"\r\n          x2=\"383.244\"\r\n          y2=\"74.7432\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop stopColor=\"#1A2A86\" />\r\n          <stop offset=\"1\" stopColor=\"#2B43FB\" />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"paint2_linear_1_72\"\r\n          x1=\"339.961\"\r\n          y1=\"0.605345\"\r\n          x2=\"137.188\"\r\n          y2=\"593.938\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop stopColor=\"#566AFF\" />\r\n          <stop offset=\"0.493345\" stopColor=\"#3347D1\" />\r\n          <stop offset=\"1\" stopColor=\"#566AFF\" />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"paint3_linear_1_72\"\r\n          x1=\"339.961\"\r\n          y1=\"0.605467\"\r\n          x2=\"137.189\"\r\n          y2=\"593.938\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop stopColor=\"#566AFF\" />\r\n          <stop offset=\"0.493345\" stopColor=\"#3347D1\" />\r\n          <stop offset=\"1\" stopColor=\"#566AFF\" />\r\n        </linearGradient>\r\n      </defs>\r\n    </Icon>\r\n  );\r\n});\r\n","export * from './lp-breakdown-popover-item';\r\nexport * from './lp-breakdown-popover';\r\n","import { Flex, HStack, Image, Text } from '@chakra-ui/react';\r\nimport { FC } from 'react';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\n\r\nimport { LPBreakdown } from '.';\r\n\r\ntype LPBreakdownPopoverItemProps = LPBreakdown;\r\n\r\nexport const LPBreakdownPopoverItem: FC<LPBreakdownPopoverItemProps> = ({ src = questionMarkSrc, balance, symbol }) => {\r\n  return (\r\n    <Flex justify=\"space-between\" pb={3} _last={{ pb: 0 }}>\r\n      <HStack flex={0} minWidth=\"fit-content\">\r\n        <Image src={src} boxSize={4} alt={`${symbol} logo`} />\r\n        <Text> {balance}&nbsp;{symbol}</Text>\r\n      </HStack>\r\n    </Flex>\r\n  );\r\n};\r\n","import {\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n} from '@chakra-ui/popover';\r\nimport { Heading, useColorModeValue } from '@chakra-ui/react';\r\nimport { FC, useMemo } from 'react';\r\n\r\nimport { LPBreakdownPopoverItem } from './lp-breakdown-popover-item';\r\n\r\nexport type LPBreakdown = {\r\n  symbol: string;\r\n  decimals: number;\r\n  balance?: string;\r\n  src?: string;\r\n};\r\n\r\ntype LPBreakdownPopoverProps = {\r\n  sources?: LPBreakdown[];\r\n  children?: React.ReactNode;\r\n};\r\n\r\nexport const LPBreakdownPopover: FC<LPBreakdownPopoverProps> = ({\r\n  sources = [],\r\n  children,\r\n}) => {\r\n  const filteredSources = useMemo(\r\n    () =>\r\n      sources.filter((source) => source.balance && Number(source.balance) > 0),\r\n    [sources]\r\n  );\r\n\r\n  const color = useColorModeValue('gray.800', 'gray.50');\r\n\r\n  if (filteredSources.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Popover trigger=\"hover\">\r\n      <PopoverTrigger>{children}</PopoverTrigger>\r\n      <PopoverContent color={color}>\r\n        <PopoverArrow />\r\n        <PopoverHeader>\r\n          <Heading as=\"h3\" size=\"sm\">\r\n            LP Breakdown\r\n          </Heading>\r\n        </PopoverHeader>\r\n        <PopoverBody>\r\n          {filteredSources.map((source) => (\r\n            <LPBreakdownPopoverItem key={source.symbol} {...source} />\r\n          ))}\r\n        </PopoverBody>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n","export * from './number-input';\r\n","import {\r\n  forwardRef,\r\n  Input,\r\n  InputProps,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { ChangeEvent } from 'react';\r\n\r\nexport type NumberInputProps = InputProps & {\r\n  setValue?: (value: string) => void;\r\n  placeholder?: string;\r\n};\r\n\r\nexport const NumberInput = forwardRef<NumberInputProps, 'input'>(\r\n  ({ placeholder = '0.00', onChange, setValue, ...props }, ref) => {\r\n    const handleValueChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n      const value = event.target.value;\r\n\r\n      if(value == '.' ) setValue?setValue('0.'):false;\r\n\r\n      if (isNaN(Number(value))) return;\r\n\r\n      if (onChange) {\r\n        onChange(event);\r\n      }\r\n\r\n      if (setValue) {\r\n        setValue(value);\r\n      }\r\n    };\r\n\r\n    const color = useColorModeValue('gray.500', 'gray.300');\r\n\r\n    return (\r\n      <Input\r\n        ref={ref}\r\n        variant=\"unstyled\"\r\n        type=\"text\"\r\n        textAlign=\"right\"\r\n        fontSize=\"3xl\"\r\n        fontWeight={700}\r\n        backgroundColor=\"transparent\"\r\n        color={color}\r\n        outline=\"none\"\r\n        transition=\"color 400ms\"\r\n        placeholder={placeholder}\r\n        _placeholder={{ color: color }}\r\n        {...props}\r\n        onChange={handleValueChange}\r\n      />\r\n    );\r\n  }\r\n);\r\n","export * from './search-bar';\r\n","import { Box, Flex, Image, useColorModeValue } from '@chakra-ui/react';\r\nimport { ChangeEvent } from 'react';\r\n\r\nimport { searchSrc } from '@/assets';\r\n\r\ntype SearchBarProps = {\r\n  search: string;\r\n  setSearch: (arg0: string) => any;\r\n};\r\n\r\nexport const SearchBar = ({ search, setSearch }: SearchBarProps) => {\r\n  const handleSearchChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const inputValue = event.target.value;\r\n\r\n    setSearch(inputValue);\r\n  };\r\n\r\n  const bg = useColorModeValue('gray.50', 'custom.3');\r\n  const color = useColorModeValue('gray.800', 'gray.50');\r\n  const shadow = useColorModeValue('base', 'none');\r\n\r\n  return (\r\n    <Flex\r\n      boxSizing=\"border-box\"\r\n      px={4}\r\n      bg={bg}\r\n      shadow={shadow}\r\n      w=\"100%\"\r\n      h={10}\r\n      borderRadius={12}\r\n    >\r\n      <Image src={searchSrc} alt=\"search\" w={4} mr={3} />\r\n      <Box\r\n        as=\"input\"\r\n        value={search}\r\n        bg={bg}\r\n        border=\"none\"\r\n        w=\"100%\"\r\n        color={color}\r\n        outline=\"none\"\r\n        fontWeight={400}\r\n        placeholder=\"Search by name or canister id\"\r\n        onChange={handleSearchChange}\r\n        _placeholder={{\r\n          color: 'custom.1',\r\n        }}\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n","export * from './slippage-settings';\r\n","import {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Flex,\r\n  HStack,\r\n  Icon,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { FaExclamationTriangle } from '@react-icons/all-files/fa/FaExclamationTriangle';\r\nimport { useMemo } from 'react';\r\n\r\nimport { NumberInput } from '@/components';\r\n\r\ntype SlippageSettingsProps = {\r\n  slippage: string;\r\n  isAutoSlippage: boolean;\r\n  setSlippage: (slippage: string) => any;\r\n  setIsAutoSlippage: (isAutoSlippage: boolean) => any;\r\n};\r\n\r\nexport const SlippageSettings = ({\r\n  slippage,\r\n  setSlippage,\r\n  isAutoSlippage,\r\n  setIsAutoSlippage,\r\n}: SlippageSettingsProps) => {\r\n  const inputBorderColorDisabled = useColorModeValue('gray.200', 'custom.4');\r\n  const inputBorderColorEnabled = 'dark-blue.500';\r\n  const inputBorderColor = isAutoSlippage\r\n    ? inputBorderColorDisabled\r\n    : inputBorderColorEnabled;\r\n\r\n  const inputColorDisabled = useColorModeValue('gray.400', 'custom.1');\r\n  const inputColorEnabled = useColorModeValue('gray.800', 'gray.50');\r\n  const inputColor = isAutoSlippage ? inputColorDisabled : inputColorEnabled;\r\n\r\n  const yellowColor = useColorModeValue('yellow.600', 'yellow.500');\r\n  const redColor = useColorModeValue('red.600', 'red.500');\r\n  const messageColor = Number(slippage) > 50 ? redColor : yellowColor;\r\n\r\n  const handleInputClick = () => {\r\n    if (isAutoSlippage) setIsAutoSlippage(false);\r\n  };\r\n\r\n  const handleButtonClick = () => {\r\n    if (!isAutoSlippage) setIsAutoSlippage(true);\r\n  };\r\n\r\n  const handleChange = (value: string) => {\r\n    setIsAutoSlippage(false);\r\n    const num = Number(value);\r\n    if (num < 0) {\r\n      setSlippage('0');\r\n    } else {\r\n      setSlippage(value.replace(/^0+/, '').replace(/^\\./, '0.') || '0');\r\n    }\r\n  };\r\n\r\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\r\n    setSlippage(String(Number(e.target.value)));\r\n  };\r\n\r\n  const warningMessage = useMemo(() => {\r\n    if (Number(slippage) > 50) {\r\n      setIsAutoSlippage(true);\r\n      return 'Enter a valid slippage percentage (default: 0.5%)';\r\n    }\r\n\r\n    if (Number(slippage) > 5) {\r\n      return 'Your slippage tolerance is set very high, the received amount of tokens may reduced because of it. Consider reducing it.';\r\n    }\r\n\r\n    if (Number(slippage) < 0.25) {\r\n      return 'Your slippage tolerance is set very low, the transaction may fail.';\r\n    }\r\n  }, [slippage]);\r\n\r\n  return (\r\n    <Stack zIndex=\"popover\" px={5} pt={3} pb={3}>\r\n      <Box as=\"h1\" textAlign=\"left\" fontSize=\"1rem\" w=\"100%\">\r\n        Transaction Settings\r\n      </Box>\r\n      <Divider />\r\n      <Box as=\"p\" fontSize=\"0.875rem\" textAlign=\"left\" fontWeight={400}>\r\n        Slippage tolerance\r\n      </Box>\r\n      <Flex direction=\"row\" alignItems=\"center\">\r\n        <Button\r\n          variant={isAutoSlippage ? 'gradient' : 'outline'}\r\n          colorScheme=\"dark-blue\"\r\n          borderRadius=\"full\"\r\n          onClick={handleButtonClick}\r\n          mr={3}\r\n        >\r\n          Auto\r\n        </Button>\r\n        <InputGroup color={inputColor} fontWeight={600}>\r\n          <NumberInput\r\n            opacity={1}\r\n            color={inputColor}\r\n            borderColor={inputBorderColor}\r\n            borderStyle=\"solid\"\r\n            borderWidth=\"1px\"\r\n            borderRadius=\"full\"\r\n            value={slippage}\r\n            setValue={handleChange}\r\n            onClick={handleInputClick}\r\n            onBlur={handleBlur}\r\n            pr={8}\r\n            pl={2.5}\r\n            pt={2.5}\r\n            pb={2}\r\n            fontSize=\"sm\"\r\n          />\r\n          <InputRightElement fontSize=\"sm\">%</InputRightElement>\r\n        </InputGroup>\r\n      </Flex>\r\n      {warningMessage && (\r\n        <HStack textAlign=\"left\" color={messageColor} maxW=\"320px\" spacing={4}>\r\n          <Icon as={FaExclamationTriangle} height={6} width={6} />\r\n          <Text fontWeight=\"normal\" fontSize=\"sm\">\r\n            {warningMessage}\r\n          </Text>\r\n        </HStack>\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n","export * from './stack-line';\r\n","import { Flex, StackItem, Text } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nexport type StackLineProps = {\r\n  title: string;\r\n  value: React.ReactNode;\r\n};\r\n\r\nexport const StackLine: React.FC<StackLineProps> = ({ value, title }) => {\r\n  return (\r\n    <StackItem>\r\n      <Flex>\r\n        <Text>{title}</Text>\r\n        <Text ml={2} flex={1} textAlign=\"right\">\r\n          {value}\r\n        </Text>\r\n      </Flex>\r\n    </StackItem>\r\n  );\r\n};\r\n","export * from './token-balances-popover-item';\r\nexport * from './token-balances-popover';\r\n","import { Flex, HStack, Image, Text } from '@chakra-ui/react';\r\nimport { toBigNumber } from '@sonicdex/sonic-js';\r\nimport { FC, useMemo } from 'react';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\n\r\ntype TokenBalancesPopoverItemProps = {\r\n  src?: string;\r\n  name?: string;\r\n  balance?: number;\r\n  symbol?: string;\r\n  decimals?: number;\r\n};\r\n\r\nexport const TokenBalancesPopoverItem: FC<TokenBalancesPopoverItemProps> = ({\r\n  src = questionMarkSrc, symbol,balance,decimals,name}) => {\r\n    \r\n  const _balance = useMemo(() =>\r\n      toBigNumber(balance ?? 0).applyDecimals(decimals ?? 0).toString(),\r\n    [balance, decimals]\r\n  );\r\n\r\n  return (\r\n    <Flex justify=\"space-between\" pb={3} _last={{ pb: 0 }}>\r\n      <HStack flex={0} minWidth=\"fit-content\">\r\n        <Image borderRadius='full' src={src} boxSize={4} alt={`${symbol} logo`} />\r\n        <Text>{name}</Text>\r\n      </HStack>\r\n      <Text textAlign=\"right\" flex={1}>\r\n        {_balance} {symbol}\r\n      </Text>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Popover, PopoverArrow, PopoverBody, PopoverContent, PopoverHeader, PopoverTrigger } from '@chakra-ui/popover';\r\n\r\nimport { Heading, HStack, Image, useColorModeValue } from '@chakra-ui/react';\r\nimport { FC, useMemo } from 'react';\r\n\r\nimport { TokenSource } from '@/components';\r\n\r\nimport { TokenBalancesPopoverItem } from './token-balances-popover-item';\r\n\r\ntype TokenBalancesPopoverProps = {\r\n  symbol?: string;\r\n  decimals?: number;\r\n  sources?: TokenSource[];\r\n  children?: React.ReactNode;\r\n};\r\n\r\nexport const TokenBalancesPopover: FC<TokenBalancesPopoverProps> = ({\r\n  symbol, decimals, sources = [], children }) => {\r\n\r\n  const filteredSources = useMemo(\r\n    () => sources.filter((source) => source.balance && source.balance > 0),\r\n    [sources]\r\n  );\r\n\r\n  const color = useColorModeValue('gray.800', 'gray.50');\r\n\r\n  if (filteredSources.length === 0) { return null; }\r\n\r\n  return (\r\n    <Popover trigger=\"hover\">\r\n      <PopoverTrigger>\r\n        {children || (\r\n          <HStack spacing={1}>\r\n            {filteredSources.map((source) => (\r\n              <Image borderRadius='full' boxSize='20px' key={source?.src} src={source?.src} alt={source.name} />\r\n            ))}\r\n          </HStack>\r\n          \r\n        )}\r\n      </PopoverTrigger>\r\n      <div>\r\n        <PopoverContent color={color}>\r\n          <PopoverArrow />\r\n          <PopoverHeader>\r\n            <Heading as=\"h3\" size=\"sm\"> Balance Breakdown</Heading>\r\n          </PopoverHeader>\r\n          <PopoverBody>\r\n            {filteredSources.map((source) => (\r\n              <TokenBalancesPopoverItem key={source.name} decimals={decimals} symbol={symbol} {...source} />\r\n            ))}\r\n          </PopoverBody>\r\n        </PopoverContent>\r\n      </div>\r\n\r\n    </Popover>\r\n  );\r\n};\r\n","export * from './token';\r\nexport * from './tokenCreditinfo';\r\n","import {\r\n  Box,\r\n  BoxProps,\r\n  Button,\r\n  ButtonProps,\r\n  Flex,\r\n  FlexProps,\r\n  forwardRef,\r\n  HStack,\r\n  Icon,\r\n  Image,\r\n  ImageProps,\r\n  Skeleton,\r\n  Text,\r\n  TextProps,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { createContext } from '@chakra-ui/react-utils';\r\nimport { Price } from '@sonicdex/sonic-js';\r\nimport { FaChevronDown } from '@react-icons/all-files/fa/FaChevronDown';\r\nimport React, { useCallback, useMemo } from 'react';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\nimport { NumberInput } from '@/components';\r\nimport { AppTokenMetadata } from '@/models';\r\nimport { getMaxValue } from '@/utils/format';\r\n\r\nimport { DisplayValue, NumberInputProps } from '..';\r\nimport { TokenBalancesPopover } from '../token-balances-popover';\r\n\r\n// === Core ===\r\n\r\nexport type TokenUniqueProps = {\r\n  value?: string;\r\n  tokenMetadata?: AppTokenMetadata;\r\n  tokenListMetadata?: AppTokenMetadata[];\r\n  sources?: TokenSource[];\r\n  setValue?: (value: string) => unknown;\r\n  isDisabled?: boolean;\r\n  isLoading?: boolean;\r\n  shouldGlow?: boolean;\r\n};\r\n\r\nexport type TokenProps = TokenUniqueProps & {\r\n  htmlProps?: BoxProps;\r\n};\r\n\r\nconst [TokenProvider, useTokenContext] = createContext<TokenUniqueProps>({\r\n  name: 'TokenContext',\r\n  errorMessage:\r\n    'useTokenContext: `context` is undefined. Seems you forgot to wrap all card components within `<Card />`',\r\n});\r\n\r\nexport type TokenSource = {\r\n  name: string;\r\n  src: string;\r\n  balance?: number;\r\n};\r\n\r\nexport const Token: React.FC<TokenProps> = ({\r\n  shouldGlow = false,\r\n  htmlProps,\r\n  children,\r\n  ...tokenProps\r\n}) => {\r\n  const borderGlow = useColorModeValue('dark-blue.300', 'dark-blue.500');\r\n  const borderNotGlow = useColorModeValue('gray.100', 'custom.4');\r\n  const borderColor = shouldGlow ? borderGlow : borderNotGlow;\r\n\r\n  const backgroundGlow = useColorModeValue('gray.50', 'black');\r\n  const backgroundNotGlow = useColorModeValue('gray.50', 'custom.2');\r\n  const background = shouldGlow ? backgroundGlow : backgroundNotGlow;\r\n\r\n  const shadow = useColorModeValue('base', 'none');\r\n\r\n  return (\r\n    <TokenProvider value={{ shouldGlow, ...tokenProps }}>\r\n      <Box\r\n        borderRadius={20}\r\n        bg={background}\r\n        border=\"1px solid\"\r\n        borderColor={borderColor}\r\n        shadow={shadow}\r\n        py={5}\r\n        px={5}\r\n        transition=\"border 400ms\"\r\n        position=\"relative\"\r\n        {...htmlProps}\r\n      >\r\n        {shouldGlow && <TokenGlow />}\r\n        {children}\r\n      </Box>\r\n    </TokenProvider>\r\n  );\r\n};\r\n\r\ntype TokenContentProps = FlexProps;\r\n\r\nexport const TokenContent: React.FC<TokenContentProps> = (props) => {\r\n  return (\r\n    <Flex\r\n      direction=\"row\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"space-between\"\r\n      mb={3}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\n// === Details ===\r\n\r\ntype TokenDetailsButtonProps = ButtonProps;\r\n\r\nexport const TokenDetailsButton = forwardRef<TokenDetailsButtonProps, 'button'>(\r\n  ({ children, ...props }, ref) => {\r\n    const { isLoading } = useTokenContext();\r\n    return (\r\n      <Button ref={ref} borderRadius=\"full\" mr={5} minWidth=\"fit-content\" {...props} isDisabled={isLoading || props.isDisabled}>\r\n        {children}\r\n        <Icon as={FaChevronDown} ml={2.5} width={3} />\r\n      </Button>\r\n    );\r\n  }\r\n);\r\n\r\ntype TokenDetailsLogo = ImageProps;\r\n\r\nexport const TokenDetailsLogo: React.FC<TokenDetailsLogo> = (props) => {\r\n  const { isLoading, tokenMetadata } = useTokenContext();\r\n\r\n  const logoSrc = tokenMetadata?.logo ?? questionMarkSrc;\r\n\r\n  return (\r\n    <Skeleton\r\n      isLoaded={!isLoading}\r\n      height={5}\r\n      width={5}\r\n      borderRadius=\"full\"\r\n      mr={2}\r\n    >\r\n      <Image\r\n        width={5}\r\n        minW={5}\r\n        height={5}\r\n        minH={5}\r\n        borderRadius=\"full\"\r\n        src={logoSrc}\r\n        alt={`${tokenMetadata?.symbol} logo`}\r\n        {...props}\r\n      />\r\n    </Skeleton>\r\n  );\r\n};\r\n\r\nexport const TokenDetailsSymbol: React.FC<TextProps> = (props) => {\r\n  const { isLoading, tokenMetadata } = useTokenContext();\r\n\r\n  return (\r\n    <Skeleton isLoaded={!isLoading} height={5} width=\"fit-content\">\r\n      <Text\r\n        fontWeight={700}\r\n        fontSize=\"lg\"\r\n        width=\"fit-content\"\r\n        minWidth={5}\r\n        {...props}\r\n      >\r\n        {tokenMetadata?.symbol}\r\n      </Text>\r\n    </Skeleton>\r\n  );\r\n};\r\n\r\n// === Balances ===\r\n\r\nexport const TokenData = (props: FlexProps) => {\r\n  return (\r\n    <Flex\r\n      direction=\"row\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"space-between\"\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport type TokenDataPriceProps = BoxProps & {\r\n  isUpdating?: boolean;\r\n  priceImpact?: string;\r\n};\r\n\r\nexport const TokenDataPrice: React.FC<TokenDataPriceProps> = ({\r\n  isUpdating,\r\n  priceImpact,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const { isLoading, value, tokenMetadata } = useTokenContext();\r\n\r\n  const isActive = useMemo(() => {\r\n    if (isLoading || parseFloat(value || '0') <= 0) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }, [isLoading, value]);\r\n\r\n  const price = useMemo(\r\n    () =>\r\n      Price.getByAmount({\r\n        amount: value,\r\n        price: tokenMetadata?.price,\r\n      }).toString(),\r\n    [tokenMetadata?.price, value]\r\n  );\r\n\r\n  const defaultColorActive = useColorModeValue('gray.800', 'gray.50');\r\n  const defaultColorInactive = useColorModeValue('gray.600', 'gray.300');\r\n  const defaultColor = isActive ? defaultColorActive : defaultColorInactive;\r\n\r\n  const color = useMemo(() => {\r\n    if (priceImpact) {\r\n      const priceImpactNumber = parseFloat(priceImpact);\r\n      const color =\r\n        priceImpactNumber > 0\r\n          ? 'green.500'\r\n          : priceImpactNumber <= 0 && priceImpactNumber >= -1\r\n            ? defaultColor\r\n            : priceImpactNumber < -1 && priceImpactNumber >= -5\r\n              ? 'yellow.500'\r\n              : 'red.500';\r\n\r\n      return color;\r\n    }\r\n\r\n    return defaultColor;\r\n  }, [priceImpact, defaultColor]);\r\n\r\n  const isPrice = useMemo(() => {\r\n    return price !== '0';\r\n  }, [price]);\r\n\r\n  return (\r\n    <Skeleton isLoaded={!isLoading} borderRadius=\"full\" minWidth={5}>\r\n      <HStack\r\n        transition=\"color 400ms\"\r\n        alignItems=\"center\"\r\n        color={defaultColor}\r\n        {...props}\r\n      >\r\n        {isPrice && (\r\n          <DisplayValue isUpdating={isUpdating} value={price} prefix=\"~$\" />\r\n        )}\r\n        {priceImpact && (\r\n          <DisplayValue\r\n            isUpdating={isUpdating}\r\n            color={color}\r\n            value={priceImpact}\r\n            prefix=\"(\"\r\n            suffix=\"%)\"\r\n          />\r\n        )}\r\n        {children}\r\n      </HStack>\r\n    </Skeleton>\r\n  );\r\n};\r\n\r\nexport type TokeDataBalancesProps = FlexProps & {\r\n  isUpdating?: boolean;\r\n  onMaxClick?: () => unknown | Promise<unknown>;\r\n};\r\n\r\nexport const TokenDataBalances: React.FC<TokeDataBalancesProps> = ({\r\n  isUpdating,\r\n  onMaxClick,\r\n  ...props\r\n}) => {\r\n  const { isLoading, sources, tokenMetadata, value } = useTokenContext();\r\n\r\n  const totalTokenBalance = useMemo(\r\n    () => sources?.reduce((acc, current) => acc + (current.balance ?? 0), 0),\r\n    [sources]\r\n  );\r\n\r\n  const shouldRenderMaxButton = useMemo(() => {\r\n    if (\r\n      onMaxClick &&\r\n      totalTokenBalance &&\r\n      totalTokenBalance > 0 &&\r\n      getMaxValue(tokenMetadata, totalTokenBalance).toNumber() !== Number(value)\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }, [onMaxClick, tokenMetadata, totalTokenBalance, value]);\r\n\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n\r\n  return (\r\n    <Skeleton isLoaded={!isLoading} borderRadius=\"full\" minW={20}>\r\n      <Flex direction=\"row\" color={color} {...props}>\r\n        <HStack>\r\n          <TokenBalancesPopover\r\n            sources={sources}\r\n            decimals={tokenMetadata?.decimals}\r\n            symbol={tokenMetadata?.symbol}\r\n          />\r\n\r\n          {typeof totalTokenBalance === 'number' && (\r\n            <DisplayValue\r\n              isUpdating={isUpdating}\r\n              value={totalTokenBalance}\r\n              decimals={tokenMetadata?.decimals || 0}\r\n              prefix=\"Balance: \"\r\n              suffix={tokenMetadata?.symbol && ` ${tokenMetadata?.symbol}`}\r\n              shouldDivideByDecimals\r\n            />\r\n          )}\r\n\r\n          {shouldRenderMaxButton && (\r\n            <Button variant=\"link\" onClick={onMaxClick}>\r\n              (Max)\r\n            </Button>\r\n          )}\r\n        </HStack>\r\n      </Flex>\r\n    </Skeleton>\r\n  );\r\n};\r\n\r\n// === Input ===\r\n\r\ntype TokenInputProps = NumberInputProps;\r\n\r\nexport const TokenInput: React.FC<TokenInputProps> = (props) => {\r\n\r\n  const { isLoading, isDisabled, shouldGlow, value, setValue, tokenMetadata } = useTokenContext();\r\n  const background = shouldGlow ? 'black' : 'custom.2';\r\n\r\n  const isActive = useMemo(() => {\r\n    if (isLoading || parseFloat(value || '0') <= 0) { return false;}\r\n    return true;\r\n  }, [isLoading, value]);\r\n\r\n  const handleChange = useCallback((_value: string) => {\r\n    if (tokenMetadata && setValue) {\r\n      if (_value === '' || typeof (_value) == undefined) return setValue('');\r\n      const [nat, decimals] = _value.split('.');\r\n      let newValue = parseInt(nat) > 0 ? nat.replace(/^0+/, '') : '0';\r\n      if (_value.includes('.') && tokenMetadata.decimals > 0) { newValue += '.'; }\r\n      if (decimals) { newValue += `${decimals.slice(0, tokenMetadata.decimals)}`; }\r\n      setValue(newValue);\r\n    }\r\n  },\r\n    [tokenMetadata, setValue]\r\n  );\r\n  const activeColor = useColorModeValue('gray.800', 'gray.50');\r\n  const inactiveColor = useColorModeValue('gray.400', 'custom.1');\r\n  const color = isActive ? activeColor : inactiveColor;\r\n\r\n  return (\r\n    <Skeleton isLoaded={!isLoading} borderRadius=\"full\">\r\n      <NumberInput\r\n        isDisabled={isDisabled}\r\n        value={value}\r\n        setValue={handleChange}\r\n        color={color}\r\n        background={background}\r\n        {...props}\r\n      />\r\n    </Skeleton>\r\n  );\r\n};\r\n\r\n// === Other Internal Components ===\r\n\r\nconst TokenGlow = () => (\r\n  <Box\r\n    position=\"absolute\"\r\n    borderRadius={20}\r\n    top={0}\r\n    left={0}\r\n    width=\"100%\"\r\n    height=\"100%\"\r\n    filter=\"blur(6px)\"\r\n    zIndex={-100}\r\n    bg=\"dark-blue.500\"\r\n  />\r\n);\r\n","import { Flex,Text  } from '@chakra-ui/react';\r\nimport { useTokenTaxCheck } from '@/hooks'\r\n\r\nexport type TokenMetaProps = {\r\n    tokenSymbol?: string;\r\n    tokenDecimals?: number;\r\n    tokenValue?: string;\r\n    tokenId?: string;\r\n    pageInfo?:string;\r\n};\r\n\r\nexport const TokenDataMetaInfo: React.FC<TokenMetaProps> = ({\r\n    tokenSymbol,\r\n    tokenValue,\r\n    tokenDecimals,\r\n    tokenId,\r\n    pageInfo,\r\n}) => {\r\n    var info = useTokenTaxCheck({tokenId ,tokenSymbol, tokenDecimals, tokenValue});\r\n    let isPrice = (): number => {\r\n        return parseFloat(info.taxInfo.netValue.toFixed(3));\r\n    };\r\n    let calcPrice: number = isPrice();\r\n\r\n    return (\r\n        <Flex mt={2} className=\"\">\r\n            {calcPrice&&tokenSymbol=='YC' ? (\r\n                <Text color=\"var(--chakra-colors-gray-200)\" >\r\n                    { pageInfo == \"swap\" ? \"Swapping for after 11% \": \"Credited after 11%\" }\r\n                    <a style={{ color: 'var(--chakra-colors-blue-300)' }} target=\"_blank\" \r\n                    href=\"https://blog.cigdao.com/cigdao-decentralization-sale-6856ad618f8c\"> YC tax </a> : {calcPrice}\r\n                </Text>\r\n            ) : (\r\n                ''\r\n            )}\r\n        </Flex>\r\n    );\r\n};","export * from './view-header';\r\n","import {\r\n  Box,\r\n  Flex,\r\n  IconButton,\r\n  Tooltip,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { FaArrowLeft } from '@react-icons/all-files/fa/FaArrowLeft';\r\n\r\ntype ViewHeaderProps = {\r\n  title: string;\r\n  onArrowBack?: () => void;\r\n};\r\n\r\nexport const ViewHeader: React.FC<ViewHeaderProps> = ({\r\n  title,\r\n  onArrowBack,\r\n  children,\r\n}) => {\r\n  const titleRightAdjustment = children ? 8 : 'auto';\r\n  const titleLeftAdjustment = onArrowBack ? 8 : 'auto';\r\n\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const shadow = useColorModeValue('base', 'none');\r\n  const color = useColorModeValue('gray.800', 'gray.50');\r\n\r\n  return (\r\n    <Flex direction=\"column\">\r\n      <Flex\r\n        py={3}\r\n        px={5}\r\n        bg={bg}\r\n        shadow={shadow}\r\n        fontSize=\"lg\"\r\n        color={color}\r\n        fontWeight={700}\r\n        textAlign=\"center\"\r\n        borderTopRadius={15}\r\n        borderBottomRadius={15}\r\n        direction=\"row\"\r\n        align=\"center\"\r\n      >\r\n        {onArrowBack && (\r\n          <Tooltip label=\"Back\">\r\n            <IconButton\r\n              size=\"sm\"\r\n              isRound\r\n              onClick={onArrowBack}\r\n              variant=\"outline\"\r\n              aria-label=\"back\"\r\n              icon={<FaArrowLeft />}\r\n              mr=\"auto\"\r\n            />\r\n          </Tooltip>\r\n        )}\r\n        <Box\r\n          pr={titleLeftAdjustment}\r\n          pl={titleRightAdjustment}\r\n          w=\"100%\"\r\n          mx=\"auto\"\r\n        >\r\n          {title}\r\n        </Box>\r\n        {children}\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n","import {\r\n  Box,\r\n  Flex,\r\n  Image,\r\n  keyframes,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\n\r\nimport { greenCheckSrc } from '@/assets';\r\nimport { StepStatus } from '@/components/modals';\r\n\r\nconst spin = keyframes`\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n`;\r\n\r\ntype CircleIconProps = {\r\n  status?: StepStatus;\r\n  iconSrc: string;\r\n};\r\n\r\nexport const CircleIcon = ({ status, iconSrc }: CircleIconProps) => {\r\n  const spinAnimation = `${spin} infinite 2s linear`;\r\n\r\n  const bgDark = status === StepStatus.Disabled ? 'custom.3' : 'dark-blue.500';\r\n  const bgLight = status === StepStatus.Disabled ? 'gray.200' : 'dark-blue.500';\r\n  const bg = useColorModeValue(bgLight, bgDark);\r\n\r\n  const opacity = status === StepStatus.Disabled ? 0.5 : 1;\r\n  const checkOpacity = status === StepStatus.Done ? 1 : 0;\r\n\r\n  return (\r\n    <Box\r\n      w=\"2.8125rem\"\r\n      h=\"2.8125rem\"\r\n      borderRadius=\"2.8125rem\"\r\n      position=\"relative\"\r\n      bg={bg}\r\n    >\r\n      {status === 'active' && (\r\n        <Box\r\n          w=\"2.8125rem\"\r\n          h=\"2.8125rem\"\r\n          borderRadius={45}\r\n          bg=\"dark-blue.500\"\r\n          filter=\"blur(10px)\"\r\n          position=\"absolute\"\r\n        />\r\n      )}\r\n      {status === 'active' && (\r\n        <Box\r\n          w=\"100%\"\r\n          h=\"100%\"\r\n          borderRadius=\"2.8125rem\"\r\n          zIndex={200}\r\n          border=\"2px solid #A8B2FF\"\r\n          borderTop=\"2px solid #FFFFFF\"\r\n          position=\"absolute\"\r\n          animation={spinAnimation}\r\n        />\r\n      )}\r\n      <Image\r\n        alt={'check'}\r\n        top={0}\r\n        right={0}\r\n        opacity={checkOpacity}\r\n        mt=\"-5px\"\r\n        mr=\"-3px\"\r\n        zIndex={300}\r\n        src={greenCheckSrc}\r\n        transition=\"opacity 400ms\"\r\n        position=\"absolute\"\r\n      />\r\n      <Flex\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"2.8125rem\"\r\n        zIndex={200}\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        position=\"absolute\"\r\n        opacity={opacity}\r\n        transition=\"opacity 400ms\"\r\n      >\r\n        <Image w=\"1.125rem\" src={iconSrc} alt={'icon'} />\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n","export * from './circle-icon';\r\n","export * from './plus';\r\nexport * from './circle-icon';\r\n","export * from './plus-icon';\r\n","import Icon, { IconProps } from '@chakra-ui/icon';\r\nimport { forwardRef } from '@chakra-ui/system';\r\n\r\nexport const PlusIcon = forwardRef<IconProps, 'svg'>((props, ref) => (\r\n  <Icon\r\n    ref={ref}\r\n    width=\"18\"\r\n    height=\"18\"\r\n    viewBox=\"0 0 18 18\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    {...props}\r\n  >\r\n    <path\r\n      d=\"M16.9062 7.9375H10.4375V1.46875C10.4375 1.10938 10.0781 0.75 9.71875 0.75H8.28125C7.87695 0.75 7.5625 1.10938 7.5625 1.46875V7.9375H1.09375C0.689453 7.9375 0.375 8.29688 0.375 8.65625V10.0938C0.375 10.498 0.689453 10.8125 1.09375 10.8125H7.5625V17.2812C7.5625 17.6855 7.87695 18 8.28125 18H9.71875C10.0781 18 10.4375 17.6855 10.4375 17.2812V10.8125H16.9062C17.2656 10.8125 17.625 10.498 17.625 10.0938V8.65625C17.625 8.29688 17.2656 7.9375 16.9062 7.9375Z\"\r\n      fill=\"dark-blue.500\"\r\n    />\r\n  </Icon>\r\n));\r\n","export * from './core';\r\nexport * from './layout';\r\nexport * from './icons';\r\nexport * from './maintenance';\r\nexport * from './wallet';\r\n","export * from './layout';\r\n","export const NAVBAR_HEIGHT = '116px';\r\nexport const FOOTER_HEIGHT = '40px';\r\n\r\nexport const NAVIGATION_TABS = [\r\n  { label: 'Swap', url: '/swap' },\r\n  { label: 'Liquidity', url: '/liquidity' },\r\n  { label: 'Assets', url: '/assets' },\r\n  { label: 'Activity', url: '/activity' },\r\n];\r\n","import {\r\n  chakra,\r\n  Container,\r\n  Flex,\r\n  HStack,\r\n  IconButton,\r\n  Link as ChakraLink,\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n  Tab,\r\n  TabList,\r\n  Tabs,\r\n  Text,\r\n  useColorMode,\r\n  useColorModeValue,\r\n  useToken,\r\n  Alert,\r\n  AlertIcon,\r\n  CloseButton,\r\n} from '@chakra-ui/react';\r\n\r\n\r\nimport { FaBook } from '@react-icons/all-files/fa/FaBook';\r\nimport { FaDiscord } from '@react-icons/all-files/fa/FaDiscord';\r\nimport { FaEllipsisH } from '@react-icons/all-files/fa/FaEllipsisH';\r\nimport { FaMedium } from '@react-icons/all-files/fa/FaMedium';\r\nimport { FaMoon } from '@react-icons/all-files/fa/FaMoon';\r\nimport { FaNetworkWired } from '@react-icons/all-files/fa/FaNetworkWired';\r\nimport { FaRedo } from '@react-icons/all-files/fa/FaRedo';\r\nimport { FaSun } from '@react-icons/all-files/fa/FaSun';\r\nimport { FaTwitter } from '@react-icons/all-files/fa/FaTwitter';\r\nimport { FiArrowUpRight } from '@react-icons/all-files/fi/FiArrowUpRight';\r\nimport React, { useMemo, useState } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nimport { ENV } from '@/config';\r\nimport { useHeaderResizeEffect } from '@/hooks';\r\nimport { modalsSliceActions, useAppDispatch, useWalletStore } from '@/store';\r\nimport { ExternalLink } from '@/utils';\r\n\r\nimport packageJSON from '@/../package.json';\r\n\r\nimport { LogoBox } from '../core';\r\n\r\nimport { FOOTER_HEIGHT, NAVIGATION_TABS } from './layout.constants';\r\n\r\nimport { WalletConnectBtn, WalletMenu } from '@/components/wallet';\r\n\r\n\r\nexport const Layout: React.FC = ({ children, ...props }) => {\r\n\r\n  const { isConnected } = useWalletStore();\r\n\r\n  const dispatch = useAppDispatch();\r\n  const location = useLocation();\r\n  const [headerHeight, setHeaderHeight] = useState('116px');\r\n\r\n  const currentTabIndex = useMemo(\r\n    () =>\r\n      NAVIGATION_TABS.findIndex(({ url }) => location.pathname.includes(url)),\r\n    [location]\r\n  );\r\n\r\n  const backgroundColor = useColorModeValue('custom.5', 'darkBlue');\r\n  const backgroundColorValue = useToken('colors', backgroundColor);\r\n\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  const menuBg = useColorModeValue('gray.50', 'custom.2');\r\n  const menuShadow = useColorModeValue('base', 'none');\r\n\r\n  useHeaderResizeEffect((element) => { setHeaderHeight(`${element.clientHeight}px`); });\r\n  const [showBanner, setShowBanner] = useState(true);\r\n  const handleCloseBanner = () => {\r\n    setShowBanner(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n       {showBanner && (\r\n        <Alert status=\"info\" mb={4} bg={menuBg} borderRadius={'md'} justifyContent={'center'}>\r\n          <AlertIcon />\r\n          <b> LP contest alert : </b> &nbsp; Add any LP in sonic and win a share  of $250K rewards. &nbsp;\r\n          <ChakraLink href=\"https://sonicdex.notion.site/Sonic-X-LP-Promotion-65c8b4fd93a7499bbe72f000f0b894c7\" fontWeight={600} isExternal color=\"teal.500\">\r\n          click here \r\n          </ChakraLink> &nbsp; for more details\r\n          <CloseButton size=\"sm\" onClick={handleCloseBanner} position=\"absolute\" right=\"8px\" top=\"8px\" />\r\n        </Alert>\r\n      )}\r\n      <Container as=\"header\" maxW={['100%', 'container.xl', 'container.xl']} position=\"sticky\" top={0} zIndex={10} id=\"header\" bg={backgroundColor}>\r\n        <Flex\r\n          zIndex=\"1000\" width=\"full\" maxWidth=\"container.xl\" margin=\"auto\"\r\n          direction=\"row\" justifyContent=\"center\" alignItems=\"center\" flexWrap=\"wrap\"\r\n          gap=\"2\" p={['4', '4', '8']} position=\"sticky\" top=\"0\"\r\n        >\r\n          <Flex display={['none', 'none', 'none', 'flex']} width={['0', '20%']} alignItems=\"center\" justifyContent=\"center\">\r\n            <LogoBox />\r\n          </Flex>\r\n          <chakra.nav flex=\"1\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n            <Tabs index={currentTabIndex} variant=\"solid-rounded\" colorScheme=\"dark-blue\">\r\n              <TabList bg={menuBg} >\r\n                {NAVIGATION_TABS.map(({ label, url }) => (\r\n                  <Tab as={Link} key={label} to={url} px={6}> \r\n                    {label}\r\n                  </Tab>\r\n                ))}\r\n\r\n                <Tab display={['flex', 'flex', 'flex', 'flex']} as=\"a\"\r\n                  href={'https://lbp.sonic.ooo/'} target={'_blank'}\r\n                  px={4}\r\n                >\r\n                  LBP\r\n                  <FiArrowUpRight />\r\n                </Tab>\r\n\r\n                <Tab display={['none', 'none', 'flex', 'flex']} as=\"a\"\r\n                  href={ExternalLink.analyticsApp} target={ExternalLink.analyticsApp}\r\n                  px={4}\r\n                >\r\n                  Analytics\r\n                  <FiArrowUpRight />\r\n                </Tab>\r\n              </TabList>\r\n            </Tabs>\r\n          </chakra.nav>\r\n          <Flex direction=\"row\" width={['fit-content', 'fit-content', '20%']} gap=\"4\" mr=\"-2\"\r\n            alignItems=\"center\" justifyContent=\"flex-end\">\r\n            <HStack>\r\n              {isConnected ? <WalletMenu placement=\"bottom-end\" /> : <WalletConnectBtn />}\r\n              <Menu placement=\"bottom-end\">\r\n                <MenuButton as={IconButton} aria-label=\"Menu\" icon={<FaEllipsisH />} borderRadius=\"full\" bg={menuBg} shadow={menuShadow} />\r\n                <div>\r\n                  <MenuList bg={menuBg} shadow={menuShadow} borderRadius=\"xl\">\r\n                    {ENV.isDarkModeEnabled && (\r\n                      <MenuItem onClick={toggleColorMode} icon={colorMode === 'dark' ? <FaSun /> : <FaMoon />}>\r\n                        {colorMode === 'dark' ? 'Light mode' : 'Dark mode'}\r\n                      </MenuItem>\r\n                    )}\r\n                    {isConnected && (\r\n                      <MenuItem onClick={() => dispatch(modalsSliceActions.openMintManualModal())} icon={<FaRedo />}>\r\n                        Retry minting\r\n                      </MenuItem>\r\n                    )}\r\n\r\n                    <MenuDivider />\r\n                    <ChakraLink href={ExternalLink.twitter} target={ExternalLink.twitter} rel=\"noopener noreferrer\" fontWeight=\"bold\">\r\n                      <MenuItem icon={<FaTwitter />}>Twitter</MenuItem>\r\n                    </ChakraLink>\r\n                    <ChakraLink href={ExternalLink.discord} target={ExternalLink.discord} rel=\"noopener noreferrer\" fontWeight=\"bold\">\r\n                      <MenuItem icon={<FaDiscord />}>Discord</MenuItem>\r\n                    </ChakraLink>\r\n                    <ChakraLink href={ExternalLink.medium} target={ExternalLink.medium} rel=\"noopener noreferrer\" fontWeight=\"bold\">\r\n                      <MenuItem icon={<FaMedium />}>Medium</MenuItem>\r\n                    </ChakraLink>\r\n                    <ChakraLink href={ExternalLink.sonicDocs} target={ExternalLink.sonicDocs} rel=\"noopener noreferrer\" fontWeight=\"bold\">\r\n                      <MenuItem icon={<FaBook />}>Documentation</MenuItem>\r\n                    </ChakraLink>\r\n                    <ChakraLink href={ExternalLink.swapApiDocs} target={ExternalLink.swapApiDocs} rel=\"noopener noreferrer\" fontWeight=\"bold\">\r\n                      <MenuItem icon={<FaNetworkWired />}>API</MenuItem>\r\n                    </ChakraLink>\r\n                  </MenuList>\r\n                </div>\r\n              </Menu>\r\n            </HStack>\r\n          </Flex>\r\n        </Flex>\r\n      </Container>\r\n\r\n      <Container as=\"main\" maxW=\"xl\" minH={`calc(100vh - ${headerHeight} - ${FOOTER_HEIGHT})`} py=\"4\" display=\"flex\" flexDirection=\"column\" {...props}>\r\n        {children}\r\n      </Container>\r\n\r\n      <chakra.footer px=\"4\" py=\"2\" position=\"fixed\" bottom={0} left={0} right={0}\r\n        background={`linear-gradient(to bottom, transparent 0%, ${backgroundColorValue} 50%)`} pointerEvents=\"none\"\r\n      >\r\n        <Text>Sonic v{packageJSON.version}</Text>\r\n      </chakra.footer>\r\n    </>\r\n  );\r\n};\r\n","export * from './maintenance';\r\n","import { Flex, Image, Link, Text, useColorModeValue } from '@chakra-ui/react';\r\nimport { FaBook } from '@react-icons/all-files/fa/FaBook';\r\nimport { FaDiscord } from '@react-icons/all-files/fa/FaDiscord';\r\nimport { FaTwitter } from '@react-icons/all-files/fa/FaTwitter';\r\n\r\nimport { logoSrc } from '@/assets';\r\nimport { ExternalLink } from '@/utils';\r\n\r\nexport const Maintenance = () => {\r\n  const color = useColorModeValue('gray.600', 'gray.300');\r\n\r\n  return (\r\n    <Flex\r\n      flexDirection=\"column\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      position=\"fixed\"\r\n      top={0}\r\n      left={0}\r\n      right={0}\r\n      bottom={0}\r\n    >\r\n      <Image src={logoSrc} m=\"8vh\" height=\"10vh\" />\r\n\r\n      <Flex\r\n        flex={1}\r\n        m={30}\r\n        textAlign=\"center\"\r\n        verticalAlign=\"center\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        flexDirection=\"column\"\r\n      >\r\n        <Text fontSize=\"4xl\">Maintenance</Text>\r\n        <Text fontSize=\"xl\">\r\n          Sonic App is under maintenance. We'll be back shortly.\r\n        </Text>\r\n        <Text color=\"dark-blue.500\">\r\n          <Link href={ExternalLink.twitter} target={ExternalLink.twitter}>\r\n            Checkout out more information\r\n          </Link>\r\n        </Text>\r\n      </Flex>\r\n\r\n      <Flex\r\n        m=\"5vh\"\r\n        flexDirection=\"row\"\r\n        justifyContent=\"space-around\"\r\n        alignItems=\"center\"\r\n        width={200}\r\n        color={color}\r\n      >\r\n        <Link href={ExternalLink.discord} target={ExternalLink.discord}>\r\n          <FaDiscord size={40} />\r\n        </Link>\r\n        <Link href={ExternalLink.twitter} target={ExternalLink.twitter}>\r\n          <FaTwitter size={40} />\r\n        </Link>\r\n        <Link href={ExternalLink.sonicDocs} target={ExternalLink.sonicDocs}>\r\n          <FaBook size={40} />\r\n        </Link>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Button } from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { TransactionFailedModal } from './components';\r\n\r\nexport const AddLiquidityFailModal = () => {\r\n  const {\r\n    isAddLiquidityFailModalOpened: isAddLiquidityFailOpened,\r\n    addLiquidityModalData: addLiquidityData,\r\n  } = useModalsStore();\r\n  const { callbacks: [addLiquidityCallback, closeCallback] = [] } =\r\n    addLiquidityData;\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeAddLiquidityFailModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionFailedModal\r\n      onClose={handleClose}\r\n      isOpen={isAddLiquidityFailOpened}\r\n      isCentered\r\n      title=\"Add Liquidity Failed\"\r\n    >\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={addLiquidityCallback}\r\n        isFullWidth\r\n      >\r\n        Retry\r\n      </Button>\r\n      <Button\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={handleClose}\r\n        isFullWidth\r\n      >\r\n        Close\r\n      </Button>\r\n    </TransactionFailedModal>\r\n  );\r\n};\r\n","import { checkPlainSrc, depositSrc, dropSrc, plusSrc } from '@/assets';\r\nimport {\r\n  AddLiquidityModalData,\r\n  AddLiquidityModalDataStep,\r\n  modalsSliceActions,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const AddLiquidityProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isAddLiquidityProgressModalOpened, addLiquidityModalData } =\r\n    useModalsStore();\r\n  const {\r\n    steps,\r\n    token1Symbol,\r\n    token0Symbol,\r\n    step: activeStep,\r\n  } = addLiquidityModalData;\r\n\r\n  const getStepStatus = useStepStatus<AddLiquidityModalData['step']>({\r\n    activeStep,\r\n    steps,\r\n  });\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeAddLiquidityProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal\r\n      onClose={handleClose}\r\n      isOpen={isAddLiquidityProgressModalOpened}\r\n      isCentered\r\n      title=\"Add LP in progress\"\r\n    >\r\n\r\n      {steps?.includes(AddLiquidityModalDataStep.Getacnt) && (\r\n        <TransactionStep status={getStepStatus(AddLiquidityModalDataStep.Getacnt)}\r\n          iconSrc={checkPlainSrc} chevron>\r\n          Getting Sonic <br /> Account\r\n\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(AddLiquidityModalDataStep.CreatePair) && (\r\n        <TransactionStep\r\n          status={getStepStatus(AddLiquidityModalDataStep.CreatePair)}\r\n          iconSrc={plusSrc}\r\n          chevron\r\n        >\r\n          Creating pair <br /> {token0Symbol} - {token1Symbol}\r\n        </TransactionStep>\r\n      )}\r\n\r\n      {steps?.includes(AddLiquidityModalDataStep.Approve0) && (\r\n        <TransactionStep\r\n          status={getStepStatus(AddLiquidityModalDataStep.Approve0)}\r\n          iconSrc={checkPlainSrc}\r\n          chevron\r\n        >\r\n          Approving <br /> {token0Symbol}\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(AddLiquidityModalDataStep.Deposit0) && (\r\n        <TransactionStep\r\n          status={getStepStatus(AddLiquidityModalDataStep.Deposit0)}\r\n          iconSrc={depositSrc}\r\n          chevron\r\n        >\r\n          Depositing <br /> {token0Symbol}\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(AddLiquidityModalDataStep.Approve1) && (\r\n        <TransactionStep\r\n          status={getStepStatus(AddLiquidityModalDataStep.Approve1)}\r\n          iconSrc={checkPlainSrc}\r\n          chevron\r\n        >\r\n          Approving <br /> {token1Symbol}\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(AddLiquidityModalDataStep.Deposit1) && (\r\n        <TransactionStep\r\n          status={getStepStatus(AddLiquidityModalDataStep.Deposit1)}\r\n          iconSrc={depositSrc}\r\n          chevron\r\n        >\r\n          Depositing <br /> {token1Symbol}\r\n        </TransactionStep>\r\n      )}\r\n\r\n      <TransactionStep\r\n        status={getStepStatus(AddLiquidityModalDataStep.AddLiquidity)}\r\n        iconSrc={dropSrc}\r\n      >\r\n        Adding LP of <br /> {token0Symbol} + {token1Symbol}\r\n      </TransactionStep>\r\n\r\n\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","import { Box } from '@chakra-ui/react';\r\nimport { useMemo } from 'react';\r\n\r\nimport { checkPlainSrc } from '@/assets';\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { StepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const AllowanceVerifyModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const {\r\n    isAllowanceVerifyModalOpened,\r\n    allowanceModalData: { tokenSymbol },\r\n  } = useModalsStore();\r\n\r\n  const _tokenSymbol = useMemo(() => {\r\n    if (!tokenSymbol) {\r\n      return ['token'];\r\n    } else if (typeof tokenSymbol === 'string') {\r\n      return [tokenSymbol];\r\n    } else {\r\n      return tokenSymbol;\r\n    }\r\n  }, [tokenSymbol]);\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeAllowanceVerifyModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal\r\n      onClose={handleClose}\r\n      isOpen={isAllowanceVerifyModalOpened}\r\n      isCentered\r\n      title=\"Verifying Allowance\"\r\n    >\r\n      {_tokenSymbol.map((symbol) => (\r\n        <TransactionStep\r\n          status={StepStatus.Active}\r\n          iconSrc={checkPlainSrc}\r\n          key={symbol}\r\n        >\r\n          <Box mx={6}>\r\n            Verifying {symbol} <br /> allowance\r\n          </Box>\r\n        </TransactionStep>\r\n      ))}\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","import {\r\n    Flex, Heading, Modal, ModalCloseButton, ModalContent, ModalOverlay, Text, useColorModeValue\r\n} from '@chakra-ui/react';\r\nimport React, { useState, useEffect } from 'react';\r\nimport packageJSON from '@/../package.json';\r\n\r\n\r\n\r\nvar appVer = localStorage.getItem('appver');\r\ntype AppUpdatedModalProps = {\r\n    isNotiOpen: boolean;\r\n};\r\n\r\nexport const AppUpdatedModal: React.FC<AppUpdatedModalProps> = ({ isNotiOpen }) => {\r\n\r\n    const [isModelOpen, setisModelOpen] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (packageJSON.version == appVer) {\r\n            setisModelOpen(false);\r\n        }\r\n    }, [appVer])\r\n\r\n    function handleClose() {\r\n        localStorage.setItem('appver', packageJSON.version);\r\n        setisModelOpen(false);\r\n    }\r\n\r\n    const bg = useColorModeValue('gray.50', 'custom.2');\r\n    const color = useColorModeValue('gray.600', 'custom.1');\r\n    const titleColor = useColorModeValue('gray.800', 'gray.50');\r\n    return isModelOpen ? (\r\n        <Modal isOpen={isModelOpen} isCentered onClose={handleClose}>\r\n            <ModalOverlay />\r\n            <ModalContent as={Flex} maxW=\"md\" direction=\"column\" alignItems=\"center\" bg={bg}\r\n                pt=\"37px\" px=\"37px\" pb=\"43px\" borderRadius={20}\r\n            >\r\n                <ModalCloseButton />\r\n                <Heading as=\"h2\" color={titleColor} fontWeight={700} fontSize=\"1.2rem\" mb={3}>\r\n                    UPDATE NOTIFICATION!\r\n                </Heading>\r\n                <Text as=\"p\" color={color} mb={2}>\r\n                We're excited to announce the launch of new features on SONIC, designed to improve your trading experience. \r\n                </Text>\r\n                <Text as=\"p\" color={color} mb={2}>\r\n                With the introduction of ICRC support, you can now trade and add liquidity pools for ckBTC, SNS1, and CHAT tokens. We've also implemented ICP, allowing you to trade and create LP for your favorite tokens using ICP without affecting current WICP pairs.\r\n   \r\n                </Text>\r\n                <Text as=\"p\" color={color} mb={2}>\r\n                Additionally, we've streamlined the ICP Wrapping process under the mint option for greater ease of use. \r\n                </Text>\r\n                <Text as=\"p\" color={color} mb={2}>\r\n                By default, tokens will be kept in your sonic wallet to facilitate high-frequency trading, where even a few extra seconds matter a lot. However, during the swap,\r\n                 you can uncheck this feature if you want to withdraw directly to your web wallet.\r\n                 <a style={{color:\"#008eff\" , fontWeight:\"bold\" }} href='https://docs.sonic.ooo/product/assets#keeping-assets-in-sonic-after-a-swap' target=\"_blank\">Learn more</a>\r\n                </Text>\r\n                <Text as=\"p\" color={color} mb={2}>\r\n                    We're confident that these updates will enhance your trading efficiency on Sonic DEX. Thank you for choosing Sonic DEX!\r\n                </Text>\r\n            </ModalContent>\r\n        </Modal>\r\n    ) : <></>;\r\n};\r\n","import { Flex, Image } from '@chakra-ui/react';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\n\r\ntype ImportTokenImageProps = {\r\n  logo?: string;\r\n};\r\n\r\nexport const ImportTokenImage = ({\r\n  logo = questionMarkSrc,\r\n}: ImportTokenImageProps) => {\r\n  if (logo === questionMarkSrc) {\r\n    return (\r\n      <Flex\r\n        borderRadius={26}\r\n        bg=\"gray.500\"\r\n        w={10}\r\n        h={10}\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Image alt=\"logo\" w={6} h={6} src={logo} />\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  return <Image alt=\"logo\" borderRadius={26} w={10} h={10} src={logo} />;\r\n};\r\n","import {\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  Flex,\r\n  Heading,\r\n  Image,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { useState } from 'react';\r\n\r\nimport { redTriangleWarningSrc } from '@/assets';\r\n\r\nimport { ImportTokenImage } from './import-token-image';\r\n\r\ntype ImportTokenProps = {\r\n  logo?: string;\r\n  id: string;\r\n  symbol: string;\r\n  name: string;\r\n  handleImport: (arg0?: any) => any;\r\n};\r\n\r\nexport const ImportToken = ({\r\n  logo,\r\n  id,\r\n  symbol,\r\n  name,\r\n  handleImport,\r\n}: ImportTokenProps) => {\r\n  const [understandRisk, setUnderstandRisk] = useState(false);\r\n\r\n  const bg = useColorModeValue('gray.100', 'custom.3');\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n\r\n  return (\r\n    <Flex direction=\"column\" width=\"100%\" alignItems=\"center\">\r\n      <Heading as=\"h1\" fontWeight={700} fontSize=\"1.125rem\" mb={6}>\r\n        Import Token\r\n      </Heading>\r\n      <ImportTokenImage logo={logo} />\r\n      <Text mt={2} fontSize=\"1.125rem\" fontWeight={700} color=\"gray.50\">\r\n        {symbol}\r\n      </Text>\r\n      <Text color={color}>{name}</Text>\r\n      <Flex\r\n        mt={5}\r\n        mb={6}\r\n        py={3}\r\n        w=\"100%\"\r\n        bg={bg}\r\n        borderRadius={20}\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        direction=\"row\"\r\n      >\r\n        <Text color=\"gray.50\">{id}</Text>\r\n      </Flex>\r\n      <Box\r\n        position=\"relative\"\r\n        bg=\"rgba(229, 130, 121, 0.1)\"\r\n        borderRadius={20}\r\n        mb={6}\r\n        pt={4}\r\n        px={5}\r\n        pb={5}\r\n      >\r\n        <Image\r\n          alt=\"warning\"\r\n          src={redTriangleWarningSrc}\r\n          w={6}\r\n          position=\"absolute\"\r\n          top={4}\r\n          right={5}\r\n        />\r\n        <Text fontSize=\"1.125rem\" color=\"#E58279\" fontWeight={700} mb={2}>\r\n          Trade at your own risk!\r\n        </Text>\r\n        <Text color=\"gray.50\">\r\n          Swapping from ICP to WICP is not reccomended at this moment due to the\r\n          IC restriction. Swapping from WICP to ICP is only allowed on Sonic P2P\r\n          market.\r\n        </Text>\r\n      </Box>\r\n      <Checkbox\r\n        isChecked={understandRisk}\r\n        alignSelf=\"flex-start\"\r\n        onChange={(e) => setUnderstandRisk(e.target.checked)}\r\n        size=\"lg\"\r\n        color=\"gray.50\"\r\n        fontWeight={600}\r\n        mb={6}\r\n      >\r\n        I understand the risk of trading this token\r\n      </Checkbox>\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        w=\"100%\"\r\n        borderRadius={12}\r\n        fontSize=\"1.125rem\"\r\n        fontWeight={700}\r\n        onClick={handleImport}\r\n        disabled={!understandRisk}\r\n      >\r\n        Import Token\r\n      </Button>\r\n    </Flex>\r\n  );\r\n};\r\n","export * from './import-token-image';\r\nexport * from './import-token';\r\n","export * from './import-token';\r\nexport * from './transaction';\r\n","export * from './transaction-failed-modal-content';\r\nexport * from './transaction-progress-modal-content';\r\nexport * from './transaction-step';\r\nexport * from './transaction.utils';\r\n","import {\r\n  Heading,\r\n  HStack,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  ModalProps,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\ntype TransactionFailedModalProps = ModalProps & {\r\n  title: string;\r\n};\r\n\r\nexport const TransactionFailedModal: React.FC<TransactionFailedModalProps> = ({\r\n  title,\r\n  children,\r\n  ...modalProps\r\n}) => {\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const color = useColorModeValue('gray.600', 'gray.400');\r\n\r\n  return (\r\n    <Modal {...modalProps}>\r\n      <ModalOverlay />\r\n      <ModalContent textAlign=\"center\" borderRadius={20} bg={bg}>\r\n        <ModalHeader>\r\n          <Heading as=\"h2\" fontWeight={700} fontSize=\"1.375rem\">\r\n            {title}\r\n          </Heading>\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Text color={color}>Please choose an option below</Text>\r\n        </ModalBody>\r\n        <ModalFooter as={HStack}>{children}</ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n","import {\r\n  Flex,\r\n  Heading,\r\n  Modal,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalOverlay,\r\n  ModalProps,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nexport type TransactionProgressModalProps = ModalProps & {\r\n  title: string;\r\n};\r\n\r\nexport const TransactionProgressModal: React.FC<\r\n  TransactionProgressModalProps\r\n> = ({ children, title, ...props }) => {\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n\r\n  const titleColor = useColorModeValue('gray.800', 'gray.50');\r\n\r\n  return (\r\n    <Modal {...props}>\r\n      <ModalOverlay />\r\n      <ModalContent\r\n        as={Flex}\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        bg={bg}\r\n        pt=\"37px\"\r\n        px=\"37px\"\r\n        pb=\"43px\"\r\n        borderRadius={20}\r\n        minWidth={['unset', 'fit-content', 'fit-content']}\r\n      >\r\n        <ModalCloseButton />\r\n        <Heading\r\n          as=\"h1\"\r\n          color={titleColor}\r\n          fontWeight={700}\r\n          fontSize=\"1.375rem\"\r\n          mb={3}\r\n        >\r\n          {title}\r\n        </Heading>\r\n        <Text as=\"p\" color={color} mb=\"2.06rem\">\r\n          Please wait some time for transactions to finish\r\n        </Text>\r\n        <Flex\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"flex-start\"\r\n          flexWrap=\"wrap\"\r\n          rowGap={4}\r\n        >\r\n          {children}\r\n        </Flex>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n","import { Box, Flex, Icon, useColorModeValue } from '@chakra-ui/react';\r\nimport { FaChevronRight } from '@react-icons/all-files/fa/FaChevronRight';\r\nimport { useMemo } from 'react';\r\n\r\nimport { CircleIcon } from '@/components';\r\n\r\nimport { StepStatus } from '../..';\r\n\r\ntype TransactionStepProps = {\r\n  children: React.ReactNode;\r\n  status: StepStatus;\r\n  iconSrc: string;\r\n  chevron?: boolean;\r\n};\r\n\r\nexport const TransactionStep = ({\r\n  children,\r\n  iconSrc,\r\n  status,\r\n  chevron = false,\r\n}: TransactionStepProps) => {\r\n  const colorDisabled = useColorModeValue('gray.600', 'custom.1');\r\n  const colorEnabled = useColorModeValue('gray.800', 'white');\r\n\r\n  const { color, weight, opacity } = useMemo(() => {\r\n    if (status === StepStatus.Disabled) {\r\n      return {\r\n        color: colorDisabled,\r\n        weight: 400,\r\n        opacity: 0.4,\r\n      };\r\n    }\r\n\r\n    return {\r\n      color: colorEnabled,\r\n      weight: 600,\r\n      opacity: 1,\r\n    };\r\n  }, [colorDisabled, colorEnabled, status]);\r\n\r\n  return (\r\n    <>\r\n      <Flex\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Flex direction=\"column\" alignItems=\"center\">\r\n          <CircleIcon iconSrc={iconSrc} status={status} />\r\n          <Flex\r\n            mt={2}\r\n            as=\"h3\"\r\n            fontWeight={weight}\r\n            fontSize=\"0.875rem\"\r\n            color={color}\r\n            textAlign=\"center\"\r\n            transition=\"color 400ms\"\r\n            flex={1}\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            {children}\r\n          </Flex>\r\n        </Flex>\r\n      </Flex>\r\n      {chevron && (\r\n        <Box>\r\n          <Icon\r\n            as={FaChevronRight}\r\n            my={4}\r\n            mx={2}\r\n            opacity={opacity}\r\n            transition=\"opacity 400ms\"\r\n          />\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","export enum TransactionType {}\r\n","import { Button } from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { TransactionFailedModal } from './components';\r\n\r\nexport const DepositFailModal = () => {\r\n  const { isDepositFailModalOpened, depositModalData } = useModalsStore();\r\n  const { callbacks: [retryCallback, closeCallback] = [] } = depositModalData;\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeDepositFailModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionFailedModal\r\n      onClose={handleClose}\r\n      isOpen={isDepositFailModalOpened}\r\n      isCentered\r\n      title=\"Deposit Failed\"\r\n    >\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={retryCallback}\r\n        isFullWidth\r\n      >\r\n        Retry\r\n      </Button>\r\n      <Button\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={handleClose}\r\n        isFullWidth\r\n      >\r\n        Later\r\n      </Button>\r\n    </TransactionFailedModal>\r\n  );\r\n};\r\n","import {\r\n    Flex, Heading, Modal, ModalCloseButton, ModalContent, ModalOverlay, useColorModeValue, ModalBody, Box, Text, HStack, Button\r\n} from '@chakra-ui/react';\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\n\r\nimport QRCode from \"react-qr-code\";\r\nimport { FiCopy } from '@react-icons/all-files/fi/FiCopy';\r\ntype DepostAddressProps = {\r\n    isNotiOpen: boolean;\r\n    tokenId?: string;\r\n    onclose?: any;\r\n};\r\n\r\nimport { tokenList } from '@/utils'\r\nimport { useWalletStore } from '@/store';\r\n\r\nimport { desensitizationPrincipalId } from '@/utils/canister';\r\nimport { copyToClipboard } from '@/utils';\r\n\r\nexport const DepostAddressModal: React.FC<DepostAddressProps> = ({ isNotiOpen, tokenId, onclose }) => {\r\n    const [isModelOpen, setisModelOpen] = useState(isNotiOpen);\r\n\r\n    const { accountId, principalId } = useWalletStore();\r\n\r\n    useEffect(() => {\r\n        setisModelOpen(isNotiOpen);\r\n    }, [isNotiOpen])\r\n\r\n    function handleClose() {\r\n        setisModelOpen(false);\r\n        onclose()\r\n    }\r\n    const shortPrincipalId = useMemo(() => {\r\n        return desensitizationPrincipalId(principalId);\r\n    }, [principalId]);\r\n\r\n    const shortAccntId =  useMemo(() => {\r\n        return desensitizationPrincipalId(accountId);\r\n    },[accountId])\r\n\r\n    const handleCopy = (type:string) => {\r\n        if(type =='princ'){\r\n            if (principalId) {\r\n                copyToClipboard(principalId, 'Principal ID copied to clipboard');\r\n            }\r\n        }else if(type =='acntid'){\r\n            if (accountId) {\r\n                copyToClipboard(accountId, 'Account ID copied to clipboard');\r\n            }\r\n        }else if(type == 'tokenid'){\r\n            if (tokenId) {\r\n                copyToClipboard(tokenId, 'Token Canister ID copied to clipboard');\r\n            }\r\n        }\r\n    };\r\n    \r\n    const tokenData =  useMemo(() => {\r\n        return tokenId ? tokenList('obj', tokenId) : {};\r\n    },[tokenId]) \r\n    \r\n    const bg = useColorModeValue('gray.50', 'custom.2');\r\n    const titleColor = useColorModeValue('gray.800', 'gray.50');\r\n    return isModelOpen ? (\r\n        <Modal isOpen={isModelOpen} isCentered onClose={handleClose}>\r\n            <ModalOverlay />\r\n            <ModalContent as={Flex} maxW=\"xl\" direction=\"column\" alignItems=\"center\" bg={bg}\r\n                pt=\"37px\" px=\"37px\" pb=\"43px\" borderRadius={20}\r\n            >\r\n                <ModalCloseButton />\r\n                <Heading as=\"h4\" color={titleColor} fontWeight={600} fontSize={'1.3rem'}>\r\n                    Deposit {tokenData?.symbol}\r\n                  \r\n                </Heading>\r\n                <Box mb={3}>\r\n                    <br/>\r\n                    <p> <b>Token Canister  :  </b> <span style={{userSelect:'all' , marginRight:'5px'}}>{tokenData?.id}</span> <Box onClick={()=>handleCopy('tokenid')} cursor={'pointer'} as={FiCopy} display={'inline-flex'}/></p>\r\n                </Box>\r\n               \r\n                <ModalBody mt={4} p={0} display={'contents'}>\r\n                    <Box width={'full'} py={3} px={2} >\r\n                        <Heading as=\"h2\" color={titleColor} fontWeight={400} fontSize=\"1.2rem\" mb={3}>\r\n                            Use Principal ID\r\n                        </Heading>\r\n                        <Flex width={'100%'} border=\"1px solid rgb(63, 81, 181)\" borderRadius={'lg'} py={3} px={2}>\r\n                            <Box display=\"flex\" width={'100%'} alignItems=\"center\"  justifyContent=\"start\">\r\n                                <Box mr={4}>Principal ID</Box>\r\n                                <Button onClick={()=>handleCopy('princ')} >\r\n                                    <HStack px={10} p={3}>\r\n                                        <FiCopy />\r\n                                        <Text> {shortPrincipalId}</Text>\r\n                                    </HStack>\r\n                                </Button>\r\n                            </Box>\r\n                            <Box border=\"1px solid rgb(63, 81, 181)\" p={1} borderRadius={'md'} >\r\n                                {principalId && <QRCode value={principalId} size={100} />}\r\n                            </Box>\r\n                        </Flex>\r\n                    </Box>\r\n                    { tokenData?.symbol =='ICP' &&\r\n                    <Box width={'full'} py={3} px={2} mt=\"3\" >\r\n                        <Heading as=\"h2\" color={titleColor} fontWeight={400} fontSize=\"1.2rem\" mb={3}>\r\n                            Use Account ID\r\n                        </Heading>\r\n                        <Flex width={'100%'} border=\"1px solid rgb(63, 81, 181)\" borderRadius={'lg'} py={3} px={2}>\r\n                        <Box display=\"flex\" width={'100%'} alignItems=\"center\"  justifyContent=\"start\" >\r\n                                <Box mr={4}>Account ID</Box>\r\n                                <Button onClick={()=>handleCopy('acntid')} >\r\n                                    <HStack px={10} p={3}>\r\n                                        <FiCopy />\r\n                                        <Text> {shortAccntId}</Text>\r\n                                    </HStack>\r\n                                </Button>\r\n                            </Box>\r\n                            <Box border=\"1px solid rgb(63, 81, 181)\" p={1} borderRadius={'md'} >\r\n                                {accountId && <QRCode value={accountId} size={100} />}\r\n                            </Box>\r\n                        </Flex>\r\n                    </Box>}\r\n                </ModalBody>\r\n            </ModalContent>\r\n        </Modal>\r\n    ) : <></>;\r\n};\r\n","import { checkPlainSrc, depositSrc } from '@/assets';\r\nimport {\r\n  DepositModalData, DepositModalDataStep, modalsSliceActions,\r\n  useAppDispatch, useModalsStore\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const DepositProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isDepositProgressModalOpened, depositModalData } = useModalsStore();\r\n  const { steps, tokenSymbol, step: activeStep } = depositModalData;\r\n\r\n  const getStepStatus = useStepStatus<DepositModalData['step']>({ activeStep, steps });\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeDepositProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal onClose={handleClose}\r\n      isOpen={isDepositProgressModalOpened} isCentered title=\"Deposit in progress\">\r\n      {steps?.includes(DepositModalDataStep.Getacnt) && (\r\n        <TransactionStep status={getStepStatus(DepositModalDataStep.Getacnt)}\r\n          iconSrc={checkPlainSrc} chevron>\r\n          Getting Sonic {tokenSymbol}  <br /> Account\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(DepositModalDataStep.Approve) && (\r\n        <TransactionStep status={getStepStatus(DepositModalDataStep.Approve)}\r\n          iconSrc={checkPlainSrc} chevron>\r\n          Approving <br /> {tokenSymbol}\r\n        </TransactionStep>\r\n      )}\r\n      <TransactionStep status={getStepStatus(DepositModalDataStep.Deposit)} iconSrc={depositSrc}>\r\n        Depositing <br /> {tokenSymbol}\r\n      </TransactionStep>\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","export * from './add-liquidity-fail-modal';\r\nexport * from './add-liquidity-progress-modal';\r\nexport * from './allowance-verify-modal';\r\nexport * from './components';\r\nexport * from './deposit-fail-modal';\r\nexport * from './deposit-progress-modal';\r\nexport * from './mint-manual-modal';\r\nexport * from './mint-wicp-fail-modal';\r\nexport * from './mint-wicp-progress-modal';\r\nexport * from './mint-xtc-fail-modal';\r\nexport * from './mint-xtc-progress-modal';\r\nexport * from './remove-liquidity-fail-modal';\r\nexport * from './remove-liquidity-progress-modal';\r\nexport * from './swap-fail-modal';\r\nexport * from './swap-progress-modal';\r\nexport * from './terms-and-conditions-modal';\r\nexport * from './token-select-modal';\r\nexport * from './use-step-status';\r\nexport * from './withdraw-progress-modal';\r\nexport * from './withdraw-wicp-fail-modal';\r\nexport * from './withdraw-wicp-progress-modal';\r\nexport * from './app-Updated';\r\nexport * from './wallet-list';\r\nexport * from './deposit-info';\r\nexport * from './transfer-progress-modal';\r\nexport * from './retryDeposit';","import {\r\n  Button,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  FormHelperText,\r\n  FormLabel,\r\n  HStack,\r\n  Input,\r\n  Link as ChakraLink,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  Select,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n  useConst,\r\n} from '@chakra-ui/react';\r\nimport { FaRedoAlt } from '@react-icons/all-files/fa/FaRedoAlt';\r\nimport {\r\n  ChangeEvent,\r\n  FormEvent,\r\n  KeyboardEvent,\r\n  useCallback,\r\n  useMemo,\r\n  useState,\r\n} from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nimport {\r\n  MintTokenSymbol,\r\n  modalsSliceActions,\r\n  NotificationType,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n  useNotificationStore,\r\n} from '@/store';\r\nimport { ExternalLink } from '@/utils';\r\n\r\n\r\nexport const MintManualModal = () => {\r\n  const TOKEN_OPTIONS = useConst([\r\n    {\r\n      label: MintTokenSymbol.WICP,\r\n      value: MintTokenSymbol.WICP,\r\n    },\r\n    {\r\n      label: MintTokenSymbol.XTC,\r\n      value: MintTokenSymbol.XTC,\r\n    },\r\n  ]);\r\n  const color = useColorModeValue('gray.600', 'gray.400');\r\n\r\n  const {\r\n    mintManualModalOpened,\r\n    mintManualBlockHeight,\r\n    mintManualTokenSymbol,\r\n    mintManualModalErrorMessage,\r\n  } = useModalsStore();\r\n  const { addNotification } = useNotificationStore();\r\n\r\n  const [blockHeightErrorMessage, setBlockHeightErrorMessage] = useState<\r\n    string | undefined\r\n  >(undefined);\r\n  const [tokenErrorMessage, setTokenErrorMessage] = useState<\r\n    string | undefined\r\n  >(undefined);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleMint = useCallback(\r\n    (tokenSymbol: MintTokenSymbol) => {\r\n      addNotification({\r\n        title: `Minting ${tokenSymbol}`,\r\n        type: NotificationType.MintManual,\r\n        id: String(new Date().getTime()),\r\n      });\r\n    },\r\n    [addNotification]\r\n  );\r\n\r\n  const resetModalData = () => {\r\n    dispatch(modalsSliceActions.setMintManualModalErrorMessage(''));\r\n    setBlockHeightErrorMessage(undefined);\r\n    setTokenErrorMessage(undefined);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    resetModalData();\r\n    dispatch(modalsSliceActions.closeMintManualModal());\r\n  };\r\n\r\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n    resetModalData();\r\n    e.preventDefault();\r\n\r\n    if (!mintManualBlockHeight || !mintManualTokenSymbol) {\r\n      if (!mintManualBlockHeight) {\r\n        setBlockHeightErrorMessage('Block Height is required');\r\n      }\r\n      if (!mintManualTokenSymbol) {\r\n        setTokenErrorMessage('Token is required');\r\n      }\r\n      return;\r\n    }\r\n\r\n    handleMint(mintManualTokenSymbol);\r\n\r\n    handleClose();\r\n  };\r\n\r\n  const linkColor = useColorModeValue('dark-blue.500', 'dark-blue.400');\r\n\r\n  const { activityTabURL, learnMoreURL } = useMemo(() => {\r\n    return {\r\n      activityTabURL: '/activity',\r\n      learnMoreURL: ExternalLink.failedMintDocs,\r\n    };\r\n  }, []);\r\n\r\n  const handleBlockHeightChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    dispatch(modalsSliceActions.setMintManualBlockHeight(e.target.value));\r\n  };\r\n\r\n  const handleTokenSymbolSelect = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    dispatch(\r\n      modalsSliceActions.setMintManualTokenSymbol(\r\n        e.target.value as MintTokenSymbol\r\n      )\r\n    );\r\n  };\r\n\r\n  const blockInvalidBlockHeightChar = (e: KeyboardEvent<HTMLInputElement>) =>\r\n    ['e', 'E', '+', '-'].includes(e.key) && e.preventDefault();\r\n\r\n  return (\r\n    <Modal isOpen={mintManualModalOpened} onClose={handleClose} isCentered>\r\n      <ModalOverlay />\r\n      <ModalContent as=\"form\" onSubmit={handleSubmit} noValidate>\r\n        <ModalCloseButton />\r\n        <ModalHeader borderBottom=\"none\">\r\n          Retry minting{' '}\r\n          <Text textAlign=\"center\" fontSize=\"sm\" color={color}>\r\n            Use this form to retry any of your failed mints.\r\n          </Text>\r\n        </ModalHeader>\r\n        <ModalBody as={Stack} spacing={4}>\r\n          <FormControl isRequired isInvalid={Boolean(tokenErrorMessage)}>\r\n            <FormLabel>Token</FormLabel>\r\n            <Select\r\n              name=\"token\"\r\n              value={mintManualTokenSymbol}\r\n              onChange={handleTokenSymbolSelect}\r\n            >\r\n              {TOKEN_OPTIONS.map((option) => (\r\n                <option key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n            <FormErrorMessage>{tokenErrorMessage}</FormErrorMessage>\r\n          </FormControl>\r\n\r\n          <FormControl isRequired isInvalid={Boolean(blockHeightErrorMessage)}>\r\n            <FormLabel>Transaction Block Height</FormLabel>\r\n\r\n            <Input\r\n              name=\"blockHeight\"\r\n              value={mintManualBlockHeight}\r\n              onKeyDown={blockInvalidBlockHeightChar}\r\n              onChange={handleBlockHeightChange}\r\n              placeholder=\"2021024\"\r\n              type=\"number\"\r\n            />\r\n\r\n            <FormErrorMessage>{blockHeightErrorMessage}</FormErrorMessage>\r\n            <FormHelperText>\r\n              Visit your&nbsp;\r\n              <ChakraLink\r\n                as={Link}\r\n                color={linkColor}\r\n                to={activityTabURL}\r\n                onClick={handleClose}\r\n              >\r\n                activity tab\r\n              </ChakraLink>\r\n              &nbsp;to find your failed transactions blockheight. Learn more\r\n              about failed mints&nbsp;\r\n              <ChakraLink\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                color={linkColor}\r\n                href={learnMoreURL}\r\n              >\r\n                here\r\n              </ChakraLink>\r\n              .\r\n            </FormHelperText>\r\n          </FormControl>\r\n          {mintManualModalErrorMessage && (\r\n            <Text textAlign=\"center\" fontSize=\"sm\" color=\"red.500\">\r\n              {mintManualModalErrorMessage}\r\n            </Text>\r\n          )}\r\n        </ModalBody>\r\n        <ModalFooter as={HStack}>\r\n          <Button leftIcon={<FaRedoAlt />} isFullWidth type=\"submit\" variant=\"gradient\" colorScheme=\"dark-blue\">\r\n            Retry\r\n          </Button>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n","import { Button } from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { TransactionFailedModal } from './components';\r\n\r\nexport const MintWICPFailModal = () => {\r\n  const { isMintWICPFailModalOpened, mintWICPModalData } = useModalsStore();\r\n  const { callbacks: [retryCallback, closeCallback] = [] } = mintWICPModalData;\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeMintWICPFailModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionFailedModal\r\n      onClose={handleClose}\r\n      isOpen={isMintWICPFailModalOpened}\r\n      isCentered\r\n      title=\"ICP Wrapping Failed\"\r\n    >\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={retryCallback}\r\n        isFullWidth\r\n      >\r\n        Retry\r\n      </Button>\r\n      <Button\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={handleClose}\r\n        isFullWidth\r\n      >\r\n        Later\r\n      </Button>\r\n    </TransactionFailedModal>\r\n  );\r\n};\r\n","import { checkPlainSrc, depositSrc, swapSrc, withdrawSrc } from '@/assets';\r\nimport {\r\n  MintModalData,\r\n  MintModalDataStep,\r\n  modalsSliceActions,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const MintWICPProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isMintWICPProgressModalOpened, mintWICPModalData } = useModalsStore();\r\n  const { steps, step: activeStep } = mintWICPModalData;\r\n  const getStepStatus = useStepStatus<MintModalData['step']>({ activeStep, steps});\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeMintWICPProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal\r\n      onClose={handleClose}\r\n      isOpen={isMintWICPProgressModalOpened}\r\n      isCentered\r\n      title=\"ICP wrapping in progress\"\r\n    >\r\n      {steps?.includes(MintModalDataStep.LedgerTransfer) && (\r\n        <TransactionStep\r\n          status={getStepStatus(MintModalDataStep.LedgerTransfer)}\r\n          iconSrc={withdrawSrc}\r\n          chevron\r\n        >\r\n          Ledger Transfer <br />\r\n          ICP\r\n        </TransactionStep>\r\n      )}\r\n      <TransactionStep\r\n        status={getStepStatus(MintModalDataStep.Mint)}\r\n        iconSrc={swapSrc}\r\n        chevron={\r\n          steps?.includes(MintModalDataStep.Approve) ||\r\n          steps?.includes(MintModalDataStep.Deposit)\r\n        }\r\n      >\r\n        Minting <br /> WICP\r\n      </TransactionStep>\r\n      {steps?.includes(MintModalDataStep.Approve) && (\r\n        <TransactionStep\r\n          status={getStepStatus(MintModalDataStep.Approve)}\r\n          iconSrc={checkPlainSrc}\r\n          chevron\r\n        >\r\n          Approving <br /> WICP\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(MintModalDataStep.Deposit) && (\r\n        <TransactionStep\r\n          status={getStepStatus(MintModalDataStep.Deposit)}\r\n          iconSrc={depositSrc}\r\n        >\r\n          Depositing <br /> WICP\r\n        </TransactionStep>\r\n      )}\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","import { Button } from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { TransactionFailedModal } from './components';\r\n\r\nexport const MintXTCFailModal = () => {\r\n  const {\r\n    isMintXTCFailModalOpened: isRemoveLiquidityFailOpened,\r\n    mintXTCModalData,\r\n  } = useModalsStore();\r\n  const { callbacks: [retryCallback, closeCallback] = [] } = mintXTCModalData;\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeMintXTCFailModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionFailedModal\r\n      onClose={handleClose}\r\n      isOpen={isRemoveLiquidityFailOpened}\r\n      isCentered\r\n      title=\"Mint XTC Failed\"\r\n    >\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={retryCallback}\r\n        isFullWidth\r\n      >\r\n        Retry\r\n      </Button>\r\n      <Button\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={handleClose}\r\n        isFullWidth\r\n      >\r\n        Later\r\n      </Button>\r\n    </TransactionFailedModal>\r\n  );\r\n};\r\n","import { checkPlainSrc, depositSrc, swapSrc, withdrawSrc } from '@/assets';\r\nimport {\r\n  MintModalData,MintModalDataStep,modalsSliceActions,useAppDispatch,useModalsStore,\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const MintXTCProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isMintXTCProgressModalOpened, mintXTCModalData } = useModalsStore();\r\n  const { steps, step: activeStep } = mintXTCModalData;\r\n\r\n  const getStepStatus = useStepStatus<MintModalData['step']>({activeStep,steps,});\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeMintXTCProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal\r\n      onClose={handleClose}\r\n      isOpen={isMintXTCProgressModalOpened}\r\n      isCentered\r\n      title=\"Mint XTC in progress\"\r\n    >\r\n      <TransactionStep status={getStepStatus(MintModalDataStep.LedgerTransfer)} iconSrc={withdrawSrc} chevron>\r\n        Ledger Transfer <br /> ICP\r\n      </TransactionStep>\r\n      <TransactionStep\r\n        status={getStepStatus(MintModalDataStep.Mint)}\r\n        iconSrc={swapSrc}\r\n        chevron={\r\n          steps?.includes(MintModalDataStep.Approve) ||\r\n          steps?.includes(MintModalDataStep.Deposit)\r\n        }\r\n      >\r\n        Minting <br /> XTC\r\n      </TransactionStep>\r\n      {steps?.includes(MintModalDataStep.Approve) && (\r\n        <TransactionStep\r\n          status={getStepStatus(MintModalDataStep.Approve)}\r\n          iconSrc={checkPlainSrc}\r\n          chevron\r\n        >\r\n          Approving <br /> XTC\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(MintModalDataStep.Deposit) && (\r\n        <TransactionStep\r\n          status={getStepStatus(MintModalDataStep.Deposit)}\r\n          iconSrc={depositSrc}\r\n        >\r\n          Depositing <br /> XTC\r\n        </TransactionStep>\r\n      )}\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","import { Button } from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { TransactionFailedModal } from './components';\r\n\r\nexport const RemoveLiquidityFailModal = () => {\r\n  const { isRemoveLiquidityFailModalOpened, removeLiquidityModalData } =\r\n    useModalsStore();\r\n  const { callbacks: [retryCallback, closeCallback] = [] } =\r\n    removeLiquidityModalData;\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeRemoveLiquidityFailModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionFailedModal\r\n      onClose={handleClose}\r\n      isOpen={isRemoveLiquidityFailModalOpened}\r\n      isCentered\r\n      title=\"Remove Liquidity Failed\"\r\n    >\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={retryCallback}\r\n        isFullWidth\r\n      >\r\n        Retry\r\n      </Button>\r\n      <Button\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={handleClose}\r\n        isFullWidth\r\n      >\r\n        Close\r\n      </Button>\r\n    </TransactionFailedModal>\r\n  );\r\n};\r\n","import { dropSrc, withdrawSrc } from '@/assets';\r\nimport {\r\n  modalsSliceActions,\r\n  RemoveLiquidityModalData,\r\n  RemoveLiquidityModalDataStep,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const RemoveLiquidityProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isRemoveLiquidityProgressModalOpened, removeLiquidityModalData } =\r\n    useModalsStore();\r\n  const {\r\n    steps,\r\n    token1Symbol,\r\n    token0Symbol,\r\n    step: activeStep,\r\n  } = removeLiquidityModalData;\r\n  const getStepStatus = useStepStatus<RemoveLiquidityModalData['step']>({\r\n    activeStep,\r\n    steps,\r\n  });\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeRemoveLiquidityProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal\r\n      onClose={handleClose}\r\n      isOpen={isRemoveLiquidityProgressModalOpened}\r\n      isCentered\r\n      title=\"Removing LP in progress\"\r\n    >\r\n      <TransactionStep\r\n        status={getStepStatus(RemoveLiquidityModalDataStep.RemoveLiquidity)}\r\n        iconSrc={dropSrc}\r\n        chevron={\r\n          steps?.includes(RemoveLiquidityModalDataStep.Withdraw0) ||\r\n          steps?.includes(RemoveLiquidityModalDataStep.Withdraw1)\r\n        }\r\n      >\r\n        Removing Liquidity Position of <br /> {token0Symbol} + {token1Symbol}\r\n      </TransactionStep>\r\n\r\n      {steps?.includes(RemoveLiquidityModalDataStep.Withdraw0) && (\r\n        <TransactionStep\r\n          status={getStepStatus(RemoveLiquidityModalDataStep.Withdraw0)}\r\n          iconSrc={withdrawSrc}\r\n          chevron={steps?.includes(RemoveLiquidityModalDataStep.Withdraw1)}\r\n        >\r\n          Withdrawing <br /> {token0Symbol}\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(RemoveLiquidityModalDataStep.Withdraw1) && (\r\n        <TransactionStep\r\n          status={getStepStatus(RemoveLiquidityModalDataStep.Withdraw1)}\r\n          iconSrc={withdrawSrc}\r\n        >\r\n          Withdrawing <br /> {token1Symbol}\r\n        </TransactionStep>\r\n      )}\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport {\r\n    Button, Modal, ModalOverlay, ModalContent, ModalHeader, ModalBody, ModalFooter, useColorModeValue,\r\n    FormControl, FormErrorMessage, Stack, HStack, Select, ModalCloseButton, FormLabel, Text\r\n} from '@chakra-ui/react';\r\n\r\nimport { FaRedoAlt } from '@react-icons/all-files/fa/FaRedoAlt';\r\nimport { useSwapCanisterStore } from '@/store';\r\n\r\nimport { Principal } from '@dfinity/principal';\r\nimport { BatchTransact } from 'artemis-web3-adapter';\r\nimport { artemis } from '@/integrations/artemis';\r\n\r\nimport { ENV } from '@/config';\r\nimport { SwapIDL } from '@/did';\r\n\r\nimport { NotificationType, useNotificationStore } from '@/store';\r\n\r\ntype RetryProps = {\r\n    isRetryOpen?: Number;\r\n};\r\n\r\nexport const RetryFailedTrxModal: React.FC<RetryProps> = ({ isRetryOpen }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [tokenErrorMessage, setRokenError] = useState('');\r\n    const [tokenSelected, settokenSelected] = useState('');\r\n    const [buttonText, setbuttonText] = useState('Retry');\r\n    const { supportedTokenList } = useSwapCanisterStore();\r\n    const [isTokenTrx, setisTokenTrx] = useState(false);\r\n\r\n    const { addNotification } = useNotificationStore();\r\n\r\n    setRokenError; setisTokenTrx; setbuttonText; BatchTransact; artemis;\r\n    // setRokenError; supportedTokenList; supportedTokenListState; tokenSelected;\r\n\r\n    const bg = useColorModeValue('gray.50', 'custom.2');\r\n    const titleColor = useColorModeValue('gray.800', 'gray.50');\r\n\r\n    useEffect(() => {\r\n        if (supportedTokenList?.length && !tokenSelected)\r\n            settokenSelected(supportedTokenList[0]?.id);\r\n    }, [supportedTokenList])\r\n\r\n\r\n    useEffect(() => {\r\n        if (isRetryOpen) { setIsOpen(true) }\r\n        else setIsOpen(false);\r\n    }, [isRetryOpen])\r\n\r\n    const handleSubmit = async (event: any) => {\r\n        event.preventDefault();\r\n        setisTokenTrx(true);\r\n        const trx = new BatchTransact({\r\n            retry: {\r\n                canisterId: ENV.canistersPrincipalIDs.swap,\r\n                idl: SwapIDL.factory,\r\n                methodName: 'retryDeposit',\r\n                onSuccess: () => { },\r\n                onFail: () => { },\r\n                args: [Principal.fromText(tokenSelected)]\r\n            }\r\n        }, artemis);\r\n\r\n        trx.execute().then((data: any) => {\r\n            if(data){\r\n                addNotification({ title: `Added Failed Transaction balance`, type: NotificationType.Success, id: String(new Date().getTime()), });\r\n            }else{\r\n                addNotification({ title: `No pending deposits`, type: NotificationType.Error, id: String(new Date().getTime()), });\r\n            }\r\n            setIsOpen(false);\r\n            setisTokenTrx(false);\r\n        }).catch((err: any) => {\r\n            setisTokenTrx(false);\r\n            setIsOpen(false);\r\n            addNotification({ title: `Error in Transaction. Please try again`, type: NotificationType.Error, id: String(new Date().getTime()), });\r\n        })\r\n    };\r\n    const handleTokenSelect = async (event: any) => {\r\n        event.preventDefault();\r\n        settokenSelected(event.target.value);\r\n    };\r\n\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} onClose={() => setIsOpen(false)} isCentered closeOnOverlayClick={!isTokenTrx}>\r\n            <ModalOverlay />\r\n            <ModalContent as=\"form\" onSubmit={handleSubmit} noValidate bg={bg}>\r\n                {isTokenTrx == false && <ModalCloseButton />}\r\n                <ModalHeader borderBottom=\"none\" pt={8}>\r\n                    Retry Failed Deposit\r\n                    <Text mt={3} textAlign=\"center\" fontSize=\"sm\" color={titleColor}>\r\n                        Use this form to retry any of your failed Deposit.\r\n                    </Text>\r\n                </ModalHeader>\r\n                <ModalBody as={Stack} spacing={4} pt={6} pb={4}>\r\n                    <FormControl isRequired isInvalid={Boolean(tokenErrorMessage)}>\r\n                        <FormLabel>Select Token</FormLabel>\r\n                        <Select name=\"token\" value={tokenSelected} onChange={handleTokenSelect}>\r\n                            {supportedTokenList?.map((option, index) => (\r\n                                <option key={index} value={option.id}>\r\n                                    {option.name}\r\n                                </option>\r\n                            ))}\r\n                        </Select>\r\n                        <FormErrorMessage>{tokenErrorMessage}</FormErrorMessage>\r\n                    </FormControl>\r\n                </ModalBody>\r\n                <ModalFooter as={HStack}>\r\n                    <Button isLoading={isTokenTrx} width={'100%'} leftIcon={<FaRedoAlt />} type=\"submit\" variant=\"gradient\" colorScheme=\"dark-blue\">\r\n                        {buttonText}\r\n                    </Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    );\r\n};","import { Button } from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { TransactionFailedModal } from './components';\r\n\r\nexport const SwapFailModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isSwapFailModalOpened, swapModalData } = useModalsStore();\r\n  const { callbacks: [retryCallback, withdrawCallback, closeCallback] = [] } =\r\n    swapModalData;\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeSwapFailModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionFailedModal\r\n      onClose={handleClose}\r\n      isOpen={isSwapFailModalOpened}\r\n      isCentered\r\n      title=\"Swap Failed\"\r\n    >\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={retryCallback}\r\n        isFullWidth\r\n      >\r\n        Retry Swap\r\n      </Button>\r\n      <Button\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={withdrawCallback}\r\n        isFullWidth\r\n      >\r\n        Withdraw to Plug\r\n      </Button>\r\n    </TransactionFailedModal>\r\n  );\r\n};\r\n","import { checkPlainSrc, depositSrc, swapSrc, withdrawSrc } from '@/assets';\r\nimport {\r\n  modalsSliceActions, SwapModalData, SwapModalDataStep, useAppDispatch, useModalsStore,\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const SwapProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isSwapProgressModalOpened, swapModalData } = useModalsStore();\r\n  const { steps, fromTokenSymbol, toTokenSymbol, step: activeStep } = swapModalData;\r\n\r\n  const getStepStatus = useStepStatus<SwapModalData['step']>({ activeStep, steps });\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeSwapProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal onClose={handleClose} isOpen={isSwapProgressModalOpened} isCentered title=\"Swap in progress\">\r\n       {steps?.includes(SwapModalDataStep.Getacnt) && (\r\n        <TransactionStep status={getStepStatus(SwapModalDataStep.Getacnt)}\r\n          iconSrc={checkPlainSrc} chevron>\r\n          Getting Sonic<br />{fromTokenSymbol} Account\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(SwapModalDataStep.Approve) && (\r\n        <TransactionStep status={getStepStatus(SwapModalDataStep.Approve)} iconSrc={checkPlainSrc} chevron>\r\n          Approving <br /> {fromTokenSymbol}\r\n        </TransactionStep>\r\n      )}\r\n      {steps?.includes(SwapModalDataStep.Deposit) && (\r\n        <TransactionStep status={getStepStatus(SwapModalDataStep.Deposit)} iconSrc={depositSrc} chevron>\r\n          Depositing <br /> {fromTokenSymbol}\r\n        </TransactionStep>\r\n      )}\r\n      <TransactionStep status={getStepStatus(SwapModalDataStep.Swap)} iconSrc={swapSrc} chevron={steps?.includes(SwapModalDataStep.Withdraw)}>\r\n        Swapping <br /> {fromTokenSymbol} to {toTokenSymbol}\r\n      </TransactionStep>\r\n      {steps?.includes(SwapModalDataStep.Withdraw) && (\r\n        <TransactionStep status={getStepStatus(SwapModalDataStep.Withdraw)} iconSrc={withdrawSrc}>\r\n          Withdrawing <br /> {toTokenSymbol}\r\n        </TransactionStep>\r\n      )}\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  Link,\r\n  Modal,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\nimport { ExternalLink } from '@/utils';\r\n\r\nexport const TermsAndConditionsModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const {\r\n    isTermsAndConditionsModalOpened: isOpened,\r\n    termsAndConditionsModalData: {\r\n      callbacks: [successCallback, closeCallback] = [],\r\n    },\r\n  } = useModalsStore();\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeTermsAndConditionsModal());\r\n  };\r\n\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n\r\n  return (\r\n    <Modal onClose={handleClose} isOpen={isOpened} isCentered>\r\n      <ModalOverlay />\r\n\r\n      <ModalContent\r\n        alignItems=\"center\"\r\n        borderRadius={20}\r\n        minWidth=\"fit-content\"\r\n      >\r\n        <ModalCloseButton />\r\n        <ModalHeader borderBottom=\"none\">Terms and Conditions</ModalHeader>\r\n        <Text as=\"p\" color={color} maxW={370}>\r\n          Please read &nbsp;\r\n          <Link color=\"dark-blue.600\" href={ExternalLink.termsAndConditions}>\r\n            Sonic's terms & conditions\r\n          </Link>\r\n          &nbsp;carefully.\r\n          <br />\r\n          By clicking \"I agree\" you acknowledge that you have read and accepted\r\n          them.\r\n        </Text>\r\n        <ModalFooter width=\"full\">\r\n          <Button\r\n            onClick={successCallback}\r\n            width=\"full\"\r\n            colorScheme=\"dark-blue\"\r\n            variant=\"gradient\"\r\n          >\r\n            I agree\r\n          </Button>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n","import { \r\n  Box, Button,Flex,Heading,Icon,Image,Modal,ModalBody,ModalCloseButton,ModalContent,\r\n  ModalHeader,ModalOverlay,Skeleton,Stack,Text,Tooltip,useColorModeValue,\r\n} from '@chakra-ui/react';\r\n\r\nimport { deserialize } from '@sonicdex/sonic-js';\r\nimport { FaHdd } from '@react-icons/all-files/fa/FaHdd';\r\nimport { useEffect, useMemo, useState } from 'react';\r\n\r\nimport { arrowBackSrc, questionMarkSrc } from '@/assets';\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { AppTokenMetadata } from '@/models';\r\nimport { FeatureState, modalsSliceActions, useAppDispatch, useModalsStore} from '@/store';\r\n\r\n// import { ExternalLink } from '@/utils';\r\n\r\nimport { DisplayValue, SearchBar } from '..';\r\nimport { ImportToken } from './components';\r\n\r\nexport const TokenSelectModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const {\r\n    tokenSelectModalData: tokenSelectData,\r\n    isTokenSelectModalModalOpened: isTokenSelectOpened,\r\n  } = useModalsStore();\r\n\r\n  const { tokens, onSelect, selectedTokenIds, isLoading = false, allowAddToken} = tokenSelectData; // This controls if token can be imported\r\n\r\n  const [addToken, setAddToken] = useState(false);\r\n  const [importTokenData, setImportTokenData] = useState({ name: '',symbol: '',logo: '',id: ''});\r\n\r\n  const parsedTokens = useMemo(() => deserialize(tokens), [tokens]);\r\n  const [search, setSearch] = useState('');\r\n  const [filteredList, setFilteredList] =\r\n    useState<AppTokenMetadata[]>(parsedTokens);\r\n  const { totalBalances } = useBalances();\r\n\r\n  useEffect(() => {\r\n    const filterFunction = ({ symbol, name }: Partial<AppTokenMetadata>) => {\r\n      if (search?.length === 0) {\r\n        return true;\r\n      }\r\n      const lowerSearch = search.toLowerCase();\r\n      return (\r\n        symbol?.toLowerCase().includes(lowerSearch) ||\r\n        name?.toLowerCase().includes(lowerSearch)\r\n      );\r\n    };\r\n\r\n    const filteredItems = parsedTokens.filter(filterFunction);\r\n    setFilteredList(filteredItems);\r\n  }, [search, parsedTokens]);\r\n \r\n \r\n  const handleSelect = (tokenId?: string) => {  \r\n    onSelect(tokenId);handleTokenSelectClose();\r\n  };\r\n\r\n  const handleImportToken = (tokenData: any) => {\r\n    setAddToken(true);setImportTokenData(importTokenData);\r\n  };\r\n\r\n  const importToken = () => {\r\n    // TODO: Import token integration\r\n    handleTokenSelectClose();\r\n  };\r\n\r\n  const handleTokenSelectClose = () => {\r\n    setSearch('');\r\n    dispatch(modalsSliceActions.closeTokenSelectModal());\r\n  };\r\n\r\n  const bg = useColorModeValue('white', 'custom.2');\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n  const emptyColor = useColorModeValue('gray.600', 'gray.300');\r\n\r\n  return (\r\n    <Modal isOpen={isTokenSelectOpened} onClose={handleTokenSelectClose} scrollBehavior=\"inside\" isCentered size=\"md\">\r\n      <ModalOverlay />\r\n      <ModalContent bg={bg}>\r\n        <ModalCloseButton zIndex=\"docked\" />\r\n        <ModalHeader>\r\n          {addToken ? (\r\n            <Box onClick={() => setAddToken(false)} position=\"absolute\" p={2} top={3}\r\n              left={4} cursor=\"pointer\" transition=\"background 400ms\" _hover={{ background: 'custom.3'}}\r\n            >\r\n              <Image src={arrowBackSrc} alt=\"Back\" />\r\n            </Box>\r\n          ) : (\r\n            <Flex w=\"100%\" direction=\"column\" alignItems=\"center\" position=\"sticky\" bg={bg} top={0}>\r\n              <Heading as=\"h1\" fontWeight={700} fontSize=\"lg\">\r\n                Select Token\r\n              </Heading>\r\n              <Box fontSize=\"md\" px=\"0.625rem\" w=\"100%\" mt={4}>\r\n                <SearchBar search={search} setSearch={setSearch} />\r\n              </Box>\r\n            </Flex>\r\n          )}\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          {addToken ? (\r\n            <div>\r\n              <ImportToken id={importTokenData?.id} symbol={importTokenData?.symbol} name={importTokenData?.name} handleImport={importToken}/>\r\n            </div>\r\n          ) : (\r\n            <Stack width=\"100%\" direction=\"column\">\r\n              {isLoading &&\r\n                [...Array(4)].map(() => <TokenSelectItemSkeleton />)}\r\n              {!isLoading && filteredList.length > 0 ? (\r\n                filteredList.map(({ id, logo, symbol, decimals, name }) => (\r\n                  <TokenSelectItem key={id} balance={totalBalances && totalBalances[id]}\r\n                    symbol={symbol} decimals={decimals} name={name} onSelect={() => handleSelect(id)} isLoading={isLoading}\r\n                    isSelected={selectedTokenIds?.includes(id)} logoSrc={logo}\r\n                  />\r\n                ))\r\n              ) : (\r\n                <Stack color={emptyColor} alignItems=\"center\" pt={2}>\r\n                  <Icon as={FaHdd} />\r\n                  <Text textAlign=\"center\">\r\n                    Can't see your token? Request it to be added to Sonic using\r\n                    the button below.\r\n                  </Text>\r\n                </Stack>\r\n              )}\r\n\r\n              {allowAddToken && filteredList.length === 0 && (\r\n                <Flex direction=\"row\" alignItems=\"center\" py={3} px={3}\r\n                  cursor=\"pointer\" justifyContent=\"space-between\" width=\"100%\"\r\n                  transition=\"border 400ms\" border=\"1px solid transparent\" borderRadius=\"20px\"\r\n                >\r\n                  <Flex direction=\"row\" alignItems=\"center\">\r\n                    <Skeleton isLoaded={!isLoading} borderRadius={40}>\r\n                      <Image alt={importTokenData.symbol} src={importTokenData.logo}\r\n                        w={10} h={10} borderRadius={40}\r\n                      />\r\n                    </Skeleton>\r\n                    <Skeleton isLoaded={!isLoading} minWidth={4} ml={3}>\r\n                      <Text fontWeight={700} fontSize=\"1.125rem\" pl={3}>\r\n                        {importTokenData.symbol}\r\n                      </Text>\r\n                    </Skeleton>\r\n                    <Skeleton isLoaded={!isLoading} minWidth={17} ml={2}>\r\n                      <Text pl={2} color={color}>\r\n                        {importTokenData.name}\r\n                      </Text>\r\n                    </Skeleton>\r\n                  </Flex>\r\n                  <Skeleton isLoaded={!isLoading} minWidth={17} ml={2}>\r\n                    <Button width=\"fit-content\" variant=\"gradient\" colorScheme=\"dark-blue\"\r\n                      px={4} borderRadius={20} fontWeight={700} onClick={handleImportToken}\r\n                    >\r\n                      Import\r\n                    </Button>\r\n                  </Skeleton>\r\n                </Flex>\r\n              )}\r\n            </Stack>\r\n          )}\r\n        </ModalBody>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\ntype TokenSelectItemProps = Partial<{\r\n  balance: number; onSelect: any; name: string;\r\n  symbol: string; decimals: number;isSelected: boolean;\r\n  isLoading: boolean;logoSrc: string;\r\n}>;\r\n\r\nconst TokenSelectItem = ({\r\n  balance = 0, onSelect, name = '', symbol = '', decimals = 0,isSelected = false,\r\n  isLoading = false, logoSrc = questionMarkSrc,\r\n}: TokenSelectItemProps) => {\r\n  const { balancesState } = useBalances();\r\n\r\n  const isBalancesUpdating = useMemo(() => {\r\n    return balancesState === FeatureState.Updating;\r\n  }, [balancesState]);\r\n\r\n  const nameColor = useColorModeValue('gray.700', 'gray.300');\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" py={3} px={3} cursor=\"pointer\"\r\n      width=\"100%\" transition=\"border 400ms\" border=\"1px solid\" borderColor={isSelected ? 'gray.600' : 'transparent'}\r\n      borderRadius=\"20px\" onClick={onSelect} _hover={{ borderColor: 'custom.4'}}\r\n    >\r\n      <Stack direction=\"row\" alignItems=\"center\" spacing={4}>\r\n        <Skeleton isLoaded={!isLoading}>\r\n          <Image alt={symbol} src={logoSrc} w={8} h={8} borderRadius={40} />\r\n        </Skeleton>\r\n        <Box>\r\n          <Skeleton isLoaded={!isLoading} minWidth=\"fit-content\">\r\n            <Text fontWeight={700} maxWidth=\"100%\">\r\n              {symbol}\r\n            </Text>\r\n          </Skeleton>\r\n          <Skeleton isLoaded={!isLoading} flex={1} overflow=\"hidden\">\r\n            <Tooltip label={name} openDelay={1000}>\r\n              <Text fontSize=\"sm\" color={nameColor}>\r\n                {name}\r\n              </Text>\r\n            </Tooltip>\r\n          </Skeleton>\r\n        </Box>\r\n      </Stack>\r\n      <Skeleton isLoaded={!isLoading} minWidth=\"fit-content\" ml={3}>\r\n        <DisplayValue isUpdating={isBalancesUpdating} value={balance} decimals={decimals}\r\n          fontSize=\"1.125rem\" fontWeight={700} textAlign=\"right\" shouldDivideByDecimals\r\n        />\r\n      </Skeleton>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst TokenSelectItemSkeleton = () => (\r\n  <Flex direction=\"row\" alignItems=\"center\" py={3} px={2} cursor=\"pointer\" height={16}\r\n   justifyContent=\"space-between\" width=\"100%\" transition=\"border 400ms\" border=\"1px solid transparent\"\r\n    borderRadius={20}\r\n  >\r\n    <Flex direction=\"row\" alignItems=\"center\">\r\n      <Skeleton isLoaded={false} height={10} width={10} borderRadius={40} />\r\n      <Skeleton isLoaded={false} width={12} ml={3} height={7} />\r\n      <Skeleton isLoaded={false} width={18} height={6} ml={2} />\r\n    </Flex>\r\n    <Skeleton isLoaded={false} minWidth={18} height={6} ml={2} />\r\n  </Flex>\r\n);\r\n","import {depositSrc } from '@/assets';\r\nimport {\r\n  TransferModalData, TransferModalDataStep, modalsSliceActions,\r\n  useAppDispatch, useModalsStore\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const TransferProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isTransferProgressModalOpened, transferModalData } = useModalsStore();\r\n  const { steps, tokenSymbol, step: activeStep } = transferModalData;\r\n\r\n  const getStepStatus = useStepStatus<TransferModalData['step']>({ activeStep, steps });\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeTransferProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal onClose={handleClose}\r\n      isOpen={isTransferProgressModalOpened} isCentered title=\"Transfer in progress\">\r\n      {steps?.includes(TransferModalDataStep.Transfer) && (\r\n        <TransactionStep status={getStepStatus(TransferModalDataStep.Transfer)}\r\n          iconSrc={depositSrc}>\r\n          Transferring {tokenSymbol}\r\n        </TransactionStep>\r\n      )}\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","import { useCallback } from 'react';\r\n\r\nexport enum StepStatus {\r\n  Active = 'active',\r\n  Disabled = 'disabled',\r\n  Done = 'done',\r\n}\r\n\r\ntype UseStepStatusMemoOptions<Step> = {\r\n  activeStep?: Step;\r\n  steps?: Step[];\r\n};\r\n\r\nexport const useStepStatus = <Step>({\r\n  activeStep,\r\n  steps,\r\n}: UseStepStatusMemoOptions<Step>) =>\r\n  useCallback(\r\n    (step: Step) => {\r\n      if (activeStep) {\r\n        const selectedStepIndex = steps?.indexOf(step);\r\n        const activeStepIndex = steps?.indexOf(activeStep);\r\n\r\n        if (activeStepIndex! > selectedStepIndex!) return StepStatus.Done;\r\n        if (activeStepIndex === selectedStepIndex) return StepStatus.Active;\r\n      }\r\n\r\n      return StepStatus.Disabled;\r\n    },\r\n    [activeStep, steps]\r\n  );\r\n","import {\r\n    Flex, Heading, Modal, ModalCloseButton, ModalContent, ModalOverlay, useColorModeValue, ModalHeader, ModalBody,\r\n    Stack, Image, Box, Text, Spinner\r\n} from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nimport { useWalletStore, walletState, useAppDispatch, walletActions } from '@/store';\r\n\r\nimport {artemis} from '@/integrations/artemis';\r\n\r\nimport { tokenList} from '@/utils'\r\nimport { ENV } from '@/config';\r\n\r\nexport const WalletListModal: React.FC = () => {\r\n    const { state , walletSelected} = useWalletStore();\r\n    const dispatch = useAppDispatch();\r\n\r\n    function handleClose() {\r\n        dispatch(walletActions.setOnwalletList(walletState.Idle));\r\n    }\r\n    async function handleSelectWallet(id: string) {\r\n        var tknList= tokenList(\"obj\");\r\n        const connectObj = {\r\n            host: ENV.host,\r\n            whitelist: [...Object.values(ENV.canistersPrincipalIDs),...Object.keys(tknList)],\r\n        }\r\n        \r\n        dispatch(walletActions.setWalletSelected(id));\r\n        dispatch(walletActions.setOnwalletList(walletState.Connecting));\r\n        \r\n        var connectInfo = await artemis.connect(id,connectObj);\r\n        if(connectInfo){\r\n            if(artemis?.principalId && artemis?.provider){\r\n                dispatch(walletActions.setWalletLoaded({ principleId: artemis.principalId ,accountId: artemis.accountId ,walletActive:artemis.walletActive }) );\r\n            }\r\n        }else{\r\n            dispatch(walletActions.setOnwalletList(walletState.OpenWalletList));\r\n        }\r\n    }\r\n    const bg = useColorModeValue('gray.50', 'custom.2');\r\n    const titleColor = useColorModeValue('gray.800', 'gray.50');\r\n\r\n    \r\n\r\n\r\n\r\n    return (\r\n        <Modal isOpen={(state == walletState.OpenWalletList || state == walletState.Connecting) ? true : false} isCentered onClose={handleClose}>\r\n            <ModalOverlay />\r\n            <ModalContent as={Flex} maxW=\"sm\" direction=\"column\" alignItems=\"center\" bg={bg}\r\n                pt=\"36px\" px=\"20px\" pb=\"44px\" borderRadius={20}\r\n            >\r\n                <ModalCloseButton />\r\n                {(state == walletState.OpenWalletList) &&\r\n                    <>\r\n                        <ModalHeader>\r\n                            <Heading textAlign={'left'} as=\"h2\" color={titleColor} fontWeight={700} fontSize=\"1.2rem\" mb={4}>\r\n                                Connect Wallet\r\n                            </Heading>\r\n                        </ModalHeader>\r\n                        <ModalBody mt={4} p={0}>\r\n                            {artemis?.wallets.map((item: any, i:number) => (\r\n                                <Stack width=\"100%\" maxWidth=\"100%\" direction={['row', 'row']} key={i}\r\n                                    alignItems=\"center\" mt={2} cursor=\"pointer\" mb={2} pt={1} pb={1} pl={2} pr={20} border=\"1px solid rgb(63, 81, 181)\" borderRadius=\"60px\"\r\n                                    onClick={() => handleSelectWallet(item?.id)}\r\n                                >\r\n                                    <Box mr={4}>\r\n                                        <Image borderRadius='full' boxSize='32px' src={item?.icon} alt='' bg={'gray.800'} />\r\n                                    </Box>\r\n                                    <Box>\r\n                                        <Text fontSize='14px' > {item?.name}</Text>\r\n                                        <Text fontSize='12px' color={'gray.300'} >{item?.adapter.readyState}</Text>\r\n                                    </Box>\r\n                                </Stack>\r\n                            ))}\r\n                        </ModalBody>\r\n                    </>\r\n                }\r\n                {(state == walletState.Connecting) &&\r\n                    <>\r\n                        <ModalHeader>\r\n                            <Heading textAlign={'left'} as=\"h2\" color={titleColor} fontWeight={700} fontSize=\"1.2rem\" mb={4} textTransform={'capitalize'}>\r\n                                Connecting {walletSelected} Wallet\r\n                            </Heading>\r\n                        </ModalHeader>\r\n                        <ModalBody mt={4} p={4}>\r\n                            <Spinner thickness='4px' speed='0.65s' emptyColor='rgba(0, 0, 0, 0.5)' color='blue.500' size='xl' />\r\n                        </ModalBody>\r\n                    </>\r\n                }\r\n            </ModalContent>\r\n        </Modal>\r\n    );\r\n};\r\n","import { withdrawSrc } from '@/assets';\r\nimport {\r\n  modalsSliceActions,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n  WithdrawModalData,\r\n  WithdrawModalDataStep,\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const WithdrawProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isWithdrawProgressModalOpened, withdrawModalData } = useModalsStore();\r\n  const { tokenSymbol, steps, step: activeStep } = withdrawModalData;\r\n\r\n  const getStepStatus = useStepStatus<WithdrawModalData['step']>({\r\n    activeStep,\r\n    steps,\r\n  });\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeWithdrawProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal\r\n      title=\"Withdraw in progress\"\r\n      onClose={handleClose}\r\n      isOpen={isWithdrawProgressModalOpened}\r\n      isCentered\r\n    >\r\n      <TransactionStep\r\n        status={getStepStatus(WithdrawModalDataStep.Withdraw)}\r\n        iconSrc={withdrawSrc}\r\n      >\r\n        Withdrawing <br /> {tokenSymbol}\r\n      </TransactionStep>\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","import { Button } from '@chakra-ui/react';\r\n\r\nimport { modalsSliceActions, useAppDispatch, useModalsStore } from '@/store';\r\n\r\nimport { TransactionFailedModal } from './components';\r\n\r\nexport const WithdrawWICPFailModal = () => {\r\n  const { isWithdrawWICPFailModalOpened, withdrawWICPModalData } =\r\n    useModalsStore();\r\n  const { callbacks: [retryCallback, closeCallback] = [] } =\r\n    withdrawWICPModalData;\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClose = () => {\r\n    if (closeCallback) closeCallback();\r\n    dispatch(modalsSliceActions.closeWithdrawWICPFailModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionFailedModal\r\n      onClose={handleClose}\r\n      isOpen={isWithdrawWICPFailModalOpened}\r\n      isCentered\r\n      title=\"ICP Unwrapping Failed\"\r\n    >\r\n      <Button\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={retryCallback}\r\n        isFullWidth\r\n      >\r\n        Retry\r\n      </Button>\r\n      <Button\r\n        borderRadius={12}\r\n        fontWeight={700}\r\n        fontSize=\"1.125rem\"\r\n        onClick={handleClose}\r\n        isFullWidth\r\n      >\r\n        Later\r\n      </Button>\r\n    </TransactionFailedModal>\r\n  );\r\n};\r\n","import { swapSrc, withdrawSrc } from '@/assets';\r\nimport {\r\n  modalsSliceActions,useAppDispatch,useModalsStore, WithdrawWICPModalData, WithdrawWICPModalDataStep,\r\n} from '@/store';\r\n\r\nimport { useStepStatus } from '.';\r\nimport { TransactionProgressModal, TransactionStep } from './components';\r\n\r\nexport const WithdrawWICPProgressModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isWithdrawWICPProgressModalOpened, withdrawWICPModalData } = useModalsStore();\r\n  const { steps, step: activeStep } = withdrawWICPModalData;\r\n\r\n  const getStepStatus = useStepStatus<WithdrawWICPModalData['step']>({activeStep,steps,});\r\n\r\n  const handleClose = () => {\r\n    dispatch(modalsSliceActions.closeWithdrawWICPProgressModal());\r\n  };\r\n\r\n  return (\r\n    <TransactionProgressModal\r\n      onClose={handleClose}\r\n      isOpen={isWithdrawWICPProgressModalOpened}\r\n      isCentered\r\n      title=\"WICP unwrapping in progress\"\r\n    >\r\n      {steps?.includes(WithdrawWICPModalDataStep.Withdraw) && (\r\n        <TransactionStep\r\n          status={getStepStatus(WithdrawWICPModalDataStep.Withdraw)}\r\n          iconSrc={withdrawSrc}\r\n          chevron\r\n        >\r\n          Withdrawing <br /> WICP\r\n        </TransactionStep>\r\n      )}\r\n      <TransactionStep\r\n        status={getStepStatus(WithdrawWICPModalDataStep.WithdrawWICP)}\r\n        iconSrc={swapSrc}\r\n      >\r\n        Unwrapping <br /> WICP\r\n      </TransactionStep>\r\n    </TransactionProgressModal>\r\n  );\r\n};\r\n","export * from './walletbutton';\r\nexport * from './wallet-menu'; \r\nexport * from './wallet-not-connected'; ","import {\r\n  Box, Flex, Icon, Menu, MenuButton, MenuItem, MenuList, MenuProps, Text,\r\n  useColorModeValue, Image\r\n} from '@chakra-ui/react';\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport { Spinner } from '@chakra-ui/spinner';\r\nimport { BiExit } from '@react-icons/all-files/bi/BiExit';\r\nimport { FaChevronDown } from '@react-icons/all-files/fa/FaChevronDown';\r\nimport { FiCopy } from '@react-icons/all-files/fi/FiCopy';\r\nimport { FaExchangeAlt } from '@react-icons/all-files/fa/FaExchangeAlt';\r\n// import { FaList } from '@react-icons/all-files/fa/FaList';\r\n\r\nimport { FC, useMemo } from 'react';\r\n\r\nimport { walletState, useAppDispatch, useWalletStore, walletActions } from '@/store';\r\nimport { copyToClipboard } from '@/utils';\r\nimport { desensitizationPrincipalId } from '@/utils/canister';\r\n\r\nimport { artemis } from '@/integrations/artemis';\r\n\r\nexport const WalletMenu: FC<Omit<MenuProps, 'children'>> = (props) => {\r\n  const navigate = useNavigate();\r\n\r\n  const { principalId, state, accountId } = useWalletStore();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const iconUrl = artemis?.connectedWalletInfo.icon;\r\n\r\n  const handleDisconnect = async () => {\r\n    await artemis.disconnect();\r\n    await dispatch(walletActions.resetWallet());\r\n    location.reload();\r\n  };\r\n\r\n  const shortPrincipalId = useMemo(() => {\r\n    return desensitizationPrincipalId(principalId);\r\n  }, [principalId]);\r\n  const shortaccountId = useMemo(() => {\r\n    return desensitizationPrincipalId(accountId);\r\n  }, [accountId]);\r\n\r\n  const handleCopy = (type: string = 'princ') => {\r\n    if (type == 'princ') {\r\n      if (principalId) {\r\n        copyToClipboard(principalId, 'Principal ID copied to clipboard');\r\n      }\r\n    } else if (type == 'acnt') {\r\n      if (accountId) {\r\n        copyToClipboard(accountId, 'Account ID copied to clipboard');\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const shadow = useColorModeValue('base', 'none');\r\n\r\n  return (\r\n    <Menu {...props}>\r\n      <MenuButton borderRadius=\"full\" px=\"4\" h=\"12\" bg={bg} shadow={shadow}>\r\n        <Flex direction=\"row\" alignItems=\"center\">\r\n          {state === walletState.Loading ? <Spinner /> : <Image src={iconUrl} borderRadius='full' boxSize='20px' />}\r\n          <Box ml=\"2\" fontWeight={600}> {shortPrincipalId}</Box>\r\n          <Icon as={FaChevronDown} ml={3} />\r\n        </Flex>\r\n      </MenuButton>\r\n      <div>\r\n        <MenuList bg={bg} shadow={shadow} borderRadius=\"xl\" overflow=\"hidden\">\r\n          <MenuItem onClick={() => handleCopy('princ')} icon={<FiCopy />}>\r\n            <Text>Principal ID {shortPrincipalId} </Text>\r\n          </MenuItem>\r\n          <MenuItem onClick={() => handleCopy('acnt')} icon={<FiCopy />}>\r\n            <Text>Account ID {shortaccountId} </Text>\r\n          </MenuItem>\r\n          <MenuItem onClick={() => navigate('/assets/transfer?tokenId=ryjl3-tyaaa-aaaaa-aaaba-cai') } icon={<FaExchangeAlt/>}>\r\n            <Text>Transfer Token </Text>\r\n          </MenuItem>\r\n          <MenuItem onClick={() => window.open('https://dashboard.internetcomputer.org/account/'+accountId, '_blank') } icon={<img width={'18px'} src='https://d15bmhsw4m27if.cloudfront.net/sonic/ryjl3-tyaaa-aaaaa-aaaba-cai'/>}>\r\n            <Text> View in IC Dashboard </Text>\r\n          </MenuItem>\r\n          <MenuItem onClick={() => window.open('https://t5t44-naaaa-aaaah-qcutq-cai.raw.ic0.app/holder/'+accountId+'/tokenTransactions', '_blank') } icon={<img width={'18px'} src=\"https://t5t44-naaaa-aaaah-qcutq-cai.raw.ic0.app/favicon-64.svg\" /> }>\r\n            <Text> Token Txns NFTGeek </Text>\r\n          </MenuItem>\r\n          <MenuItem onClick={handleDisconnect} icon={<BiExit />}>\r\n            <Text>Disconnect</Text>\r\n          </MenuItem>\r\n        </MenuList>\r\n      </div>\r\n    </Menu>\r\n  );\r\n};\r\n\r\n//   PlugMenu.displayName = 'PlugPrincipalIDTag';\r\n","import { Box, Stack, Text } from '@chakra-ui/react';\r\nimport { FaInbox } from '@react-icons/all-files/fa/FaInbox';\r\nimport React from 'react';\r\n\r\nimport { WalletConnectBtn } from '..';\r\n\r\ninterface walletNotConnectedProps {\r\n  message?: string;\r\n}\r\n\r\nexport const WalletNotConnected: React.FC<walletNotConnectedProps> = ({\r\n  message = '',\r\n}) => {\r\n  return (\r\n    <Stack color=\"gray.500\" alignItems=\"center\">\r\n      {message && (\r\n        <>\r\n          <Box mt={6} mb={3}>\r\n            <FaInbox size={30} />\r\n          </Box>\r\n          <Text fontSize=\"lg\" pb={3}>\r\n            {message}\r\n          </Text>\r\n        </>\r\n      )}\r\n      <WalletConnectBtn>\r\n        Connect wallet\r\n      </WalletConnectBtn>\r\n    </Stack>\r\n  );\r\n};\r\n","import React, { useMemo } from 'react';\r\nimport { Button, useColorMode } from '@chakra-ui/react';\r\nimport { useAppDispatch , walletActions , walletState } from '@/store';\r\n\r\nexport const WalletConnectBtn: React.FC = ({ }) => {\r\n    const { colorMode } = useColorMode();\r\n    const dispatch = useAppDispatch();\r\n   \r\n    const { color, background } = useMemo(() => {\r\n        if (colorMode == 'dark') {\r\n            return {\r\n                color: '#fff',\r\n                background: '#3F51B5'\r\n            }\r\n        } else {\r\n            return {\r\n                color: '#fff',\r\n                background: '#3F51B5'\r\n            }\r\n        }\r\n    }, [colorMode])\r\n    const handleClick = (): void => {\r\n        dispatch(walletActions.setOnwalletList(walletState.OpenWalletList));\r\n    }\r\n    return (\r\n        <Button size=\"lg\" borderRadius={100} style={{ width:'100%', color: color, backgroundColor: background }} onClick={handleClick}>\r\n            Connect Wallet\r\n        </Button>\r\n    );\r\n}","export const PATHS = {\r\n  All: '*',\r\n  Home: '/',\r\n};\r\n\r\nexport const ROUTES = {\r\n  Home: '/',\r\n};\r\n","export const ENV = {\r\n  host: process.env.HOST || 'https://boundary.ic0.app/',\r\n  analyticsHost: process.env.ANALYTICS_HOST || 'https://api.sonic.ooo/graphql',\r\n  swapCanisterFee: Number(process.env.SWAP_CANISTER_FEE) || 10000,\r\n  isDarkModeEnabled: process.env.IS_DARK_MODE_ENABLED === 'true',\r\n  canistersPrincipalIDs: {\r\n    ledger: process.env.LEDGER_CANISTER_ID || 'ryjl3-tyaaa-aaaaa-aaaba-cai',\r\n    swap: process.env.SWAP_CANISTER_ID || '3xwpq-ziaaa-aaaah-qcn4a-cai',\r\n    cyclesMinting:\r\n      process.env.CYCLES_MINTING_CANISTER_ID || 'rkp4c-7iaaa-aaaaa-aaaca-cai',\r\n    WICP: process.env.WICP_CANISTER_ID || 'utozz-siaaa-aaaam-qaaxq-cai',\r\n    XTC: process.env.XTC_CANISTER_ID || 'aanaa-xaaaa-aaaah-aaeiq-cai',\r\n    swapCapRoot: process.env.SWAP_CAP_ROOT_CANISTER_ID || '3qxje-uqaaa-aaaah-qcn4q-cai',\r\n  },\r\n  accountIDs: {\r\n    XTC:\r\n      process.env.XTC_ACCOUNT_ID ||\r\n      '758bdb7e54b73605d1d743da9f3aad70637d4cddcba03db13137eaf35f12d375',\r\n    WICP:\r\n      process.env.WICP_ACCOUNT_ID ||\r\n      'cc659fe529756bae6f72db9937c6c60cf7ad57eb4ac5f930a75748927aab469a',\r\n  },\r\n  URLs: {\r\n    discord: process.env.DISCORD_URL || 'https://discord.com/invite/EkmnRd99h6',\r\n    twitter: process.env.TWITTER_URL || 'https://twitter.com/sonic_ooo',\r\n    medium: process.env.MEDIUM_URL || 'https://medium.com/@sonic-ooo',\r\n    github: process.env.GITHUB_URL || 'https://github.com/sonicdex',\r\n    sonicDocs: process.env.SONIC_DOCS_URL || 'https://docs.sonic.ooo',\r\n    termsAndConditions:\r\n      process.env.TERMS_AND_CONDITIONS_URL ||\r\n      'https://docs.sonic.ooo/resources/disclaimer-terms',\r\n    tokenRequestForm:\r\n      process.env.TOKEN_REQUEST_FORM_URL ||\r\n      'https://form.typeform.com/to/YnSyAUn0',\r\n    analyticsApp: process.env.ANALYTICS_APP_URL || 'https://data.sonic.ooo',\r\n    ledgerTransactions:\r\n      process.env.LEDGER_TRANSACTIONS_URL || 'https://icscan.io/transaction',\r\n  },\r\n  hiddenTokens: (process.env.HIDDEN_TOKENS || '').split(','),\r\n  maintenanceMode: process.env.MAINTENANCE_MODE === 'true',\r\n  prorityOrder:['ICP', 'WICP', 'XTC', 'SONICX', 'ckBTC', 'SNS1', 'CHAT', 'OGY', 'YC', 'DONGE']\r\n};\r\n","export * from './constants';\r\nexport * from './env';\r\n","import { sonicCircleSrc } from '@/assets';\r\n\r\nimport {artemis} from '@/integrations/artemis';\r\n\r\nexport type GetAppAssetsSourcesParams = {\r\n  balances: {\r\n    wallet?: number;\r\n    sonic?: number;\r\n  };\r\n};\r\n\r\nexport type AppAssetSource = {\r\n  name: string;\r\n  src: string;\r\n  balance?: number;\r\n};\r\n\r\nexport const getAppAssetsSources = ({\r\n  balances,\r\n}: GetAppAssetsSourcesParams): AppAssetSource[] => {\r\n  var connectedWalletInfo = artemis.connectedWalletInfo;\r\n  connectedWalletInfo;\r\n  return [\r\n    {\r\n      name: connectedWalletInfo.name,\r\n      src: connectedWalletInfo.icon,\r\n      balance: balances.wallet,\r\n    },\r\n    {\r\n      name: 'Sonic',\r\n      src: sonicCircleSrc,\r\n      balance: balances.sonic,\r\n    },\r\n  ];\r\n};\r\n","export * from './token';\r\n","import { icpSrc } from '@/assets';\r\nimport { AppTokenMetadata } from '@/models';\r\n\r\nexport const ICP_METADATA = {\r\n  id: 'ICP', // ryjl3-tyaaa-aaaaa-aaaba-cai ICP\r\n  name: 'Internet Computer Protocol',\r\n  symbol: 'ICP',\r\n  fee: BigInt(10000), // 0.0001\r\n  decimals: 8,\r\n  totalSupply: BigInt(0),\r\n  logo: icpSrc,\r\n  tokenType:'ICRC1'\r\n};\r\n\r\nexport const getICPTokenMetadata = (price?: string): AppTokenMetadata => ({ ...ICP_METADATA, price});\r\n","export * from './ledger.did';\r\n","import { IDL } from '@dfinity/candid';\r\nimport { Principal } from '@dfinity/principal';\r\n\r\nexport namespace LedgerIDL {\r\n  export interface AccountBalanceArgs {\r\n    account: AccountIdentifier;\r\n  }\r\n  export type AccountIdentifier = string;\r\n  export interface ArchiveOptions {\r\n    max_message_size_bytes: [] | [number];\r\n    node_max_memory_size_bytes: [] | [number];\r\n    controller_id: Principal;\r\n  }\r\n  export type BlockHeight = bigint;\r\n  export interface Duration {\r\n    secs: bigint;\r\n    nanos: number;\r\n  }\r\n  export interface ICPTs {\r\n    e8s: bigint;\r\n  }\r\n  export interface LedgerCanisterInitPayload {\r\n    send_whitelist: Array<[Principal]>;\r\n    minting_account: AccountIdentifier;\r\n    transaction_window: [] | [Duration];\r\n    max_message_size_bytes: [] | [number];\r\n    archive_options: [] | [ArchiveOptions];\r\n    initial_values: Array<[AccountIdentifier, ICPTs]>;\r\n  }\r\n  export type Memo = bigint;\r\n  export interface NotifyCanisterArgs {\r\n    to_subaccount: [] | [SubAccount];\r\n    from_subaccount: [] | [SubAccount];\r\n    to_canister: Principal;\r\n    max_fee: ICPTs;\r\n    block_height: BlockHeight;\r\n  }\r\n  export interface SendArgs {\r\n    to: AccountIdentifier;\r\n    fee: ICPTs;\r\n    memo: Memo;\r\n    from_subaccount: [] | [SubAccount];\r\n    created_at_time: [] | [TimeStamp];\r\n    amount: ICPTs;\r\n  }\r\n  export type SubAccount = Array<number>;\r\n  export interface TimeStamp {\r\n    timestamp_nanos: bigint;\r\n  }\r\n  export interface Transaction {\r\n    memo: Memo;\r\n    created_at: BlockHeight;\r\n    transfer: Transfer;\r\n  }\r\n  export type Transfer =\r\n    | {\r\n        Burn: { from: AccountIdentifier; amount: ICPTs };\r\n      }\r\n    | { Mint: { to: AccountIdentifier; amount: ICPTs } }\r\n    | {\r\n        Send: {\r\n          to: AccountIdentifier;\r\n          from: AccountIdentifier;\r\n          amount: ICPTs;\r\n        };\r\n      };\r\n  export interface Factory {\r\n    account_balance_dfx: (arg_0: AccountBalanceArgs) => Promise<ICPTs>;\r\n    notify_dfx: (arg_0: NotifyCanisterArgs) => Promise<undefined>;\r\n    send_dfx: (arg_0: SendArgs) => Promise<BlockHeight>;\r\n  }\r\n\r\n  export const factory: IDL.InterfaceFactory = ({ IDL }) => {\r\n    const AccountIdentifier = IDL.Text;\r\n    // const Duration = IDL.Record({ secs: IDL.Nat64, nanos: IDL.Nat32 });\r\n    // const ArchiveOptions = IDL.Record({\r\n    //   max_message_size_bytes: IDL.Opt(IDL.Nat32),\r\n    //   node_max_memory_size_bytes: IDL.Opt(IDL.Nat32),\r\n    //   controller_id: IDL.Principal,\r\n    // });\r\n    const ICPTs = IDL.Record({ e8s: IDL.Nat64 });\r\n    // const LedgerCanisterInitPayload = IDL.Record({\r\n    //   send_whitelist: IDL.Vec(IDL.Tuple(IDL.Principal)),\r\n    //   minting_account: AccountIdentifier,\r\n    //   transaction_window: IDL.Opt(Duration),\r\n    //   max_message_size_bytes: IDL.Opt(IDL.Nat32),\r\n    //   archive_options: IDL.Opt(ArchiveOptions),\r\n    //   initial_values: IDL.Vec(IDL.Tuple(AccountIdentifier, ICPTs)),\r\n    // });\r\n    const AccountBalanceArgs = IDL.Record({ account: AccountIdentifier });\r\n    const SubAccount = IDL.Vec(IDL.Nat8);\r\n    const BlockHeight = IDL.Nat64;\r\n    const NotifyCanisterArgs = IDL.Record({\r\n      to_subaccount: IDL.Opt(SubAccount),\r\n      from_subaccount: IDL.Opt(SubAccount),\r\n      to_canister: IDL.Principal,\r\n      max_fee: ICPTs,\r\n      block_height: BlockHeight,\r\n    });\r\n    const Memo = IDL.Nat64;\r\n    const TimeStamp = IDL.Record({ timestamp_nanos: IDL.Nat64 });\r\n    const SendArgs = IDL.Record({\r\n      to: AccountIdentifier,\r\n      fee: ICPTs,\r\n      memo: Memo,\r\n      from_subaccount: IDL.Opt(SubAccount),\r\n      created_at_time: IDL.Opt(TimeStamp),\r\n      amount: ICPTs,\r\n    });\r\n    return IDL.Service({\r\n      account_balance_dfx: IDL.Func([AccountBalanceArgs], [ICPTs], ['query']),\r\n      notify_dfx: IDL.Func([NotifyCanisterArgs], [], []),\r\n      send_dfx: IDL.Func([SendArgs], [BlockHeight], []),\r\n    });\r\n  };\r\n}\r\n","export * from './dfinity';\r\nexport * from './sonic';\r\n","import { IDL } from '@dfinity/candid';\r\nimport type { Principal } from '@dfinity/principal';\r\n\r\nexport namespace capCanIDL {\r\n    export type DetailValue = { 'I64': bigint } |\r\n    { 'U64': bigint } |\r\n    { 'Vec': Array<DetailValue> } |\r\n    { 'Slice': Array<number> } |\r\n    { 'Text': string } |\r\n    { 'True': null } |\r\n    { 'False': null } |\r\n    { 'Float': number } |\r\n    { 'Principal': Principal };\r\n    export interface Event {\r\n        'time': bigint,\r\n        'operation': string,\r\n        'details': Array<[string, DetailValue]>,\r\n        'caller': Principal,\r\n    };\r\n    export interface GetBucketResponse {\r\n        'witness': [] | [Witness],\r\n        'canister': Principal,\r\n    };\r\n    export interface GetNextCanistersResponse {\r\n        'witness': [] | [Witness],\r\n        'canisters': Array<Principal>,\r\n    };\r\n    export type GetTransactionResponse = {\r\n        'Delegate': [Principal, [] | [Witness]]\r\n    } |\r\n    { 'Found': [[] | [Event], [] | [Witness]] };\r\n    export interface GetTransactionsArg {\r\n        'page': [] | [number],\r\n        'witness': boolean,\r\n    };\r\n    export interface GetTransactionsResponseBorrowed {\r\n        'data': Array<Event>,\r\n        'page': number,\r\n        'witness': [] | [Witness],\r\n    };\r\n    export interface GetUserTransactionsArg {\r\n        'page': [] | [number],\r\n        'user': Principal,\r\n        'witness': boolean,\r\n    };\r\n    export interface IndefiniteEvent {\r\n        'operation': string,\r\n        'details': Array<[string, DetailValue]>,\r\n        'caller': Principal,\r\n    };\r\n    export interface WithIdArg { 'id': bigint, 'witness': boolean };\r\n    export interface WithWitnessArg { 'witness': boolean };\r\n    export interface Witness {\r\n        'certificate': Array<number>,\r\n        'tree': Array<number>,\r\n    };\r\n    export interface capCan {\r\n        'balance': () => Promise<bigint>,\r\n        'contract_id': () => Promise<Principal>,\r\n        'get_bucket_for': (arg_0: WithIdArg) => Promise<GetBucketResponse>,\r\n        'get_next_canisters': (arg_0: WithWitnessArg) => Promise<\r\n            GetNextCanistersResponse\r\n        >,\r\n        'get_transaction': (arg_0: WithIdArg) => Promise<GetTransactionResponse>,\r\n        'get_transactions': (arg_0: GetTransactionsArg) => Promise<\r\n            GetTransactionsResponseBorrowed\r\n        >,\r\n        'get_user_transactions': (arg_0: GetUserTransactionsArg) => Promise<\r\n            GetTransactionsResponseBorrowed\r\n        >,\r\n        'insert': (arg_0: IndefiniteEvent) => Promise<bigint>,\r\n        'migrate': (arg_0: Array<Event>) => Promise<undefined>,\r\n        'size': () => Promise<bigint>,\r\n        'time': () => Promise<bigint>,\r\n    };\r\n    export type Factory = capCan;\r\n\r\n    export const factory: IDL.InterfaceFactory = ({ IDL }) => {\r\n        const DetailValue = IDL.Rec();\r\n        const WithIdArg = IDL.Record({ 'id': IDL.Nat64, 'witness': IDL.Bool });\r\n        const Witness = IDL.Record({\r\n            'certificate': IDL.Vec(IDL.Nat8),\r\n            'tree': IDL.Vec(IDL.Nat8),\r\n        });\r\n        const GetBucketResponse = IDL.Record({\r\n            'witness': IDL.Opt(Witness),\r\n            'canister': IDL.Principal,\r\n        });\r\n        const WithWitnessArg = IDL.Record({ 'witness': IDL.Bool });\r\n        const GetNextCanistersResponse = IDL.Record({\r\n            'witness': IDL.Opt(Witness),\r\n            'canisters': IDL.Vec(IDL.Principal),\r\n        });\r\n        DetailValue.fill(\r\n            IDL.Variant({\r\n                'I64': IDL.Int64,\r\n                'U64': IDL.Nat64,\r\n                'Vec': IDL.Vec(DetailValue),\r\n                'Slice': IDL.Vec(IDL.Nat8),\r\n                'Text': IDL.Text,\r\n                'True': IDL.Null,\r\n                'False': IDL.Null,\r\n                'Float': IDL.Float64,\r\n                'Principal': IDL.Principal,\r\n            })\r\n        );\r\n        const Event = IDL.Record({\r\n            'time': IDL.Nat64,\r\n            'operation': IDL.Text,\r\n            'details': IDL.Vec(IDL.Tuple(IDL.Text, DetailValue)),\r\n            'caller': IDL.Principal,\r\n        });\r\n        const GetTransactionResponse = IDL.Variant({\r\n            'Delegate': IDL.Tuple(IDL.Principal, IDL.Opt(Witness)),\r\n            'Found': IDL.Tuple(IDL.Opt(Event), IDL.Opt(Witness)),\r\n        });\r\n        const GetTransactionsArg = IDL.Record({\r\n            'page': IDL.Opt(IDL.Nat32),\r\n            'witness': IDL.Bool,\r\n        });\r\n        const GetTransactionsResponseBorrowed = IDL.Record({\r\n            'data': IDL.Vec(Event),\r\n            'page': IDL.Nat32,\r\n            'witness': IDL.Opt(Witness),\r\n        });\r\n        const GetUserTransactionsArg = IDL.Record({\r\n            'page': IDL.Opt(IDL.Nat32),\r\n            'user': IDL.Principal,\r\n            'witness': IDL.Bool,\r\n        });\r\n        const IndefiniteEvent = IDL.Record({\r\n            'operation': IDL.Text,\r\n            'details': IDL.Vec(IDL.Tuple(IDL.Text, DetailValue)),\r\n            'caller': IDL.Principal,\r\n        });\r\n        return IDL.Service({\r\n            'balance': IDL.Func([], [IDL.Nat64], ['query']),\r\n            'contract_id': IDL.Func([], [IDL.Principal], ['query']),\r\n            'get_bucket_for': IDL.Func([WithIdArg], [GetBucketResponse], ['query']),\r\n            'get_next_canisters': IDL.Func(\r\n                [WithWitnessArg],\r\n                [GetNextCanistersResponse],\r\n                ['query'],\r\n            ),\r\n            'get_transaction': IDL.Func(\r\n                [WithIdArg],\r\n                [GetTransactionResponse],\r\n                ['query'],\r\n            ),\r\n            'get_transactions': IDL.Func(\r\n                [GetTransactionsArg],\r\n                [GetTransactionsResponseBorrowed],\r\n                ['query'],\r\n            ),\r\n            'get_user_transactions': IDL.Func(\r\n                [GetUserTransactionsArg],\r\n                [GetTransactionsResponseBorrowed],\r\n                ['query'],\r\n            ),\r\n            'insert': IDL.Func([IndefiniteEvent], [IDL.Nat64], []),\r\n            'migrate': IDL.Func([IDL.Vec(Event)], [], []),\r\n            'size': IDL.Func([], [IDL.Nat64], ['query']),\r\n            'time': IDL.Func([], [IDL.Nat64], ['query']),\r\n        });\r\n    }\r\n\r\n}","import { IDL } from '@dfinity/candid';\r\nimport type { Principal } from '@dfinity/principal';\r\n\r\nexport namespace CyclesMintingIDL {\r\n  export type CyclesResponse =\r\n    | { Refunded: [string, [] | [bigint]] }\r\n    | { CanisterCreated: Principal }\r\n    | { ToppedUp: null };\r\n  export interface ICPTs {\r\n    e8s: bigint;\r\n  }\r\n  export interface IcpXdrConversionRate {\r\n    xdr_permyriad_per_icp: bigint;\r\n    timestamp_seconds: bigint;\r\n  }\r\n  export interface IcpXdrConversionRateCertifiedResponse {\r\n    certificate: Array<number>;\r\n    data: IcpXdrConversionRate;\r\n    hash_tree: Array<number>;\r\n  }\r\n  export type Result = { Ok: CyclesResponse } | { Err: string };\r\n  export interface SetAuthorizedSubnetworkListArgs {\r\n    who: [] | [Principal];\r\n    subnets: Array<Principal>;\r\n  }\r\n  export interface TransactionNotification {\r\n    to: Principal;\r\n    to_subaccount: [] | [Array<number>];\r\n    from: Principal;\r\n    memo: bigint;\r\n    from_subaccount: [] | [Array<number>];\r\n    amount: ICPTs;\r\n    block_height: bigint;\r\n  }\r\n  export interface Factory {\r\n    get_average_icp_xdr_conversion_rate: () => Promise<IcpXdrConversionRateCertifiedResponse>;\r\n    get_icp_xdr_conversion_rate: () => Promise<IcpXdrConversionRateCertifiedResponse>;\r\n    set_authorized_subnetwork_list: (\r\n      arg_0: SetAuthorizedSubnetworkListArgs\r\n    ) => Promise<undefined>;\r\n    transaction_notification: (\r\n      arg_0: TransactionNotification\r\n    ) => Promise<Result>;\r\n  }\r\n\r\n  export const factory: IDL.InterfaceFactory = ({ IDL }) => {\r\n    const IcpXdrConversionRate = IDL.Record({\r\n      xdr_permyriad_per_icp: IDL.Nat64,\r\n      timestamp_seconds: IDL.Nat64,\r\n    });\r\n    const IcpXdrConversionRateCertifiedResponse = IDL.Record({\r\n      certificate: IDL.Vec(IDL.Nat8),\r\n      data: IcpXdrConversionRate,\r\n      hash_tree: IDL.Vec(IDL.Nat8),\r\n    });\r\n    const SetAuthorizedSubnetworkListArgs = IDL.Record({\r\n      who: IDL.Opt(IDL.Principal),\r\n      subnets: IDL.Vec(IDL.Principal),\r\n    });\r\n    const ICPTs = IDL.Record({ e8s: IDL.Nat64 });\r\n    const TransactionNotification = IDL.Record({\r\n      to: IDL.Principal,\r\n      to_subaccount: IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n      from: IDL.Principal,\r\n      memo: IDL.Nat64,\r\n      from_subaccount: IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n      amount: ICPTs,\r\n      block_height: IDL.Nat64,\r\n    });\r\n    const CyclesResponse = IDL.Variant({\r\n      Refunded: IDL.Tuple(IDL.Text, IDL.Opt(IDL.Nat64)),\r\n      CanisterCreated: IDL.Principal,\r\n      ToppedUp: IDL.Null,\r\n    });\r\n    const Result = IDL.Variant({ Ok: CyclesResponse, Err: IDL.Text });\r\n\r\n    return IDL.Service({\r\n      get_average_icp_xdr_conversion_rate: IDL.Func(\r\n        [],\r\n        [IcpXdrConversionRateCertifiedResponse],\r\n        ['query']\r\n      ),\r\n      get_icp_xdr_conversion_rate: IDL.Func(\r\n        [],\r\n        [IcpXdrConversionRateCertifiedResponse],\r\n        ['query']\r\n      ),\r\n      set_authorized_subnetwork_list: IDL.Func(\r\n        [SetAuthorizedSubnetworkListArgs],\r\n        [],\r\n        []\r\n      ),\r\n      transaction_notification: IDL.Func(\r\n        [TransactionNotification],\r\n        [Result],\r\n        []\r\n      ),\r\n    });\r\n  };\r\n}\r\n","export * from './swap.did';\r\nexport * from './token.did';\r\nexport * from './xtc.did';\r\nexport * from './capCanReg.did';\r\nexport * from './cycles-minting.did';\r\n","import { IDL } from '@dfinity/candid';\r\nimport type { Principal } from '@dfinity/principal';\r\n\r\nexport namespace SwapIDL {\r\n  export interface CanisterSettings {\r\n    'freezing_threshold': [] | [bigint],\r\n    'controllers': [] | [Array<Principal>],\r\n    'memory_allocation': [] | [bigint],\r\n    'compute_allocation': [] | [bigint],\r\n  };\r\n  export interface CanisterStatus {\r\n    'status': Status,\r\n    'memory_size': bigint,\r\n    'cycles': bigint,\r\n    'settings': CanisterSettings,\r\n    'module_hash': [] | [Array<number>],\r\n  };\r\n  export interface CapDetails {\r\n    'CapV1Status': boolean,\r\n    'CapV2Status': boolean,\r\n    'CapV2RouterId': string,\r\n    'CapV1RouterId': string,\r\n  };\r\n  export interface DepositSubAccounts {\r\n    'depositAId': string,\r\n    'subaccount': Array<number>,\r\n    'created_at': Time,\r\n    'transactionOwner': Principal,\r\n  };\r\n  export type ICRC1SubAccountBalance = { 'ok': bigint } |\r\n  { 'err': string };\r\n  export type ICRCTxReceipt = { 'Ok': Array<number> } |\r\n  { 'Err': string };\r\n  export interface MonitorMetrics {\r\n    'tokenBalancesSize': bigint,\r\n    'canisterStatus': CanisterStatus,\r\n    'blocklistedUsersCount': bigint,\r\n    'rewardTokensSize': bigint,\r\n    'lptokensSize': bigint,\r\n    'cycles': bigint,\r\n    'tokenAllowanceSize': bigint,\r\n    'rewardInfo': bigint,\r\n    'lpTokenAllowanceSize': bigint,\r\n    'rewardPairsSize': bigint,\r\n    'tokenCount': bigint,\r\n    'lpTokenBalancesSize': bigint,\r\n    'pairsCount': bigint,\r\n    'depositTransactionSize': bigint,\r\n  };\r\n  export interface PairInfoExt {\r\n    'id': string,\r\n    'price0CumulativeLast': bigint,\r\n    'creator': Principal,\r\n    'reserve0': bigint,\r\n    'reserve1': bigint,\r\n    'lptoken': string,\r\n    'totalSupply': bigint,\r\n    'token0': string,\r\n    'token1': string,\r\n    'price1CumulativeLast': bigint,\r\n    'kLast': bigint,\r\n    'blockTimestampLast': bigint,\r\n  };\r\n  export type Result = { 'ok': boolean } |\r\n  { 'err': string };\r\n  export type Result_1 = { 'ok': [bigint, bigint] } |\r\n  { 'err': string };\r\n  export interface RewardInfo { 'tokenId': string, 'amount': bigint };\r\n  export type Status = { 'stopped': null } |\r\n  { 'stopping': null } |\r\n  { 'running': null };\r\n  export interface SwapInfo {\r\n    'owner': Principal,\r\n    'cycles': bigint,\r\n    'tokens': Array<TokenInfoExt>,\r\n    'pairs': Array<PairInfoExt>,\r\n    'feeOn': boolean,\r\n    'feeTo': Principal,\r\n  };\r\n  export interface SwapInfoExt {\r\n    'owner': Principal,\r\n    'txcounter': bigint,\r\n    'depositCounter': bigint,\r\n    'feeOn': boolean,\r\n    'feeTo': Principal,\r\n  };\r\n  export type Time = bigint;\r\n  export interface TokenAnalyticsInfo {\r\n    'fee': bigint,\r\n    'decimals': number,\r\n    'name': string,\r\n    'totalSupply': bigint,\r\n    'symbol': string,\r\n  };\r\n  export interface TokenInfoExt {\r\n    'id': string,\r\n    'fee': bigint,\r\n    'decimals': number,\r\n    'name': string,\r\n    'totalSupply': bigint,\r\n    'symbol': string,\r\n  };\r\n  export interface TokenInfoWithType {\r\n    'id': string,\r\n    'fee': bigint,\r\n    'decimals': number,\r\n    'name': string,\r\n    'totalSupply': bigint,\r\n    'tokenType': string,\r\n    'symbol': string,\r\n  };\r\n  export type TxReceipt = { 'ok': bigint } |\r\n  { 'err': string };\r\n  export interface UserInfo {\r\n    'lpBalances': Array<[string, bigint]>,\r\n    'balances': Array<[string, bigint]>,\r\n  };\r\n  export interface UserInfoPage {\r\n    'lpBalances': [Array<[string, bigint]>, bigint],\r\n    'balances': [Array<[string, bigint]>, bigint],\r\n  };\r\n  export interface Swap {\r\n\r\n    'addAuth': (arg_0: Principal) => Promise<boolean>,\r\n    'addLiquidity': (\r\n      arg_0: Principal,\r\n      arg_1: Principal,\r\n      arg_2: bigint,\r\n      arg_3: bigint,\r\n      arg_4: bigint,\r\n      arg_5: bigint,\r\n      arg_6: bigint,\r\n    ) => Promise<TxReceipt>,\r\n    'addLiquidityForUser': (\r\n      arg_0: Principal,\r\n      arg_1: Principal,\r\n      arg_2: Principal,\r\n      arg_3: bigint,\r\n      arg_4: bigint,\r\n    ) => Promise<TxReceipt>,\r\n    'addLiquidityForUserTest': (\r\n      arg_0: Principal,\r\n      arg_1: Principal,\r\n      arg_2: Principal,\r\n      arg_3: bigint,\r\n      arg_4: bigint,\r\n    ) => Promise<string>,\r\n    'addToken': (arg_0: Principal, arg_1: string) => Promise<TxReceipt>,\r\n    'addUserToBlocklist': (arg_0: Principal) => Promise<boolean>,\r\n    'allowance': (arg_0: string, arg_1: Principal, arg_2: Principal) => Promise<\r\n      bigint\r\n    >,\r\n    'approve': (arg_0: string, arg_1: Principal, arg_2: bigint) => Promise<\r\n      boolean\r\n    >,\r\n    'balanceOf': (arg_0: string, arg_1: Principal) => Promise<bigint>,\r\n    'burn': (arg_0: string, arg_1: bigint) => Promise<boolean>,\r\n    'createPair': (arg_0: Principal, arg_1: Principal) => Promise<TxReceipt>,\r\n    'decimals': (arg_0: string) => Promise<number>,\r\n    'deposit': (arg_0: Principal, arg_1: bigint) => Promise<TxReceipt>,\r\n    'depositTo': (arg_0: Principal, arg_1: Principal, arg_2: bigint) => Promise<\r\n      TxReceipt\r\n    >,\r\n    'exportBalances': (arg_0: string) => Promise<\r\n      [] | [Array<[Principal, bigint]>]\r\n    >,\r\n    'exportLPTokens': () => Promise<Array<TokenInfoExt>>,\r\n    'exportPairs': () => Promise<Array<PairInfoExt>>,\r\n    'exportRewardInfo': () => Promise<Array<[Principal, Array<RewardInfo>]>>,\r\n    'exportRewardPairs': () => Promise<Array<PairInfoExt>>,\r\n    'exportSubAccounts': () => Promise<Array<[Principal, DepositSubAccounts]>>,\r\n    'exportSwapInfo': () => Promise<SwapInfoExt>,\r\n    'exportTokenTypes': () => Promise<Array<[string, string]>>,\r\n    'exportTokens': () => Promise<Array<TokenInfoExt>>,\r\n    'getAllPairs': () => Promise<Array<PairInfoExt>>,\r\n    'getAllRewardPairs': () => Promise<Array<PairInfoExt>>,\r\n    'getAuthList': () => Promise<Array<[Principal, boolean]>>,\r\n    'getBlocklistedUsers': () => Promise<Array<[Principal, boolean]>>,\r\n    'getCapDetails': () => Promise<CapDetails>,\r\n    'getHolders': (arg_0: string) => Promise<bigint>,\r\n    'getICRC1SubAccountBalance': (arg_0: Principal, arg_1: string) => Promise<\r\n      ICRC1SubAccountBalance\r\n    >,\r\n    'getLPTokenId': (arg_0: Principal, arg_1: Principal) => Promise<string>,\r\n    'getNumPairs': () => Promise<bigint>,\r\n    'getPair': (arg_0: Principal, arg_1: Principal) => Promise<\r\n      [] | [PairInfoExt]\r\n    >,\r\n    'getPairs': (arg_0: bigint, arg_1: bigint) => Promise<\r\n      [Array<PairInfoExt>, bigint]\r\n    >,\r\n    'getSupportedTokenList': () => Promise<Array<TokenInfoWithType>>,\r\n    'getSupportedTokenListByName': (\r\n      arg_0: string,\r\n      arg_1: bigint,\r\n      arg_2: bigint,\r\n    ) => Promise<[Array<TokenInfoExt>, bigint]>,\r\n    'getSupportedTokenListSome': (arg_0: bigint, arg_1: bigint) => Promise<\r\n      [Array<TokenInfoExt>, bigint]\r\n    >,\r\n    'getSwapInfo': () => Promise<SwapInfo>,\r\n    'getTokenMetadata': (arg_0: string) => Promise<TokenAnalyticsInfo>,\r\n    'getUserBalances': (arg_0: Principal) => Promise<Array<[string, bigint]>>,\r\n    'getUserInfo': (arg_0: Principal) => Promise<UserInfo>,\r\n    'getUserInfoAbove': (\r\n      arg_0: Principal,\r\n      arg_1: bigint,\r\n      arg_2: bigint,\r\n    ) => Promise<UserInfo>,\r\n    'getUserInfoByNamePageAbove': (\r\n      arg_0: Principal,\r\n      arg_1: bigint,\r\n      arg_2: string,\r\n      arg_3: bigint,\r\n      arg_4: bigint,\r\n      arg_5: bigint,\r\n      arg_6: string,\r\n      arg_7: bigint,\r\n      arg_8: bigint,\r\n    ) => Promise<UserInfoPage>,\r\n    'getUserLPBalances': (arg_0: Principal) => Promise<Array<[string, bigint]>>,\r\n    'getUserLPBalancesAbove': (arg_0: Principal, arg_1: bigint) => Promise<\r\n      Array<[string, bigint]>\r\n    >,\r\n    'getUserReward': (arg_0: Principal, arg_1: string, arg_2: string) => Promise<\r\n      Result_1\r\n    >,\r\n    'historySize': () => Promise<bigint>,\r\n    'initiateICRC1Transfer': () => Promise<Array<number>>,\r\n    'initiateICRC1TransferForUser': (arg_0: Principal) => Promise<ICRCTxReceipt>,\r\n    'monitorMetrics': () => Promise<MonitorMetrics>,\r\n    'name': (arg_0: string) => Promise<string>,\r\n    'removeAuth': (arg_0: Principal) => Promise<boolean>,\r\n    'removeLiquidity': (\r\n      arg_0: Principal,\r\n      arg_1: Principal,\r\n      arg_2: bigint,\r\n      arg_3: bigint,\r\n      arg_4: bigint,\r\n      arg_5: Principal,\r\n      arg_6: bigint,\r\n    ) => Promise<TxReceipt>,\r\n    'removeUserFromBlocklist': (arg_0: Principal) => Promise<boolean>,\r\n    'retryDeposit': (arg_0: Principal) => Promise<TxReceipt>,\r\n    'retryDepositTo': (\r\n      arg_0: Principal,\r\n      arg_1: Principal,\r\n      arg_2: bigint,\r\n    ) => Promise<TxReceipt>,\r\n    'setCapV1EnableStatus': (arg_0: boolean) => Promise<boolean>,\r\n    'setCapV2CanisterId': (arg_0: string) => Promise<boolean>,\r\n    'setCapV2EnableStatus': (arg_0: boolean) => Promise<Result>,\r\n    'setFeeForToken': (arg_0: string, arg_1: bigint) => Promise<boolean>,\r\n    'setFeeOn': (arg_0: boolean) => Promise<boolean>,\r\n    'setFeeTo': (arg_0: Principal) => Promise<boolean>,\r\n    'setGlobalTokenFee': (arg_0: bigint) => Promise<boolean>,\r\n    'setMaxTokens': (arg_0: bigint) => Promise<boolean>,\r\n    'setOwner': (arg_0: Principal) => Promise<boolean>,\r\n    'swapExactTokensForTokens': (\r\n      arg_0: bigint,\r\n      arg_1: bigint,\r\n      arg_2: Array<string>,\r\n      arg_3: Principal,\r\n      arg_4: bigint,\r\n    ) => Promise<TxReceipt>,\r\n    'symbol': (arg_0: string) => Promise<string>,\r\n    'totalSupply': (arg_0: string) => Promise<bigint>,\r\n    'transfer': (arg_0: string, arg_1: Principal, arg_2: bigint) => Promise<\r\n      boolean\r\n    >,\r\n    'transferFrom': (\r\n      arg_0: string,\r\n      arg_1: Principal,\r\n      arg_2: Principal,\r\n      arg_3: bigint,\r\n    ) => Promise<boolean>,\r\n    'updateAllTokenMetadata': () => Promise<boolean>,\r\n    'updateTokenFees': () => Promise<boolean>,\r\n    'updateTokenMetadata': (arg_0: string) => Promise<boolean>,\r\n    'withdraw': (arg_0: Principal, arg_1: bigint) => Promise<TxReceipt>,\r\n    'withdrawTo': (arg_0: Principal, arg_1: Principal, arg_2: bigint) => Promise<\r\n      TxReceipt\r\n    >,\r\n  }\r\n\r\n  export type Factory = Swap;\r\n\r\n  export const factory: IDL.InterfaceFactory = ({ IDL }) => {\r\n\r\n    const TxReceipt = IDL.Variant({ 'ok': IDL.Nat, 'err': IDL.Text });\r\n    const TokenInfoExt = IDL.Record({\r\n      'id': IDL.Text,\r\n      'fee': IDL.Nat,\r\n      'decimals': IDL.Nat8,\r\n      'name': IDL.Text,\r\n      'totalSupply': IDL.Nat,\r\n      'symbol': IDL.Text,\r\n    });\r\n    const PairInfoExt = IDL.Record({\r\n      'id': IDL.Text,\r\n      'price0CumulativeLast': IDL.Nat,\r\n      'creator': IDL.Principal,\r\n      'reserve0': IDL.Nat,\r\n      'reserve1': IDL.Nat,\r\n      'lptoken': IDL.Text,\r\n      'totalSupply': IDL.Nat,\r\n      'token0': IDL.Text,\r\n      'token1': IDL.Text,\r\n      'price1CumulativeLast': IDL.Nat,\r\n      'kLast': IDL.Nat,\r\n      'blockTimestampLast': IDL.Int,\r\n    });\r\n    const RewardInfo = IDL.Record({ 'tokenId': IDL.Text, 'amount': IDL.Nat });\r\n    const Time = IDL.Int;\r\n    const DepositSubAccounts = IDL.Record({\r\n      'depositAId': IDL.Text,\r\n      'subaccount': IDL.Vec(IDL.Nat8),\r\n      'created_at': Time,\r\n      'transactionOwner': IDL.Principal,\r\n    });\r\n    const SwapInfoExt = IDL.Record({\r\n      'owner': IDL.Principal,\r\n      'txcounter': IDL.Nat,\r\n      'depositCounter': IDL.Nat,\r\n      'feeOn': IDL.Bool,\r\n      'feeTo': IDL.Principal,\r\n    });\r\n    const CapDetails = IDL.Record({\r\n      'CapV1Status': IDL.Bool,\r\n      'CapV2Status': IDL.Bool,\r\n      'CapV2RouterId': IDL.Text,\r\n      'CapV1RouterId': IDL.Text,\r\n    });\r\n    const ICRC1SubAccountBalance = IDL.Variant({\r\n      'ok': IDL.Nat,\r\n      'err': IDL.Text,\r\n    });\r\n    const TokenInfoWithType = IDL.Record({\r\n      'id': IDL.Text,\r\n      'fee': IDL.Nat,\r\n      'decimals': IDL.Nat8,\r\n      'name': IDL.Text,\r\n      'totalSupply': IDL.Nat,\r\n      'tokenType': IDL.Text,\r\n      'symbol': IDL.Text,\r\n    });\r\n    const SwapInfo = IDL.Record({\r\n      'owner': IDL.Principal,\r\n      'cycles': IDL.Nat,\r\n      'tokens': IDL.Vec(TokenInfoExt),\r\n      'pairs': IDL.Vec(PairInfoExt),\r\n      'feeOn': IDL.Bool,\r\n      'feeTo': IDL.Principal,\r\n    });\r\n    const TokenAnalyticsInfo = IDL.Record({\r\n      'fee': IDL.Nat,\r\n      'decimals': IDL.Nat8,\r\n      'name': IDL.Text,\r\n      'totalSupply': IDL.Nat,\r\n      'symbol': IDL.Text,\r\n    });\r\n    const UserInfo = IDL.Record({\r\n      'lpBalances': IDL.Vec(IDL.Tuple(IDL.Text, IDL.Nat)),\r\n      'balances': IDL.Vec(IDL.Tuple(IDL.Text, IDL.Nat)),\r\n    });\r\n    const UserInfoPage = IDL.Record({\r\n      'lpBalances': IDL.Tuple(IDL.Vec(IDL.Tuple(IDL.Text, IDL.Nat)), IDL.Nat),\r\n      'balances': IDL.Tuple(IDL.Vec(IDL.Tuple(IDL.Text, IDL.Nat)), IDL.Nat),\r\n    });\r\n    const Result_1 = IDL.Variant({\r\n      'ok': IDL.Tuple(IDL.Nat, IDL.Nat),\r\n      'err': IDL.Text,\r\n    });\r\n    const ICRCTxReceipt = IDL.Variant({\r\n      'Ok': IDL.Vec(IDL.Nat8),\r\n      'Err': IDL.Text,\r\n    });\r\n    const Status = IDL.Variant({\r\n      'stopped': IDL.Null,\r\n      'stopping': IDL.Null,\r\n      'running': IDL.Null,\r\n    });\r\n    const CanisterSettings = IDL.Record({\r\n      'freezing_threshold': IDL.Opt(IDL.Nat),\r\n      'controllers': IDL.Opt(IDL.Vec(IDL.Principal)),\r\n      'memory_allocation': IDL.Opt(IDL.Nat),\r\n      'compute_allocation': IDL.Opt(IDL.Nat),\r\n    });\r\n    const CanisterStatus = IDL.Record({\r\n      'status': Status,\r\n      'memory_size': IDL.Nat,\r\n      'cycles': IDL.Nat,\r\n      'settings': CanisterSettings,\r\n      'module_hash': IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n    });\r\n    const MonitorMetrics = IDL.Record({\r\n      'tokenBalancesSize': IDL.Nat,\r\n      'canisterStatus': CanisterStatus,\r\n      'blocklistedUsersCount': IDL.Nat,\r\n      'rewardTokensSize': IDL.Nat,\r\n      'lptokensSize': IDL.Nat,\r\n      'cycles': IDL.Nat,\r\n      'tokenAllowanceSize': IDL.Nat,\r\n      'rewardInfo': IDL.Nat,\r\n      'lpTokenAllowanceSize': IDL.Nat,\r\n      'rewardPairsSize': IDL.Nat,\r\n      'tokenCount': IDL.Nat,\r\n      'lpTokenBalancesSize': IDL.Nat,\r\n      'pairsCount': IDL.Nat,\r\n      'depositTransactionSize': IDL.Nat,\r\n    });\r\n    const Result = IDL.Variant({ 'ok': IDL.Bool, 'err': IDL.Text });\r\n    return IDL.Service({\r\n      'addAuth': IDL.Func([IDL.Principal], [IDL.Bool], []),\r\n      'addLiquidity': IDL.Func(\r\n        [\r\n          IDL.Principal,\r\n          IDL.Principal,\r\n          IDL.Nat,\r\n          IDL.Nat,\r\n          IDL.Nat,\r\n          IDL.Nat,\r\n          IDL.Int,\r\n        ],\r\n        [TxReceipt],\r\n        [],\r\n      ),\r\n      'addLiquidityForUser': IDL.Func(\r\n        [IDL.Principal, IDL.Principal, IDL.Principal, IDL.Nat, IDL.Nat],\r\n        [TxReceipt],\r\n        [],\r\n      ),\r\n      'addLiquidityForUserTest': IDL.Func(\r\n        [IDL.Principal, IDL.Principal, IDL.Principal, IDL.Nat, IDL.Nat],\r\n        [IDL.Text],\r\n        [],\r\n      ),\r\n      'addToken': IDL.Func([IDL.Principal, IDL.Text], [TxReceipt], []),\r\n      'addUserToBlocklist': IDL.Func([IDL.Principal], [IDL.Bool], []),\r\n      'allowance': IDL.Func(\r\n        [IDL.Text, IDL.Principal, IDL.Principal],\r\n        [IDL.Nat],\r\n        ['query'],\r\n      ),\r\n      'approve': IDL.Func([IDL.Text, IDL.Principal, IDL.Nat], [IDL.Bool], []),\r\n      'balanceOf': IDL.Func([IDL.Text, IDL.Principal], [IDL.Nat], ['query']),\r\n      'burn': IDL.Func([IDL.Text, IDL.Nat], [IDL.Bool], []),\r\n      'createPair': IDL.Func([IDL.Principal, IDL.Principal], [TxReceipt], []),\r\n      'decimals': IDL.Func([IDL.Text], [IDL.Nat8], ['query']),\r\n      'deposit': IDL.Func([IDL.Principal, IDL.Nat], [TxReceipt], []),\r\n      'depositTo': IDL.Func(\r\n        [IDL.Principal, IDL.Principal, IDL.Nat],\r\n        [TxReceipt],\r\n        [],\r\n      ),\r\n      'exportBalances': IDL.Func(\r\n        [IDL.Text],\r\n        [IDL.Opt(IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat)))],\r\n        ['query'],\r\n      ),\r\n      'exportLPTokens': IDL.Func([], [IDL.Vec(TokenInfoExt)], ['query']),\r\n      'exportPairs': IDL.Func([], [IDL.Vec(PairInfoExt)], ['query']),\r\n      'exportRewardInfo': IDL.Func(\r\n        [],\r\n        [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Vec(RewardInfo)))],\r\n        ['query'],\r\n      ),\r\n      'exportRewardPairs': IDL.Func([], [IDL.Vec(PairInfoExt)], ['query']),\r\n      'exportSubAccounts': IDL.Func(\r\n        [],\r\n        [IDL.Vec(IDL.Tuple(IDL.Principal, DepositSubAccounts))],\r\n        ['query'],\r\n      ),\r\n      'exportSwapInfo': IDL.Func([], [SwapInfoExt], ['query']),\r\n      'exportTokenTypes': IDL.Func(\r\n        [],\r\n        [IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text))],\r\n        ['query'],\r\n      ),\r\n      'exportTokens': IDL.Func([], [IDL.Vec(TokenInfoExt)], ['query']),\r\n      'getAllPairs': IDL.Func([], [IDL.Vec(PairInfoExt)], ['query']),\r\n      'getAllRewardPairs': IDL.Func([], [IDL.Vec(PairInfoExt)], ['query']),\r\n      'getAuthList': IDL.Func(\r\n        [],\r\n        [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Bool))],\r\n        ['query'],\r\n      ),\r\n      'getBlocklistedUsers': IDL.Func(\r\n        [],\r\n        [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Bool))],\r\n        [],\r\n      ),\r\n      'getCapDetails': IDL.Func([], [CapDetails], ['query']),\r\n      'getHolders': IDL.Func([IDL.Text], [IDL.Nat], ['query']),\r\n      'getICRC1SubAccountBalance': IDL.Func(\r\n        [IDL.Principal, IDL.Text],\r\n        [ICRC1SubAccountBalance],\r\n        [],\r\n      ),\r\n      'getLPTokenId': IDL.Func(\r\n        [IDL.Principal, IDL.Principal],\r\n        [IDL.Text],\r\n        ['query'],\r\n      ),\r\n      'getNumPairs': IDL.Func([], [IDL.Nat], ['query']),\r\n      'getPair': IDL.Func(\r\n        [IDL.Principal, IDL.Principal],\r\n        [IDL.Opt(PairInfoExt)],\r\n        ['query'],\r\n      ),\r\n      'getPairs': IDL.Func(\r\n        [IDL.Nat, IDL.Nat],\r\n        [IDL.Vec(PairInfoExt), IDL.Nat],\r\n        ['query'],\r\n      ),\r\n      'getSupportedTokenList': IDL.Func(\r\n        [],\r\n        [IDL.Vec(TokenInfoWithType)],\r\n        ['query'],\r\n      ),\r\n      'getSupportedTokenListByName': IDL.Func(\r\n        [IDL.Text, IDL.Nat, IDL.Nat],\r\n        [IDL.Vec(TokenInfoExt), IDL.Nat],\r\n        ['query'],\r\n      ),\r\n      'getSupportedTokenListSome': IDL.Func(\r\n        [IDL.Nat, IDL.Nat],\r\n        [IDL.Vec(TokenInfoExt), IDL.Nat],\r\n        ['query'],\r\n      ),\r\n      'getSwapInfo': IDL.Func([], [SwapInfo], ['query']),\r\n      'getTokenMetadata': IDL.Func([IDL.Text], [TokenAnalyticsInfo], ['query']),\r\n      'getUserBalances': IDL.Func(\r\n        [IDL.Principal],\r\n        [IDL.Vec(IDL.Tuple(IDL.Text, IDL.Nat))],\r\n        ['query'],\r\n      ),\r\n      'getUserInfo': IDL.Func([IDL.Principal], [UserInfo], ['query']),\r\n      'getUserInfoAbove': IDL.Func(\r\n        [IDL.Principal, IDL.Nat, IDL.Nat],\r\n        [UserInfo],\r\n        ['query'],\r\n      ),\r\n      'getUserInfoByNamePageAbove': IDL.Func(\r\n        [\r\n          IDL.Principal,\r\n          IDL.Int,\r\n          IDL.Text,\r\n          IDL.Nat,\r\n          IDL.Nat,\r\n          IDL.Int,\r\n          IDL.Text,\r\n          IDL.Nat,\r\n          IDL.Nat,\r\n        ],\r\n        [UserInfoPage],\r\n        ['query'],\r\n      ),\r\n      'getUserLPBalances': IDL.Func(\r\n        [IDL.Principal],\r\n        [IDL.Vec(IDL.Tuple(IDL.Text, IDL.Nat))],\r\n        ['query'],\r\n      ),\r\n      'getUserLPBalancesAbove': IDL.Func(\r\n        [IDL.Principal, IDL.Nat],\r\n        [IDL.Vec(IDL.Tuple(IDL.Text, IDL.Nat))],\r\n        ['query'],\r\n      ),\r\n      'getUserReward': IDL.Func(\r\n        [IDL.Principal, IDL.Text, IDL.Text],\r\n        [Result_1],\r\n        ['query'],\r\n      ),\r\n      'historySize': IDL.Func([], [IDL.Nat], ['query']),\r\n      'initiateICRC1Transfer': IDL.Func([], [IDL.Vec(IDL.Nat8)], []),\r\n      'initiateICRC1TransferForUser': IDL.Func(\r\n        [IDL.Principal],\r\n        [ICRCTxReceipt],\r\n        [],\r\n      ),\r\n      'monitorMetrics': IDL.Func([], [MonitorMetrics], []),\r\n      'name': IDL.Func([IDL.Text], [IDL.Text], ['query']),\r\n      'removeAuth': IDL.Func([IDL.Principal], [IDL.Bool], []),\r\n      'removeLiquidity': IDL.Func(\r\n        [\r\n          IDL.Principal,\r\n          IDL.Principal,\r\n          IDL.Nat,\r\n          IDL.Nat,\r\n          IDL.Nat,\r\n          IDL.Principal,\r\n          IDL.Int,\r\n        ],\r\n        [TxReceipt],\r\n        [],\r\n      ),\r\n      'removeUserFromBlocklist': IDL.Func([IDL.Principal], [IDL.Bool], []),\r\n      'retryDeposit': IDL.Func([IDL.Principal], [TxReceipt], []),\r\n      'retryDepositTo': IDL.Func(\r\n        [IDL.Principal, IDL.Principal, IDL.Nat],\r\n        [TxReceipt],\r\n        [],\r\n      ),\r\n      'setCapV1EnableStatus': IDL.Func([IDL.Bool], [IDL.Bool], []),\r\n      'setCapV2CanisterId': IDL.Func([IDL.Text], [IDL.Bool], []),\r\n      'setCapV2EnableStatus': IDL.Func([IDL.Bool], [Result], []),\r\n      'setFeeForToken': IDL.Func([IDL.Text, IDL.Nat], [IDL.Bool], []),\r\n      'setFeeOn': IDL.Func([IDL.Bool], [IDL.Bool], []),\r\n      'setFeeTo': IDL.Func([IDL.Principal], [IDL.Bool], []),\r\n      'setGlobalTokenFee': IDL.Func([IDL.Nat], [IDL.Bool], []),\r\n      'setMaxTokens': IDL.Func([IDL.Nat], [IDL.Bool], []),\r\n      'setOwner': IDL.Func([IDL.Principal], [IDL.Bool], []),\r\n      'swapExactTokensForTokens': IDL.Func(\r\n        [IDL.Nat, IDL.Nat, IDL.Vec(IDL.Text), IDL.Principal, IDL.Int],\r\n        [TxReceipt],\r\n        [],\r\n      ),\r\n      'symbol': IDL.Func([IDL.Text], [IDL.Text], ['query']),\r\n      'totalSupply': IDL.Func([IDL.Text], [IDL.Nat], ['query']),\r\n      'transfer': IDL.Func([IDL.Text, IDL.Principal, IDL.Nat], [IDL.Bool], []),\r\n      'transferFrom': IDL.Func(\r\n        [IDL.Text, IDL.Principal, IDL.Principal, IDL.Nat],\r\n        [IDL.Bool],\r\n        [],\r\n      ),\r\n      'updateAllTokenMetadata': IDL.Func([], [IDL.Bool], []),\r\n      'updateTokenFees': IDL.Func([], [IDL.Bool], []),\r\n      'updateTokenMetadata': IDL.Func([IDL.Text], [IDL.Bool], []),\r\n      'withdraw': IDL.Func([IDL.Principal, IDL.Nat], [TxReceipt], []),\r\n      'withdrawTo': IDL.Func(\r\n        [IDL.Principal, IDL.Principal, IDL.Nat],\r\n        [TxReceipt],\r\n        [],\r\n      ),\r\n    });\r\n  };\r\n}\r\n","import { IDL } from '@dfinity/candid';\r\nimport type { Principal } from '@dfinity/principal';\r\n\r\nexport namespace TokenIDL {\r\n  export namespace DIP20 {\r\n    export interface Metadata {\r\n      fee: bigint;\r\n      decimals: number;\r\n      owner: Principal;\r\n      logo: string;\r\n      name: string;\r\n      totalSupply: bigint;\r\n      symbol: string;\r\n    }\r\n    export type Result = { Ok: bigint } | { Err: TxError };\r\n    export type YCResult = { Ok: string } | { Err: TxError };\r\n    export interface TokenInfo {\r\n      holderNumber: bigint;\r\n      deployTime: bigint;\r\n      metadata: Metadata;\r\n      historySize: bigint;\r\n      cycles: bigint;\r\n      feeTo: Principal;\r\n    }\r\n    export type TxError =\r\n      | { InsufficientAllowance: null }\r\n      | { InsufficientBalance: null }\r\n      | { ErrorOperationStyle: null }\r\n      | { Unauthorized: null }\r\n      | { LedgerTrap: null }\r\n      | { ErrorTo: null }\r\n      | { Other: null }\r\n      | { BlockUsed: null }\r\n      | { AmountTooSmall: null };\r\n    export interface Token {\r\n      allowance: (arg_0: Principal, arg_1: Principal) => Promise<bigint>;\r\n      approve: (arg_0: Principal, arg_1: bigint) => Promise<Result>;\r\n      balanceOf: (arg_0: Principal) => Promise<bigint>;\r\n      decimals: () => Promise<number>;\r\n      getAllowanceSize: () => Promise<bigint>;\r\n      getBlockUsed: () => Promise<Array<bigint>>;\r\n      getHolders: (\r\n        arg_0: bigint,\r\n        arg_1: bigint\r\n      ) => Promise<Array<[Principal, bigint]>>;\r\n      logo: () => Promise<string>;\r\n      getMetadata: () => Promise<Metadata>;\r\n      getTokenInfo: () => Promise<TokenInfo>;\r\n      getUserApprovals: (arg_0: Principal) => Promise<Array<[Principal, bigint]>>;\r\n      historySize: () => Promise<bigint>;\r\n      isBlockUsed: (arg_0: bigint) => Promise<boolean>;\r\n      mint: (arg_0: [] | [Array<number>], arg_1: bigint) => Promise<Result>;\r\n      name: () => Promise<string>;\r\n      owner: () => Promise<Principal>;\r\n      setFee: (arg_0: bigint) => Promise<undefined>;\r\n      setFeeTo: (arg_0: Principal) => Promise<undefined>;\r\n      setGenesis: () => Promise<Result>;\r\n      setLogo: (arg_0: string) => Promise<undefined>;\r\n      setName: (arg_0: string) => Promise<undefined>;\r\n      setOwner: (arg_0: Principal) => Promise<undefined>;\r\n      symbol: () => Promise<string>;\r\n      totalSupply: () => Promise<bigint>;\r\n      transfer: (arg_0: Principal, arg_1: bigint) => Promise<Result>;\r\n      transferFrom: (\r\n        arg_0: Principal,\r\n        arg_1: Principal,\r\n        arg_2: bigint\r\n      ) => Promise<Result>;\r\n      withdraw: (arg_0: bigint, arg_1: string) => Promise<Result>;\r\n    }\r\n    export type Factory = Token;\r\n\r\n    export const factory: IDL.InterfaceFactory = ({ IDL }) => {\r\n      const TxError = IDL.Variant({\r\n        InsufficientAllowance: IDL.Null,\r\n        InsufficientBalance: IDL.Null,\r\n        ErrorOperationStyle: IDL.Null,\r\n        Unauthorized: IDL.Null,\r\n        LedgerTrap: IDL.Null,\r\n        ErrorTo: IDL.Null,\r\n        Other: IDL.Null,\r\n        BlockUsed: IDL.Null,\r\n        AmountTooSmall: IDL.Null,\r\n      });\r\n      const Result = IDL.Variant({ Ok: IDL.Nat, Err: TxError });\r\n      const Metadata = IDL.Record({\r\n        fee: IDL.Nat,\r\n        decimals: IDL.Nat8,\r\n        owner: IDL.Principal,\r\n        logo: IDL.Text,\r\n        name: IDL.Text,\r\n        totalSupply: IDL.Nat,\r\n        symbol: IDL.Text,\r\n      });\r\n      const TokenInfo = IDL.Record({\r\n        holderNumber: IDL.Nat64,\r\n        deployTime: IDL.Nat64,\r\n        metadata: Metadata,\r\n        historySize: IDL.Nat64,\r\n        cycles: IDL.Nat64,\r\n        feeTo: IDL.Principal,\r\n      });\r\n      return IDL.Service({\r\n        allowance: IDL.Func([IDL.Principal, IDL.Principal], [IDL.Nat], ['query']),\r\n        approve: IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\r\n        balanceOf: IDL.Func([IDL.Principal], [IDL.Nat], []),\r\n        decimals: IDL.Func([], [IDL.Nat8], ['query']),\r\n        getAllowanceSize: IDL.Func([], [IDL.Nat64], ['query']),\r\n        getBlockUsed: IDL.Func([], [IDL.Vec(IDL.Nat64)], ['query']),\r\n        getHolders: IDL.Func(\r\n          [IDL.Nat64, IDL.Nat64],\r\n          [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat))],\r\n          ['query']\r\n        ),\r\n        logo: IDL.Func([], [IDL.Text], ['query']),\r\n        getMetadata: IDL.Func([], [Metadata], ['query']),\r\n        getTokenInfo: IDL.Func([], [TokenInfo], ['query']),\r\n        getUserApprovals: IDL.Func(\r\n          [IDL.Principal],\r\n          [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat))],\r\n          ['query']\r\n        ),\r\n        historySize: IDL.Func([], [IDL.Nat64], ['query']),\r\n        isBlockUsed: IDL.Func([IDL.Nat64], [IDL.Bool], ['query']),\r\n        mint: IDL.Func([IDL.Opt(IDL.Vec(IDL.Nat8)), IDL.Nat64], [Result], []),\r\n        name: IDL.Func([], [IDL.Text], ['query']),\r\n        owner: IDL.Func([], [IDL.Principal], ['query']),\r\n        setFee: IDL.Func([IDL.Nat], [], []),\r\n        setFeeTo: IDL.Func([IDL.Principal], [], []),\r\n        setGenesis: IDL.Func([], [Result], []),\r\n        setLogo: IDL.Func([IDL.Text], [], []),\r\n        setName: IDL.Func([IDL.Text], [], []),\r\n        setOwner: IDL.Func([IDL.Principal], [], []),\r\n        symbol: IDL.Func([], [IDL.Text], ['query']),\r\n        totalSupply: IDL.Func([], [IDL.Nat], ['query']),\r\n        transfer: IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\r\n        transferFrom: IDL.Func(\r\n          [IDL.Principal, IDL.Principal, IDL.Nat],\r\n          [Result],\r\n          []\r\n        ),\r\n        withdraw: IDL.Func([IDL.Nat64, IDL.Text], [Result], []),\r\n      });\r\n    };\r\n    export const YCfactory: IDL.InterfaceFactory = ({ IDL }) => {\r\n      const TxError = IDL.Variant({\r\n        InsufficientAllowance: IDL.Null,\r\n        InsufficientBalance: IDL.Null,\r\n        ErrorOperationStyle: IDL.Null,\r\n        Unauthorized: IDL.Null,\r\n        LedgerTrap: IDL.Null,\r\n        ErrorTo: IDL.Null,\r\n        Other: IDL.Null,\r\n        BlockUsed: IDL.Null,\r\n        AmountTooSmall: IDL.Null,\r\n      });\r\n      const Result = IDL.Variant({ Ok: IDL.Text, Err: TxError });\r\n      const Metadata = IDL.Record({\r\n        fee: IDL.Nat,\r\n        decimals: IDL.Nat8,\r\n        owner: IDL.Principal,\r\n        logo: IDL.Text,\r\n        name: IDL.Text,\r\n        totalSupply: IDL.Nat,\r\n        symbol: IDL.Text,\r\n      });\r\n      const TokenInfo = IDL.Record({\r\n        holderNumber: IDL.Nat64,\r\n        deployTime: IDL.Nat64,\r\n        metadata: Metadata,\r\n        historySize: IDL.Nat64,\r\n        cycles: IDL.Nat64,\r\n        feeTo: IDL.Principal,\r\n      });\r\n      return IDL.Service({\r\n        allowance: IDL.Func([IDL.Principal, IDL.Principal], [IDL.Nat], ['query']),\r\n        approve: IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\r\n        balanceOf: IDL.Func([IDL.Principal], [IDL.Nat], []),\r\n        decimals: IDL.Func([], [IDL.Nat8], ['query']),\r\n        getAllowanceSize: IDL.Func([], [IDL.Nat64], ['query']),\r\n        getBlockUsed: IDL.Func([], [IDL.Vec(IDL.Nat64)], ['query']),\r\n        getHolders: IDL.Func(\r\n          [IDL.Nat64, IDL.Nat64],\r\n          [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat))],\r\n          ['query']\r\n        ),\r\n        logo: IDL.Func([], [IDL.Text], ['query']),\r\n        getMetadata: IDL.Func([], [Metadata], ['query']),\r\n        getTokenInfo: IDL.Func([], [TokenInfo], ['query']),\r\n        getUserApprovals: IDL.Func(\r\n          [IDL.Principal],\r\n          [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat))],\r\n          ['query']\r\n        ),\r\n        historySize: IDL.Func([], [IDL.Nat64], ['query']),\r\n        isBlockUsed: IDL.Func([IDL.Nat64], [IDL.Bool], ['query']),\r\n        mint: IDL.Func([IDL.Opt(IDL.Vec(IDL.Nat8)), IDL.Nat64], [Result], []),\r\n        name: IDL.Func([], [IDL.Text], ['query']),\r\n        owner: IDL.Func([], [IDL.Principal], ['query']),\r\n        setFee: IDL.Func([IDL.Nat], [], []),\r\n        setFeeTo: IDL.Func([IDL.Principal], [], []),\r\n        setGenesis: IDL.Func([], [Result], []),\r\n        setLogo: IDL.Func([IDL.Text], [], []),\r\n        setName: IDL.Func([IDL.Text], [], []),\r\n        setOwner: IDL.Func([IDL.Principal], [], []),\r\n        symbol: IDL.Func([], [IDL.Text], ['query']),\r\n        totalSupply: IDL.Func([], [IDL.Nat], ['query']),\r\n        transfer: IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\r\n        transferFrom: IDL.Func(\r\n          [IDL.Principal, IDL.Principal, IDL.Nat],\r\n          [Result],\r\n          []\r\n        ),\r\n        withdraw: IDL.Func([IDL.Nat64, IDL.Text], [Result], []),\r\n      });\r\n    };\r\n  };\r\n\r\n  export namespace ICRC1 {\r\n    export interface Account { owner: Principal, subaccount: [] | [Array<number>] };\r\n    export interface ArchivedTransactionRange { callback: [Principal, string], start: bigint, length: bigint };\r\n    export interface Burn { from: Account, memo: [] | [Array<number>], created_at_time: [] | [bigint], amount: bigint };\r\n    export interface GetTransactionsRequest { start: bigint, length: bigint };\r\n    export interface GetTransactionsResponse {\r\n      first_index: bigint, log_length: bigint, transactions: Array<Transaction>,\r\n      archived_transactions: Array<ArchivedTransactionRange>,\r\n    };\r\n    export interface HttpRequest { url: string, method: string, body: Array<number>, headers: Array<[string, string]> };\r\n    export interface HttpResponse { body: Array<number>, headers: Array<[string, string]>, status_code: number };\r\n    export interface Mint { to: Account, memo: [] | [Array<number>], created_at_time: [] | [bigint], amount: bigint };\r\n    export type Result = { Ok: bigint } | { Err: TransferError };\r\n    export interface StandardRecord { url: string, name: string };\r\n    export interface Transaction {\r\n      burn: [] | [Burn], kind: string, mint: [] | [Mint],\r\n      timestamp: bigint, transfer: [] | [Transfer]\r\n    };\r\n    export interface Transfer {\r\n      to: Account, fee: [] | [bigint], from: Account, memo: [] | [Array<number>],\r\n      created_at_time: [] | [bigint], amount: bigint,\r\n    };\r\n    export interface TransferArg {\r\n      to: Account, fee: [] | [bigint], memo: [] | [Array<number>],\r\n      from_subaccount: [] | [Array<number>], created_at_time: [] | [bigint], amount: bigint\r\n    };\r\n    export type TransferError = {\r\n      GenericError: { message: string, error_code: bigint }\r\n    } |\r\n    { TemporarilyUnavailable: null } |\r\n    { BadBurn: { min_burn_amount: bigint } } |\r\n    { Duplicate: { duplicate_of: bigint } } |\r\n    { BadFee: { expected_fee: bigint } } |\r\n    { CreatedInFuture: { ledger_time: bigint } } |\r\n    { TooOld: null } |\r\n    { InsufficientFunds: { balance: bigint } };\r\n    export type TransferError_1 = { TxTooOld : { allowed_window_nanos : bigint }} |\r\n    { BadFee : { expected_fee : Tokens } } | { TxDuplicate : { duplicate_of : bigint } } | { TxCreatedInFuture : null } |\r\n    { InsufficientFunds : { balance : Tokens } };\r\n    \r\n    export type Value = { Int: bigint } | { Nat: bigint } | { Blob: Array<number> } | { Text: string };\r\n    export interface Tokens { 'e8s' : bigint };\r\n    export interface TimeStamp { 'timestamp_nanos' : bigint };\r\n    export type Result_1 = { 'Ok' : bigint } |{ 'Err' : TransferError_1 };\r\n    export interface TransferArgs {\r\n      to : Array<number>, fee : Tokens, memo : bigint,from_subaccount : [] | [Array<number>],\r\n      created_at_time : [] | [TimeStamp], amount : Tokens,\r\n    };\r\n    export interface Token {\r\n      get_transactions: (arg_0: GetTransactionsRequest) => Promise<GetTransactionsResponse>,\r\n      http_request: (arg_0: HttpRequest) => Promise<HttpResponse>,\r\n      icrc1_balance_of: (arg_0: Account) => Promise<bigint>,\r\n      icrc1_decimals: () => Promise<number>,\r\n      icrc1_fee: () => Promise<bigint>,\r\n      icrc1_metadata: () => Promise<Array<[string, Value]>>,\r\n      icrc1_minting_account: () => Promise<[] | [Account]>,\r\n      icrc1_name: () => Promise<string>,\r\n      icrc1_supported_standards: () => Promise<Array<StandardRecord>>,\r\n      icrc1_symbol: () => Promise<string>,\r\n      icrc1_total_supply: () => Promise<bigint>,\r\n      icrc1_transfer: (arg_0: TransferArg) => Promise<Result>,\r\n      transfer : (arg_0: TransferArgs) => Promise<Result_1>,\r\n    };\r\n    export type Factory = Token;\r\n    export const factory: IDL.InterfaceFactory = ({ IDL }) => {\r\n      const GetTransactionsRequest = IDL.Record({ start: IDL.Nat, length: IDL.Nat });\r\n      const Account = IDL.Record({ owner: IDL.Principal, subaccount: IDL.Opt(IDL.Vec(IDL.Nat8)) });\r\n      const Burn = IDL.Record({\r\n        from: Account, memo: IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n        created_at_time: IDL.Opt(IDL.Nat64), amount: IDL.Nat\r\n      });\r\n      const Mint = IDL.Record({\r\n        to: Account, memo: IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n        created_at_time: IDL.Opt(IDL.Nat64), amount: IDL.Nat\r\n      });\r\n      const Transfer = IDL.Record({\r\n        to: Account, fee: IDL.Opt(IDL.Nat), from: Account, memo: IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n        created_at_time: IDL.Opt(IDL.Nat64), amount: IDL.Nat,\r\n      });\r\n      const Transaction = IDL.Record({\r\n        burn: IDL.Opt(Burn), kind: IDL.Text, mint: IDL.Opt(Mint), timestamp: IDL.Nat64,\r\n        transfer: IDL.Opt(Transfer),\r\n      });\r\n      const ArchivedTransactionRange = IDL.Record({\r\n        callback: IDL.Func( [GetTransactionsRequest],\r\n          [IDL.Record({ transactions: IDL.Vec(Transaction) })],['query'],\r\n        ),\r\n        start: IDL.Nat, length: IDL.Nat,\r\n      });\r\n\r\n      const GetTransactionsResponse = IDL.Record({ \r\n        first_index: IDL.Nat, log_length: IDL.Nat, transactions: IDL.Vec(Transaction),\r\n        archived_transactions: IDL.Vec(ArchivedTransactionRange),\r\n      });\r\n      const HttpRequest = IDL.Record({\r\n        url: IDL.Text, method: IDL.Text,body: IDL.Vec(IDL.Nat8), headers: IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\r\n      });\r\n      const HttpResponse = IDL.Record({\r\n        body: IDL.Vec(IDL.Nat8), headers: IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)), status_code: IDL.Nat16,\r\n      });\r\n      const Value = IDL.Variant({ Int: IDL.Int, Nat: IDL.Nat, Blob: IDL.Vec(IDL.Nat8), Text: IDL.Text});\r\n      const StandardRecord = IDL.Record({ url: IDL.Text, name: IDL.Text });\r\n\r\n      const TransferArg = IDL.Record({\r\n        to: Account, fee: IDL.Opt(IDL.Nat), memo: IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n        from_subaccount: IDL.Opt(IDL.Vec(IDL.Nat8)),created_at_time: IDL.Opt(IDL.Nat64), amount: IDL.Nat,\r\n      });\r\n       \r\n      const TransferError = IDL.Variant({\r\n        GenericError: IDL.Record({  message: IDL.Text,   error_code: IDL.Nat }),\r\n        TemporarilyUnavailable: IDL.Null,\r\n        BadBurn: IDL.Record({ min_burn_amount: IDL.Nat }),\r\n        Duplicate: IDL.Record({ duplicate_of: IDL.Nat }),\r\n        BadFee: IDL.Record({ expected_fee: IDL.Nat }),\r\n        CreatedInFuture: IDL.Record({ ledger_time: IDL.Nat64 }),\r\n        TooOld: IDL.Null,\r\n        InsufficientFunds: IDL.Record({ balance: IDL.Nat }),\r\n      });\r\n      \r\n      const Tokens = IDL.Record({ e8s : IDL.Nat64 });\r\n      const TimeStamp = IDL.Record({ timestamp_nanos : IDL.Nat64 });\r\n\r\n      const TransferError_1 = IDL.Variant({\r\n        TxTooOld : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\r\n        BadFee : IDL.Record({ 'expected_fee' : Tokens }),\r\n        TxDuplicate : IDL.Record({ 'duplicate_of' : IDL.Nat64 }),\r\n        TxCreatedInFuture : IDL.Null,\r\n        InsufficientFunds : IDL.Record({ 'balance' : Tokens }),\r\n      });\r\n\r\n      const Result_1 = IDL.Variant({ 'Ok' : IDL.Nat64, 'Err' : TransferError_1 });\r\n\r\n      const TransferArgs = IDL.Record({\r\n        to : IDL.Vec(IDL.Nat8),\r\n        fee : Tokens,\r\n        memo : IDL.Nat64,\r\n        from_subaccount : IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n        created_at_time : IDL.Opt(TimeStamp),\r\n        amount : Tokens,\r\n      });\r\n      \r\n      const Result = IDL.Variant({ Ok: IDL.Nat, Err: TransferError });\r\n      return IDL.Service({\r\n        get_transactions: IDL.Func( [GetTransactionsRequest], [GetTransactionsResponse],['query']),\r\n        http_request: IDL.Func([HttpRequest], [HttpResponse], ['query']),\r\n        icrc1_balance_of: IDL.Func([Account], [IDL.Nat], ['query']),\r\n        icrc1_decimals: IDL.Func([], [IDL.Nat8], ['query']),\r\n        icrc1_fee: IDL.Func([], [IDL.Nat], ['query']),\r\n        icrc1_metadata: IDL.Func( [], [IDL.Vec(IDL.Tuple(IDL.Text, Value))],['query'] ),\r\n        icrc1_minting_account: IDL.Func([], [IDL.Opt(Account)], ['query']),\r\n        icrc1_name: IDL.Func([], [IDL.Text], ['query']),\r\n        icrc1_supported_standards: IDL.Func( [],[IDL.Vec(StandardRecord)],['query']),\r\n        icrc1_symbol: IDL.Func([], [IDL.Text], ['query']),\r\n        icrc1_total_supply: IDL.Func([], [IDL.Nat], ['query']),\r\n        icrc1_transfer: IDL.Func([TransferArg], [Result], []),\r\n        transfer : IDL.Func([TransferArgs], [Result_1], []),\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { IDL } from '@dfinity/candid';\r\nimport type { Principal } from '@dfinity/principal';\r\n\r\nexport namespace XTCIDL {\r\n  export type BurnError =\r\n    | { InsufficientBalance: null }\r\n    | { InvalidTokenContract: null }\r\n    | { NotSufficientLiquidity: null };\r\n  export type BurnResult = { Ok: TransactionId } | { Err: BurnError };\r\n  export type CreateResult =\r\n    | { Ok: { canister_id: Principal } }\r\n    | { Err: string };\r\n  export interface Event {\r\n    fee: bigint;\r\n    status: TransactionStatus;\r\n    kind: EventDetail;\r\n    cycles: bigint;\r\n    timestamp: bigint;\r\n  }\r\n  export type EventDetail =\r\n    | {\r\n        Approve: { to: Principal; from: Principal };\r\n      }\r\n    | { Burn: { to: Principal; from: Principal } }\r\n    | { Mint: { to: Principal } }\r\n    | { CanisterCreated: { from: Principal; canister: Principal } }\r\n    | {\r\n        CanisterCalled: {\r\n          from: Principal;\r\n          method_name: string;\r\n          canister: Principal;\r\n        };\r\n      }\r\n    | { Transfer: { to: Principal; from: Principal } }\r\n    | {\r\n        TransferFrom: {\r\n          to: Principal;\r\n          from: Principal;\r\n          caller: Principal;\r\n        };\r\n      };\r\n  export interface EventsConnection {\r\n    data: Array<Event>;\r\n    next_offset: TransactionId;\r\n    next_canister_id: [] | [Principal];\r\n  }\r\n  export interface Metadata {\r\n    fee: bigint;\r\n    decimals: number;\r\n    owner: Principal;\r\n    logo: string;\r\n    name: string;\r\n    totalSupply: bigint;\r\n    symbol: string;\r\n  }\r\n  export type MintError = { NotSufficientLiquidity: null };\r\n  export type MintResult = { Ok: TransactionId } | { Err: MintError };\r\n  export type Operation =\r\n    | { transferFrom: null }\r\n    | { burn: null }\r\n    | { mint: null }\r\n    | { approve: null }\r\n    | { canisterCalled: null }\r\n    | { transfer: null }\r\n    | { canisterCreated: null };\r\n  export type ResultCall = { Ok: { return: Array<number> } } | { Err: string };\r\n  export type ResultSend = { Ok: null } | { Err: string };\r\n  export interface Stats {\r\n    fee: bigint;\r\n    transfers_count: bigint;\r\n    balance: bigint;\r\n    mints_count: bigint;\r\n    transfers_from_count: bigint;\r\n    canisters_created_count: bigint;\r\n    supply: bigint;\r\n    burns_count: bigint;\r\n    approvals_count: bigint;\r\n    proxy_calls_count: bigint;\r\n    history_events: bigint;\r\n  }\r\n  export type Time = bigint;\r\n  export type TransactionId = bigint;\r\n  export type TransactionStatus = { FAILED: null } | { SUCCEEDED: null };\r\n  export type TxError =\r\n    | { NotifyDfxFailed: null }\r\n    | { InsufficientAllowance: null }\r\n    | { UnexpectedCyclesResponse: null }\r\n    | { InsufficientBalance: null }\r\n    | { InsufficientXTCFee: null }\r\n    | { ErrorOperationStyle: null }\r\n    | { Unauthorized: null }\r\n    | { LedgerTrap: null }\r\n    | { ErrorTo: null }\r\n    | { Other: null }\r\n    | { FetchRateFailed: null }\r\n    | { BlockUsed: null }\r\n    | { AmountTooSmall: null };\r\n  export type TxReceipt = { Ok: bigint } | { Err: TxError };\r\n  export type TxReceiptLegacy =\r\n    | { Ok: bigint }\r\n    | {\r\n        Err: { InsufficientAllowance: null } | { InsufficientBalance: null };\r\n      };\r\n  export interface TxRecord {\r\n    op: Operation;\r\n    to: Principal;\r\n    fee: bigint;\r\n    status: TransactionStatus;\r\n    from: Principal;\r\n    timestamp: Time;\r\n    caller: [] | [Principal];\r\n    index: bigint;\r\n    amount: bigint;\r\n  }\r\n  export interface _SERVICE {\r\n    allowance: (arg_0: Principal, arg_1: Principal) => Promise<bigint>;\r\n    approve: (arg_0: Principal, arg_1: bigint) => Promise<TxReceipt>;\r\n    balance: (arg_0: [] | [Principal]) => Promise<bigint>;\r\n    balanceOf: (arg_0: Principal) => Promise<bigint>;\r\n    burn: (arg_0: {\r\n      canister_id: Principal;\r\n      amount: bigint;\r\n    }) => Promise<BurnResult>;\r\n    decimals: () => Promise<number>;\r\n    events: (arg_0: {\r\n      offset: [] | [bigint];\r\n      limit: number;\r\n    }) => Promise<EventsConnection>;\r\n    getBlockUsed: () => Promise<Array<bigint>>;\r\n    getMetadata: () => Promise<Metadata>;\r\n    getTransaction: (arg_0: bigint) => Promise<TxRecord>;\r\n    getTransactions: (arg_0: bigint, arg_1: bigint) => Promise<Array<TxRecord>>;\r\n    get_map_block_used: (arg_0: bigint) => Promise<[] | [bigint]>;\r\n    get_transaction: (arg_0: TransactionId) => Promise<[] | [Event]>;\r\n    halt: () => Promise<undefined>;\r\n    historySize: () => Promise<bigint>;\r\n    isBlockUsed: (arg_0: bigint) => Promise<boolean>;\r\n    logo: () => Promise<string>;\r\n    mint: (arg_0: Principal, arg_1: bigint) => Promise<MintResult>;\r\n    mint_by_icp: (\r\n      arg_0: [] | [Array<number>],\r\n      arg_1: bigint\r\n    ) => Promise<TxReceipt>;\r\n    name: () => Promise<string>;\r\n    nameErc20: () => Promise<string>;\r\n    stats: () => Promise<Stats>;\r\n    symbol: () => Promise<string>;\r\n    totalSupply: () => Promise<bigint>;\r\n    transfer: (arg_0: Principal, arg_1: bigint) => Promise<TxReceipt>;\r\n    transferErc20: (\r\n      arg_0: Principal,\r\n      arg_1: bigint\r\n    ) => Promise<TxReceiptLegacy>;\r\n    transferFrom: (\r\n      arg_0: Principal,\r\n      arg_1: Principal,\r\n      arg_2: bigint\r\n    ) => Promise<TxReceipt>;\r\n    wallet_balance: () => Promise<{ amount: bigint }>;\r\n    wallet_call: (arg_0: {\r\n      args: Array<number>;\r\n      cycles: bigint;\r\n      method_name: string;\r\n      canister: Principal;\r\n    }) => Promise<ResultCall>;\r\n    wallet_create_canister: (arg_0: {\r\n      controller: [] | [Principal];\r\n      cycles: bigint;\r\n    }) => Promise<CreateResult>;\r\n    wallet_create_wallet: (arg_0: {\r\n      controller: [] | [Principal];\r\n      cycles: bigint;\r\n    }) => Promise<CreateResult>;\r\n    wallet_send: (arg_0: {\r\n      canister: Principal;\r\n      amount: bigint;\r\n    }) => Promise<ResultSend>;\r\n  }\r\n\r\n  export const factory: IDL.InterfaceFactory = ({ IDL }) => {\r\n    const TxError = IDL.Variant({\r\n      NotifyDfxFailed: IDL.Null,\r\n      InsufficientAllowance: IDL.Null,\r\n      UnexpectedCyclesResponse: IDL.Null,\r\n      InsufficientBalance: IDL.Null,\r\n      InsufficientXTCFee: IDL.Null,\r\n      ErrorOperationStyle: IDL.Null,\r\n      Unauthorized: IDL.Null,\r\n      LedgerTrap: IDL.Null,\r\n      ErrorTo: IDL.Null,\r\n      Other: IDL.Null,\r\n      FetchRateFailed: IDL.Null,\r\n      BlockUsed: IDL.Null,\r\n      AmountTooSmall: IDL.Null,\r\n    });\r\n    const TxReceipt = IDL.Variant({ Ok: IDL.Nat, Err: TxError });\r\n    const TransactionId = IDL.Nat64;\r\n    const BurnError = IDL.Variant({\r\n      InsufficientBalance: IDL.Null,\r\n      InvalidTokenContract: IDL.Null,\r\n      NotSufficientLiquidity: IDL.Null,\r\n    });\r\n    const BurnResult = IDL.Variant({ Ok: TransactionId, Err: BurnError });\r\n    const TransactionStatus = IDL.Variant({\r\n      FAILED: IDL.Null,\r\n      SUCCEEDED: IDL.Null,\r\n    });\r\n    const EventDetail = IDL.Variant({\r\n      Approve: IDL.Record({ to: IDL.Principal, from: IDL.Principal }),\r\n      Burn: IDL.Record({ to: IDL.Principal, from: IDL.Principal }),\r\n      Mint: IDL.Record({ to: IDL.Principal }),\r\n      CanisterCreated: IDL.Record({\r\n        from: IDL.Principal,\r\n        canister: IDL.Principal,\r\n      }),\r\n      CanisterCalled: IDL.Record({\r\n        from: IDL.Principal,\r\n        method_name: IDL.Text,\r\n        canister: IDL.Principal,\r\n      }),\r\n      Transfer: IDL.Record({ to: IDL.Principal, from: IDL.Principal }),\r\n      TransferFrom: IDL.Record({\r\n        to: IDL.Principal,\r\n        from: IDL.Principal,\r\n        caller: IDL.Principal,\r\n      }),\r\n    });\r\n    const Event = IDL.Record({\r\n      fee: IDL.Nat64,\r\n      status: TransactionStatus,\r\n      kind: EventDetail,\r\n      cycles: IDL.Nat64,\r\n      timestamp: IDL.Nat64,\r\n    });\r\n    const EventsConnection = IDL.Record({\r\n      data: IDL.Vec(Event),\r\n      next_offset: TransactionId,\r\n      next_canister_id: IDL.Opt(IDL.Principal),\r\n    });\r\n    const Metadata = IDL.Record({\r\n      fee: IDL.Nat,\r\n      decimals: IDL.Nat8,\r\n      owner: IDL.Principal,\r\n      logo: IDL.Text,\r\n      name: IDL.Text,\r\n      totalSupply: IDL.Nat,\r\n      symbol: IDL.Text,\r\n    });\r\n    const Operation = IDL.Variant({\r\n      transferFrom: IDL.Null,\r\n      burn: IDL.Null,\r\n      mint: IDL.Null,\r\n      approve: IDL.Null,\r\n      canisterCalled: IDL.Null,\r\n      transfer: IDL.Null,\r\n      canisterCreated: IDL.Null,\r\n    });\r\n    const Time = IDL.Int;\r\n    const TxRecord = IDL.Record({\r\n      op: Operation,\r\n      to: IDL.Principal,\r\n      fee: IDL.Nat,\r\n      status: TransactionStatus,\r\n      from: IDL.Principal,\r\n      timestamp: Time,\r\n      caller: IDL.Opt(IDL.Principal),\r\n      index: IDL.Nat,\r\n      amount: IDL.Nat,\r\n    });\r\n    const MintError = IDL.Variant({ NotSufficientLiquidity: IDL.Null });\r\n    const MintResult = IDL.Variant({ Ok: TransactionId, Err: MintError });\r\n    const Stats = IDL.Record({\r\n      fee: IDL.Nat,\r\n      transfers_count: IDL.Nat64,\r\n      balance: IDL.Nat64,\r\n      mints_count: IDL.Nat64,\r\n      transfers_from_count: IDL.Nat64,\r\n      canisters_created_count: IDL.Nat64,\r\n      supply: IDL.Nat,\r\n      burns_count: IDL.Nat64,\r\n      approvals_count: IDL.Nat64,\r\n      proxy_calls_count: IDL.Nat64,\r\n      history_events: IDL.Nat64,\r\n    });\r\n    const TxReceiptLegacy = IDL.Variant({\r\n      Ok: IDL.Nat,\r\n      Err: IDL.Variant({\r\n        InsufficientAllowance: IDL.Null,\r\n        InsufficientBalance: IDL.Null,\r\n      }),\r\n    });\r\n    const ResultCall = IDL.Variant({\r\n      Ok: IDL.Record({ return: IDL.Vec(IDL.Nat8) }),\r\n      Err: IDL.Text,\r\n    });\r\n    const CreateResult = IDL.Variant({\r\n      Ok: IDL.Record({ canister_id: IDL.Principal }),\r\n      Err: IDL.Text,\r\n    });\r\n    const ResultSend = IDL.Variant({ Ok: IDL.Null, Err: IDL.Text });\r\n    return IDL.Service({\r\n      allowance: IDL.Func([IDL.Principal, IDL.Principal], [IDL.Nat], ['query']),\r\n      approve: IDL.Func([IDL.Principal, IDL.Nat], [TxReceipt], []),\r\n      balance: IDL.Func([IDL.Opt(IDL.Principal)], [IDL.Nat64], []),\r\n      balanceOf: IDL.Func([IDL.Principal], [IDL.Nat], ['query']),\r\n      burn: IDL.Func(\r\n        [IDL.Record({ canister_id: IDL.Principal, amount: IDL.Nat64 })],\r\n        [BurnResult],\r\n        []\r\n      ),\r\n      decimals: IDL.Func([], [IDL.Nat8], ['query']),\r\n      events: IDL.Func(\r\n        [IDL.Record({ offset: IDL.Opt(IDL.Nat64), limit: IDL.Nat16 })],\r\n        [EventsConnection],\r\n        ['query']\r\n      ),\r\n      getBlockUsed: IDL.Func([], [IDL.Vec(IDL.Nat64)], ['query']),\r\n      getMetadata: IDL.Func([], [Metadata], ['query']),\r\n      getTransaction: IDL.Func([IDL.Nat], [TxRecord], []),\r\n      getTransactions: IDL.Func([IDL.Nat, IDL.Nat], [IDL.Vec(TxRecord)], []),\r\n      get_map_block_used: IDL.Func(\r\n        [IDL.Nat64],\r\n        [IDL.Opt(IDL.Nat64)],\r\n        ['query']\r\n      ),\r\n      get_transaction: IDL.Func([TransactionId], [IDL.Opt(Event)], []),\r\n      halt: IDL.Func([], [], []),\r\n      historySize: IDL.Func([], [IDL.Nat], ['query']),\r\n      isBlockUsed: IDL.Func([IDL.Nat64], [IDL.Bool], ['query']),\r\n      logo: IDL.Func([], [IDL.Text], ['query']),\r\n      mint: IDL.Func([IDL.Principal, IDL.Nat], [MintResult], []),\r\n      mint_by_icp: IDL.Func(\r\n        [IDL.Opt(IDL.Vec(IDL.Nat8)), IDL.Nat64],\r\n        [TxReceipt],\r\n        []\r\n      ),\r\n      name: IDL.Func([], [IDL.Text], ['query']),\r\n      nameErc20: IDL.Func([], [IDL.Text], ['query']),\r\n      stats: IDL.Func([], [Stats], ['query']),\r\n      symbol: IDL.Func([], [IDL.Text], ['query']),\r\n      totalSupply: IDL.Func([], [IDL.Nat], ['query']),\r\n      transfer: IDL.Func([IDL.Principal, IDL.Nat], [TxReceipt], []),\r\n      transferErc20: IDL.Func([IDL.Principal, IDL.Nat], [TxReceiptLegacy], []),\r\n      transferFrom: IDL.Func(\r\n        [IDL.Principal, IDL.Principal, IDL.Nat],\r\n        [TxReceipt],\r\n        []\r\n      ),\r\n      wallet_balance: IDL.Func(\r\n        [],\r\n        [IDL.Record({ amount: IDL.Nat64 })],\r\n        ['query']\r\n      ),\r\n      wallet_call: IDL.Func(\r\n        [\r\n          IDL.Record({\r\n            args: IDL.Vec(IDL.Nat8),\r\n            cycles: IDL.Nat64,\r\n            method_name: IDL.Text,\r\n            canister: IDL.Principal,\r\n          }),\r\n        ],\r\n        [ResultCall],\r\n        []\r\n      ),\r\n      wallet_create_canister: IDL.Func(\r\n        [\r\n          IDL.Record({\r\n            controller: IDL.Opt(IDL.Principal),\r\n            cycles: IDL.Nat64,\r\n          }),\r\n        ],\r\n        [CreateResult],\r\n        []\r\n      ),\r\n      wallet_create_wallet: IDL.Func(\r\n        [\r\n          IDL.Record({\r\n            controller: IDL.Opt(IDL.Principal),\r\n            cycles: IDL.Nat64,\r\n          }),\r\n        ],\r\n        [CreateResult],\r\n        []\r\n      ),\r\n      wallet_send: IDL.Func(\r\n        [IDL.Record({ canister: IDL.Principal, amount: IDL.Nat64 })],\r\n        [ResultSend],\r\n        []\r\n      ),\r\n    });\r\n  };\r\n}\r\n","export * from './use-all-pairs';\r\nexport * from './use-balances';\r\nexport * from './use-query';\r\nexport * from './use-token-allowance';\r\nexport * from './use-token-balance';\r\nexport * from './use-token-logos-fetcher-init';\r\nexport * from './use-token-selection-detector';\r\nexport * from './use-user-metrics';\r\nexport * from './use-network-error-notifications';\r\nexport * from './use-header-resize-effect';\r\nexport * from './use-token-fee'","import { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { getswapActor } from '@/utils/canisterDriver'\r\n\r\n\r\nimport { FeatureState, swapCanisterActions, useKeepSync, useSwapCanisterStore } from '@/store';\r\nimport { AppLog } from '@/utils';\r\nimport { parseResponseAllPairs } from '@/utils/canister';\r\n\r\nexport const useAllPairs = () => {\r\n  const dispatch = useDispatch();\r\n  const { allPairsState, allPairs } = useSwapCanisterStore();\r\n\r\n  const getAllPairs = useKeepSync('getAllPairs',\r\n    useCallback(async (isRefreshing?: boolean) => {\r\n      try {\r\n        if (allPairsState !== FeatureState.Loading) {\r\n          dispatch(swapCanisterActions.setAllPairsState(isRefreshing ? FeatureState.Updating : FeatureState.Loading));\r\n          const swapActor = await getswapActor(true);\r\n          var response = await swapActor.getAllPairs();\r\n          if (response) {\r\n            dispatch(swapCanisterActions.setAllPairs(parseResponseAllPairs(response)));\r\n          } else {\r\n            throw new Error('No \"getAllPairs\" response');\r\n          }\r\n          dispatch(swapCanisterActions.setAllPairsState(FeatureState.Idle));\r\n        }\r\n      } catch (error) {\r\n        AppLog.error(`All pairs fetch error`, error);\r\n        dispatch(swapCanisterActions.setAllPairsState(FeatureState.Error));\r\n      }\r\n    },[dispatch, allPairsState]),{ interval: 25 * 1000 }\r\n  );\r\n\r\n  const directGetAllPairs = async()=>{\r\n    try {\r\n      if (allPairsState !== FeatureState.Loading) {\r\n        dispatch(swapCanisterActions.setAllPairsState(FeatureState.Updating ));\r\n        const swapActor = await getswapActor(true);\r\n        var response = await swapActor.getAllPairs();\r\n        if (response) {\r\n          dispatch(swapCanisterActions.setAllPairs(parseResponseAllPairs(response)));\r\n        } else {\r\n          throw new Error('No \"getAllPairs\" response');\r\n        }\r\n        dispatch(swapCanisterActions.setAllPairsState(FeatureState.Idle));\r\n      }\r\n    } catch (error) {\r\n      AppLog.error(`All pairs fetch error`, error);\r\n      dispatch(swapCanisterActions.setAllPairsState(FeatureState.Error));\r\n    }\r\n  }\r\n\r\n  return { allPairs, allPairsState, getAllPairs , directGetAllPairs };\r\n};\r\n\r\n","import { Principal } from '@dfinity/principal';\r\nimport { useCallback, useMemo } from 'react';\r\n\r\nimport { ICP_METADATA } from '@/constants';\r\n\r\nimport { Balances } from '@/models';\r\nimport {\r\n  FeatureState, swapCanisterActions, useAppDispatch, useSwapCanisterStore, useWalletStore\r\n} from '@/store';\r\n\r\nimport { useKeepSync } from '@/store/features/keep-sync';\r\nimport { AppLog } from '@/utils';\r\nimport { parseResponseUserLPBalances } from '@/utils/canister';\r\n\r\nimport { parseAmount, roundBigInt } from '@/utils/format';\r\nimport { fetchICPBalance } from '@/utils/icp';\r\n\r\nimport { getswapActor, getTokenBalance, tokenList } from '@/utils'\r\n\r\nexport const useBalances = () => {\r\n  const { principalId } = useWalletStore();\r\n\r\n  const { sonicBalances, icpBalance, tokenBalances, balancesState, userLPBalancesState } = useSwapCanisterStore();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const getUserPositiveLPBalances = useKeepSync('getUserPositiveLPBalances',\r\n    useCallback(\r\n      async (isRefreshing?: boolean) => {\r\n        try {\r\n          if (userLPBalancesState === FeatureState.Loading) return;\r\n          dispatch(swapCanisterActions.setUserLPBalancesState(isRefreshing ? FeatureState.Updating : FeatureState.Loading));\r\n          if (!principalId) throw new Error('Principal ID not found');\r\n\r\n          const swapActor = await getswapActor(true);\r\n          const response = await swapActor.getUserLPBalancesAbove(Principal.fromText(principalId), BigInt(0));\r\n          if (response) {\r\n            dispatch(swapCanisterActions.setUserLPBalances(parseResponseUserLPBalances(response)));\r\n          } else {\r\n            throw new Error('No \"getUserLPBalancesAbove\" response');\r\n          }\r\n          dispatch(swapCanisterActions.setUserLPBalancesState(FeatureState.Idle));\r\n        } catch (error) {\r\n          AppLog.error(`User LP balances fetch error`, error);\r\n        }\r\n      },\r\n      [userLPBalancesState, principalId, dispatch]\r\n    )\r\n  );\r\n  const maxDecimalPlaces = 5;\r\n  const getBalances = useKeepSync('getBalances', useCallback(async (isRefreshing?: boolean) => {\r\n    try {\r\n      if (balancesState === FeatureState.Loading) return;\r\n      if (!principalId) return;\r\n      const tokenInfo = tokenList('obj');\r\n      dispatch(swapCanisterActions.setBalancesState(isRefreshing ? FeatureState.Updating : FeatureState.Loading));\r\n      const swapActor: any = await getswapActor(true);\r\n      const sonicBalances = await swapActor.getUserBalances(Principal.fromText(principalId));\r\n      const tokenBalances = sonicBalances ? await Promise.all(\r\n        sonicBalances.map(async (balance: any, index: number) => {\r\n          const tokenCanisterId = balance[0];\r\n          \r\n          var tokenFeeLen = tokenInfo[tokenCanisterId]?.fee.toString().length;\r\n          var tokenDecimals = tokenInfo[tokenCanisterId]?.decimals;\r\n\r\n\r\n          sonicBalances[index][1] = roundBigInt(sonicBalances[index][1], tokenDecimals, tokenFeeLen > maxDecimalPlaces ? tokenFeeLen : maxDecimalPlaces);\r\n          try {\r\n            var tokenBalance = BigInt(0);\r\n            tokenBalance = await getTokenBalance(tokenCanisterId, principalId);\r\n            const result: [string, bigint] = [balance[0], roundBigInt(tokenBalance, tokenDecimals, tokenFeeLen > maxDecimalPlaces ? tokenFeeLen : maxDecimalPlaces)];\r\n            return result;\r\n          } catch (error) {\r\n           // AppLog.error(`Token balance fetch error: token=\"${tokenCanisterId}\"`, error);\r\n            const errorResult: [string, bigint] = [balance[0], BigInt(0)];\r\n            return errorResult;\r\n          }\r\n        })\r\n      ) : undefined;\r\n      const icpBalance = await fetchICPBalance(principalId);\r\n      dispatch(swapCanisterActions.setICPBalance(parseAmount(icpBalance, ICP_METADATA.decimals)));\r\n      dispatch(swapCanisterActions.setSonicBalances(sonicBalances));\r\n      dispatch(swapCanisterActions.setTokenBalances(tokenBalances));\r\n      dispatch(swapCanisterActions.setBalancesState(FeatureState.Idle));\r\n    } catch (error) {\r\n      AppLog.error(`Balances fetch error`, error);\r\n      dispatch(swapCanisterActions.setBalancesState(FeatureState.Error));\r\n    }\r\n  }, [principalId, dispatch, balancesState]), { interval: 10 * 1000 }\r\n  );\r\n\r\n  const totalBalances = useMemo(() => {\r\n    if (tokenBalances && sonicBalances) {\r\n      return sumBalances(tokenBalances, sonicBalances, { [ICP_METADATA.id]: icpBalance ?? 0 });\r\n    }\r\n    return undefined;\r\n  }, [tokenBalances, sonicBalances, icpBalance, principalId]);\r\n\r\n  return {\r\n    totalBalances, sonicBalances, tokenBalances, icpBalance, balancesState,\r\n    userLPBalancesState, getBalances, getUserPositiveLPBalances,\r\n  };\r\n};\r\n\r\nconst sumBalances = (...balances: Balances[]): Balances => {\r\n  return balances.reduce((acc, current) => {\r\n    const balance = Object.entries(current);\r\n    \r\n    balance.forEach(([canisterId, amount]) => {\r\n      if (acc[canisterId]) { acc[canisterId] += amount;}\r\n      else { acc[canisterId] = amount;}\r\n    });\r\n\r\n    return acc;\r\n  }, {} as Balances);\r\n};\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { MINT_AUTO_NOTIFICATION_TITLES } from '@/notifications';\r\nimport {\r\n  modalsSliceActions,\r\n  NotificationState,\r\n  NotificationType,\r\n  useAppDispatch,\r\n  useNotificationStore,\r\n  useWalletStore,\r\n} from '@/store';\r\nimport {\r\n  getFromStorage,\r\n  LocalStorageKey,\r\n  MintUncompleteBlockHeights,\r\n} from '@/utils';\r\n\r\nexport const useBlockHeightsInit = () => {\r\n  const [notificationId] = useState(String(new Date().getTime()));\r\n  const { isConnected, principalId } = useWalletStore();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    const totalBlockHeightsWICP = getFromStorage(\r\n      LocalStorageKey.MintWICPUncompleteBlockHeights\r\n    ) as MintUncompleteBlockHeights | undefined;\r\n    const totalBlockHeightsXTC = getFromStorage(\r\n      LocalStorageKey.MintXTCUncompleteBlockHeights\r\n    ) as MintUncompleteBlockHeights | undefined;\r\n\r\n    if (principalId) {\r\n      const blockHeightsXTC = totalBlockHeightsXTC?.[principalId];\r\n      const blockHeightsWICP = totalBlockHeightsWICP?.[principalId];\r\n\r\n      if (blockHeightsWICP || blockHeightsXTC) {\r\n        const totalLength =\r\n          (blockHeightsWICP?.length ?? 0) + (blockHeightsXTC?.length ?? 0);\r\n\r\n        if (blockHeightsWICP) {\r\n          dispatch(\r\n            modalsSliceActions.setMintWICPUncompleteBlockHeights(\r\n              blockHeightsWICP\r\n            )\r\n          );\r\n        }\r\n        if (blockHeightsXTC) {\r\n          dispatch(\r\n            modalsSliceActions.setMintXTCUncompleteBlockHeights(blockHeightsXTC)\r\n          );\r\n        }\r\n\r\n        if (totalLength >= 1 && isConnected) {\r\n          addNotification({\r\n            id: notificationId,\r\n            title: MINT_AUTO_NOTIFICATION_TITLES[NotificationState.Error],\r\n            type: NotificationType.MintAuto,\r\n            state: NotificationState.Error,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!isConnected || !principalId) {\r\n      popNotification(notificationId);\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isConnected, principalId]);\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nexport const useHeaderResizeEffect = (\r\n  callback: (element: HTMLElement) => void\r\n) => {\r\n  useEffect(() => {\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      const header = document.getElementById('header');\r\n      if (header) {\r\n        callback(header);\r\n      }\r\n    });\r\n    const target = document.getElementById('header');\r\n    if (target) {\r\n      resizeObserver.observe(target);\r\n    }\r\n    return () => {\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, [callback]);\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nimport {\r\n  FeatureState,\r\n  NotificationType,\r\n  useAppSelector,\r\n  useNotificationStore,\r\n} from '@/store';\r\n\r\nconst useNotificationEffect = (\r\n  id: string,\r\n  title: string,\r\n  state: FeatureState,\r\n  notifications: ReturnType<typeof useNotificationStore>\r\n) =>\r\n  useEffect(() => {\r\n    if (state === FeatureState.Error) {\r\n      return notifications.addNotification({\r\n        id,\r\n        title,\r\n        errorMessage: 'Trying again in 15 seconds...',\r\n        type: NotificationType.Error,\r\n        timeout: '11s',\r\n      });\r\n    } else {\r\n      notifications.popNotification(id);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [state]);\r\n\r\nexport const useNetworkErrorNotifications = () => {\r\n  const { allPairsState, supportedTokenListState,  balanceState } =\r\n    useAppSelector((state) => ({\r\n      allPairsState: state.swap.allPairsState,\r\n      supportedTokenListState: state.swap.supportedTokenListState,\r\n      priceState: state.price.state,\r\n      balanceState: state.swap.balancesState,\r\n    }));\r\n  const notifications = useNotificationStore();\r\n \r\n  // useNotificationEffect(\r\n  //   'icp-price-error',\r\n  //   'Failed to fetch ICP price',\r\n  //   priceState,\r\n  //   notifications\r\n  // );\r\n\r\n  useNotificationEffect(\r\n    'supported-token-list-error',\r\n    'Failed to fetch supported token list',\r\n    supportedTokenListState,\r\n    notifications\r\n  );\r\n\r\n  useNotificationEffect(\r\n    'all-pairs-error',\r\n    'Failed to fetch all pairs',\r\n    allPairsState,\r\n    notifications\r\n  );\r\n\r\n  useNotificationEffect(\r\n    'balance-error',\r\n    'Failed to fetch balances',\r\n    balanceState,\r\n    notifications\r\n  );\r\n};\r\n","import { useCallback } from 'react';\r\nimport { useLocation } from 'react-router';\r\n\r\nexport const useQuery = () => {\r\n  const location = useLocation();\r\n\r\n  return {\r\n    get: useCallback(\r\n      (key: string) => new URLSearchParams(location.search).get(key),\r\n      [location.search]\r\n    ),\r\n    delete: useCallback(\r\n      (key: string) => {\r\n        const query = new URLSearchParams(location.search);\r\n        query.delete(key);\r\n        location.search = query.toString();\r\n\r\n        window.history.replaceState(\r\n          {},\r\n          '',\r\n          location.pathname +\r\n            (location.search !== '' ? `?${location.search}` : '')\r\n        );\r\n      },\r\n      [location.search]\r\n    ),\r\n  };\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nimport { allowanceActions, useAllowanceStore, useAppDispatch, useWalletStore } from '@/store';\r\n\r\nimport { validPrincipalId } from '@/utils';\r\n\r\nexport const useTokenAllowance = (tokenId = ''): number | undefined => {\r\n  const dispatch = useAppDispatch();\r\n  const { principalId } = useWalletStore();\r\n  const { tokensAllowance } = useAllowanceStore();\r\n\r\n  useEffect(() => {\r\n    if (validPrincipalId(tokenId) && principalId) {\r\n      if (tokensAllowance[tokenId]) {\r\n        if (Date.now() > tokensAllowance[tokenId].expiration) {\r\n          dispatch(allowanceActions.fetchAllowance({ tokenId }));\r\n        }\r\n      } else {\r\n        dispatch(allowanceActions.fetchAllowance({ tokenId }));\r\n      }\r\n    }\r\n  }, [tokenId, principalId, dispatch, tokensAllowance]);\r\n\r\n  return tokensAllowance[tokenId]?.allowance;\r\n};\r\n","import { useMemo } from 'react';\r\n\r\nimport { ICP_METADATA } from '@/constants';\r\n\r\nimport { useBalances } from './use-balances';\r\n\r\nexport const useTokenBalanceMemo = (canisterId?: string , tokenType?:string) => {\r\n  const { totalBalances, icpBalance } = useBalances();\r\n\r\n  return useMemo(() => {\r\n    if (canisterId && totalBalances) {\r\n      const isICP = canisterId === ICP_METADATA.id;\r\n      if (isICP) { return icpBalance; }\r\n\r\n      return totalBalances[canisterId];\r\n    }\r\n  }, [canisterId, totalBalances, icpBalance]);\r\n};\r\n","import { useBalances } from '@/hooks/use-balances';\r\n\r\ntype useTokenTaxCheckOptions = {\r\n    tokenId?: string;\r\n    tokenDecimals?: number;\r\n    tokenValue?:string;\r\n    tokenSymbol?:string;\r\n};\r\nexport const useTokenTaxCheck = ({ tokenId ,tokenSymbol, tokenDecimals=1 , tokenValue='' ,}: useTokenTaxCheckOptions) => {\r\n    const { sonicBalances, tokenBalances ,icpBalance } = useBalances();\r\n    const tokenInfo={ wallet:0, sonic:0, taxInfo:{ input: 0 ,taxedValue:0, nonTaxedValue:0 ,netValue:0} }\r\n    if(tokenId!='' && tokenId!='ICP' && sonicBalances && tokenBalances){\r\n        var id= tokenId?tokenId:'';\r\n        tokenInfo['wallet'] = tokenBalances[id]? tokenBalances[id]:0;\r\n        tokenInfo['sonic'] = sonicBalances[id]?sonicBalances[id]:0;\r\n    }else{ tokenInfo['wallet'] = icpBalance?icpBalance:0;}\r\n    if(tokenValue){\r\n      let tokenVal:number = parseFloat(tokenValue)\r\n        if(tokenSymbol == 'YC'){\r\n            let decimals = tokenDecimals?(10**tokenDecimals):1\r\n            let sonicBalance = tokenInfo['sonic'] / decimals;\r\n            if((sonicBalance > tokenVal)){\r\n                tokenInfo.taxInfo.nonTaxedValue = tokenVal;\r\n                tokenInfo.taxInfo.taxedValue = 0;\r\n            } else {\r\n                tokenInfo.taxInfo.nonTaxedValue = sonicBalance;\r\n                tokenInfo.taxInfo.taxedValue = tokenVal - tokenInfo.taxInfo.nonTaxedValue;\r\n            }    \r\n            tokenInfo.taxInfo.netValue = tokenInfo.taxInfo.nonTaxedValue + (tokenInfo.taxInfo.taxedValue * (89/100));\r\n        }\r\n    }    \r\n    return tokenInfo\r\n}","import { useEffect } from 'react';\r\nimport { getFromStorage, saveToStorage } from '@/utils';\r\nimport { AppLog , tokenList} from '@/utils';\r\n\r\n\r\n// not using\r\nexport const useTokenLogosFetcherInit = (): void => {\r\n  const supportedTokenList = tokenList('array');\r\n  useEffect(() => {\r\n    if (!supportedTokenList) return;\r\n    Promise.all(\r\n      supportedTokenList.map(async (token:{id:string}) => {\r\n        const storageKey = `${token.id}-logo`;\r\n        const logo = getFromStorage(storageKey);\r\n        if (!logo) {\r\n          try {\r\n            var tokenLogo = \"https://cdn.sonic.ooo/icons/\"+token.id ; // await getTokenLogo(token.id);\r\n            saveToStorage(storageKey, tokenLogo);        \r\n          } catch (e) {\r\n            AppLog.error(`Token logo fetch error: token=${token.id}`, e);\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }, [supportedTokenList]);\r\n};\r\n","import { useMemo } from 'react';\r\n\r\nimport { ICP_METADATA } from '@/constants';\r\n\r\nexport type UseTokenSelectionCheckerOptions = {\r\n  id0?: string;\r\n  id1?: string;\r\n  targetId?: string;\r\n};\r\n\r\nexport type UseTokenSelectionCheckerReturn = ReturnType<\r\n  typeof useTokenSelectionChecker\r\n>;\r\n\r\nexport const useTokenSelectionChecker = ({ id0, id1,targetId = ICP_METADATA.id,\r\n}: UseTokenSelectionCheckerOptions) => {\r\n\r\n  const isFirstIsSelected = useMemo(() => id0 === targetId, [id0, targetId]);\r\n  const isSecondIsSelected = useMemo(() => id1 === targetId, [id1, targetId]);\r\n\r\n  return { isFirstIsSelected, isSecondIsSelected, isTokenSelected: isFirstIsSelected || isSecondIsSelected};\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { Principal } from '@dfinity/principal';\r\nimport { AnalyticsApi } from '@/apis';\r\nimport { useWalletStore, useSwapCanisterStore } from '@/store';\r\nimport { AppLog } from '@/utils';\r\n\r\nimport { getswapActor } from '@/utils'\r\n\r\nexport type UserLPMetrics = {\r\n  [pairId: string]: AnalyticsApi.PositionMetrics;\r\n};\r\n\r\n\r\nexport const useUserMetrics = () => {\r\n  const { principalId } = useWalletStore();\r\n\r\n  const { allPairs } = useSwapCanisterStore();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [userLPMetrics, setUserLPMetrics] = useState<UserLPMetrics>();\r\n\r\n  const getUserLPMetrics = async () => {\r\n    try {\r\n      if (isLoading) { return; }\r\n      if (!principalId || !allPairs) { setUserLPMetrics(undefined); return; }\r\n\r\n      const swapActor = await getswapActor(true);\r\n      const response = await swapActor.getUserLPBalancesAbove(Principal.fromText(principalId), BigInt(0));\r\n\r\n      const pairIds: any[] = response.length > 0 ? response.map(x => x[0]) : [];\r\n\r\n      setIsLoading(true);\r\n\r\n      const analyticsApi = new AnalyticsApi();\r\n      const promises = pairIds.map((pairId) => analyticsApi.queryUserLPMetrics(principalId, pairId));\r\n      const responses = await Promise.all(promises);\r\n\r\n      const _userPairMetrics = responses.reduce((acc, response, index) => {\r\n        acc[pairIds[index]] = response; return acc;\r\n      }, {} as UserLPMetrics);\r\n      setUserLPMetrics(_userPairMetrics);\r\n    } catch (error) {\r\n      AppLog.error(`User metrics fetch error`, error);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUserLPMetrics()\r\n  }, [principalId]);\r\n\r\n  return { isLoading, userPairMetrics: userLPMetrics, getUserMetrics: getUserLPMetrics };\r\n};\r\n\r\nexport const getuserLprewards = (token0: string, token1: string) => {\r\n  const { principalId } = useWalletStore();\r\n  const [data, setData] = useState({ token0: BigInt(0), token1: BigInt(0) });\r\n\r\n  const getUserRwds = async () => {\r\n    const swapActor = await getswapActor(true);\r\n    if (!principalId) { return; }\r\n    const response: any = await swapActor.getUserReward(Principal.fromText(principalId), token0, token1);\r\n    setData({ token0: response?.ok[0], token1: response?.ok[1] })\r\n    return data;\r\n  }\r\n  useEffect(() => { getUserRwds(); }, [principalId]);\r\n\r\n  return data\r\n\r\n}","import { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider as ReduxProvider } from 'react-redux';\r\n\r\nimport { theme } from '@/theme';\r\n\r\nimport { App } from './App';\r\nimport { Maintenance } from './components';\r\nimport { ENV } from './config';\r\nimport { store } from './store';\r\n\r\nlet Render: React.FC;\r\n\r\nif (ENV.maintenanceMode) {\r\n  Render = () => <Maintenance />;\r\n} else {\r\n  Render = () => <App />;\r\n}\r\n\r\nReactDOM.render(\r\n  <>\r\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\r\n    <ChakraProvider theme={theme} resetCSS>\r\n      <ReduxProvider store={store}>\r\n        <Render />\r\n      </ReduxProvider>\r\n    </ChakraProvider>\r\n  </>,\r\n  document.getElementById('sonic-app-root')\r\n);\r\n","export * from './walletInit';\r\n","import { useEffect } from 'react';\r\nimport { useAppDispatch, walletActions, walletState } from '@/store';\r\nimport {Artemis} from 'artemis-web3-adapter';\r\n\r\nimport { tokenList } from '@/utils'\r\nimport { ENV } from '@/config';\r\n\r\nexport const artemis = new Artemis();\r\n\r\nexport const useWalletInit = (): void => {\r\n    const dispatch = useAppDispatch();\r\n    const tknList = tokenList(\"obj\");\r\n    const connectObj = { host: ENV.host, whitelist: [...Object.values(ENV.canistersPrincipalIDs), ...Object.keys(tknList)] };\r\n    useEffect(() => {\r\n      const initAdapter = async (): Promise<void> => {\r\n        const walletId: string = localStorage.getItem('dfinityWallet') || '';\r\n  \r\n        if (walletId) {\r\n          dispatch(walletActions.setWalletSelected(walletId));\r\n          dispatch(walletActions.setOnwalletList(walletState.Connecting));\r\n        }\r\n        const walletStatus = await artemis.autoConnect(connectObj);\r\n        if (walletStatus && artemis?.principalId && artemis?.provider) {\r\n          dispatch(walletActions.setWalletLoaded({\r\n            principleId: artemis.principalId,\r\n            accountId: artemis.accountId,\r\n            walletActive: artemis.walletActive\r\n          }));\r\n        } else {\r\n          dispatch(walletActions.setOnwalletList(walletState.Idle));\r\n        }\r\n      };\r\n  \r\n      initAdapter();\r\n    }, []);\r\n  };","import { CapRoot } from '@sonicdex/cap-js';\r\n\r\nimport { ENV } from '@/config';\r\n\r\nexport interface CapRouterInstanceProps {\r\n  canisterId: string;\r\n  host?: string;\r\n}\r\n\r\nexport const getCapRootInstance = async ({ canisterId, host = ENV.host}: CapRouterInstanceProps) =>\r\n  await CapRoot.init({host,canisterId});\r\n","import { Principal } from '@dfinity/principal';\r\n\r\nimport { ENV } from '@/config';\r\n\r\nimport { MappedCapHistoryLog } from '..';\r\nimport { getCapRootInstance } from '../connection';\r\nimport { CapHistoryLog } from '../history-log';\r\nimport { parseCapHistoryLog } from '../utils';\r\n\r\nexport interface UserTransactionsResponse {\r\n  data: MappedCapHistoryLog[];\r\n  page: number;\r\n}\r\n\r\nexport const getUserTransactions = async ( principalId: string, page?: number): Promise<UserTransactionsResponse> => {\r\n  const capRoot = await getCapRootInstance({\r\n    canisterId: ENV.canistersPrincipalIDs.swapCapRoot,\r\n  });\r\n  \r\n  const result = (await capRoot.get_user_transactions({\r\n    user: Principal.fromText(principalId) as any,\r\n    page,\r\n  })) as { data: CapHistoryLog[]; page: number };\r\n\r\n  return {\r\n    data: parseCapHistoryLog(Object.values(result.data.reverse())),\r\n    page: result.page,\r\n  };\r\n};\r\n","export * from './get-user-transactions';\r\n","export * from './features';\r\nexport * from './history-log';\r\n","import { CapHistoryLog, MappedCapHistoryLog } from '.';\r\n\r\nconst mapDetails = (details: CapHistoryLog['details']) => {\r\n  return details.reduce((acc, [key, value]) => {\r\n    const aux = Object.values(value)[0];\r\n    acc[key] = typeof aux === 'bigint' ? Number(aux) : aux;\r\n    return acc;\r\n  }, {} as any);\r\n};\r\n\r\nexport const parseCapHistoryLog = (\r\n  data: CapHistoryLog[]\r\n): MappedCapHistoryLog[] => {\r\n  return data.map<MappedCapHistoryLog>((data) => {\r\n    return {\r\n      ...data,\r\n      time: Number(data.time),\r\n      details: mapDetails(data.details),\r\n    };\r\n  });\r\n};\r\n","export * from './ledger-transactions';\r\n","import BigNumber from 'bignumber.js';\r\n\r\nimport RosettaApi from '@/apis/rosetta';\r\nimport { ENV } from '@/config';\r\n\r\nexport interface LedgerTransaction {\r\n  account1Address: string;\r\n  account2Address: string;\r\n  amount: BigNumber;\r\n  blockIndex: number;\r\n  fee: BigNumber;\r\n  hash: string;\r\n  memo: BigNumber;\r\n  status: string;\r\n  timestamp: Date;\r\n  type: string;\r\n}\r\n\r\nconst ADDRESS_TO_FILTER = [ENV.accountIDs.XTC, ENV.accountIDs.WICP];\r\n\r\nexport const getUserLedgerTransactions = async (\r\n  accountId: string\r\n): Promise<LedgerTransaction[]> => {\r\n  const rosetta = new RosettaApi();\r\n  const ledgerTransactions = await rosetta.getTransactionsByAccount(accountId);\r\n\r\n  if (Array.isArray(ledgerTransactions)) {\r\n    return ledgerTransactions\r\n      .filter(\r\n        (t) =>\r\n          ADDRESS_TO_FILTER.includes(t.account1Address) ||\r\n          ADDRESS_TO_FILTER.includes(t.account2Address)\r\n      )\r\n      .reverse();\r\n  } else {\r\n    throw new Error('Failed to get ledger transactions');\r\n  }\r\n};\r\n","import { toBigNumber } from '@sonicdex/sonic-js';\r\n\r\nimport { MintTokenSymbol } from '@/store';\r\nimport {  \r\n  getFromStorage, LocalStorageKey,  MintUncompleteBlockHeights, saveToStorage,\r\n} from '@/utils';\r\n\r\nexport const getAmountDependsOnBalance = ( tokenBalance: number,tokenDecimals: number, fromValue: string): string => {\r\n  const parsedFromValue = parseFloat(fromValue);\r\n  const parsedTokenBalance = toBigNumber(tokenBalance).applyDecimals(tokenDecimals).toNumber();\r\n\r\n  return (parsedFromValue - parsedTokenBalance).toString();\r\n};\r\n\r\n\r\nexport type GetTransactionNameOptions = {\r\n  tokenSymbol: MintTokenSymbol;\r\n  blockHeight: string;\r\n};\r\n\r\nexport function getTransactionName({\r\n  tokenSymbol,\r\n  blockHeight,\r\n}: GetTransactionNameOptions) {\r\n  return `${tokenSymbol}-${blockHeight}`;\r\n}\r\n\r\nexport type SaveBlockHeightToStorageOptions = {\r\n  blockHeight?: bigint;\r\n  principalId?: string;\r\n  tokenSymbol: MintTokenSymbol;\r\n};\r\n\r\n// === Block Heights ===\r\n\r\nexport type RemoveBlockHeightFromStorageOptions = {\r\n  blockHeight: string;\r\n  principalId?: string;\r\n  tokenSymbol: MintTokenSymbol;\r\n};\r\n\r\nexport const removeBlockHeightFromStorage = ({\r\n  blockHeight,\r\n  principalId,\r\n  tokenSymbol,\r\n}: RemoveBlockHeightFromStorageOptions) => {\r\n  if (!principalId) {\r\n    return null;\r\n  }\r\n\r\n  const localStorageKey =\r\n    tokenSymbol === MintTokenSymbol.XTC\r\n      ? LocalStorageKey.MintXTCUncompleteBlockHeights\r\n      : LocalStorageKey.MintWICPUncompleteBlockHeights;\r\n\r\n  const totalBlockHeights = getFromStorage(localStorageKey) as\r\n    | MintUncompleteBlockHeights\r\n    | undefined;\r\n  const userBlockHeights = totalBlockHeights?.[principalId];\r\n\r\n  if (userBlockHeights && userBlockHeights.length > 0) {\r\n    const newBlockHeights = userBlockHeights.filter(\r\n      (_blockHeight: string) => _blockHeight !== blockHeight\r\n    );\r\n\r\n    saveToStorage(localStorageKey, {\r\n      ...totalBlockHeights,\r\n      [principalId]: newBlockHeights,\r\n    });\r\n  }\r\n};\r\n\r\nexport const saveBlockHeightToStorage = ({\r\n  blockHeight,\r\n  principalId,\r\n  tokenSymbol,\r\n}: SaveBlockHeightToStorageOptions) => {\r\n  \r\n  if (!principalId || !blockHeight) { return null;}\r\n\r\n  const localStorageKey =\r\n    tokenSymbol === MintTokenSymbol.XTC\r\n      ? LocalStorageKey.MintXTCUncompleteBlockHeights\r\n      : LocalStorageKey.MintWICPUncompleteBlockHeights;\r\n\r\n  const prevMintWICPBlockHeight = getFromStorage(localStorageKey);\r\n\r\n  const newBlockHeights = {\r\n    ...prevMintWICPBlockHeight,\r\n    [principalId]: [\r\n      ...(prevMintWICPBlockHeight?.[principalId] || []),\r\n      String(blockHeight),\r\n    ],\r\n  };\r\n\r\n  saveToStorage(localStorageKey, newBlockHeights);\r\n};\r\n\r\nexport const updateFailedBlockHeight = ({prevResponses,...props}: Omit<SaveBlockHeightToStorageOptions, 'blockHeight'> & {\r\n  prevResponses: any[];\r\n}) => {\r\n  const failedBlockHeight = prevResponses?.[0]?.response as bigint | undefined;\r\n\r\n  saveBlockHeightToStorage({ blockHeight: failedBlockHeight, ...props });\r\n};\r\n","export * from './batch.utils';\r\nexport * from './use-add-liquidity-batch';\r\nexport * from './use-deposit-batch';\r\nexport * from './use-mint-batch';\r\nexport * from './use-mint-multiple-batch';\r\nexport * from './use-mint-single-batch';\r\nexport * from './use-remove-liquidity-batch';\r\nexport * from './use-swap-batch';\r\nexport * from './use-withdraw-batch';\r\nexport * from './use-withdraw-wicp-batch';\r\nexport * from './use-transfer-batch';\r\n","import { useMemo } from 'react';\r\n\r\nimport { AddLiquidityModalDataStep, modalsSliceActions, useAppDispatch, useLiquidityViewStore, useSwapCanisterStore } from '@/store';\r\n\r\nimport { AddLiquidity, Deposit } from '../..';\r\nimport {\r\n  useAddLiquidityTransactionMemo, useApproveTransactionMemo, useDepositTransactionMemo, \r\n  intitICRCTokenDepositIn, useICRCTransferMemo\r\n} from '..';\r\n\r\nimport { useCreatePairTransactionMemo } from '../transactions/create-pair';\r\n\r\nimport { getAmountDependsOnBalance } from './batch.utils';\r\n\r\ninterface Transactions { [transactionName: string]: any;}\r\n\r\nimport { BatchTransact } from 'artemis-web3-adapter';\r\nimport { artemis } from '@/integrations/artemis';\r\n\r\n\r\nexport const useAddLiquidityBatch = (addLiquidityParams: AddLiquidity) => {\r\n  const dispatch = useAppDispatch();\r\n  var batchLoad: any = { state: \"idle\" };\r\n  const { sonicBalances } = useSwapCanisterStore();\r\n  const { pair } = useLiquidityViewStore();\r\n\r\n  if (!sonicBalances) {\r\n     return { batch: batchLoad, openBatchModal: () => { } };\r\n  }\r\n  if (!addLiquidityParams.token0.metadata || !addLiquidityParams.token1.metadata) {\r\n    return { batch: batchLoad, openBatchModal: () => { } };\r\n  }\r\n\r\n  const deposit0Params = useMemo(() => {\r\n    if (addLiquidityParams.token0.metadata) {\r\n      return {\r\n        token: addLiquidityParams.token0.metadata,\r\n        amount: getAmountDependsOnBalance(\r\n          sonicBalances[addLiquidityParams.token0.metadata?.id],\r\n          addLiquidityParams.token0.metadata.decimals, addLiquidityParams.token0.value\r\n        ),\r\n        allowance: addLiquidityParams.allowance0,\r\n      };\r\n    }\r\n  }, []) as Deposit;\r\n\r\n  const deposit1Params = useMemo(() => {\r\n    if (addLiquidityParams.token1.metadata) {\r\n      return {\r\n        token: addLiquidityParams.token1.metadata,\r\n        amount: getAmountDependsOnBalance(\r\n          sonicBalances[addLiquidityParams.token1.metadata?.id],\r\n          addLiquidityParams.token1.metadata.decimals, addLiquidityParams.token1.value\r\n        ),\r\n        allowance: addLiquidityParams.allowance1,\r\n      };\r\n    }\r\n  }, []) as Deposit;\r\n\r\n  const createPairParams = useMemo(() => {\r\n    return {\r\n      token0: addLiquidityParams.token0,\r\n      token1: addLiquidityParams.token1,\r\n    };\r\n  }, []);\r\n\r\n  var approve0: any, deposit0: any, approve1: any, deposit1: any, steps: any = [];\r\n  var tx0complete = false, tx1complete = false, getICRCAcnt: any;\r\n\r\n  var DepositBatch = { batch: batchLoad, openBatchModal: () => { } };\r\n\r\n  var token0Type = addLiquidityParams.token0.metadata.tokenType;\r\n  var token1Type = addLiquidityParams.token1.metadata.tokenType;\r\n\r\n  var token0Amt = parseFloat(deposit0Params?.amount ? deposit0Params?.amount : '0');\r\n  var token1Amt = parseFloat(deposit1Params?.amount ? deposit1Params?.amount : '0');\r\n\r\n  if (!pair) { steps = ['createPair'] }\r\n\r\n  if (token0Type == 'ICRC1' || token1Type == 'ICRC1') {\r\n    getICRCAcnt = intitICRCTokenDepositIn(); steps = [...steps, 'getacnt'];\r\n  }\r\n\r\n  //step 1\r\n  if (token0Amt > 0) {\r\n    if (token0Type == 'DIP20' || token0Type == 'YC') {\r\n      approve0 = useApproveTransactionMemo(deposit0Params);\r\n      deposit0 = useDepositTransactionMemo(deposit0Params);\r\n      if (deposit0) tx0complete = true;\r\n    } else if (token0Type == 'ICRC1') {\r\n      approve0 = useICRCTransferMemo({ ...deposit0Params, tokenAcnt: getICRCAcnt });\r\n      deposit0 = useDepositTransactionMemo(deposit0Params);\r\n      if (getICRCAcnt) tx0complete = true;\r\n    }\r\n    steps = [...steps, 'approve0', 'deposit0'];\r\n  } else tx0complete = true;\r\n\r\n  //step 2\r\n  if (token1Amt > 0) {\r\n    if (token1Type == 'DIP20' || token1Type == 'YC') {\r\n      approve1 = useApproveTransactionMemo(deposit1Params);\r\n      deposit1 = useDepositTransactionMemo(deposit1Params);\r\n\r\n      if (tx0complete && deposit1) tx1complete = true;\r\n    } else if (token1Type == 'ICRC1') {\r\n      approve1 = useICRCTransferMemo({ ...deposit1Params, tokenAcnt: getICRCAcnt });\r\n      deposit1 = useDepositTransactionMemo(deposit1Params);\r\n\r\n      if (getICRCAcnt && approve1) tx1complete = true;\r\n    }\r\n    steps = [...steps, 'approve1', 'deposit1'];\r\n  } else tx1complete = true;\r\n\r\n  const createPair = useCreatePairTransactionMemo(createPairParams);\r\n  const addLiquidity = useAddLiquidityTransactionMemo(addLiquidityParams);\r\n\r\n  const LiquidityBatchTx = useMemo(() => {\r\n    let _transactions: Transactions = {};\r\n    if (!pair) { _transactions = { ..._transactions, createPair } }\r\n    if (token0Amt > 0) {\r\n      _transactions = {..._transactions,approve0:approve0, deposit0:deposit0}\r\n    }\r\n    if (token1Amt > 0) {\r\n      _transactions = {..._transactions,approve1:approve1,deposit1:deposit1}\r\n    }\r\n    _transactions = { ..._transactions, addLiquidity };\r\n     \r\n    return new BatchTransact(_transactions, artemis);\r\n  }, [getICRCAcnt]);\r\n\r\n  steps = [...steps, 'addLiquidity'];\r\n\r\n  const handleRetry = async () => {\r\n    return new Promise<boolean>((resolve) => {\r\n      dispatch(\r\n        modalsSliceActions.setAddLiquidityModalData({\r\n          callbacks: [\r\n            () => { // Retry callback\r\n              dispatch(modalsSliceActions.closeAddLiquidityFailModal());\r\n              openBatchModal(); resolve(true);\r\n            },\r\n            () => { // Cancel callback\r\n              dispatch(modalsSliceActions.closeAddLiquidityFailModal());\r\n              resolve(false);\r\n            },\r\n          ],\r\n        })\r\n      );\r\n      dispatch(modalsSliceActions.closeAddLiquidityProgressModal());\r\n      dispatch(modalsSliceActions.openAddLiquidityFailModal());\r\n    });\r\n  };\r\n\r\n  const openBatchModal = () => {\r\n    dispatch(\r\n      modalsSliceActions.setAddLiquidityModalData({\r\n        steps: steps as AddLiquidityModalDataStep[],\r\n        token0Symbol: addLiquidityParams.token0.metadata?.symbol,\r\n        token1Symbol: addLiquidityParams.token1.metadata?.symbol,\r\n      })\r\n    );\r\n    dispatch(modalsSliceActions.openAddLiquidityProgressModal());\r\n  };\r\n\r\n  if(LiquidityBatchTx && tx0complete &&tx1complete  ){\r\n    batchLoad.batchExecute = LiquidityBatchTx;\r\n    batchLoad.handleRetry = handleRetry; \r\n    batchLoad.batchFnUpdate=true;\r\n  }else {\r\n    if(!getICRCAcnt){  batchLoad.state = 'getacnt';}\r\n  }\r\n\r\n  DepositBatch = { ...DepositBatch, batch: batchLoad, openBatchModal };\r\n   return DepositBatch\r\n};","import { useMemo } from 'react';\r\n\r\nimport { DepositModalDataStep, modalsSliceActions, useAppDispatch } from '@/store';\r\n\r\nimport { Deposit } from '../..';\r\nimport { useApproveTransactionMemo, useDepositTransactionMemo, intitICRCTokenDeposit, useICRCTransferMemo } from '..'; //useICRCDepositMemo\r\n\r\n\r\nimport { BatchTransact } from 'artemis-web3-adapter';\r\n\r\nimport { artemis } from '@/integrations/artemis';\r\n\r\nexport const useDepositBatch = (deposit: Deposit): any => {\r\n  const dispatch = useAppDispatch();\r\n  var batchLoad: any = { state: \"idle\" };\r\n\r\n  var DepositBatch = { batch: batchLoad, openBatchModal: () => { }, transactions: {} };\r\n  var tokenType = deposit.token?.tokenType;\r\n\r\n  if (tokenType == 'DIP20' || tokenType == 'YC') {\r\n\r\n    var approveTx = useApproveTransactionMemo(deposit);\r\n    var depositTx = useDepositTransactionMemo(deposit);\r\n\r\n    const DepositBatchTx = useMemo(() => {\r\n      return new BatchTransact({ approve: approveTx, deposit: depositTx }, artemis);\r\n    }, [depositTx]);\r\n\r\n    var openBatchModal = () => {\r\n      dispatch(\r\n       modalsSliceActions.setDepositModalData({\r\n          steps: [ 'approve', 'deposit'] as DepositModalDataStep[],\r\n          tokenSymbol: deposit.token?.symbol,\r\n        })\r\n      );\r\n      dispatch(modalsSliceActions.openDepositProgressModal());\r\n    };\r\n    if (DepositBatchTx) { batchLoad.batchExecute = DepositBatchTx;}\r\n\r\n    DepositBatch = { ...DepositBatch, batch: batchLoad, openBatchModal };\r\n    return DepositBatch;\r\n\r\n  } else if (tokenType == 'ICRC1') {\r\n    var openBatchModal = () => {\r\n      dispatch(modalsSliceActions.setDepositModalData(\r\n        { steps: ['getacnt', 'approve', 'deposit'] as DepositModalDataStep[], tokenSymbol: deposit.token?.symbol})\r\n      );\r\n      dispatch(modalsSliceActions.openDepositProgressModal());\r\n    };\r\n    DepositBatch = { ...DepositBatch, openBatchModal };\r\n\r\n    var getAcnt = intitICRCTokenDeposit();\r\n    var approveTx = useICRCTransferMemo({ ...deposit });\r\n    var depositTx = useDepositTransactionMemo(deposit);\r\n\r\n    const DepositBatchTx = useMemo(() => {\r\n      return new BatchTransact({getacnt:getAcnt, approve: approveTx,deposit: depositTx}, artemis);\r\n    }, []);\r\n\r\n    if (DepositBatchTx) {\r\n      batchLoad.batchExecute = DepositBatchTx;\r\n      DepositBatch = { ...DepositBatch, batch: batchLoad, openBatchModal };\r\n    }\r\n    DepositBatch = { ...DepositBatch, batch: batchLoad, openBatchModal };\r\n    return DepositBatch;\r\n  }\r\n  else return DepositBatch\r\n};\r\n","import { useMemo } from 'react';\r\nimport { ENV } from '@/config';\r\n\r\nimport {\r\n  MintTokenSymbol, modalsSliceActions, useAppDispatch, useSwapViewStore \r\n} from '@/store';\r\n\r\nimport {\r\n  getMintWICPTransaction, getMintXTCTransaction, useApproveTransactionMemo,\r\n  useDepositTransactionMemo, useLedgerTransferTransactionMemo,\r\n} from '..';\r\n\r\nimport { BatchTransact } from 'artemis-web3-adapter';\r\nimport { artemis } from '@/integrations/artemis';\r\n\r\nexport type UseMintBatchOptions = {\r\n  amountIn: string; amountOut: string; blockHeight?: string;\r\n  keepInSonic?: boolean; tokenSymbol: MintTokenSymbol;\r\n};\r\n\r\nexport const useMintBatch = ({ amountIn, amountOut, keepInSonic, tokenSymbol }: UseMintBatchOptions) => {\r\n  const { tokenList } = useSwapViewStore();\r\n  const dispatch = useAppDispatch();\r\n  if (!tokenList) throw new Error('Token list is required');\r\n  var batchLoad: any = { state: \"idle\" };\r\n\r\n  const ledgerTransfer = (tokenSymbol === MintTokenSymbol.WICP) ?\r\n    useLedgerTransferTransactionMemo({ toAccountId: ENV.accountIDs.WICP, amount: amountIn }) :\r\n    (tokenSymbol === MintTokenSymbol.XTC) ?\r\n      useLedgerTransferTransactionMemo({ toAccountId: ENV.accountIDs.XTC, amount: amountIn }) :\r\n      false;\r\n\r\n  const canisterPrincipalId = (tokenSymbol === MintTokenSymbol.WICP) ? ENV.canistersPrincipalIDs.WICP :\r\n    (tokenSymbol === MintTokenSymbol.XTC) ? ENV.canistersPrincipalIDs.XTC : '';\r\n\r\n  var _trx: any = { ledgerTransfer: ledgerTransfer };\r\n\r\n  if (tokenSymbol === MintTokenSymbol.WICP) {\r\n    _trx.mint = getMintWICPTransaction({ blockHeight: '' })\r\n  } else if (tokenSymbol === MintTokenSymbol.XTC) {\r\n    _trx.mint = getMintXTCTransaction({ blockHeight: '' })\r\n  }\r\n\r\n  if (keepInSonic) {\r\n    const depositParams = { token: tokenList[canisterPrincipalId], amount: amountOut };\r\n    const approve = useApproveTransactionMemo(depositParams);\r\n    const deposit = useDepositTransactionMemo(depositParams);\r\n    _trx.approve = approve; _trx.deposit = deposit;\r\n  }\r\n\r\n  const batchTrx = useMemo(() => { return new BatchTransact(_trx, artemis)}, []);\r\n\r\n  if (batchTrx) {\r\n    batchLoad.steps = batchTrx.stepsList;\r\n    batchLoad.batchExecute = batchTrx;\r\n    batchLoad.batchFnUpdate = true;\r\n  }\r\n  const openBatchModal = () => {\r\n    const  steps: any = Object.keys(_trx).length?Object.keys(_trx):[];\r\n\r\n    if (tokenSymbol === MintTokenSymbol.WICP) {\r\n      dispatch(modalsSliceActions.setMintWICPModalData({steps:steps}));\r\n      dispatch(modalsSliceActions.openMintWICPProgressModal());\r\n    } else if (tokenSymbol === MintTokenSymbol.XTC) {\r\n      dispatch(modalsSliceActions.setMintXTCModalData({ steps:steps }));\r\n      dispatch(modalsSliceActions.openMintXTCProgressModal());\r\n    }\r\n  };\r\n\r\n  return { batch: batchLoad, openBatchModal: openBatchModal };\r\n};\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { MintTokenSymbol, useWalletStore } from '@/store';\r\n\r\nimport { getMintWICPTransaction, getMintXTCTransaction, useBatch } from '..';\r\nimport { getTransactionName, removeBlockHeightFromStorage } from '.';\r\n\r\nexport type UseMintMultipleBatchOptions = {\r\n  blockHeights: {\r\n    [MintTokenSymbol.XTC]?: string[];\r\n    [MintTokenSymbol.WICP]?: string[];\r\n  };\r\n};\r\n\r\nexport const useMintMultipleBatch = ({\r\n  blockHeights,\r\n}: UseMintMultipleBatchOptions) => {\r\n  const { principalId } = useWalletStore();\r\n  const [transactions, setTransactions] = useState<Record<string, any>>({});\r\n\r\n  useEffect(() => {\r\n    let transactions: Record<string, any> = {};\r\n    const updateTransactions = (\r\n      tokenSymbol: MintTokenSymbol,\r\n      blockHeight: string\r\n    ) => {\r\n      const handler =\r\n        tokenSymbol === MintTokenSymbol.XTC\r\n          ? getMintXTCTransaction\r\n          : getMintWICPTransaction;\r\n\r\n      const transactionName = getTransactionName({ tokenSymbol, blockHeight });\r\n      const transaction = handler({ blockHeight }, () =>\r\n        removeBlockHeightFromStorage({ blockHeight, tokenSymbol, principalId })\r\n      );\r\n\r\n      transactions = {\r\n        ...transactions,\r\n        [transactionName]: transaction,\r\n      };\r\n    };\r\n\r\n    blockHeights.WICP?.forEach((blockHeight: string) => {\r\n      updateTransactions(MintTokenSymbol.WICP, blockHeight);\r\n    });\r\n\r\n    blockHeights.XTC?.forEach((blockHeight: string) => {\r\n      updateTransactions(MintTokenSymbol.XTC, blockHeight);\r\n    });\r\n\r\n    setTransactions(transactions);\r\n  }, [blockHeights.WICP, blockHeights.XTC, principalId]);\r\n\r\n  const getTransactionNames = () => Object.keys(transactions);\r\n\r\n  return {\r\n    batch: useBatch<string>({ transactions }),\r\n    getTransactionNames,\r\n  };\r\n};\r\n","import { useMemo } from 'react';\r\n\r\nimport { MintTokenSymbol,  useWalletStore } from '@/store';\r\n\r\nimport { getMintWICPTransaction } from '..';\r\nimport { getMintXTCTransaction } from '../transactions/mint-xtc';\r\n\r\nexport type UseMintSingleBatchOptions = {\r\n  tokenSymbol: MintTokenSymbol;\r\n  blockHeight: string;\r\n};\r\n\r\nimport { BatchTransact } from 'artemis-web3-adapter';\r\nimport { artemis } from '@/integrations/artemis';\r\n\r\n\r\nexport const useMintSingleBatch: any = ({ tokenSymbol, blockHeight }: UseMintSingleBatchOptions) => {\r\n  const { principalId } = useWalletStore();\r\n  if (!principalId) { return false };\r\n\r\n  var batchLoad: any = { state: \"idle\" };\r\n  var MintBatchTx = { batch: batchLoad };\r\n\r\n  const batchTx = useMemo(() => {\r\n    var trx:any;\r\n    if (tokenSymbol === MintTokenSymbol.WICP) {\r\n      trx = getMintWICPTransaction({ blockHeight:  blockHeight })\r\n    } else if (tokenSymbol === MintTokenSymbol.XTC) {\r\n      trx = getMintXTCTransaction({ blockHeight: blockHeight })\r\n    }\r\n    return new BatchTransact({ mint : trx}, artemis);\r\n  }, []);\r\n  if(batchTx){\r\n    batchLoad.batchExecute = batchTx;\r\n  }\r\n  return MintBatchTx;\r\n};\r\n","import { useMemo } from 'react';\r\n\r\nimport {\r\n  modalsSliceActions, RemoveLiquidityModalDataStep, useAppDispatch, useSwapCanisterStore,\r\n} from '@/store';\r\n\r\nimport { RemoveLiquidity } from '../..';\r\nimport { useRemoveLiquidityTransactionMemo, useWithdrawTransactionMemo } from '..';\r\n\r\nexport interface UseRemoveLiquidityBatchOptions extends RemoveLiquidity {\r\n  keepInSonic: boolean;\r\n}\r\n\r\n\r\nimport { BatchTransact } from 'artemis-web3-adapter';\r\nimport { artemis } from '@/integrations/artemis';\r\n\r\nexport const useRemoveLiquidityBatch = ({ keepInSonic, ...removeLiquidityParams }: UseRemoveLiquidityBatchOptions) => {\r\n  const dispatch = useAppDispatch();\r\n  const { sonicBalances } = useSwapCanisterStore();\r\n\r\n  var batchLoad: any = { state: \"idle\" };\r\n\r\n  if (!sonicBalances) {\r\n    return { batch: batchLoad, openBatchModal: () => { } };\r\n  }\r\n\r\n  if (!removeLiquidityParams.token0.metadata || !removeLiquidityParams.token1.metadata) {\r\n    return { batch: batchLoad, openBatchModal: () => { } };\r\n  }\r\n  var RemoveLiquidityBatch = { batch: batchLoad, openBatchModal: () => { } };\r\n\r\n  const withdraw0Params = {\r\n    token: removeLiquidityParams.token0.metadata,\r\n    amount: removeLiquidityParams.amount0Min.toString(),\r\n  };\r\n\r\n  const withdraw1Params = {\r\n    token: removeLiquidityParams.token1.metadata,\r\n    amount: removeLiquidityParams.amount1Min.toString(),\r\n  };\r\n\r\n  const removeLiquidity = useRemoveLiquidityTransactionMemo(removeLiquidityParams);\r\n  const withdraw0 = useWithdrawTransactionMemo(withdraw0Params);\r\n  const withdraw1 = useWithdrawTransactionMemo(withdraw1Params);\r\n\r\n  const LiquidityBatchTx = useMemo(() => {\r\n    let _transactions: any = { removeLiquidity };\r\n    if (!keepInSonic) {\r\n      _transactions = { ..._transactions, withdraw0, withdraw1 };\r\n    }\r\n    return new BatchTransact(_transactions, artemis);\r\n    // return _transactions;\r\n  }, [...Object.values(removeLiquidityParams), keepInSonic]);\r\n\r\n\r\n\r\n  const handleRetry = async () => {\r\n    return new Promise<boolean>((resolve) => {\r\n      dispatch(\r\n        modalsSliceActions.setRemoveLiquidityModalData({\r\n          callbacks: [\r\n            // Retry callback\r\n            () => {\r\n              dispatch(modalsSliceActions.closeRemoveLiquidityFailModal());\r\n              openBatchModal();\r\n              resolve(true);\r\n            },\r\n            // Not retry callback\r\n            () => {\r\n              dispatch(modalsSliceActions.closeRemoveLiquidityFailModal());\r\n              resolve(false);\r\n            },\r\n          ],\r\n        })\r\n      );\r\n      dispatch(modalsSliceActions.closeRemoveLiquidityProgressModal());\r\n      dispatch(modalsSliceActions.openRemoveLiquidityFailModal());\r\n    });\r\n  };\r\n\r\n  const openBatchModal = () => {\r\n    dispatch(\r\n      modalsSliceActions.setRemoveLiquidityModalData({\r\n        steps: LiquidityBatchTx.stepsList as RemoveLiquidityModalDataStep[],\r\n        token0Symbol: removeLiquidityParams.token0.metadata?.symbol,\r\n        token1Symbol: removeLiquidityParams.token1.metadata?.symbol,\r\n      })\r\n    );\r\n    dispatch(modalsSliceActions.openRemoveLiquidityProgressModal());\r\n  };\r\n \r\n  if (LiquidityBatchTx) {\r\n    batchLoad.batchExecute = LiquidityBatchTx;\r\n    batchLoad.handleRetry = handleRetry;\r\n    batchLoad.batchFnUpdate = false;\r\n  }\r\n  return RemoveLiquidityBatch = { ...RemoveLiquidityBatch, batch: batchLoad, openBatchModal };\r\n};\r\n","import { useMemo } from 'react';\r\n\r\nimport { modalsSliceActions, SwapModalDataStep, useAppDispatch, useSwapCanisterStore } from '@/store';\r\nimport { SwapModel } from '../..';\r\n\r\nimport {\r\n  useApproveTransactionMemo, useDepositTransactionMemo,\r\n  useSwapExactTokensTransactionMemo, useWithdrawTransactionMemo,\r\n  intitICRCTokenDeposit, useICRCTransferMemo, // useICRCDepositMemo , \r\n} from '..';\r\n\r\nimport { getAmountDependsOnBalance } from './batch.utils';\r\n\r\nimport { BatchTransact } from 'artemis-web3-adapter';\r\nimport { artemis } from '@/integrations/artemis';\r\n\r\nexport interface ExtraDepositSwapBatchOptions { keepInSonic: boolean}\r\n\r\nexport const useSwapBatch = ({ keepInSonic, ...swapParams }: SwapModel & ExtraDepositSwapBatchOptions) => {\r\n  const dispatch = useAppDispatch();\r\n \r\n  const { sonicBalances } = useSwapCanisterStore();\r\n \r\n  if (!sonicBalances) throw new Error('Sonic balance is required');\r\n  if (!swapParams.from.metadata || !swapParams.to.metadata) throw new Error('Tokens are required');\r\n\r\n  const depositParams = {\r\n    token: swapParams.from.metadata,\r\n    amount: getAmountDependsOnBalance(sonicBalances[swapParams.from.metadata.id],\r\n      swapParams.from.metadata.decimals,\r\n      swapParams.from.value\r\n    ),\r\n    allowance: swapParams.allowance,\r\n    entryVal: '0'\r\n  };\r\n  const withdrawParams = { token: swapParams.to.metadata, amount: swapParams.to.value };\r\n  var tokenType = depositParams.token?.tokenType;\r\n\r\n\r\n  var batchLoad: any = { state: \"idle\" };\r\n  var SwapBatch = { batch: batchLoad, openBatchModal: () => { } };\r\n  var trxList: any = {};\r\n\r\n  \r\n    if (tokenType == 'DIP20' || tokenType == 'YC') {\r\n      const approve = useApproveTransactionMemo(depositParams);\r\n      const deposit = useDepositTransactionMemo(depositParams);\r\n      if(parseFloat(depositParams.amount)>0)\r\n        trxList = { approve: approve, deposit: deposit };\r\n    } else if (tokenType == 'ICRC1') {\r\n      var getAcnt = intitICRCTokenDeposit();\r\n      var approveTx = useICRCTransferMemo({ ...depositParams });\r\n      var depositTx = useDepositTransactionMemo(depositParams);\r\n      if(parseFloat(depositParams.amount)>0)\r\n        trxList = { getacnt: getAcnt, approve: approveTx, deposit: depositTx }\r\n    }\r\n\r\n\r\n  swapParams.entryVal = depositParams.amount;\r\n  const swap = useSwapExactTokensTransactionMemo(swapParams);\r\n\r\n  trxList = { ...trxList, swap: swap, }\r\n\r\n  if (!keepInSonic) { \r\n    trxList = { ...trxList, withdraw: useWithdrawTransactionMemo(withdrawParams) } \r\n  }\r\n\r\n  const openBatchModal = () => {\r\n    dispatch(\r\n      modalsSliceActions.setSwapModalData({\r\n        steps: Object.keys(trxList) as SwapModalDataStep[],\r\n        fromTokenSymbol: swapParams.from.metadata?.symbol,\r\n        toTokenSymbol: swapParams.to.metadata?.symbol,\r\n      })\r\n    );\r\n    dispatch(modalsSliceActions.openSwapProgressModal());\r\n  };\r\n\r\n  const SwapBatchTrx = useMemo(() => {\r\n    return new BatchTransact(trxList, artemis);\r\n  }, []);\r\n\r\n   if (SwapBatchTrx) {\r\n      batchLoad.batchExecute = SwapBatchTrx;\r\n      batchLoad.batchFnUpdate = true;\r\n    }\r\n\r\n  SwapBatch = { batch: batchLoad, openBatchModal };\r\n\r\n  return SwapBatch;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // if (tokenType == 'DIP20' || tokenType == 'YC') {\r\n\r\n  //   const approve = useApproveTransactionMemo(depositParams);\r\n  //   const deposit = useDepositTransactionMemo(depositParams);\r\n  //   swapParams.entryVal = depositParams.amount;\r\n  //   const swap = useSwapExactTokensTransactionMemo(swapParams);\r\n  //   withdrawParams.amount = swap.amountOutMin?.toString();\r\n  //   const withdraw = useWithdrawTransactionMemo(withdrawParams);\r\n\r\n  //   const SwapBatchTrx = useMemo(() => {\r\n  //     var _transactions: any = { approve: approve, deposit: deposit, swap: swap };\r\n  //     if (!keepInSonic) { _transactions = { ..._transactions, withdraw: withdraw } };\r\n  //     return new BatchTransact(_transactions, artemis);\r\n  //   }, [withdraw]);\r\n\r\n  //   const openBatchModal = () => {\r\n  //     dispatch(\r\n  //       modalsSliceActions.setSwapModalData({\r\n  //         steps: SwapBatchTrx.stepsList as SwapModalDataStep[],\r\n  //         fromTokenSymbol: swapParams.from.metadata?.symbol,\r\n  //         toTokenSymbol: swapParams.to.metadata?.symbol,\r\n  //       })\r\n  //     );\r\n  //     dispatch(modalsSliceActions.openSwapProgressModal());\r\n  //   };\r\n\r\n  //   if (SwapBatchTrx) {\r\n  //     batchLoad.batchExecute = SwapBatchTrx;\r\n  //     batchLoad.batchFnUpdate = true;\r\n  //   }\r\n  //   SwapBatch = { batch: batchLoad, openBatchModal };\r\n  //   return SwapBatch;\r\n  // } else if (tokenType == 'ICRC1') {\r\n  //   var steps = ['swap']; \r\n  //   if (!keepInSonic) steps = [ 'swap' , 'withdraw']\r\n  //   var reqAmt = parseFloat(depositParams.amount);\r\n  //   if (reqAmt > 0) { steps = ['getacnt', 'approve', 'deposit', ...steps]; }\r\n\r\n  //   const openBatchModal = () => {\r\n  //     dispatch(\r\n  //       modalsSliceActions.setSwapModalData({\r\n  //         steps: steps as SwapModalDataStep[],\r\n  //         fromTokenSymbol: swapParams.from.metadata?.symbol,\r\n  //         toTokenSymbol: swapParams.to.metadata?.symbol,\r\n  //       })\r\n  //     );\r\n  //     dispatch(modalsSliceActions.openSwapProgressModal());\r\n  //   };\r\n\r\n  //   SwapBatch = { ...SwapBatch, openBatchModal };\r\n  //   const getAcnt = intitICRCTokenDeposit();\r\n  //   const approveTx = useICRCTransferMemo({ ...depositParams, tokenAcnt: getAcnt });\r\n  //   const depositTx = useDepositTransactionMemo(depositParams);\r\n\r\n  //   const swap = useSwapExactTokensTransactionMemo(swapParams);\r\n  //   const withdraw = useWithdrawTransactionMemo(withdrawParams);\r\n\r\n  //   const SwapBatchTrx = useMemo(() => {\r\n  //     if(!getAcnt) return false;\r\n  //     let _transactions: any = { approve: approveTx, deposit: depositTx, swap: swap };\r\n  //     if (!keepInSonic) { _transactions = { ..._transactions, withdraw: withdraw } };\r\n  //     return new BatchTransact(_transactions, artemis);\r\n  //   }, [getAcnt]);\r\n  //   if(!getAcnt)  batchLoad.state = 'getacnt';\r\n  //   if (SwapBatchTrx) {\r\n  //     batchLoad.batchExecute = SwapBatchTrx;\r\n  //     batchLoad.batchFnUpdate = true;\r\n  //   }\r\n  //   SwapBatch = { batch: batchLoad, openBatchModal };\r\n  //   return SwapBatch;\r\n  // } else return SwapBatch;\r\n\r\n};","import { useMemo } from 'react';\r\n\r\nimport { TransferModalDataStep, modalsSliceActions, useAppDispatch } from '@/store';\r\n\r\nimport { Transfer } from '../..';\r\nimport { useTransferTransactionMemo } from '..';\r\n\r\n\r\nimport { BatchTransact } from 'artemis-web3-adapter';\r\nimport { artemis } from '@/integrations/artemis';\r\n\r\nexport const useTransferBatch = (transfer: Transfer): any => {\r\n  const dispatch = useAppDispatch();\r\n  var batchLoad: any = { state: \"idle\", batchExecute: {} };\r\n  var TransferBatch = { batch: batchLoad, openBatchModal: () => { }, transactions: {} };\r\n\r\n  var openBatchModal = () => {\r\n    dispatch(modalsSliceActions.setTransferModalData(\r\n      { steps: ['transfer'] as TransferModalDataStep[], tokenSymbol: transfer.token?.symbol })\r\n    );\r\n    dispatch(modalsSliceActions.openTransferProgressModal());\r\n  };\r\n\r\n  const transferTrx = useTransferTransactionMemo(transfer); //useTransferTransactionMemo(transfer);\r\n\r\n  const TransferBatchTx = useMemo(() => {\r\n    return new BatchTransact({ transfer: transferTrx }, artemis);\r\n  }, [transferTrx]);\r\n\r\n  if (TransferBatchTx) { \r\n    batchLoad.batchExecute = TransferBatchTx; \r\n    TransferBatch = { ...TransferBatch, batch: batchLoad, openBatchModal };\r\n    return TransferBatch;\r\n  }\r\n  else  return TransferBatch;\r\n};","import { modalsSliceActions, useAppDispatch, WithdrawModalDataStep } from '@/store';\r\nimport { useMemo } from 'react';\r\nimport { Withdraw } from '../..';\r\nimport { useWithdrawTransactionMemo } from '..';\r\n\r\nimport { BatchTransact } from 'artemis-web3-adapter';\r\nimport { artemis } from '@/integrations/artemis';\r\n\r\nexport const useWithdrawBatch = (withdraw: Withdraw) => {\r\n  const dispatch = useAppDispatch();\r\n  var batchLoad: any = { state: \"idle\" };\r\n\r\n  const openBatchModal = () => {\r\n    dispatch(\r\n      modalsSliceActions.setWithdrawModalData({ steps: ['withdraw'] as WithdrawModalDataStep[], tokenSymbol: withdraw.token?.symbol,})\r\n    );\r\n    dispatch(modalsSliceActions.openWithdrawProgressModal());\r\n  };\r\n  const withdrawMemo = useWithdrawTransactionMemo(withdraw);\r\n  \r\n  const  WithdrawBatchTx = useMemo(() => {\r\n    return new BatchTransact({ withdraw: withdrawMemo }, artemis);\r\n  }, [withdrawMemo]);\r\n\r\n  if (WithdrawBatchTx) { batchLoad.batchExecute = WithdrawBatchTx;}\r\n\r\n  return {batch: batchLoad, openBatchModal };\r\n};\r\n","import { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport {\r\n  modalsSliceActions, useAppDispatch, useSwapCanisterStore, useSwapViewStore, WithdrawWICPModalDataStep,\r\n} from '@/store';\r\n\r\nimport {\r\n  useWithdrawTransactionMemo, useWithdrawWICPTransactionMemo,\r\n} from '../transactions';\r\n\r\nimport { getAmountDependsOnBalance } from '.';\r\n\r\n\r\nimport { BatchTransact } from 'artemis-web3-adapter';\r\nimport { artemis } from '@/integrations/artemis';\r\n\r\ntype UseWithdrawWICPBatchOptions = {\r\n  amount: string;\r\n  toAccountId?: string;\r\n};\r\n\r\nexport const useWithdrawWICPBatch = ({ amount, toAccountId, }: UseWithdrawWICPBatchOptions) => {\r\n  const { tokenList } = useSwapViewStore();\r\n  const { tokenBalances } = useSwapCanisterStore();\r\n  const dispatch = useAppDispatch();\r\n\r\n  if (!tokenBalances) throw new Error('Sonic balance is required');\r\n  if (!tokenList) throw new Error('Token list is required');\r\n\r\n  var batchLoad: any = { state: \"idle\" };\r\n\r\n  const withdraw = useWithdrawTransactionMemo({\r\n    token: tokenList[ENV.canistersPrincipalIDs.WICP],\r\n    amount: getAmountDependsOnBalance(\r\n      tokenBalances[ENV.canistersPrincipalIDs.WICP], ICP_METADATA.decimals,amount\r\n    ),\r\n  });\r\n  const withdrawWICP = useWithdrawWICPTransactionMemo({ toAccountId, amount });\r\n\r\n  const WithdrawBatch = useMemo(() => {\r\n    let _transactions = {};\r\n    if (Number(withdraw.args[1]) > 0) { _transactions = { withdraw };}\r\n    _transactions = { ..._transactions, withdrawWICP };\r\n    return new BatchTransact(_transactions, artemis);\r\n  }, [withdrawWICP, withdraw]);\r\n\r\n  const openBatchModal = () => {\r\n    dispatch(\r\n      modalsSliceActions.setWithdrawWICPModalData({\r\n        steps: Object.keys(WithdrawBatch.stepsList) as WithdrawWICPModalDataStep[],\r\n      })\r\n    );\r\n    dispatch(modalsSliceActions.openWithdrawWICPProgressModal());\r\n  };\r\n\r\n  if (WithdrawBatch) { batchLoad.batchExecute = WithdrawBatch;}\r\n  return {batch: batchLoad, openBatchModal };\r\n};\r\n","export * from './transactions';\r\nexport * from './batch';\r\nexport * from './use-batch';\r\n","import { Principal } from '@dfinity/principal';\r\nimport { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { TokenIDL } from '@/did';\r\nimport { parseAmount } from '@/utils/format';\r\n\r\nimport { CreateTransaction, Deposit } from '../../models';\r\n\r\nexport const useApproveTransactionMemo: CreateTransaction<Deposit> = (\r\n  { amount, token, allowance = 0 }, onSuccess, onFail\r\n) =>\r\n  useMemo(() => {\r\n    if (!token?.id ) { return; }\r\n    if(amount) if(parseFloat(amount) <= 0) return;\r\n    \r\n    const tokenType = token.tokenType;\r\n    const parsedAmount = amount ? parseAmount(amount, token.decimals) : BigInt(0);\r\n    const toApproveAmount = parsedAmount + token.fee > BigInt(allowance) ? parsedAmount : 0;\r\n\r\n    if (tokenType == 'DIP20') {\r\n      return {\r\n        canisterId: token.id, idl: TokenIDL.DIP20.factory, methodName: 'approve',\r\n        onSuccess: async (res: TokenIDL.DIP20.Result) => {\r\n          if ('Err' in res) throw new Error(JSON.stringify(res.Err));\r\n          if (onSuccess) onSuccess(res);\r\n        },\r\n        onFail,\r\n        args: [Principal.fromText(ENV.canistersPrincipalIDs.swap), toApproveAmount],\r\n      };\r\n    }\r\n    else if (tokenType == 'YC') {\r\n      return {\r\n        canisterId: token.id, idl: TokenIDL.DIP20.YCfactory, methodName: 'approve',\r\n        onSuccess: async (res: TokenIDL.DIP20.YCResult) => {\r\n          if ('Err' in res) throw new Error(JSON.stringify(res.Err));\r\n          if (onSuccess) onSuccess(res);\r\n        },\r\n        onFail,\r\n        args: [Principal.fromText(ENV.canistersPrincipalIDs.swap), toApproveAmount],\r\n      };\r\n    }\r\n    else return false;\r\n  }, [amount, token, allowance]);\r\n","import { Principal } from '@dfinity/principal';\r\nimport { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { SwapIDL } from '@/did';\r\nimport { AppLog } from '@/utils';\r\n\r\nimport { CreatePair, CreateTransaction } from '../../models';\r\n\r\nexport type CreatePairTransaction = {\r\n  idl: any;\r\n  canisterId: string;\r\n  methodName: string;\r\n  args: (responses?: any[]) => any[] | any[];\r\n  onSuccess: (res: any) => Promise<any>;\r\n  onFail: (err: any, responses?: any[]) => Promise<void>;\r\n};\r\n\r\nexport const useCreatePairTransactionMemo: CreateTransaction<CreatePair> = (\r\n   { token0, token1 }: CreatePair,onSuccess,onFail) =>useMemo(() => {\r\n    if (!token0.metadata || !token1.metadata) {\r\n      return {};\r\n    }\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.swap,\r\n      idl: SwapIDL.factory,\r\n      methodName: 'createPair',\r\n      onFail: async (res: SwapIDL.Result) => {\r\n        AppLog.error('Create pair transaction failed', res);\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onFail) onFail(res);\r\n      },\r\n      onSuccess: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onSuccess) onSuccess(res);\r\n      },\r\n      args: [\r\n        Principal.fromText(token0.metadata.id),\r\n        Principal.fromText(token1.metadata.id),\r\n      ],\r\n    };\r\n  }, []);\r\n","import { Principal } from '@dfinity/principal';\r\nimport { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { SwapIDL } from '@/did';\r\nimport { parseAmount } from '@/utils/format';\r\n\r\nimport { CreateTransaction, Deposit } from '../../models';\r\n\r\nexport const useDepositTransactionMemo: CreateTransaction<Deposit> = ({ amount, token }, onSuccess, onFail) =>\r\n  useMemo(() => {\r\n    if (!token?.id || !amount) { return {} }\r\n    if(amount) if(parseFloat(amount) <= 0) return;\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.swap,\r\n      idl: SwapIDL.factory,\r\n      methodName: 'deposit',\r\n      onSuccess: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onSuccess) onSuccess(res);\r\n      },\r\n      onFail,\r\n      args: [ Principal.fromText(token?.id),parseAmount(amount, token?.decimals)],\r\n    };\r\n  }, [amount, token]);\r\n","import { fromHexString, getTokenActor, getswapActor } from '@/utils';\r\n\r\nimport { useState, useMemo, useEffect } from \"react\";\r\n\r\nimport { parseAmount } from '@/utils/format';\r\nimport { Principal } from '@dfinity/principal';\r\nimport { ENV } from '@/config';\r\n\r\nimport { CreateTransaction, Deposit } from '../../models';\r\n\r\nimport { TokenIDL, SwapIDL } from '@/did';\r\n\r\nexport const intitICRCTokenDepositIn = (deposit?:any): any => {\r\n    const [tokenAcnt, setData] = useState<undefined | boolean>();\r\n    useMemo(() => {\r\n        getswapActor(false).then(actor => {\r\n            actor.initiateICRC1Transfer().then((data:any) => {\r\n                setData(data);\r\n            }).catch(e=>{ setData(false)});\r\n        });\r\n    }, [deposit]);\r\n    return tokenAcnt;\r\n};\r\n\r\nexport const intitICRCTokenDeposit: any = () => useMemo(() => {\r\n    return {\r\n        canisterId: ENV.canistersPrincipalIDs.swap,\r\n        idl: SwapIDL.factory,\r\n        methodName: 'initiateICRC1Transfer',\r\n        updateNextStep: (trxResult: any, nextTrxItem: any, ) => {\r\n            nextTrxItem.args[0].to.subaccount = [trxResult]\r\n        },\r\n        onSuccess: () => { },\r\n        onFail: () => { },\r\n        args: []\r\n    }\r\n}, [])\r\n\r\n\r\nexport const useICRCTransferMemo: CreateTransaction<Deposit> = (\r\n    { amount, token, allowance = 0, tokenAcnt=[] }, onSuccess, onFail) => useMemo(() => {\r\n        if (!token?.id) { return; }\r\n        var canId = token?.id ? token.id : '';\r\n        var parsedAmount = amount ? parseAmount(amount, token?.decimals ? token?.decimals : 0) : BigInt(0);\r\n        parsedAmount += token?.fee ? token?.fee : BigInt(0);\r\n        var subacc: any = tokenAcnt.length?tokenAcnt: [];\r\n        return {\r\n            canisterId: canId,\r\n            idl: TokenIDL.ICRC1.factory,\r\n            methodName: 'icrc1_transfer',\r\n            onSuccess: async (res: TokenIDL.ICRC1.Result) => {\r\n                if ('Err' in res) throw new Error(JSON.stringify(res.Err));\r\n                if (onSuccess) onSuccess(res);\r\n            },\r\n            onFail,\r\n            args: [{\r\n                to: { owner: Principal.fromText(ENV.canistersPrincipalIDs.swap), subaccount: [subacc] },\r\n                fee: [], memo: [], amount: parsedAmount, from_subaccount: [], created_at_time: []\r\n            }],\r\n        };\r\n    }, [token, tokenAcnt]);\r\n\r\nexport const useICRCDepositMemo: CreateTransaction<Deposit> = ({ amount, token, allowance = 0, tokenAcnt = '' }, onSuccess, onFail) => {\r\n    const [tokenTrx, settokenTrxData] = useState({});\r\n    useEffect((): any => {\r\n        var canId = token?.id ? token.id : '';\r\n        if (!tokenAcnt) return false;\r\n        getTokenActor(canId, false).then(actor => {\r\n            var parsedAmount = amount ? parseAmount(amount, token?.decimals ? token?.decimals : 0) : BigInt(0);\r\n            parsedAmount += token?.fee ? token?.fee : BigInt(0);\r\n            var subacc: number[] = fromHexString(tokenAcnt);\r\n            actor.icrc1_transfer({\r\n                to: { owner: Principal.fromText(ENV.canistersPrincipalIDs.swap), subaccount: [subacc] },\r\n                fee: [], memo: [], amount: parsedAmount, from_subaccount: [], created_at_time: []\r\n            }).then((data: any) => {\r\n                settokenTrxData({ resp: data });\r\n            }).catch(((err: any) => { return false; }))\r\n        });\r\n    }, [tokenAcnt]);\r\n    return tokenTrx;\r\n}\r\n","export * from './approve';\r\nexport * from './create-pair';\r\nexport * from './deposit';\r\nexport * from './ledger-transfer';\r\nexport * from './liquidity';\r\nexport * from './mint-wicp';\r\nexport * from './mint-xtc';\r\nexport * from './swap';\r\nexport * from './withdraw-wicp';\r\nexport * from './withdraw';\r\nexport * from './icrcTransfer'\r\nexport * from './transfer'\r\n","import { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport { LedgerIDL } from '@/did';\r\nimport { parseAmount } from '@/utils/format';\r\n\r\nimport { CreateTransaction, LedgerTransfer } from '../../models';\r\n\r\nexport const useLedgerTransferTransactionMemo: CreateTransaction<LedgerTransfer> = (\r\n  { toAccountId, fee = ICP_METADATA.fee, amount, memo = BigInt(0) }, onSuccess, onFail) =>\r\n  useMemo(() => {\r\n    if (!toAccountId || !amount) { return {}; }\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.ledger,\r\n      idl: LedgerIDL.factory,\r\n      methodName: 'send_dfx',\r\n      onSuccess: async (blockHeight: number[]) => {\r\n        if (onSuccess) onSuccess(blockHeight);\r\n        return blockHeight;\r\n      },\r\n      onFail,\r\n      updateNextStep: (trxResult: any, nextTrxItem: any) => {\r\n        if (nextTrxItem) { nextTrxItem.args[1] = trxResult; }\r\n      },\r\n      args: [\r\n        {\r\n          to: toAccountId, fee: { e8s: fee }, amount: { e8s: parseAmount(amount, ICP_METADATA.decimals) },\r\n          memo, from_subaccount: [], created_at_time: [],\r\n        },\r\n      ],\r\n    };\r\n  }, [amount, fee, memo, onFail, onSuccess, toAccountId]);\r\n","import { Principal } from '@dfinity/principal';\r\n\r\nimport { Swap } from '@sonicdex/sonic-js';\r\nimport { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { SwapIDL } from '@/did';\r\nimport { AppLog } from '@/utils';\r\nimport { parseAmount } from '@/utils/format';\r\n\r\nimport { useBalances } from '@/hooks';\r\n\r\nimport { AddLiquidity, CreateTransaction, RemoveLiquidity } from '../../models';\r\n\r\nexport type LiquidityTransaction = {\r\n  idl: any;\r\n  canisterId: string;\r\n  methodName: string;\r\n  args: (responses?: any[]) => any[] | any[];\r\n  onSuccess: (res: any) => Promise<any>;\r\n  onFail: (err: any, responses?: any[]) => Promise<void>;\r\n};\r\n\r\nexport interface LiquidityExtraArgs {\r\n  principal: Principal;\r\n}\r\n\r\ntype useTokenTaxCheckOptions = {\r\n  balances?: any;\r\n  tokenId?: string;\r\n  tokenDecimals?: number;\r\n  tokenValue?: string;\r\n  tokenSymbol?: string;\r\n};\r\n\r\nconst useTokenTaxCheck = ({ balances, tokenId, tokenSymbol, tokenDecimals = 1, tokenValue = '', }: useTokenTaxCheckOptions) => {\r\n  const { sonicBalances, tokenBalances, icpBalance } = balances;\r\n  const tokenInfo = { wallet: 0, sonic: 0, taxInfo: { input: 0, taxedValue: 0, nonTaxedValue: 0, netValue: 0 } }\r\n  if (tokenId != '' && tokenId != 'ICP' && sonicBalances && tokenBalances) {\r\n    var id = tokenId ? tokenId : '';\r\n    tokenInfo['wallet'] = tokenBalances[id] ? tokenBalances[id] : 0;\r\n    tokenInfo['sonic'] = sonicBalances[id] ? sonicBalances[id] : 0;\r\n  } else { tokenInfo['wallet'] = icpBalance ? icpBalance : 0; }\r\n  if (tokenValue) {\r\n\r\n    let tokenVal: number = parseFloat(tokenValue)\r\n    if (tokenSymbol == 'YC') {\r\n      let decimals = tokenDecimals ? (10 ** tokenDecimals) : 1\r\n      let sonicBalance = tokenInfo['sonic'] / decimals;\r\n     \r\n      if ((sonicBalance > tokenVal)) {\r\n        tokenInfo.taxInfo.nonTaxedValue = tokenVal;\r\n        tokenInfo.taxInfo.taxedValue = 0;\r\n      } else {\r\n        tokenInfo.taxInfo.nonTaxedValue = sonicBalance;\r\n        tokenInfo.taxInfo.taxedValue = tokenVal - tokenInfo.taxInfo.nonTaxedValue;\r\n      }\r\n      tokenInfo.taxInfo.netValue = tokenInfo.taxInfo.nonTaxedValue + (tokenInfo.taxInfo.taxedValue * (89 / 100));\r\n    }\r\n  }\r\n  return tokenInfo\r\n};\r\n\r\nexport const useAddLiquidityTransactionMemo: CreateTransaction<AddLiquidity> = (\r\n  { token0, token1, slippage }: AddLiquidity, onSuccess, onFail) => {\r\n  var token0Value = token0.value, token1Value = token1.value;\r\n  var balances = useBalances();\r\n  return useMemo(() => {\r\n    if (!token0.metadata || !token1.metadata) throw new Error('Tokens are required');\r\n\r\n    if (token0.metadata?.symbol == 'YC') {\r\n      let info = useTokenTaxCheck({\r\n        balances: balances, tokenId: token0.metadata ? token0.metadata.id : '',\r\n        tokenSymbol: token0.metadata ? token0.metadata.symbol : '',\r\n        tokenDecimals: token0.metadata ? token0.metadata.decimals : 1,\r\n        tokenValue: token0.value ? token0.value : ''\r\n      });\r\n\r\n      token0Value = info.taxInfo.netValue.toString();\r\n      var _temp = token0Value.split(\".\");\r\n\r\n      token0Value = _temp[0] + '.' + (_temp[1] ? _temp[1].substring(0, 3):'0');\r\n    }\r\n\r\n    if (token1.metadata?.symbol == 'YC') {\r\n      let info = useTokenTaxCheck({\r\n        balances: balances, tokenId: token1.metadata ? token1.metadata.id : '',\r\n        tokenSymbol: token1.metadata ? token1.metadata.symbol : '',\r\n        tokenDecimals: token1.metadata ? token1.metadata.decimals : 1,\r\n        tokenValue: token1.value ? token1.value : ''\r\n      });\r\n\r\n      token1Value = info.taxInfo.netValue.toString();\r\n      var _temp = token1Value.split(\".\");\r\n      token1Value = _temp[0] + '.' + ( _temp[1]? _temp[1].substring(0, 3):'0');\r\n    }\r\n\r\n    const amount0Desired = parseAmount(token0Value, token0.metadata.decimals);\r\n    const amount1Desired = parseAmount(token1Value, token1.metadata.decimals);\r\n\r\n    const amount0Min = parseAmount(\r\n      Swap.getAmountMin({ amount: token0Value, slippage, decimals: token0.metadata.decimals }).toString(),\r\n      token0.metadata.decimals\r\n    );\r\n    const amount1Min = parseAmount(\r\n      Swap.getAmountMin({ amount: token1Value, slippage, decimals: token1.metadata.decimals }).toString(),\r\n      token1.metadata.decimals\r\n    );\r\n\r\n    const currentTime = (new Date().getTime() + 5 * 60 * 1000) * 10000000;\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.swap,\r\n      idl: SwapIDL.factory,\r\n      methodName: 'addLiquidity',\r\n      onFail: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onFail) onFail(res);\r\n      },\r\n      onSuccess: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onSuccess) onSuccess(res);\r\n      },\r\n      args: [\r\n        Principal.fromText(token0.metadata?.id), Principal.fromText(token1.metadata?.id),\r\n        amount0Desired, amount1Desired, amount0Min, amount1Min, BigInt(currentTime),\r\n      ],\r\n    };\r\n  }, [token0, token1, slippage]);\r\n};\r\n\r\n\r\nexport const useRemoveLiquidityTransactionMemo: CreateTransaction<RemoveLiquidity> = (\r\n  {\r\n    token0, token1, amount0Min, amount1Min, lpAmount, principalId,\r\n  }: RemoveLiquidity, onSuccess, onFail\r\n) =>\r\n  useMemo(() => {\r\n\r\n    if (!token0 || !token1) throw new Error('Token IDs are required');\r\n    if (!principalId) throw new Error('Principal is required');\r\n\r\n    const currentTime = (new Date().getTime() + 5 * 60 * 1000) * 10000000;\r\n\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.swap,\r\n      idl: SwapIDL.factory,\r\n      methodName: 'removeLiquidity',\r\n      onFail: async (res: SwapIDL.Result) => {\r\n        AppLog.error(\r\n          `Remove liquidity transaction failed: token0=${token0.metadata.id} token1=${token1.metadata.id} principal=${principalId}`,\r\n          res\r\n        );\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onFail) onFail(res);\r\n      },\r\n      onSuccess: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onSuccess) onSuccess(res);\r\n      },\r\n      args: [\r\n        Principal.fromText(token0.metadata.id),\r\n        Principal.fromText(token1.metadata.id),\r\n        BigInt(Math.round(lpAmount)),\r\n        parseAmount(String(amount0Min), token0.metadata.decimals),\r\n        parseAmount(String(amount1Min), token1.metadata.decimals),\r\n        Principal.fromText(principalId),\r\n        BigInt(currentTime),\r\n      ],\r\n    };\r\n  }, [token0, token1]);\r\n","import { ENV } from '@/config';\r\nimport { TokenIDL } from '@/did';\r\nimport { CreateTransaction, MintWICP } from '../../models';\r\n\r\nexport const getMintWICPTransaction: CreateTransaction<MintWICP> = (options = {},onSuccess,onFail) => {\r\n  const { blockHeight, subaccount = [] } = options;\r\n  var bh:bigint=BigInt(0);\r\n  if(typeof(blockHeight) == 'string' || typeof(blockHeight) =='number'){ bh = BigInt(blockHeight)  }\r\n\r\n  return {\r\n    canisterId: ENV.canistersPrincipalIDs.WICP,\r\n    idl: TokenIDL.DIP20.factory,\r\n    methodName: 'mint',\r\n    onSuccess: async (res: TokenIDL.DIP20.Result) => {\r\n      if ('Err' in res) throw new Error(JSON.stringify(Object.keys(res.Err)));\r\n      if (onSuccess) onSuccess(res);\r\n    },\r\n    onFail,\r\n    args:[subaccount , bh]\r\n  };\r\n};\r\n","import { ENV } from '@/config';\r\nimport { XTCIDL } from '@/did';\r\n\r\nimport { CreateTransaction, MintXTC } from '../../models';\r\n\r\nexport const getMintXTCTransaction: CreateTransaction<MintXTC> = ( options = {},onSuccess,onFail) => {\r\n  const { blockHeight, subaccount = [] } = options;\r\n  var bh:bigint=BigInt(0);\r\n  if(typeof(blockHeight) == 'string' || typeof(blockHeight) =='number'){ bh = BigInt(blockHeight)  }\r\n  return {\r\n    canisterId: ENV.canistersPrincipalIDs.XTC,\r\n    idl: XTCIDL.factory,\r\n    methodName: 'mint_by_icp',\r\n    onSuccess: async (res: XTCIDL.TxReceipt) => {\r\n      if ('Err' in res) throw new Error(JSON.stringify(Object.keys(res.Err)));\r\n      if (onSuccess) onSuccess(res);\r\n    },\r\n    onFail,\r\n    args: [ subaccount, BigInt(bh)]\r\n  };\r\n};\r\n","import { Principal } from '@dfinity/principal';\r\n\r\nimport { Swap } from '@sonicdex/sonic-js';\r\nimport { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { SwapIDL } from '@/did';\r\nimport { parseAmount } from '@/utils/format';\r\nimport { useBalances } from '@/hooks';\r\nimport { getSwapCapActor } from '@/utils'\r\nimport { CreateTransaction, SwapModel } from '../../models';\r\n\r\n\r\nexport type SwapTransaction = {\r\n  idl: any;\r\n  canisterId: string;\r\n  methodName: string;\r\n  args: (responses?: any[]) => any[] | any[];\r\n  onSuccess: (res: any) => Promise<any>;\r\n  onFail: (err: any, responses?: any[]) => Promise<void>;\r\n};\r\n\r\nexport interface SwapExtraArgs {\r\n  principal: Principal;\r\n}\r\n\r\ntype useTokenTaxCheckOptions = {\r\n  balances?: any;\r\n  tokenId?: string;\r\n\r\n  tokenDecimals?: number;\r\n  tokenValue?: string;\r\n  tokenSymbol?: string;\r\n};\r\n\r\nconst useTokenTaxCheck = ({ balances, tokenId, tokenSymbol, tokenDecimals = 1, tokenValue = '', }: useTokenTaxCheckOptions) => {\r\n  const { sonicBalances, tokenBalances, icpBalance } = balances;\r\n  const tokenInfo = { wallet: 0, sonic: 0, taxInfo: { input: 0, taxedValue: 0, nonTaxedValue: 0, netValue: 0 } }\r\n  if (tokenId != '' && tokenId != 'ICP' && sonicBalances && tokenBalances) {\r\n    var id = tokenId ? tokenId : '';\r\n    tokenInfo['wallet'] = tokenBalances[id] ? tokenBalances[id] : 0;\r\n    tokenInfo['sonic'] = sonicBalances[id] ? sonicBalances[id] : 0;\r\n  } else { tokenInfo['wallet'] = icpBalance ? icpBalance : 0; }\r\n  if (tokenValue) {\r\n    let tokenVal: number = parseFloat(tokenValue)\r\n    if (tokenSymbol == 'YC') {\r\n      let decimals = tokenDecimals ? (10 ** tokenDecimals) : 1\r\n      let sonicBalance = tokenInfo['sonic'] / decimals;\r\n\r\n      if ((sonicBalance > tokenVal)) {\r\n        tokenInfo.taxInfo.nonTaxedValue = tokenVal;\r\n        tokenInfo.taxInfo.taxedValue = 0;\r\n      } else {\r\n        tokenInfo.taxInfo.nonTaxedValue = sonicBalance;\r\n        tokenInfo.taxInfo.taxedValue = tokenVal - tokenInfo.taxInfo.nonTaxedValue;\r\n      }\r\n      tokenInfo.taxInfo.netValue = tokenInfo.taxInfo.nonTaxedValue + (tokenInfo.taxInfo.taxedValue * (88.9 / 100));\r\n    }\r\n  }\r\n  return tokenInfo\r\n};\r\n\r\nexport const useSwapExactTokensTransactionMemo: CreateTransaction<SwapModel> = (\r\n  { from, to, slippage, principalId, entryVal }: SwapModel, onSuccess, onFail) => {\r\n  var fromValue = from.value;\r\n  let balances = useBalances();\r\n  return useMemo(() => {\r\n    if (!from.metadata || !to.metadata) throw new Error('Tokens are required');\r\n    if (!principalId) throw new Error('Principal is required');\r\n\r\n    if (from.metadata?.symbol == 'YC') {\r\n      let info = useTokenTaxCheck({\r\n        balances: balances, tokenId: from.metadata ? from.metadata.id : '',\r\n        tokenSymbol: from.metadata ? from.metadata.symbol : '',\r\n        tokenDecimals: from.metadata ? from.metadata.decimals : 1,\r\n        tokenValue: from.value ? from.value : ''\r\n      });\r\n      fromValue = info.taxInfo.netValue.toFixed(3);\r\n    }\r\n\r\n    const amountIn = parseAmount(fromValue, from.metadata.decimals);\r\n    var outAmountMin = Swap.getAmountMin({ amount: to.value, slippage, decimals: to.metadata.decimals }).toNumber();\r\n\r\n    if (from.metadata?.symbol == 'YC' && parseFloat(entryVal || '') > 0) {\r\n      outAmountMin = outAmountMin - (outAmountMin * 0.11);\r\n    }\r\n\r\n    const currentTime = (new Date().getTime() + 5 * 60 * 1000) * 10000000;\r\n\r\n    var amountOutMin = parseAmount(outAmountMin.toString(), to.metadata.decimals);\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.swap,\r\n      idl: SwapIDL.factory,\r\n      methodName: 'swapExactTokensForTokens',\r\n      onFail,\r\n      onSuccess: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onSuccess) onSuccess(res);\r\n      },\r\n      args: [amountIn, amountOutMin, from.paths[to.metadata.id]?.path, Principal.fromText(principalId), BigInt(currentTime)],\r\n      amountOutMin: outAmountMin,\r\n      updateNextStep: async (trxResult: any, nextTrxItem: any) => {\r\n        if (nextTrxItem) {\r\n          const actor = await getSwapCapActor(true);\r\n          const data = await actor.get_user_transactions({ user: Principal.fromText(principalId), page: [], witness: false });\r\n          if (data) {\r\n            var trxInfo: any = data.data.filter(item => (item.operation === \"swap\"));\r\n            if (trxInfo.length > 1) {\r\n              trxInfo = trxInfo[trxInfo.length - 1];\r\n            }\r\n            if (trxInfo) {\r\n              const matchingDetail = trxInfo.details.find((detail: any) => detail[0] === \"amountOut\");\r\n              if (matchingDetail.length > 0) {\r\n                nextTrxItem.args[1] = matchingDetail[1]?.U64;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n    };\r\n  }, [from.metadata, from.value, from.paths, to.metadata, to.value, principalId, slippage, onFail, onSuccess]);\r\n};\r\n\r\n\r\n\r\nexport const useSwapForExactTokensTransactionMemo: CreateTransaction<SwapModel> =\r\n ({ from, to, slippage, principalId }: SwapModel, onSuccess, onFail) => {\r\n\r\n  var fromValue = from.value;\r\n  let balances = useBalances();\r\n\r\n  return useMemo(() => {\r\n    if (!from.metadata || !to.metadata) throw new Error('Tokens are required');\r\n    if (!principalId) throw new Error('Principal is required');\r\n    if (from.metadata?.symbol == 'YC') {\r\n      let info = useTokenTaxCheck({\r\n        balances: balances, tokenId: from.metadata ? from.metadata.id : '',\r\n        tokenSymbol: from.metadata ? from.metadata.symbol : '',\r\n        tokenDecimals: from.metadata ? from.metadata.decimals : 1,\r\n        tokenValue: from.value ? from.value : ''\r\n      });\r\n      fromValue = info.taxInfo.netValue.toFixed(3);\r\n    }\r\n\r\n    const amountOut = parseAmount(to.value, to.metadata.decimals);\r\n    const amountInMin = parseAmount(\r\n      Swap.getAmountMin({\r\n        amount: fromValue,\r\n        slippage,\r\n        decimals: from.metadata.decimals,\r\n      }).toString(),\r\n      to.metadata.decimals\r\n    );\r\n    const currentTime = (new Date().getTime() + 5 * 60 * 1000) * 10000000;\r\n\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.swap,\r\n      idl: SwapIDL.factory,\r\n      methodName: 'swapTokensForExactTokens',\r\n      onFail,\r\n      onSuccess: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        onSuccess(res);\r\n      },\r\n      args: [\r\n        amountOut,\r\n        amountInMin,\r\n        [from.metadata.id, to.metadata.id],\r\n        Principal.fromText(principalId),\r\n        BigInt(currentTime),\r\n      ],\r\n    };\r\n  }, [\r\n    from.metadata,\r\n    from.value,\r\n    to.metadata,\r\n    to.value,\r\n    principalId,\r\n    slippage,\r\n    onFail,\r\n    onSuccess,\r\n  ]);\r\n};\r\n","import { useMemo } from 'react';\r\n\r\nimport { TokenIDL } from '@/did';\r\nimport { parseAmount } from '@/utils/format';\r\nimport { getAccountIdFromPrincipalId, fromHexString, getPrincipalFromText } from \"@/utils\"\r\n\r\nimport { CreateTransaction, Transfer } from '../../models';\r\n\r\nexport const useTransferTransactionMemo: CreateTransaction<Transfer> = ({ amount, token, address, addressType }, onSuccess, onFail) =>\r\n  useMemo(() => {\r\n    if (!token?.id || !address || !amount) { return; }\r\n    const tokenType = token.tokenType;\r\n    const parsedAmount = amount ? parseAmount(amount, token.decimals) : BigInt(0);\r\n    if (token?.symbol == 'ICP') {\r\n      var natAddress = addressType == 'accountId' ? fromHexString(address) : fromHexString(getAccountIdFromPrincipalId(address));\r\n      return {\r\n        canisterId: token.id,\r\n        idl: TokenIDL.ICRC1.factory,\r\n        methodName: 'transfer',\r\n        args: [{ to: natAddress, amount: { e8s: parsedAmount }, fee: { e8s: token.fee }, memo: 0, from_subaccount: [], created_at_time: [] }],\r\n        onSuccess: onSuccess,\r\n        onFail,\r\n      }\r\n    } else if (tokenType == 'DIP20') {\r\n      if (addressType != 'principalId') return false;\r\n      return {\r\n        canisterId: token.id,\r\n        idl: TokenIDL.DIP20.factory,\r\n        methodName: 'transfer',\r\n        args: [getPrincipalFromText(address), parsedAmount],\r\n        onSuccess: onSuccess,\r\n        onFail,\r\n      }\r\n    } else if (tokenType == 'YC') {\r\n      if (addressType != 'principalId') return false;\r\n      return {\r\n        canisterId: token.id,\r\n        idl: TokenIDL.DIP20.YCfactory,\r\n        methodName: 'transfer',\r\n        args: [getPrincipalFromText(address), parsedAmount],\r\n        onSuccess: onSuccess,\r\n        onFail,\r\n      }\r\n    }\r\n    else if (tokenType == 'ICRC1') {\r\n      return {\r\n        canisterId: token.id,\r\n        idl: TokenIDL.ICRC1.factory,\r\n        methodName: 'icrc1_transfer',\r\n        onSuccess: onSuccess,\r\n        onFail,\r\n        args: [{\r\n          to: { owner: getPrincipalFromText(address), subaccount: [] },\r\n          fee: [], memo: [], amount: parsedAmount, from_subaccount: [], created_at_time: []\r\n        }],\r\n      };\r\n    }\r\n    else return false;\r\n  }, [amount, token]);\r\n","import { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport { TokenIDL } from '@/did';\r\nimport { parseAmount } from '@/utils/format';\r\n\r\nimport { CreateTransaction, WithdrawWICP } from '../../models';\r\n\r\nexport const useWithdrawWICPTransactionMemo: CreateTransaction<WithdrawWICP> = (\r\n  { amount, toAccountId },\r\n  onSuccess,\r\n  onFail\r\n) =>\r\n  useMemo(() => {\r\n    if (!amount) throw new Error('Amount is required');\r\n    if (!toAccountId) throw new Error('Account ID is required');\r\n\r\n    return {\r\n      canisterId: ENV.canistersPrincipalIDs.WICP,\r\n      idl: TokenIDL.DIP20.factory,\r\n      methodName: 'withdraw',\r\n      onSuccess: async (res: TokenIDL.DIP20.Result) => {\r\n        if ('Err' in res) throw new Error(JSON.stringify(Object.keys(res.Err)));\r\n        if (onSuccess) onSuccess(res);\r\n      },\r\n      onFail,\r\n      args: [parseAmount(amount, ICP_METADATA.decimals), toAccountId],\r\n    };\r\n  }, [amount, onFail, onSuccess, toAccountId]);\r\n","import { Principal } from '@dfinity/principal';\r\nimport { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { SwapIDL } from '@/did';\r\nimport { parseAmount } from '@/utils/format';\r\n\r\nimport { CreateTransaction, Withdraw } from '../../models';\r\n\r\nexport const useWithdrawTransactionMemo: CreateTransaction<Withdraw> = ({ amount, token },onSuccess,onFail) =>\r\n  useMemo(() => {\r\n    if (!token?.id || !amount) {return {};}\r\n    return {\r\n      args: [Principal.fromText(token.id), parseAmount(amount, token.decimals)],\r\n      canisterId: ENV.canistersPrincipalIDs.swap,\r\n      idl: SwapIDL.factory,\r\n      methodName: 'withdraw',\r\n      onSuccess: async (res: SwapIDL.Result) => {\r\n        if ('err' in res) throw new Error(res.err);\r\n        if (onSuccess) onSuccess(res);\r\n      },\r\n      onFail,\r\n    };\r\n  }, [amount, token, onFail, onSuccess]);\r\n","import { useMemo, useState } from 'react';\r\n\r\nimport { Batch } from '../models';\r\n\r\nimport { BatchTransact } from 'artemis-web3-adapter';\r\nimport { artemis } from '@/integrations/artemis';\r\n\r\nexport const useBatch = <Model>({\r\n  transactions, handleRetry\r\n}: Batch.HookProps<Model>): Batch.Hook<Model> => {\r\n\r\n  const [state, setState] = useState(Batch.DefaultHookState.Idle);\r\n  const [error, setError] = useState<unknown>();\r\n\r\n  const handleError = (error: unknown): void => {\r\n    setError(error);\r\n    setState(Batch.DefaultHookState.Error);\r\n  };\r\n\r\n  const states = useMemo(\r\n    () => Object.keys(transactions) as Batch.DefaultHookState[],\r\n    [transactions]\r\n  );\r\n\r\n  const batch = useMemo(() => {\r\n    const transactionsList = Object.values(transactions);\r\n    const newBatch = new BatchTransact(artemis,transactionsList);\r\n    \r\n    Object.values(transactions).forEach((transaction, index) => {\r\n      const onSuccess = transaction.onSuccess;\r\n      transaction.onSuccess = async (res:any) => {\r\n        let txSuccessResponse;\r\n        if (onSuccess) { txSuccessResponse = await onSuccess(res); }\r\n        if (index !== transactionsList.length - 1) {\r\n          setState(states[index + 1]);\r\n        } else {\r\n          setState(Batch.DefaultHookState.Done);\r\n        }\r\n        return txSuccessResponse;\r\n      };\r\n      const onFail = transaction.onFail;\r\n      transaction.onFail = async (err:any, prevRes:any) => {\r\n        if (onFail) await onFail(err, prevRes);\r\n        handleError(err);\r\n      };\r\n      //newBatch.push(transaction);\r\n    });\r\n    return newBatch;\r\n  }, [transactions, handleRetry]);\r\n\r\n  var execute = async (): Promise<unknown> => {\r\n    if (\r\n      state !== Batch.DefaultHookState.Idle &&\r\n      state !== Batch.DefaultHookState.Error\r\n    ) {\r\n      return Promise.reject('Batch is not idle');\r\n    }\r\n    setState(states[0]);\r\n      try {\r\n        return await batch.execute();\r\n      } catch (error: any) {\r\n        // TODO: Improve rejection flow to support other providers\r\n        if (error.message === 'The transactions was rejected.') {\r\n          setState(Batch.DefaultHookState.Error);\r\n        }\r\n        throw error;\r\n      }\r\n  };  \r\n  return { execute, state, error };\r\n};\r\n","import { useCallback } from 'react';\r\n\r\nimport {\r\n  MintTokenSymbol,\r\n  popNotification,\r\n  useAppDispatch,\r\n  useWalletStore,\r\n} from '@/store';\r\nimport {\r\n  getFromStorage,\r\n  LocalStorageKey,\r\n  MintUncompleteBlockHeights,\r\n  saveToStorage,\r\n} from '@/utils';\r\nimport { AppLog } from '@/utils';\r\n\r\nexport type UseMintErrorHandlerOptions = {\r\n  notificationId: string;\r\n  errorMessage?: string;\r\n};\r\n\r\nexport const useMintErrorHandler = ({\r\n  notificationId,\r\n}: UseMintErrorHandlerOptions) => {\r\n  const { principalId } = useWalletStore();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleMintError = useCallback(\r\n    (errorMessage?: string, callback?: (errorText: string) => unknown) => {\r\n      if (!errorMessage) {\r\n        return;\r\n      }\r\n\r\n      AppLog.error('Minting Error', errorMessage);\r\n\r\n      const isBlockUsedError = errorMessage.includes('BlockUsed');\r\n      const isUnauthorizedError = errorMessage.includes('Unauthorized');\r\n      const isOtherError = errorMessage.includes('Other');\r\n      const isOperationStyleError = errorMessage.includes(\r\n        'ErrorOperationStyle'\r\n      );\r\n      const isErrorToError = errorMessage.includes('ErrorTo');\r\n      const isAmountToSmallError = errorMessage.includes('AmountToSmall');\r\n\r\n      const errorText = isUnauthorizedError\r\n        ? `Block Height entered does not match your address`\r\n        : isOtherError\r\n        ? `Wrap failed, check if the Block Height correct`\r\n        : isBlockUsedError\r\n        ? `Block Height entered is already used`\r\n        : isOperationStyleError\r\n        ? `Provided Block Height can't be used for this operation`\r\n        : isErrorToError\r\n        ? `Selected token symbol does not match the Block Height`\r\n        : isAmountToSmallError\r\n        ? `Amount to mint is too small`\r\n        : `Wrap failed, please try again later`;\r\n\r\n      if (isBlockUsedError && principalId) {\r\n        const removeLastProcessedTransaction = (\r\n          tokenSymbol: MintTokenSymbol\r\n        ) => {\r\n          const localStorageKey =\r\n            tokenSymbol === MintTokenSymbol.WICP\r\n              ? LocalStorageKey.MintWICPUncompleteBlockHeights\r\n              : LocalStorageKey.MintXTCUncompleteBlockHeights;\r\n\r\n          const prevMintBlockHeightData = getFromStorage(localStorageKey) as\r\n            | MintUncompleteBlockHeights\r\n            | undefined;\r\n\r\n          const newBlockHeightData = {\r\n            ...prevMintBlockHeightData,\r\n            [principalId]: [\r\n              ...(prevMintBlockHeightData?.[principalId]?.filter(\r\n                (_, index) => index !== 0\r\n              ) || []),\r\n            ],\r\n          };\r\n\r\n          saveToStorage(localStorageKey, newBlockHeightData);\r\n        };\r\n\r\n        removeLastProcessedTransaction(MintTokenSymbol.WICP);\r\n        removeLastProcessedTransaction(MintTokenSymbol.XTC);\r\n\r\n        dispatch(popNotification(notificationId));\r\n      }\r\n\r\n      if (callback) {\r\n        callback(errorText);\r\n      }\r\n    },\r\n    [dispatch, notificationId, principalId]\r\n  );\r\n\r\n  return handleMintError;\r\n};\r\n","\r\nexport * from './hooks';\r\nexport * from './models';\r\n","\r\nimport { CreateTransaction } from '.';\r\n\r\nexport namespace Batch {\r\n  export enum State {\r\n    Idle = 'idle',\r\n    Running = 'running',\r\n  }\r\n\r\n  export type Execute = () => Promise<unknown>;\r\n\r\n  export type Push = (transaction: any) => Controller;\r\n\r\n  export type GetTransactions = () => any[];\r\n\r\n  export type GetState = () => State;\r\n\r\n  export interface Controller {\r\n    execute: Execute;\r\n    push: Push;\r\n    getTransactions: GetTransactions;\r\n    getState: GetState;\r\n  }\r\n\r\n  export enum DefaultHookState {\r\n    Idle = 'idle',\r\n    Done = 'done',\r\n    Error = 'error',\r\n  }\r\n\r\n  export type HookState = {\r\n    [key: number]: string;\r\n  };\r\n\r\n  export interface Hook<State> {\r\n    execute: Batch.Execute;\r\n    state: State | DefaultHookState;\r\n    error: unknown;\r\n  }\r\n\r\n  export interface HookProps<Model> {\r\n    transactions: {\r\n      [key: string]: ReturnType<CreateTransaction<Model, any>>;\r\n    };\r\n    handleRetry?: (\r\n      error: unknown,\r\n      prevResponses?: any[]\r\n    ) => Promise<boolean | { nextTxArgs: unknown }>;\r\n  }\r\n}\r\n","export * from './batch';\r\nexport * from './create-transaction';\r\nexport * from './transactions';\r\n","export * from './create-pair';\r\nexport * from './deposit';\r\nexport * from './ledger-transfer';\r\nexport * from './liquidity';\r\nexport * from './mint-wicp';\r\nexport * from './mint-xtc';\r\nexport * from './swap';\r\nexport * from './withdraw-wicp';\r\nexport * from './withdraw';\r\nexport * from './transfer'\r\n","import { Link } from '@chakra-ui/react';\r\nimport { deserialize, serialize } from '@sonicdex/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\n\r\nimport { useAllPairs } from '@/hooks';\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useTokenAllowance } from '@/hooks/use-token-allowance';\r\nimport { useAddLiquidityBatch } from '@/integrations/transactions';\r\nimport {\r\n  AddLiquidityModalDataStep, modalsSliceActions, NotificationType,\r\n  useAppDispatch, useLiquidityViewStore, useNotificationStore,\r\n} from '@/store';\r\n\r\nimport { AppLog } from '@/utils';\r\n\r\nexport interface AddLiquidityNotificationContentProps { id: string; }\r\n\r\nexport const AddLiquidityNotificationContent: React.FC<AddLiquidityNotificationContentProps> = ({ id }) => {\r\n\r\n  const dispatch = useAppDispatch();\r\n  const liquidityViewStore = useLiquidityViewStore();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { getBalances, getUserPositiveLPBalances } = useBalances();\r\n  const { getAllPairs } = useAllPairs();\r\n\r\n\r\n  const { token0, token1, slippage } = useMemo(() => {\r\n    const { token0, token1, slippage, pair } = liquidityViewStore;\r\n    if (pair) {\r\n      const token0Id = pair.id.split(':')[0];\r\n      if (token0Id !== token0.metadata?.id) {\r\n        return deserialize(serialize({ token0: token1, token1: token0, slippage }));\r\n      }\r\n    }\r\n    return deserialize(serialize({ token0, token1, slippage }));\r\n  }, []) ?? {};\r\n\r\n\r\n  const allowance0 = useTokenAllowance(token0.metadata?.id);\r\n  const allowance1 = useTokenAllowance(token1.metadata?.id);\r\n\r\n  const batchData = useAddLiquidityBatch({ token0, token1, slippage: Number(slippage) });\r\n\r\n  const batch = batchData?.batch, openBatchModal = batchData?.openBatchModal;\r\n  const batchFnUpdate = batch.batchFnUpdate;\r\n  const batchExecutalbe = batch?.batchExecute;\r\n\r\n  const handleStateChange = () => {\r\n    if (!batch?.state) return;\r\n    if (batch?.state && batchExecutalbe?.state == \"running\") {\r\n      batch.state = batchExecutalbe.activeStep;\r\n    } else if (batch?.state == 'error') {\r\n      handleError();\r\n    }\r\n    if (Object.values(AddLiquidityModalDataStep).includes(batch.state as AddLiquidityModalDataStep)) {\r\n      dispatch(modalsSliceActions.setAddLiquidityModalData({ step: batch.state as AddLiquidityModalDataStep }));\r\n    }\r\n  };\r\n\r\n  const handleError = (err?: any) => {\r\n\r\n    console.log(batch);\r\n\r\n    if (err) AppLog.error('Add Liquidity Error', err);\r\n    dispatch(modalsSliceActions.clearAddLiquidityModalData());\r\n    dispatch(modalsSliceActions.clearDepositModalData());\r\n    dispatch(modalsSliceActions.closeAddLiquidityProgressModal());\r\n    addNotification({\r\n      title: `Add LP of ${token0.value} ${token0.metadata.symbol} + ${token1.value} ${token1.metadata.symbol} failed`,\r\n      type: NotificationType.Error, id: Date.now().toString()\r\n    });\r\n    popNotification(id)\r\n  }\r\n\r\n  const handleOpenModal = () => {\r\n    if (!batch?.state) return;\r\n    if (typeof allowance0 === 'number' && typeof allowance1 === 'number') {\r\n      dispatch(modalsSliceActions.closeAllowanceVerifyModal());\r\n      handleStateChange();\r\n      openBatchModal();\r\n    } else {\r\n      dispatch(\r\n        modalsSliceActions.setAllowanceVerifyModalData({\r\n          tokenSymbol: [token0.metadata?.symbol, token1.metadata?.symbol],\r\n        })\r\n      );\r\n      dispatch(modalsSliceActions.openAllowanceVerifyModal());\r\n    }\r\n  };\r\n\r\n  useEffect(handleStateChange, [batchExecutalbe?.activeStep, batch.state]);\r\n\r\n  useEffect(() => {\r\n    handleOpenModal();\r\n    if (typeof allowance0 === 'undefined' || typeof allowance1 === 'undefined') return;\r\n    if (batchExecutalbe?.execute) {\r\n      batchExecutalbe.execute().then((data: any) => {\r\n        if (data) {\r\n          dispatch(modalsSliceActions.clearAddLiquidityModalData());\r\n          dispatch(modalsSliceActions.closeAddLiquidityProgressModal());\r\n          addNotification({\r\n            title: `Added LP of ${token0.value} ${token0.metadata.symbol} + ${token1.value} ${token1.metadata.symbol}`,\r\n            type: NotificationType.Success, id: Date.now().toString(), transactionLink: '/activity',\r\n          });\r\n          getBalances(); getAllPairs(); getUserPositiveLPBalances();\r\n        } else handleError();\r\n      }).catch((err: any) => handleError(err)).finally(() => popNotification(id));\r\n    }\r\n  }, [batchFnUpdate]);\r\n\r\n\r\n  return (\r\n    <Link target=\"_blank\" rel=\"noreferrer\" color=\"dark-blue.500\" onClick={handleOpenModal}>\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport { deserialize, serialize } from '@sonicdex/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\nimport { useBalances } from '@/hooks/use-balances';\r\n\r\nimport { useTokenAllowance } from '@/hooks/use-token-allowance';\r\nimport { useDepositBatch } from '@/integrations/transactions';\r\n\r\nimport {\r\n  DepositModalDataStep, modalsSliceActions, useAppDispatch, useDepositViewStore, NotificationType, useNotificationStore,\r\n} from '@/store';\r\n\r\nimport { tokenList, AppLog } from '@/utils';\r\n\r\nexport interface DepositNotificationContentProps { id: string }\r\n\r\nexport const DepositNotificationContent: React.FC<DepositNotificationContentProps> = ({ id }) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const { addNotification, popNotification } = useNotificationStore(), { getBalances } = useBalances();\r\n  const depositViewStore = useDepositViewStore();\r\n\r\n  const { value, tokenId } = useMemo(() => {\r\n    const { amount: value, tokenId } = depositViewStore;\r\n    return deserialize(serialize({ value, tokenId }));\r\n  }, []) ?? {};\r\n\r\n  const selectedToken = tokenList('obj', tokenId), allowance = useTokenAllowance(selectedToken?.id);\r\n\r\n  var batchData = useDepositBatch({ amount: value, token: selectedToken, allowance });\r\n\r\n  const batch = batchData?.batch, openBatchModal = batchData?.openBatchModal;\r\n  const batchExecutalbe = batch?.batchExecute;\r\n\r\n  const handleStateChange = () => {\r\n    if (!batch?.state) return;\r\n\r\n    if (batch?.state && batchExecutalbe?.state == \"running\") batch.state = batchExecutalbe.activeStep;\r\n    else if (batch?.state == 'error') { handleError() }\r\n    \r\n    if (batch?.state) {\r\n      if (Object.values(DepositModalDataStep).includes(batch?.state as DepositModalDataStep)) {\r\n        dispatch(modalsSliceActions.setDepositModalData({ step: batch?.state as DepositModalDataStep }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    if (!batch?.state) return;\r\n    if (typeof allowance === 'number') {\r\n      dispatch(modalsSliceActions.closeAllowanceVerifyModal());\r\n      handleStateChange(); openBatchModal();\r\n    } else {\r\n      dispatch(modalsSliceActions.setAllowanceVerifyModalData({ tokenSymbol: selectedToken?.symbol }));\r\n      dispatch(modalsSliceActions.openAllowanceVerifyModal());\r\n    }\r\n  };\r\n\r\n  const handleError = (err?: any) => {\r\n    if (err) AppLog.error(`Deposit Error`, err);\r\n    dispatch(modalsSliceActions.closeDepositProgressModal());\r\n    dispatch(modalsSliceActions.clearDepositModalData());\r\n    addNotification({ title: `Deposit ${value} ${selectedToken?.symbol} failed`, type: NotificationType.Error, id: Date.now().toString(), });\r\n    popNotification(id)\r\n  }\r\n\r\n  useEffect(handleStateChange, [batchExecutalbe?.activeStep, batch.state]);\r\n\r\n  useEffect(() => {\r\n    handleOpenModal();\r\n    if (typeof allowance === 'undefined' || !batch?.state) return;\r\n    if (batchExecutalbe?.execute) {\r\n      batchExecutalbe.execute().then((data: any) => {\r\n        if (data) {\r\n          dispatch(modalsSliceActions.closeDepositProgressModal());\r\n          getBalances();\r\n          addNotification({\r\n            title: `Deposited ${value} ${selectedToken?.symbol}`, type: NotificationType.Success, id: Date.now().toString(), transactionLink: '/activity',\r\n          });\r\n          dispatch(modalsSliceActions.clearDepositModalData());\r\n        } else handleError();\r\n      }).catch((err: any) => handleError(err)).finally(() => popNotification(id));\r\n    }\r\n  }, [allowance, batchExecutalbe]);\r\n\r\n  return (\r\n    <Link target=\"_blank\" rel=\"noreferrer\" color=\"dark-blue.500\" onClick={handleOpenModal}>\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","export * from './add-liquidity-notification-content';\r\nexport * from './deposit-notification-content';\r\nexport * from './mint-auto-notification-content';\r\nexport * from './mint-manual-notification-content';\r\nexport * from './mint-wicp-notification-content';\r\nexport * from './mint-xtc-notification-content';\r\nexport * from './remove-liquidity-notifcation-content';\r\nexport * from './swap-notification-content';\r\nexport * from './transaction-notification-content';\r\nexport * from './withdraw-notification-content';\r\nexport * from './withdraw-wicp-notification-content';\r\nexport * from './transfer-notification-content';\r\n","import { Button, Flex, Stack, Text, useColorModeValue } from '@chakra-ui/react';\r\nimport { useEffect, useMemo, useState } from 'react';\r\n\r\nimport { StepStatus, useStepStatus } from '@/components/modals';\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { Batch } from '@/integrations/transactions';\r\nimport { useMintMultipleBatch } from '@/integrations/transactions/hooks/batch/use-mint-multiple-batch';\r\nimport { useMintErrorHandler } from '@/integrations/transactions/hooks/use-mint-error-handler';\r\nimport {\r\n  addNotification,\r\n  NotificationState,\r\n  NotificationType,\r\n  setNotificationData,\r\n  useAppDispatch,\r\n  useModalsStore,\r\n} from '@/store';\r\nimport { LocalStorageKey, removeFromStorage } from '@/utils';\r\n\r\nexport type MintAutoNotificationContentProps = {\r\n  id: string;\r\n  state?: NotificationState;\r\n};\r\n\r\nexport const MINT_AUTO_NOTIFICATION_TITLES = {\r\n  [NotificationState.Pending]: 'Minting in progress',\r\n  [NotificationState.Success]: 'Mint was successful',\r\n  [NotificationState.Error]:\r\n    'You have unfinished or failed mint(s), click retry mint below.',\r\n};\r\n\r\nexport const MintAutoNotificationContent: React.FC<\r\n  MintAutoNotificationContentProps\r\n> = ({ id, state }) => {\r\n  const [steps, setSteps] = useState<string[]>([]);\r\n  const [step, setStep] = useState<string | Batch.DefaultHookState>(\r\n    Batch.DefaultHookState.Idle\r\n  );\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const { getBalances } = useBalances();\r\n\r\n  const handleMintError = useMintErrorHandler({ notificationId: id });\r\n\r\n  const { mintWICPUncompleteBlockHeights, mintXTCUncompleteBlockHeights } =\r\n    useModalsStore();\r\n\r\n  const getStepStatus = useStepStatus<string>({\r\n    activeStep: step,\r\n    steps,\r\n  });\r\n\r\n  const { batch, getTransactionNames } = useMintMultipleBatch({\r\n    blockHeights: {\r\n      WICP: mintWICPUncompleteBlockHeights,\r\n      XTC: mintXTCUncompleteBlockHeights,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    setStep(batch.state);\r\n  }, [batch.state, dispatch]);\r\n\r\n  const handleAutoMint = () => {\r\n    dispatch(\r\n      setNotificationData({\r\n        data: {\r\n          state: NotificationState.Pending,\r\n          title: MINT_AUTO_NOTIFICATION_TITLES[NotificationState.Pending],\r\n        },\r\n        id,\r\n      })\r\n    );\r\n\r\n    batch\r\n      .execute()\r\n      .then(() => {\r\n        dispatch(\r\n          addNotification({\r\n            title: `Minting finished`,\r\n            type: NotificationType.Success,\r\n            id: Date.now().toString(),\r\n          })\r\n        );\r\n\r\n        removeFromStorage(LocalStorageKey.MintWICPUncompleteBlockHeights);\r\n        removeFromStorage(LocalStorageKey.MintXTCUncompleteBlockHeights);\r\n\r\n        getBalances();\r\n        dispatch(\r\n          setNotificationData({\r\n            data: {\r\n              state: NotificationState.Success,\r\n              title: MINT_AUTO_NOTIFICATION_TITLES[NotificationState.Success],\r\n            },\r\n            id,\r\n          })\r\n        );\r\n      })\r\n      .catch((err) =>\r\n        handleMintError(err.message, (errorMessage) => {\r\n          dispatch(\r\n            setNotificationData({\r\n              data: {\r\n                state: NotificationState.Error,\r\n                title: MINT_AUTO_NOTIFICATION_TITLES[NotificationState.Error],\r\n              },\r\n              id,\r\n            })\r\n          );\r\n          dispatch(\r\n            addNotification({\r\n              title: errorMessage,\r\n              type: NotificationType.Error,\r\n              id: Date.now().toString(),\r\n            })\r\n          );\r\n        })\r\n      );\r\n\r\n    const transactionNames = getTransactionNames();\r\n\r\n    setSteps(transactionNames);\r\n  };\r\n\r\n  const doneStepColor = useColorModeValue('green.600', 'green.400');\r\n  const activeStepColor = useColorModeValue('gray.600', 'gray.400');\r\n  const disabledStepColor = useColorModeValue('gray.400', 'gray.600');\r\n\r\n  const shouldShowRetryButton = useMemo(() => {\r\n    return (\r\n      step === Batch.DefaultHookState.Idle ||\r\n      step === Batch.DefaultHookState.Error ||\r\n      state === NotificationState.Error\r\n    );\r\n  }, [step, state]);\r\n\r\n  return shouldShowRetryButton ? (\r\n    <Button\r\n      colorScheme=\"dark-blue\"\r\n      variant=\"gradient\"\r\n      isFullWidth\r\n      onClick={handleAutoMint}\r\n      mt={3}\r\n    >\r\n      Retry Mint\r\n    </Button>\r\n  ) : (\r\n    <Stack w=\"full\" pt={4}>\r\n      {steps.map((_step) => {\r\n        const stepStatus = getStepStatus(_step);\r\n        const isDoneStep = stepStatus === StepStatus.Done;\r\n        const isActiveStep = stepStatus === StepStatus.Active;\r\n        const isDisabledStep = stepStatus === StepStatus.Disabled;\r\n\r\n        const stepColor = isDoneStep\r\n          ? doneStepColor\r\n          : isActiveStep\r\n          ? activeStepColor\r\n          : isDisabledStep\r\n          ? disabledStepColor\r\n          : disabledStepColor;\r\n\r\n        const stepLabel = isDisabledStep\r\n          ? 'Waiting'\r\n          : isActiveStep\r\n          ? 'Minting...'\r\n          : 'Done';\r\n\r\n        const blockHeight = _step.split('-')[1];\r\n\r\n        return (\r\n          <Flex\r\n            key={_step}\r\n            w=\"full\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Text>{blockHeight}</Text>\r\n            <Text color={stepColor}>{stepLabel}</Text>\r\n          </Flex>\r\n        );\r\n      })}\r\n    </Stack>\r\n  );\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useMintSingleBatch } from '@/integrations/transactions/hooks/batch/use-mint-single-batch';\r\nimport { useMintErrorHandler } from '@/integrations/transactions/hooks/use-mint-error-handler';\r\nimport {\r\n  modalsSliceActions, NotificationType, useAppDispatch, useModalsStore, useNotificationStore,\r\n} from '@/store';\r\n\r\nexport interface MintManualNotificationContentProps {\r\n  id: string;\r\n}\r\n\r\nexport const MintManualNotificationContent: React.FC<\r\n  MintManualNotificationContentProps\r\n> = ({ id }) => {\r\n  const dispatch = useAppDispatch();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { getBalances } = useBalances();\r\n  const { mintManualTokenSymbol, mintManualBlockHeight } = useModalsStore();\r\n  const handleMintError = useMintErrorHandler({ notificationId: id });\r\n\r\n  const batchData = useMintSingleBatch({ tokenSymbol: mintManualTokenSymbol, blockHeight: mintManualBlockHeight });\r\n\r\n  const batch = batchData?.batch\r\n  const batchExecutalbe = batch?.batchExecute;\r\n  const batchFnUpdate = batch.batchFnUpdate;\r\n\r\n\r\n  useEffect(() => {\r\n    if (batchExecutalbe?.execute) {\r\n      batchExecutalbe.execute().then((data: any) => {\r\n        if(data){\r\n          getBalances()\r\n          addNotification({ title: `Minting finished`, type: NotificationType.Success, id: Date.now().toString()});\r\n        }else{\r\n          addNotification({ title: `Minting Failed`, type: NotificationType.Error, id: Date.now().toString()});\r\n        }\r\n      }).catch((err:any)=>{\r\n          handleMintError(err.message, (errorMessage) => { dispatch( modalsSliceActions.setMintManualModalErrorMessage(errorMessage));\r\n          dispatch(modalsSliceActions.openMintManualModal());\r\n        })\r\n      }).finally(() => popNotification(id));;\r\n    } else {\r\n      \r\n    }\r\n  }, [batchFnUpdate])\r\n\r\n\r\n  // useEffect(() => {\r\n  //   batch\r\n  //     .execute()\r\n  //     .then(() => {\r\n  //       addNotification({\r\n  //         title: `Minting finished`,\r\n  //         type: NotificationType.Success,\r\n  //         id: Date.now().toString(),\r\n  //       });\r\n\r\n  //       dispatch(modalsSliceActions.setMintManualBlockHeight(''));\r\n  //       getBalances();\r\n  //     })\r\n  //     .catch((err) =>\r\n  //       handleMintError(err.message, (errorMessage) => {\r\n  //         dispatch(\r\n  //           modalsSliceActions.setMintManualModalErrorMessage(errorMessage)\r\n  //         );\r\n  //         dispatch(modalsSliceActions.openMintManualModal());\r\n  //       })\r\n  //     )\r\n  //     .finally(() => popNotification(id));\r\n  // }, []);\r\n\r\n  return null;\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport { deserialize, serialize } from '@sonicdex/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\n\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useMintBatch } from '@/integrations/transactions';\r\nimport {\r\n  MintModalDataStep, MintTokenSymbol, modalsSliceActions, NotificationType,\r\n  useAppDispatch, useNotificationStore, useSwapViewStore,\r\n} from '@/store';\r\nimport { AppLog } from '@/utils';\r\n\r\nexport interface MintWICPNotificationContentProps {\r\n  id: string;\r\n}\r\n\r\nexport const MintWICPNotificationContent: React.FC<\r\n  MintWICPNotificationContentProps\r\n> = ({ id }) => {\r\n  const dispatch = useAppDispatch();\r\n  const swapViewStore = useSwapViewStore();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { getBalances } = useBalances();\r\n\r\n  const { from, to, keepInSonic } = useMemo(() => {\r\n    const { from, to, keepInSonic } = swapViewStore;\r\n    return deserialize(serialize({ from, to, keepInSonic }));\r\n  }, []) ?? {};\r\n\r\n  const batchData = useMintBatch({ amountIn: from.value, amountOut: to.value, tokenSymbol: MintTokenSymbol.WICP, keepInSonic });\r\n  const batch = batchData?.batch, openBatchModal = batchData?.openBatchModal;\r\n  const batchExecutalbe = batch?.batchExecute;\r\n  const batchFnUpdate = batch.batchFnUpdate;\r\n\r\n  const handleStateChange = () => {\r\n    if (!batch?.state) return;\r\n    if (batch?.state && batchExecutalbe?.state == \"running\") {\r\n      batch.state = batchExecutalbe.activeStep;\r\n    } else if (batch?.state == 'error') {\r\n      handleError();\r\n    }\r\n    if (batch?.state) {\r\n      if (Object.values(MintModalDataStep).includes(batch?.state as MintModalDataStep)) {\r\n        dispatch(modalsSliceActions.setMintWICPModalData({ step: batch?.state }));\r\n      }\r\n    }\r\n  };\r\n  const handleOpenModal = () => {\r\n    handleStateChange();\r\n    openBatchModal();\r\n  };\r\n\r\n  const handleError = (err?: any) => {\r\n    if (err) AppLog.error('Mint WICP Error', err);\r\n    dispatch(modalsSliceActions.closeMintWICPProgressModal());\r\n    addNotification({\r\n      title: `Wrap ${from.value} ${from.metadata.symbol} failed`, type: NotificationType.Error, id: Date.now().toString(),\r\n    });\r\n    popNotification(id);\r\n  };\r\n\r\n  useEffect(handleStateChange, [batchExecutalbe?.activeStep, batch.state]);\r\n\r\n  useEffect(() => {\r\n    handleOpenModal();\r\n    if (batchExecutalbe?.execute) {\r\n      batchExecutalbe.execute().then((data: any) => {\r\n        if (data) {\r\n          dispatch(modalsSliceActions.closeMintWICPProgressModal());\r\n          addNotification({ title: `Wrapped ${from.value} ${from.metadata.symbol}`, type: NotificationType.Success, id: Date.now().toString(), transactionLink: '/activity' });\r\n          getBalances();\r\n        } else handleError();\r\n       }).catch((err: any) => handleError(err)).finally(() => popNotification(id));\r\n    }\r\n    if(batchFnUpdate=='error') handleError();\r\n  }, [batchFnUpdate]);\r\n\r\n  return (\r\n    <Link target=\"_blank\" rel=\"noreferrer\" color=\"dark-blue.500\" onClick={handleOpenModal}>View progress</Link>\r\n  );\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport { deserialize, serialize } from '@sonicdex/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\n\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useMintBatch } from '@/integrations/transactions/hooks/batch/use-mint-batch';\r\nimport {\r\n  MintModalDataStep, MintTokenSymbol,  modalsSliceActions, NotificationType,useAppDispatch,\r\n  useNotificationStore,useSwapViewStore,\r\n} from '@/store';\r\n\r\nimport { AppLog } from '@/utils';\r\n\r\nexport interface MintXTCNotificationContentProps {\r\n  id: string;\r\n}\r\n\r\nexport const MintXTCNotificationContent: React.FC< MintXTCNotificationContentProps> = ({ id }) => {\r\n  const dispatch = useAppDispatch();\r\n  const swapViewStore = useSwapViewStore();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { getBalances } = useBalances();\r\n\r\n  const { from, to, keepInSonic } = useMemo(() => {\r\n    const { from, to, keepInSonic } = swapViewStore;\r\n    return deserialize(serialize({ from, to, keepInSonic }));\r\n  }, []) ?? {};\r\n\r\n  const batchData = useMintBatch({ amountIn: from.value, amountOut: to.value, tokenSymbol: MintTokenSymbol.XTC, keepInSonic });\r\n\r\n  const batch = batchData?.batch, openBatchModal = batchData?.openBatchModal;\r\n  const batchExecutalbe = batch?.batchExecute;\r\n  const batchFnUpdate = batch.batchFnUpdate;\r\n\r\n  const handleStateChange = () => {\r\n    if (!batch?.state) return;\r\n    if (batch?.state && batchExecutalbe?.state == \"running\") {\r\n      batch.state = batchExecutalbe.activeStep;\r\n    } else if (batch?.state == 'error') {\r\n      handleError();\r\n    }\r\n    if (batch?.state) {\r\n      if (Object.values(MintModalDataStep).includes(batch?.state as MintModalDataStep)) {\r\n        dispatch(modalsSliceActions.setMintXTCModalData({ step: batch?.state }));\r\n      }\r\n    }\r\n  };\r\n  const handleOpenModal = () => {\r\n    handleStateChange();\r\n    openBatchModal();\r\n  };\r\n\r\n  const handleError = (err?: any) => {\r\n    if (err) AppLog.error('Mint WICP Error', err);\r\n    dispatch(modalsSliceActions.closeMintXTCProgressModal());\r\n    addNotification({\r\n      title: `Wrap ${from.value} ${from.metadata.symbol} failed`, type: NotificationType.Error, id: Date.now().toString(),\r\n    });\r\n    popNotification(id);\r\n  }\r\n  useEffect(handleStateChange, [batchExecutalbe?.activeStep, batch.state]);  \r\n\r\n  useEffect(() => {\r\n    handleOpenModal();\r\n    if (batchExecutalbe?.execute) {\r\n      batchExecutalbe.execute().then((data: any) => {\r\n        if (data) {\r\n          dispatch(modalsSliceActions.closeMintXTCProgressModal());\r\n          addNotification({\r\n            title: `Minted ${to.value} ${to.metadata.symbol}`,type: NotificationType.Success, id: Date.now().toString(),transactionLink: '/activity',\r\n          });\r\n          getBalances();\r\n        } else handleError();\r\n       }).catch((err: any) => handleError(err)).finally(() => popNotification(id));\r\n    }\r\n    if(batchFnUpdate=='error') handleError();\r\n\r\n  }, [batchFnUpdate]);\r\n  \r\n  return (\r\n    <Link target=\"_blank\" rel=\"noreferrer\" color=\"dark-blue.500\" onClick={handleOpenModal}>\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport { deserialize, serialize, toBigNumber } from '@sonicdex/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\n\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useRemoveLiquidityBatch } from '@/integrations/transactions';\r\nimport {\r\n  modalsSliceActions, NotificationType, RemoveLiquidityModalDataStep, useAppDispatch,\r\n  useLiquidityViewStore, useNotificationStore, useWalletStore, useSwapCanisterStore,\r\n} from '@/store';\r\n\r\nimport { AppLog } from '@/utils';\r\n\r\nexport interface RemoveLiquidityNotificationContentProps {\r\n  id: string;\r\n}\r\n\r\nexport const RemoveLiquidityNotificationContent: React.FC<\r\n  RemoveLiquidityNotificationContentProps\r\n> = ({ id }) => {\r\n  const dispatch = useAppDispatch();\r\n  const liquidityViewStore = useLiquidityViewStore();\r\n  const { userLPBalances } = useSwapCanisterStore();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { principalId } = useWalletStore();\r\n  const { getBalances, getUserPositiveLPBalances } = useBalances();\r\n\r\n  const { token0, token1, ...removeLiquidityBatchParams } =\r\n    useMemo(() => {\r\n      const { token0, token1, keepInSonic, removeAmountPercentage, pair } =\r\n        liquidityViewStore;\r\n\r\n      if (userLPBalances && token0.metadata && token1.metadata && pair) {\r\n        const tokensLPBalance =\r\n          userLPBalances[token0.metadata.id]?.[token1.metadata.id];\r\n        const lpAmount = (removeAmountPercentage / 100) * tokensLPBalance;\r\n\r\n        const amount0Min = toBigNumber(lpAmount).multipliedBy(pair.reserve0.toString()).dividedBy(pair.totalSupply.toString()).applyDecimals(token0.metadata.decimals);\r\n        const amount1Min = toBigNumber(lpAmount).multipliedBy(pair.reserve1.toString()).dividedBy(pair.totalSupply.toString()).applyDecimals(token1.metadata.decimals);\r\n\r\n        return deserialize(serialize({ token0, token1, keepInSonic, lpAmount, amount0Min, amount1Min }));\r\n      }\r\n    }, []) ?? {};\r\n  // TODO: Improve safety\r\n\r\n  const batchData = useRemoveLiquidityBatch({ token0, token1, principalId, ...removeLiquidityBatchParams } as any);\r\n  const batch = batchData?.batch, openBatchModal = batchData?.openBatchModal;\r\n  const batchFnUpdate = batch.batchFnUpdate;\r\n  const batchExecutalbe = batch?.batchExecute;\r\n\r\n  const handleStateChange = () => {\r\n    if (!batch?.state) return;\r\n    if (batch?.state && batchExecutalbe?.state == \"running\") {\r\n      batch.state = batchExecutalbe.activeStep;\r\n    } else if (batch?.state == 'error') {\r\n      handleError();\r\n    }\r\n    if (Object.values(RemoveLiquidityModalDataStep).includes(batch.state as RemoveLiquidityModalDataStep)) {\r\n      dispatch(modalsSliceActions.setRemoveLiquidityModalData({ step: batch.state as RemoveLiquidityModalDataStep }));\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    handleStateChange();\r\n    openBatchModal();\r\n  };\r\n\r\n\r\n  const handleError = (err?: any) => {\r\n    if (err) AppLog.error('Add Liquidity Error', err);\r\n    dispatch(modalsSliceActions.clearRemoveLiquidityModalData());\r\n    dispatch(modalsSliceActions.closeRemoveLiquidityProgressModal());\r\n    dispatch(modalsSliceActions.closeAddLiquidityProgressModal());\r\n\r\n    addNotification({\r\n      title: `Remove LP of ${token0.value} ${token0.metadata.symbol} + ${token1.value} ${token1.metadata.symbol} failed`,\r\n      type: NotificationType.Error,\r\n      id: Date.now().toString(),\r\n    });\r\n    popNotification(id)\r\n  }\r\n  useEffect(handleStateChange, [batchExecutalbe?.activeStep, batch.state]);\r\n\r\n  useEffect(() => {\r\n    handleOpenModal();\r\n    if (batchExecutalbe?.execute) {\r\n      batchExecutalbe.execute().then((data: any) => {\r\n        if (data) {\r\n          dispatch(modalsSliceActions.clearRemoveLiquidityModalData());\r\n          dispatch(modalsSliceActions.closeRemoveLiquidityProgressModal());\r\n          addNotification({\r\n            title: `Removed LP of ${token0.value} ${token0.metadata.symbol} + ${token1.value} ${token1.metadata.symbol}`,\r\n            type: NotificationType.Success,\r\n            id: Date.now().toString(),\r\n            transactionLink: '/activity',\r\n          });\r\n          getBalances(); getUserPositiveLPBalances();\r\n        } else handleError();\r\n      }).catch((err: any) => handleError(err)).finally(() => popNotification(id));\r\n    }\r\n  }, [batchFnUpdate]);\r\n\r\n  return (\r\n    <Link target=\"_blank\" rel=\"noreferrer\" color=\"dark-blue.500\" onClick={handleOpenModal}>\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport { deserialize, serialize } from '@sonicdex/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\n\r\nimport { useTokenAllowance } from '@/hooks';\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useSwapBatch } from '@/integrations/transactions';\r\nimport {\r\n  modalsSliceActions, NotificationType, SwapModalDataStep, useAppDispatch,\r\n  useNotificationStore, useWalletStore, useSwapViewStore,\r\n} from '@/store';\r\n\r\nexport interface SwapNotificationContentProps {\r\n  id: string;\r\n}\r\n\r\nexport const SwapNotificationContent: React.FC<SwapNotificationContentProps> = ({ id }) => {\r\n\r\n  const dispatch = useAppDispatch();\r\n  const swapViewStore = useSwapViewStore();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { principalId } = useWalletStore();\r\n  const { getBalances } = useBalances();\r\n  // const { getAllPairs } = useAllPairs();\r\n\r\n  const { from, to, slippage, keepInSonic } = useMemo(() => {\r\n    const { from, to, slippage, keepInSonic } = swapViewStore;\r\n    return deserialize(serialize({ from, to, slippage, keepInSonic }));\r\n  }, []) ?? {};\r\n\r\n  const allowance = useTokenAllowance(from.metadata?.id);\r\n  var batchData = useSwapBatch({ from, to, slippage: Number(slippage), keepInSonic, principalId, allowance });\r\n\r\n  const batch = batchData?.batch, openBatchModal = batchData?.openBatchModal;\r\n  const batchExecutalbe = batch?.batchExecute;\r\n  const batchFnUpdate = batch.batchFnUpdate;\r\n\r\n  const handleStateChange = () => {\r\n    if (!batch?.state) return;\r\n    if (batch?.state && batchExecutalbe?.state == \"running\") batch.state = batchExecutalbe.activeStep;\r\n    else if (batch?.state == 'error') { handleError() }\r\n    if (batch?.state) {\r\n      if (Object.values(SwapModalDataStep).includes(batch?.state as SwapModalDataStep)) {\r\n        dispatch(modalsSliceActions.setSwapModalData({ step: batch?.state as SwapModalDataStep }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    if (!batch?.state && from.metadata?.symbol || !openBatchModal) return;\r\n    if (typeof allowance === 'number') {\r\n      dispatch(modalsSliceActions.closeAllowanceVerifyModal());\r\n      handleStateChange();\r\n      openBatchModal();\r\n    } else {\r\n      dispatch(modalsSliceActions.setAllowanceVerifyModalData({ tokenSymbol: from.metadata?.symbol }));\r\n      dispatch(modalsSliceActions.openAllowanceVerifyModal());\r\n    }\r\n  };\r\n\r\n  const handleError = (err?: any) => {\r\n    if (err){\r\n      if (err.message === 'slippage: insufficient output amount') {\r\n        addNotification({\r\n          title: `Slippage is too low to swap ${from.value} ${from.metadata.symbol} for ${to.value} ${to.metadata.symbol}`,\r\n          type: NotificationType.Error, id: Date.now().toString(),\r\n        });\r\n      } else {\r\n        addNotification({\r\n          title: `Swap ${from.value} ${from.metadata.symbol} for ${to.value} ${to.metadata.symbol} failed`,\r\n          type: NotificationType.Error, id: Date.now().toString(),\r\n        });\r\n      }\r\n    }\r\n    dispatch(modalsSliceActions.clearSwapModalData());\r\n    dispatch(modalsSliceActions.closeSwapProgressModal());\r\n   \r\n    popNotification(id)\r\n  }\r\n\r\n  useEffect(handleStateChange, [batchExecutalbe?.activeStep, batch.state]);\r\n\r\n  useEffect(() => {\r\n    handleOpenModal();\r\n    if (typeof allowance === 'undefined' || !batch?.state) return;\r\n    if (batchExecutalbe?.execute) {\r\n      batchExecutalbe.execute().then((data: any) => {\r\n        if (data) {\r\n          dispatch(modalsSliceActions.clearSwapModalData());\r\n          dispatch(modalsSliceActions.closeSwapProgressModal());\r\n          addNotification({\r\n            title: `Swapped ${from.value} ${from.metadata.symbol} for ${to.value} ${to.metadata.symbol}`,\r\n            type: NotificationType.Success, id: Date.now().toString(), transactionLink: '/activity',\r\n          });\r\n          getBalances();\r\n        } else handleError();\r\n      }).catch((err: any) => handleError(err)).finally(() => popNotification(id));\r\n    }\r\n  }, [batchFnUpdate]);\r\n\r\n  return (\r\n    <Link target=\"_blank\" rel=\"noreferrer\" color=\"dark-blue.500\" onClick={handleOpenModal}>\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport interface TransactionNotificationContentProps {\r\n  transactionLink?: string;\r\n}\r\n\r\nexport const TransactionNotificationContent: React.FC<\r\n  TransactionNotificationContentProps\r\n> = ({ transactionLink }) => {\r\n  if (!transactionLink) return null;\r\n\r\n  return (\r\n    <Link as={NavLink} to={transactionLink} rel=\"noreferrer\" color=\"dark-blue.500\">\r\n      View in activity tab\r\n    </Link>\r\n  );\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport { deserialize, serialize } from '@sonicdex/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\nimport { useBalances } from '@/hooks/use-balances';\r\n\r\nimport { useTransferBatch } from '@/integrations/transactions';\r\n\r\nimport {\r\n  TransferModalDataStep, modalsSliceActions, useAppDispatch, useTransferViewStore, NotificationType, useNotificationStore,transferViewActions\r\n} from '@/store';\r\n\r\nimport { tokenList, AppLog } from '@/utils';\r\n\r\nexport interface TransferNotificationContentProps { id: string }\r\n\r\nexport const TransferNotificationContent: React.FC<TransferNotificationContentProps> = ({ id }) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const { addNotification, popNotification } = useNotificationStore(), { getBalances } = useBalances();\r\n  const transferViewStore = useTransferViewStore();\r\n  //getBalances()\r\n  const { value, tokenId } = useMemo(() => {\r\n    const { amount: value, tokenId  } = transferViewStore;\r\n    return deserialize(serialize({ value, tokenId }));\r\n  }, []) ?? {};\r\n\r\n  const selectedToken = tokenList('obj', tokenId);\r\n\r\n  const toAddress= transferViewStore.toAddress;\r\n\r\n  const addressType = transferViewStore.addressType;\r\n\r\n  var batchData = useTransferBatch({ amount: value, token: selectedToken, address:toAddress , addressType:addressType});\r\n\r\n  const batch = batchData?.batch, openBatchModal = batchData?.openBatchModal;\r\n  const batchExecutalbe = batch?.batchExecute;\r\n\r\n  const handleStateChange = () => {\r\n    if (!batch?.state) return;\r\n\r\n    if (batch?.state && batchExecutalbe?.state == \"running\") {\r\n      batch.state = batchExecutalbe.activeStep;\r\n    } else if (batch?.state == 'error') {\r\n      handleError();\r\n    }\r\n    if (batch?.state) {\r\n      if (Object.values(TransferModalDataStep).includes(batch?.state as TransferModalDataStep)) {\r\n        dispatch(modalsSliceActions.setTransferModalData({ step: batch?.state as TransferModalDataStep }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    if (!batch?.state) return;\r\n    handleStateChange(); \r\n    openBatchModal();\r\n  };\r\n\r\n  const handleError = (err?: any) => {\r\n    if (err) AppLog.error(`Transfer Error`, err);\r\n    dispatch(modalsSliceActions.closeTransferProgressModal());\r\n    dispatch(modalsSliceActions.clearTransferModalData() );\r\n    addNotification({ title: `Transfer ${value} ${selectedToken?.symbol} failed`, type: NotificationType.Error, id: Date.now().toString(), });\r\n    popNotification(id)\r\n  }\r\n\r\n  useEffect(handleStateChange, [batchExecutalbe?.activeStep, batch.state]);\r\n\r\n  useEffect(() => {\r\n    handleOpenModal();\r\n    if (typeof batchExecutalbe?.execute === 'undefined' || !batch?.state) return;\r\n\r\n    if (batchExecutalbe?.execute) {\r\n      batchExecutalbe.execute().then((data: any) => {\r\n        if (data) {\r\n          dispatch(transferViewActions.setToAddress(''));\r\n          dispatch(modalsSliceActions.closeTransferProgressModal());\r\n          getBalances();\r\n          addNotification({\r\n            title: `Transfered ${value} ${selectedToken?.symbol}`, type: NotificationType.Success, id: Date.now().toString(), transactionLink: '',\r\n          });\r\n          dispatch(modalsSliceActions.clearTransferModalData());\r\n        } else handleError();\r\n      }).catch((err: any) => handleError(err)).finally(() => popNotification(id));\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Link target=\"_blank\" rel=\"noreferrer\" color=\"dark-blue.500\" onClick={handleOpenModal}>\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport { useEffect, useMemo } from 'react';\r\n\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useWithdrawBatch } from '@/integrations/transactions/hooks/batch/use-withdraw-batch';\r\nimport {\r\n  modalsSliceActions, NotificationType, useAppDispatch, useNotificationStore,\r\n  useSwapCanisterStore, useWithdrawViewStore, WithdrawModalDataStep,\r\n} from '@/store';\r\n\r\nimport { AppLog } from '@/utils';\r\n\r\nexport interface WithdrawNotificationContentProps { id: string; }\r\n\r\nexport const WithdrawNotificationContent: React.FC<\r\n  WithdrawNotificationContentProps\r\n> = ({ id }) => {\r\n  const dispatch = useAppDispatch();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { getBalances } = useBalances();\r\n  const { amount: value, tokenId } = useWithdrawViewStore();\r\n  const { supportedTokenList } = useSwapCanisterStore();\r\n\r\n  const selectedToken = useMemo(() => {\r\n    if (tokenId && supportedTokenList) {\r\n      return supportedTokenList.find(({ id }) => id === tokenId);\r\n    }\r\n    return undefined;\r\n  }, [supportedTokenList, tokenId]);\r\n\r\n  var batchData = useWithdrawBatch({ amount: value, token: selectedToken });\r\n\r\n  const batch = batchData?.batch, openBatchModal = batchData?.openBatchModal;\r\n  const batchExecutalbe = batch?.batchExecute;\r\n\r\n  const handleStateChange = () => {\r\n    if (!batch?.state) return;\r\n    if (batch?.state && batchExecutalbe?.state == \"running\") {\r\n      batch.state = batchExecutalbe.activeStep;\r\n    } else if (batch?.state == 'error') {\r\n      handleError();\r\n    }\r\n    if (batch?.state) {\r\n      if (Object.values(WithdrawModalDataStep).includes(batch?.state as WithdrawModalDataStep)) {\r\n        dispatch(modalsSliceActions.setWithdrawModalData({ step: batch?.state as WithdrawModalDataStep }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = () => { handleStateChange(); openBatchModal() };\r\n\r\n  const handleError = (err?: any) => {\r\n    if (err) AppLog.error(`Deposit Error`, err);\r\n\r\n    dispatch(modalsSliceActions.clearWithdrawModalData());\r\n    dispatch(modalsSliceActions.closeWithdrawProgressModal());\r\n\r\n    addNotification({\r\n      title: `Withdraw ${value} ${selectedToken?.symbol} failed`, type: NotificationType.Error, id: Date.now().toString(),\r\n    });\r\n    popNotification(id);\r\n  }\r\n\r\n  useEffect(handleStateChange, [batchExecutalbe?.activeStep, batch.state]);\r\n  \r\n  useEffect(() => {\r\n    handleOpenModal();\r\n    if (batchExecutalbe?.execute) {\r\n      batchExecutalbe.execute().then((data: any) => {\r\n        if (data) {\r\n          dispatch(modalsSliceActions.clearWithdrawModalData());\r\n          dispatch(modalsSliceActions.closeWithdrawProgressModal());\r\n          addNotification({\r\n            title: `Withdrawn ${value} ${selectedToken?.symbol}`, type: NotificationType.Success,\r\n            id: Date.now().toString(), transactionLink: '/activity'\r\n          });\r\n          getBalances();\r\n        } else handleError();\r\n      }).catch((err: any) => handleError(err)).finally(() => popNotification(id));\r\n    }\r\n  }, []);\r\n  return (\r\n    <Link target=\"_blank\" rel=\"noreferrer\" color=\"dark-blue.500\" onClick={handleOpenModal}>\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","import { Link } from '@chakra-ui/react';\r\nimport { Principal } from '@dfinity/principal';\r\nimport { deserialize, serialize } from '@sonicdex/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\n\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useWithdrawWICPBatch } from '@/integrations/transactions';\r\nimport {\r\n  modalsSliceActions, NotificationType, useAppDispatch, useNotificationStore, useWalletStore,\r\n  useSwapViewStore, WithdrawWICPModalDataStep,\r\n} from '@/store';\r\n\r\nimport { AppLog } from '@/utils';\r\nimport { getAccountId } from '@/utils/icp';\r\n\r\nexport interface WithdrawWICPNotificationContentProps {\r\n  id: string;\r\n}\r\n\r\nexport const WithdrawWICPNotificationContent: React.FC<WithdrawWICPNotificationContentProps> = ({ id }) => {\r\n  const { principalId } = useWalletStore();\r\n  const dispatch = useAppDispatch();\r\n  const swapViewStore = useSwapViewStore();\r\n  const { addNotification, popNotification } = useNotificationStore();\r\n  const { getBalances } = useBalances();\r\n\r\n  const { from } = useMemo(() => {\r\n    const { from } = swapViewStore;\r\n    return deserialize(serialize({ from }));\r\n  }, []) ?? {};\r\n\r\n  const batchData = useWithdrawWICPBatch({\r\n    amount: from.value,\r\n    toAccountId: principalId ? getAccountId(Principal.fromText(principalId)) : undefined,\r\n  });\r\n\r\n  const batch = batchData?.batch, openBatchModal = batchData?.openBatchModal;\r\n  const batchExecutalbe = batch?.batchExecute;\r\n  \r\n  const handleStateChange = () => {\r\n    if (!batch?.state) return;\r\n    if (batch?.state && batchExecutalbe?.state == \"running\") {\r\n      batch.state = batchExecutalbe.activeStep;\r\n    } else if (batch?.state == 'error') {\r\n      handleError();\r\n    }\r\n    if (batch?.state) {\r\n      if (Object.values(WithdrawWICPModalDataStep).includes(batch?.state as WithdrawWICPModalDataStep)) {\r\n        dispatch(modalsSliceActions.setWithdrawWICPModalData({ step: batch?.state as WithdrawWICPModalDataStep }));\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  const handleError = (err?: any) => {\r\n    if (err) AppLog.error(`Deposit Error`, err);\r\n    dispatch(modalsSliceActions.closeWithdrawWICPProgressModal());\r\n    addNotification({\r\n      title: `Unwrap ${from.value} ${from.metadata.symbol} failed`,\r\n      type: NotificationType.Error,\r\n      id: Date.now().toString(),\r\n    });\r\n    popNotification(id);\r\n  }\r\n\r\n  const handleOpenModal = () => {\r\n    handleStateChange();\r\n    openBatchModal();\r\n  };\r\n\r\n  useEffect(handleStateChange, [batchExecutalbe?.activeStep, batch.state]);\r\n\r\n  useEffect(() => {\r\n    handleOpenModal();\r\n    if (batchExecutalbe?.execute) {\r\n      batchExecutalbe.execute().then((data: any) => {\r\n        if (data) {\r\n          dispatch(modalsSliceActions.closeWithdrawWICPProgressModal());\r\n          addNotification({\r\n            title: `Unwrapped ${from.value} ${from.metadata.symbol}`, type: NotificationType.Success,\r\n            id: Date.now().toString(),transactionLink: '/activity',\r\n          });\r\n          getBalances();\r\n        } else handleError();\r\n      }).catch((err: any) => handleError(err)).finally(() => popNotification(id));\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Link target=\"_blank\" rel=\"noreferrer\" color=\"dark-blue.500\" onClick={handleOpenModal}>\r\n      View progress\r\n    </Link>\r\n  );\r\n};\r\n","export * from './components';\r\nexport * from './notification-box';\r\nexport * from './notification-content';\r\nexport * from './notification-errors';\r\nexport * from './notification-header';\r\nexport * from './notification-manager';\r\nexport * from './notification-timer';\r\n","import { Box, Collapse, useColorModeValue } from '@chakra-ui/react';\r\nimport { useState } from 'react';\r\n\r\nimport { Notification } from '@/store';\r\n\r\nimport { NotificationContent } from './notification-content';\r\nimport { NotificationHeader } from './notification-header';\r\nimport { NotificationTimer } from './notification-timer';\r\n\r\nexport type NotificationBoxProps = Notification & {\r\n  children?: React.ReactNode;\r\n  onClose: () => any;\r\n};\r\n\r\nexport const NotificationBox = ({\r\n  children,\r\n  onClose,\r\n  ...notification\r\n}: NotificationBoxProps) => {\r\n  const [show, setShow] = useState(true);\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    setTimeout(onClose, 300);\r\n  };\r\n\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const borderColor = useColorModeValue('gray.100', 'custom.4');\r\n\r\n  return (\r\n    <Collapse in={show} animateOpacity unmountOnExit>\r\n      <Box\r\n        width={80}\r\n        position=\"relative\"\r\n        borderRadius={5}\r\n        border=\"1px solid\"\r\n        borderColor={borderColor}\r\n        shadow=\"md\"\r\n        bg={bg}\r\n        mb={4}\r\n        mx={2}\r\n        pt={4}\r\n        pr={10}\r\n        pl={12}\r\n        pb={4}\r\n        overflow=\"hidden\"\r\n      >\r\n        <NotificationHeader {...notification} handleClose={handleClose} />\r\n        <NotificationContent {...notification}>{children}</NotificationContent>\r\n        <NotificationTimer {...notification} handleClose={handleClose} />\r\n      </Box>\r\n    </Collapse>\r\n  );\r\n};\r\n","import { Flex, Text, useColorModeValue } from '@chakra-ui/react';\r\n\r\nimport { Notification, NotificationType } from '@/store';\r\n\r\nimport {\r\n  AddLiquidityNotificationContent,\r\n  DepositNotificationContent,\r\n  MintAutoNotificationContent,\r\n  MintManualNotificationContent,\r\n  MintWICPNotificationContent,\r\n  MintXTCNotificationContent,\r\n  RemoveLiquidityNotificationContent,\r\n  SwapNotificationContent,\r\n  TransactionNotificationContent,\r\n  WithdrawNotificationContent,\r\n  WithdrawWICPNotificationContent,\r\n  TransferNotificationContent\r\n} from './components';\r\n\r\nexport type NotificationContentProps = Notification;\r\n\r\nexport const NotificationContent: React.FC<NotificationContentProps> = ({\r\n  children,\r\n  id,\r\n  type,\r\n  state,\r\n  title,\r\n  transactionLink,\r\n  errorMessage,\r\n}) => {\r\n  const messageColor = useColorModeValue('gray.400', 'gray.600');\r\n\r\n  const color = useColorModeValue('gray.800', 'gray.50');\r\n\r\n  const notificationContent = {\r\n    [NotificationType.Swap]: <SwapNotificationContent id={id} />,\r\n    [NotificationType.AddLiquidity]: (\r\n      <AddLiquidityNotificationContent id={id} />\r\n    ),\r\n    [NotificationType.RemoveLiquidity]: (\r\n      <RemoveLiquidityNotificationContent id={id} />\r\n    ),\r\n    [NotificationType.Withdraw]: <WithdrawNotificationContent id={id} />,\r\n    [NotificationType.Deposit]: <DepositNotificationContent id={id} />,\r\n    [NotificationType.WithdrawWICP]: (\r\n      <WithdrawWICPNotificationContent id={id} />\r\n    ),\r\n    [NotificationType.MintWICP]: <MintWICPNotificationContent id={id} />,\r\n    [NotificationType.Deposit]: <DepositNotificationContent id={id} />,\r\n    [NotificationType.MintXTC]: <MintXTCNotificationContent id={id} />,\r\n    [NotificationType.Success]: transactionLink ? (\r\n      <TransactionNotificationContent transactionLink={transactionLink} />\r\n    ) : null,\r\n    [NotificationType.MintAuto]: (\r\n      <MintAutoNotificationContent id={id} state={state} />\r\n    ),\r\n    [NotificationType.MintManual]: <MintManualNotificationContent id={id} />,\r\n    [NotificationType.Transfer]: <TransferNotificationContent id={id} />,\r\n    [NotificationType.Error]: errorMessage && (\r\n      <Text fontSize=\"sm\" color={messageColor}>\r\n        {errorMessage}\r\n      </Text>\r\n    ),\r\n  };\r\n\r\n  return (\r\n    <Flex direction=\"column\" alignItems=\"flex-start\">\r\n      <Text color={color} fontWeight={700} maxWidth={60}>\r\n        {title}\r\n      </Text>\r\n\r\n      {notificationContent[type]}\r\n\r\n      {children}\r\n    </Flex>\r\n  );\r\n};\r\n","import { Link, Text, useColorModeValue } from '@chakra-ui/react';\r\n\r\nexport enum ErrorNotificationType {\r\n  Swap = 'SWAP',\r\n}\r\n\r\nconst SWAP_ERROR_LINK = '#';\r\n\r\nconst SwapError = () => {\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n  return (\r\n    <Text color={color}>\r\n      Since the swap failed, your assets are now deposited in Sonic, you can\r\n      either retry the swap or{' '}\r\n      <Link\r\n        rel=\"noreferrer\"\r\n        target=\"_blank\"\r\n        href={SWAP_ERROR_LINK}\r\n        textDecoration=\"underline\"\r\n      >\r\n        withdraw the assets\r\n      </Link>\r\n      .\r\n    </Text>\r\n  );\r\n};\r\n\r\nexport const ERRORS = {\r\n  [ErrorNotificationType.Swap]: <SwapError />,\r\n};\r\n","import { Box, Spinner } from '@chakra-ui/react';\r\nimport { useMemo } from 'react';\r\n\r\nimport { closeSrc, redWarningSrc, transparentGreenCheckSrc } from '@/assets';\r\nimport {\r\n  Notification,\r\n  NotificationState,\r\n  NotificationType,\r\n  useNotificationStore,\r\n} from '@/store';\r\n\r\nconst NotificationIcon = ({ type, state }: Partial<Notification>) => {\r\n  const errorNode = (\r\n    <Box as=\"img\" src={redWarningSrc} position=\"absolute\" top={4} left={4} />\r\n  );\r\n  const pendingNode = <Spinner position=\"absolute\" top={4} left={4} />;\r\n  const successNode = (\r\n    <Box\r\n      as=\"img\"\r\n      src={transparentGreenCheckSrc}\r\n      position=\"absolute\"\r\n      top={4}\r\n      left={4}\r\n    />\r\n  );\r\n\r\n  switch (state) {\r\n    case NotificationState.Error:\r\n      return errorNode;\r\n    case NotificationState.Pending:\r\n      return pendingNode;\r\n    case NotificationState.Success:\r\n      return successNode;\r\n  }\r\n\r\n  switch (type) {\r\n    case NotificationType.Success:\r\n      return successNode;\r\n    case NotificationType.MintAuto:\r\n    case NotificationType.Error:\r\n      return errorNode;\r\n    case NotificationType.MintManual:\r\n    case NotificationType.MintWICP:\r\n    case NotificationType.WithdrawWICP:\r\n    case NotificationType.Swap:\r\n    case NotificationType.AddLiquidity:\r\n    case NotificationType.RemoveLiquidity:\r\n    case NotificationType.Deposit:\r\n    case NotificationType.MintXTC:\r\n    case NotificationType.Withdraw:\r\n      return pendingNode;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport type NotificationHeaderProps = Notification & {\r\n  handleClose: () => void;\r\n};\r\n\r\nexport const NotificationHeader: React.FC<NotificationHeaderProps> = ({\r\n  id,\r\n  type,\r\n  state,\r\n  handleClose,\r\n}) => {\r\n  const { notifications } = useNotificationStore();\r\n\r\n  const notification = useMemo(\r\n    () => notifications.find((n) => n.id === id),\r\n    [notifications, id]\r\n  );\r\n\r\n  const shouldShowCloseButton = useMemo(\r\n    () =>\r\n      type === NotificationType.Error ||\r\n      type === NotificationType.Success ||\r\n      notification?.state === NotificationState.Success,\r\n    [type, notification]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <NotificationIcon state={state} type={type} />\r\n      {shouldShowCloseButton && (\r\n        <Box\r\n          cursor=\"pointer\"\r\n          onClick={handleClose}\r\n          as=\"img\"\r\n          src={closeSrc}\r\n          position=\"absolute\"\r\n          top={4}\r\n          right={4}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { Flex } from '@chakra-ui/react';\r\n\r\nimport { useNotificationStore } from '@/store';\r\n\r\nimport { NotificationBox } from './notification-box';\r\nimport { ErrorNotificationType, ERRORS } from './notification-errors';\r\n\r\nexport const NotificationManager = () => {\r\n  const { notifications, popNotification } = useNotificationStore();\r\n\r\n  return (\r\n    <Flex position=\"fixed\" right={[0, 2, 8]} direction=\"column\" zIndex={2}>\r\n      {notifications.map((notification) => {\r\n        const { errorMessage } = notification;\r\n        const errorBody =\r\n          errorMessage && ERRORS.hasOwnProperty(errorMessage)\r\n            ? ERRORS[errorMessage as ErrorNotificationType]\r\n            : undefined;\r\n\r\n        return (\r\n          <NotificationBox\r\n            key={notification.id}\r\n            {...notification}\r\n            onClose={() => popNotification(notification.id)}\r\n          >\r\n            {errorBody}\r\n          </NotificationBox>\r\n        );\r\n      })}\r\n    </Flex>\r\n  );\r\n};\r\n","import { Box } from '@chakra-ui/react';\r\nimport { keyframes } from '@emotion/react';\r\nimport { useMemo } from 'react';\r\n\r\nimport { Notification, NotificationState, NotificationType } from '@/store';\r\n\r\nconst reduceWidth = keyframes`\r\n    from { width: 100%;}\r\n    to { width: 0px; };\r\n`;\r\n\r\nexport type NotificationTimerProps = Notification & {\r\n  handleClose: () => void;\r\n};\r\n\r\nexport const NotificationTimer: React.FC<NotificationTimerProps> = ({\r\n  type,\r\n  state,\r\n  timeout = '6s',\r\n  handleClose,\r\n}) => {\r\n  const color = useMemo(() => {\r\n    if (\r\n      type === NotificationType.Success ||\r\n      state === NotificationState.Success\r\n    ) {\r\n      return '#04CD95';\r\n    }\r\n    if (type === NotificationType.Error || state === NotificationState.Error) {\r\n      return '#FF646D';\r\n    }\r\n\r\n    return 'gray.500';\r\n  }, [type, state]);\r\n\r\n  if (\r\n    (type !== NotificationType.Success && type !== NotificationType.Error) ||\r\n    timeout === 'none'\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  const collapseAnimation = `${reduceWidth} ${timeout} forwards linear`;\r\n\r\n  return (\r\n    <Box\r\n      position=\"absolute\"\r\n      width=\"full\"\r\n      height={1}\r\n      bg={color}\r\n      bottom={0}\r\n      left={0}\r\n      right={0}\r\n      animation={collapseAnimation}\r\n      onAnimationEnd={handleClose}\r\n    />\r\n  );\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { MappedCapHistoryLog } from '@/integrations/cap';\r\nimport { LedgerTransaction } from '@/integrations/ledger';\r\nimport { AppTokenMetadataListObject } from '@/models';\r\nimport type { RootState } from '@/store';\r\nimport { FeatureState } from '@/store';\r\n\r\ntype ActivityEvent = MappedCapHistoryLog | LedgerTransaction;\r\n\r\ninterface ActivityViewState {\r\n  CAPstate: FeatureState;\r\n  LedgerState: FeatureState;\r\n  tokenList?: AppTokenMetadataListObject;\r\n  ledgerTransactions: LedgerTransaction[];\r\n  activityList: { [date: string]: ActivityEvent[] };\r\n  page?: number;\r\n  lastPage?: number;\r\n  fetchedPages: number[];\r\n}\r\n\r\nconst initialState: ActivityViewState = {\r\n  CAPstate: FeatureState?.Idle,\r\n  LedgerState: FeatureState?.Idle,\r\n  ledgerTransactions: [],\r\n  activityList: {},\r\n  page: undefined,\r\n  lastPage: undefined,\r\n  fetchedPages: [],\r\n};\r\n\r\nexport const activityViewSlice = createSlice({\r\n  name: 'activity',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setCAPState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.CAPstate = action.payload;\r\n    },\r\n    setLedgerState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.LedgerState = action.payload;\r\n    },\r\n    setTokenList: (\r\n      state,\r\n      action: PayloadAction<AppTokenMetadataListObject>\r\n    ) => {\r\n      state.tokenList = action.payload;\r\n    },\r\n    setPage: (state, action: PayloadAction<number>) => {\r\n      state.page = action.payload;\r\n    },\r\n    setLedgerTransactions: (\r\n      state,\r\n      action: PayloadAction<LedgerTransaction[]>\r\n    ) => {\r\n      state.ledgerTransactions = action.payload;\r\n    },\r\n    pushActivityList: (state, action: PayloadAction<MappedCapHistoryLog[]>) => {\r\n      const mergedTransactions = [\r\n        ...action.payload,\r\n        ...state.ledgerTransactions,\r\n      ] as ActivityEvent[];\r\n      const toFilterTransactions = mergedTransactions.reduce((acc, cur) => {\r\n        if ('timestamp' in cur) {\r\n          const dateString = cur['timestamp'].toDateString();\r\n          if (acc[dateString] || state.page === 0) {\r\n            acc[dateString] = [...(acc[dateString] || []), cur];\r\n          }\r\n        } else {\r\n          const dateString = new Date(cur['time']).toDateString();\r\n\r\n          acc[dateString] = [...(acc[dateString] || []), cur];\r\n        }\r\n\r\n        return acc;\r\n      }, state.activityList);\r\n\r\n      for (const key in toFilterTransactions) {\r\n        const alreadyAdded = new Set();\r\n        toFilterTransactions[key] = toFilterTransactions[key]\r\n          .filter((item) => {\r\n            const time =\r\n              'timestamp' in item ? item['timestamp'].getTime() : item['time'];\r\n            if (alreadyAdded.has(time)) {\r\n              return false;\r\n            }\r\n            alreadyAdded.add(time);\r\n            return true;\r\n          })\r\n          .sort((a, b) => {\r\n            const timeA =\r\n              'timestamp' in a ? a['timestamp'].getTime() : a['time'];\r\n            const timeB =\r\n              'timestamp' in b ? b['timestamp'].getTime() : b['time'];\r\n            return timeB - timeA;\r\n          });\r\n      }\r\n\r\n      state.activityList = toFilterTransactions;\r\n    },\r\n    setLastPage: (state, action: PayloadAction<number>) => {\r\n      state.lastPage = action.payload;\r\n      if (typeof state.page === 'undefined') {\r\n        state.page = action.payload;\r\n      }\r\n    },\r\n    pushFetchedPages: (state, action: PayloadAction<number>) => {\r\n      state.fetchedPages = Array.from(\r\n        new Set([...state.fetchedPages, action.payload])\r\n      );\r\n    },\r\n    clearActivityList: (state) => {\r\n      state.activityList = {};\r\n      state.ledgerTransactions = [];\r\n      state.page = undefined;\r\n      state.lastPage = undefined;\r\n      state.fetchedPages = [];\r\n    },\r\n  },\r\n});\r\n\r\nexport const activityViewActions = activityViewSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectActivityViewState = (state: RootState) => state.activityView;\r\n\r\nexport default activityViewSlice.reducer;\r\n","export * from './activity-view-slice';\r\nexport * from './use-activity-view-store';\r\nexport * from './use-activity-view';\r\n","import { selectActivityViewState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useActivityViewStore = () =>\r\n  useAppSelector(selectActivityViewState);\r\n","import { Principal } from '@dfinity/principal';\r\nimport { useCallback, useEffect } from 'react';\r\n\r\nimport { getUserTransactions } from '@/integrations/cap';\r\nimport { getUserLedgerTransactions } from '@/integrations/ledger';\r\nimport { FeatureState, useAppDispatch } from '@/store';\r\nimport { AppLog } from '@/utils';\r\nimport { parseResponseTokenList } from '@/utils/canister';\r\nimport { getAccountId } from '@/utils/icp';\r\n\r\nimport { useWalletStore, useSwapCanisterStore } from '..';\r\nimport { activityViewActions, useActivityViewStore } from '.';\r\n\r\nexport const useActivityView = () => {\r\n  const { principalId } = useWalletStore();\r\n  const { supportedTokenList } = useSwapCanisterStore();\r\n  const { page, lastPage, fetchedPages } = useActivityViewStore();\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!supportedTokenList) return;\r\n    dispatch(activityViewActions.setTokenList( parseResponseTokenList(supportedTokenList)));\r\n  }, [supportedTokenList, dispatch]);\r\n\r\n\r\n  const getUserTransactionsPage = useCallback(\r\n    (_principalId: string, _page?: number) => {\r\n      dispatch(activityViewActions.setCAPState(FeatureState.Loading));\r\n\r\n      getUserTransactions(_principalId, _page).then((res:any) => {\r\n          dispatch(activityViewActions.pushActivityList(res.data));\r\n          dispatch(activityViewActions.setCAPState(FeatureState.Idle));\r\n          dispatch(activityViewActions.pushFetchedPages(res.page));\r\n\r\n          if (typeof lastPage === 'undefined' || res.page > lastPage) {\r\n            dispatch(activityViewActions.setLastPage(res.page));\r\n          }\r\n        })\r\n        .catch((err:any) => {\r\n          AppLog.error(`Failed to get user transactions: page=${_page}`, err);\r\n          dispatch(activityViewActions.setCAPState(FeatureState.Error));\r\n        });\r\n    },\r\n    [dispatch, lastPage]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (principalId) {\r\n      if (typeof page !== 'undefined' && !fetchedPages.includes(page)) {\r\n        getUserTransactionsPage(principalId, page);\r\n      }\r\n    }\r\n  }, [page, principalId, dispatch, getUserTransactionsPage, fetchedPages]);\r\n\r\n  useEffect(() => {\r\n    if (principalId) {\r\n      getUserTransactionsPage(principalId);\r\n    } else {\r\n      dispatch(activityViewActions.clearActivityList());\r\n    }\r\n  }, [principalId]);\r\n\r\n  useEffect(() => {\r\n    if (principalId) {\r\n      dispatch(activityViewActions.setLedgerState(FeatureState.Loading));\r\n      getUserLedgerTransactions(getAccountId(Principal.fromText(principalId), 0)).then((transactions) => {\r\n          dispatch(activityViewActions.setLedgerState(FeatureState.Idle));\r\n          dispatch(activityViewActions.setLedgerTransactions(transactions));\r\n          dispatch(activityViewActions.pushActivityList([]));\r\n        }).catch((err) => {\r\n          AppLog.error( `Failed to get user ledger transactions: principal=${principalId}`,err);\r\n          dispatch(activityViewActions.setLedgerState(FeatureState.Error));\r\n        });\r\n    }\r\n  }, [principalId, dispatch]);\r\n};\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nimport { useAppSelector } from '@/store/hooks';\r\nimport { RootState } from '@/store/store';\r\n\r\nimport { fetchAllowance } from './async-thunk';\r\n\r\ninterface TokenAllowance {\r\n  allowance: number;\r\n  expiration: number;\r\n}\r\n\r\ninterface AllowanceState {\r\n  tokensAllowance: { [tokenId: string]: TokenAllowance };\r\n}\r\n\r\nconst initialState: AllowanceState = {\r\n  tokensAllowance: {},\r\n};\r\n\r\nexport const allowanceSlice = createSlice({\r\n  name: 'allowance',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setAllowance: (state, action) => {\r\n      const { tokenId, allowance, expiration } = action.payload;\r\n      state.tokensAllowance[tokenId] = { allowance, expiration };\r\n    },\r\n    clearAllowance: (state, action) => {\r\n      const { tokenId } = action.payload;\r\n      const { [tokenId]: _, ...rest } = state.tokensAllowance;\r\n      state.tokensAllowance = rest;\r\n    },\r\n  },\r\n});\r\n\r\nexport const allowanceActions = { ...allowanceSlice.actions, fetchAllowance };\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectAllowanceState = (state: RootState) => state.allowance;\r\n\r\nexport const useAllowanceStore = (): AllowanceState =>\r\n  useAppSelector(selectAllowanceState);\r\n\r\nexport default allowanceSlice.reducer;\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nimport { RootState } from '@/store/store';\r\nimport { AppLog , getTokenAllowance} from '@/utils';\r\n\r\nimport { allowanceActions } from '../allowance-slice';\r\n\r\ntype FetchAllowance = { tokenId: string };\r\n\r\nexport const fetchAllowance = createAsyncThunk<void, FetchAllowance>('plug/disconnect',\r\n  async ({ tokenId }, { dispatch, getState }): Promise<void> => {\r\n    const { principalId } = (getState() as RootState).dfinityWallet;\r\n    try {\r\n      if (!principalId) throw new Error('Plug is not connected');\r\n      const allowance = await getTokenAllowance(tokenId);\r\n      dispatch( allowanceActions.setAllowance({ tokenId,allowance: Number(allowance),expiration: Date.now() + 30000}) );\r\n    } catch (error) {\r\n      AppLog.error( `Allowance fetch error: token=${tokenId} principal=${principalId}`, error );\r\n      dispatch(allowanceActions.clearAllowance({ tokenId }));\r\n    }\r\n  }\r\n);\r\n","export * from './fetch-allowance';\r\n","export * from './allowance-slice';\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport type { RootState } from '@/store';\r\nimport { FeatureState } from '@/store';\r\nimport { getFromStorage, LocalStorageKey, saveToStorage } from '@/utils';\r\n\r\ninterface AssetsViewState {\r\n  isBannerOpened: boolean;\r\n  state: FeatureState;\r\n}\r\n\r\nconst initialState: AssetsViewState = {\r\n  isBannerOpened: !getFromStorage(LocalStorageKey.AssetsBannerDisabled),\r\n  state: FeatureState?.Idle,\r\n};\r\n\r\nexport const assetsViewSlice = createSlice({\r\n  name: 'assets',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setIsBannerOpened: (state, action: PayloadAction<boolean>) => {\r\n      saveToStorage(LocalStorageKey.AssetsBannerDisabled, !action.payload);\r\n      state.isBannerOpened = action.payload;\r\n    },\r\n    setState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.state = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const assetsViewActions = assetsViewSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectAssetsViewState = (state: RootState) => state.assetsView;\r\n\r\nexport default assetsViewSlice.reducer;\r\n","export * from './assets-view-slice';\r\nexport * from './use-assets-view-store';\r\n","import { selectWithdrawViewState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useWithdrawViewStore = () =>\r\n  useAppSelector(selectWithdrawViewState);\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { FeatureState, RootState } from '@/store';\r\n\r\nexport interface CyclesMintingCanisterState {\r\n  ICPXDRconversionRate?: string;\r\n  ICPXDRconversionRateState: FeatureState;\r\n}\r\n\r\nconst initialState: CyclesMintingCanisterState = {\r\n  ICPXDRconversionRate: undefined,\r\n  ICPXDRconversionRateState: 'idle' as FeatureState,\r\n};\r\n\r\nexport const cyclesMintingCanisterSlice = createSlice({\r\n  name: 'cyclesCanister',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setICPXDRConversionRate: (state, action: PayloadAction<string>) => {\r\n      state.ICPXDRconversionRate = action.payload;\r\n    },\r\n    setICPXDRConversionRateState: (\r\n      state,\r\n      action: PayloadAction<FeatureState>\r\n    ) => {\r\n      state.ICPXDRconversionRateState = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const cyclesMintingCanisterSliceActions =\r\n  cyclesMintingCanisterSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectCyclesMintingCanisterState = (state: RootState) =>\r\n  state.cyclesMinting;\r\n\r\nexport default cyclesMintingCanisterSlice.reducer;\r\n","export const DEFAULT_CYCLES_PER_XDR = 1_000_000_000_000;\r\nexport const TOKEN_SUBDIVIDABLE_BY = 100_000_000;\r\n","export * from './cycles-minting-canister-slice';\r\nexport * from './cycles-minting-canister.constants';\r\nexport * from './use-cycles-minting-canister-init';\r\nexport * from './use-cycles-minting-canister-store';\r\n","import { useCallback, useEffect } from 'react';\r\n\r\nimport { FeatureState, useAppDispatch } from '@/store';\r\nimport { AppLog } from '@/utils';\r\nimport { fetchICP2XDRConversionRate } from '@/utils/icp';\r\n\r\nimport { useKeepSync } from '../keep-sync';\r\nimport {\r\n  cyclesMintingCanisterSliceActions,\r\n  useCyclesMintingCanisterStore,\r\n} from '.';\r\n\r\nexport const useCyclesMintingCanisterInit = () => {\r\n  const { ICPXDRconversionRateState } = useCyclesMintingCanisterStore();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const getICPXDRConversionRate = useKeepSync(\r\n    'getICPXDRConversionRate',\r\n\r\n    useCallback(\r\n      async (isRefreshing?: boolean) => {\r\n        if (ICPXDRconversionRateState !== FeatureState.Loading) {\r\n          try {\r\n            dispatch(\r\n              cyclesMintingCanisterSliceActions.setICPXDRConversionRateState(\r\n                isRefreshing ? FeatureState.Updating : FeatureState.Loading\r\n              )\r\n            );\r\n\r\n            const response = await fetchICP2XDRConversionRate();\r\n\r\n            const conversionRate =\r\n              response.data.xdr_permyriad_per_icp.toString();\r\n\r\n            if (response) {\r\n              dispatch(\r\n                cyclesMintingCanisterSliceActions.setICPXDRConversionRate(\r\n                  conversionRate\r\n                )\r\n              );\r\n            } else {\r\n              throw new Error('No \"getICPXDRConversionRate\" response');\r\n            }\r\n\r\n            dispatch(\r\n              cyclesMintingCanisterSliceActions.setICPXDRConversionRateState(\r\n                FeatureState.Idle\r\n              )\r\n            );\r\n\r\n            return response;\r\n          } catch (error) {\r\n            AppLog.error(`ICP XDR conversion rate fetch error`, error);\r\n            dispatch(\r\n              cyclesMintingCanisterSliceActions.setICPXDRConversionRateState(\r\n                FeatureState.Error\r\n              )\r\n            );\r\n          }\r\n        }\r\n      },\r\n      [ICPXDRconversionRateState, dispatch]\r\n    )\r\n  );\r\n\r\n  useEffect(() => {\r\n    getICPXDRConversionRate();\r\n    // getICPXDRConversionRate cannot be added to the dependencies array\r\n    // because it is causing an infinite loop\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n};\r\n","import { selectCyclesMintingCanisterState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useCyclesMintingCanisterStore = () =>\r\n  useAppSelector(selectCyclesMintingCanisterState);\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport type { RootState } from '@/store';\r\nimport { FeatureState } from '@/store';\r\n\r\ninterface DepositViewState {\r\n  state: FeatureState;\r\n  amount: string;\r\n  tokenId?: string;\r\n}\r\n\r\nconst initialState: DepositViewState = {\r\n  state: FeatureState?.Idle,\r\n  amount: '',\r\n  tokenId: undefined,\r\n};\r\n\r\nexport const depositViewSlice = createSlice({\r\n  name: 'deposit',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.state = action.payload;\r\n    },\r\n    setAmount: (state, action: PayloadAction<string>) => {\r\n      state.amount = action.payload;\r\n    },\r\n    setTokenId: (state, action: PayloadAction<string>) => {\r\n      state.tokenId = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const depositViewActions = depositViewSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectDepositViewState = (state: RootState) => state.depositView;\r\n\r\nexport default depositViewSlice.reducer;\r\n","export * from './deposit-view-slice';\r\nexport * from './use-deposit-view-store';\r\n","import { selectDepositViewState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useDepositViewStore = () => { return  useAppSelector(selectDepositViewState); }\r\n","export * from './wallet-slice';","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport type { RootState } from '@/store';\r\nimport { useAppSelector } from '@/store/hooks';\r\n\r\nexport enum walletState {\r\n  Idle,\r\n  OpenWalletList,\r\n  Disconnected,\r\n  Loading,\r\n  Connecting,\r\n  Connected,\r\n}\r\n\r\ninterface DfinityWalletStoreState {\r\n  state: walletState;\r\n  principalId?: string;\r\n  accountId?:string;\r\n  accounts?:string[];\r\n  isConnected: boolean;\r\n  walletConnected?:string;\r\n  walletSelected?:string;\r\n}\r\n\r\nconst initialState: DfinityWalletStoreState = {\r\n  principalId: undefined,\r\n  accountId:undefined,\r\n  state: walletState.Idle,\r\n  isConnected: false,\r\n  walletConnected:undefined\r\n};\r\n\r\nexport const walletSlice = createSlice({\r\n  name: 'difintywallet',\r\n  initialState,\r\n  reducers: {\r\n    resetWallet:(state, action:PayloadAction)=>{\r\n      state.principalId=undefined;\r\n      state.accountId=undefined\r\n      state.state= walletState.Idle,\r\n      state.isConnected=false\r\n      state.walletConnected=undefined;\r\n      state.walletSelected=undefined;\r\n    },\r\n    setWalletLoaded: (state, action: PayloadAction< { principleId: string, accountId: string , walletActive:string }>) => {\r\n      const { principleId, accountId , walletActive } = action.payload;\r\n      if(!principleId || !accountId ) return ;\r\n      state.principalId = principleId;\r\n      state.accountId = accountId;\r\n      state.isConnected = true;\r\n      state.walletConnected = walletActive;\r\n      state.state = walletState.Connected;\r\n    },\r\n    setState: ( state, action: PayloadAction<walletState.Disconnected | walletState.Loading | walletState.Idle>) => {\r\n      state.state = action.payload;\r\n      state.principalId = undefined;\r\n      state.isConnected = false;\r\n    },\r\n    setOnwalletList:(state , action:PayloadAction<walletState>)=>{\r\n      state.state = action.payload;\r\n    },\r\n    setWalletSelected:(state , action:PayloadAction<string>)=>{\r\n      state.walletSelected = action.payload;\r\n    }\r\n  },\r\n});\r\n\r\nexport const walletActions = { ...walletSlice.actions};\r\n\r\nconst selectWalletState = (state: RootState): DfinityWalletStoreState => state.dfinityWallet;\r\n\r\nexport const useWalletStore = (): DfinityWalletStoreState =>useAppSelector(selectWalletState);\r\n\r\nexport default walletSlice.reducer;\r\n","export * from './activity-view';\r\nexport * from './assets-view';\r\nexport * from './cycles-minting-canister';\r\nexport * from './deposit-view';\r\nexport * from './keep-sync';\r\nexport * from './liquidity-view';\r\nexport * from './modals';\r\nexport * from './notification';\r\n\r\nexport * from './price';\r\nexport * from './swap-canister';\r\nexport * from './swap-view';\r\nexport * from './withdraw-view';\r\nexport * from './allowance';\r\nexport * from './dfinitywallet';\r\nexport * from './transfer-view';","export * from './keep-sync-slice';\r\nexport * from './use-keep-sync';\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { RootState, store } from '@/store';\r\n\r\nexport const KEEP_SYNC_DEFAULT_INTERVAL = 15 * 1000;\r\n\r\nexport type KeepSync = {\r\n  callback: (refresh?: boolean) => Promise<any>;\r\n  interval: number;\r\n};\r\n\r\ntype TriggerAction = {\r\n  key: string;\r\n  interval?: KeepSync['interval'];\r\n};\r\n\r\ntype SetCallbackAction = {\r\n  key: string;\r\n  callback: KeepSync['callback'];\r\n};\r\n\r\n// Define a type for the slice state\r\ninterface KeepSyncState {\r\n  timers: {\r\n    [key: string]: NodeJS.Timeout;\r\n  };\r\n  callbacks: {\r\n    [key: string]: KeepSync['callback'];\r\n  };\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: KeepSyncState = {\r\n  timers: {},\r\n  callbacks: {},\r\n};\r\n\r\nexport const keepSyncSlice = createSlice({\r\n  name: 'keepSync',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    trigger: (state, action: PayloadAction<TriggerAction>) => {\r\n      const { key, interval = KEEP_SYNC_DEFAULT_INTERVAL } = action.payload;\r\n\r\n      if (state.timers[key]) clearInterval(state.timers[key]);\r\n      state.timers[key] = setInterval(() => {\r\n        store.getState().keepSync.callbacks[key](true);\r\n      }, interval);\r\n    },\r\n    setCallback: (state, action: PayloadAction<SetCallbackAction>) => {\r\n      const { key, callback } = action.payload;\r\n      state.callbacks[key] = callback;\r\n    },\r\n  },\r\n});\r\n\r\nexport const keepSyncActions = keepSyncSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectKeepSyncState = (state: RootState) => state.keepSync;\r\n\r\nexport default keepSyncSlice.reducer;\r\n","import { useEffect } from 'react';\r\n\r\nimport { useAppDispatch } from '@/store';\r\n\r\nimport { KeepSync, keepSyncActions } from './keep-sync-slice';\r\n\r\nexport type KeepSyncCallbackParams = {\r\n  interval?: number;\r\n  isRefreshing?: boolean;\r\n};\r\n\r\nexport type KeepSyncParams = {\r\n  interval?: number;\r\n};\r\n\r\nexport const useKeepSync = (\r\n  key: string,\r\n  runner: KeepSync['callback'],\r\n  { interval }: KeepSyncParams = {}\r\n) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(keepSyncActions.setCallback({ key, callback: runner }));\r\n  }, [runner]);\r\n\r\n  return ({\r\n    interval: _interval = interval,\r\n    isRefreshing = true,\r\n  }: KeepSyncCallbackParams = {}) => {\r\n    runner(isRefreshing);\r\n    dispatch(keepSyncActions.trigger({ key, interval: _interval }));\r\n  };\r\n};\r\n","export * from './liquidity-view-slice';\r\nexport * from './use-liquidity-view-init';\r\nexport * from './use-liquidity-view-store';\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { AppTokenMetadata, BaseTokenData, Pair } from '@/models';\r\nimport { FeatureState, RootState } from '@/store';\r\nimport { getFromStorage, LocalStorageKey, saveToStorage } from '@/utils';\r\n\r\nexport type LiquidityTokenDataKey = 'token0' | 'token1';\r\n\r\ninterface LiquidityViewState {\r\n  isBannerOpened: boolean;\r\n  pairState: FeatureState;\r\n  state: FeatureState;\r\n  token0: BaseTokenData;\r\n  token1: BaseTokenData;\r\n  removeAmountPercentage: number;\r\n  pair?: Pair;\r\n  slippage: string;\r\n  keepInSonic: boolean;\r\n}\r\n\r\nexport const INITIAL_LIQUIDITY_SLIPPAGE = '0.50';\r\n\r\nconst initialState: LiquidityViewState = {\r\n  isBannerOpened: !getFromStorage(LocalStorageKey.LiquidityBannerDisabled),\r\n  pair: undefined,\r\n  pairState: 'not-started' as FeatureState,\r\n  state: 'not-started' as FeatureState,\r\n  removeAmountPercentage: 100,\r\n  token0: {\r\n    metadata: undefined,\r\n    value: '',\r\n  },\r\n  token1: {\r\n    metadata: undefined,\r\n    value: '',\r\n  },\r\n  slippage: INITIAL_LIQUIDITY_SLIPPAGE,\r\n  keepInSonic: false,\r\n};\r\n\r\nexport const liquidityViewSlice = createSlice({\r\n  name: 'liquidity',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setIsBannerOpened: (state, action: PayloadAction<boolean>) => {\r\n      saveToStorage(LocalStorageKey.LiquidityBannerDisabled, !action.payload);\r\n      state.isBannerOpened = action.payload;\r\n    },\r\n    setState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.state = action.payload;\r\n    },\r\n    setPairState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.pairState = action.payload;\r\n    },\r\n    setRemoveAmountPercentage: (state, action: PayloadAction<number>) => {\r\n      state.removeAmountPercentage = action.payload;\r\n    },\r\n    setKeepInSonic: (state, action: PayloadAction<boolean>) => {\r\n      state.keepInSonic = action.payload;\r\n    },\r\n    setValue: (\r\n      state,\r\n      action: PayloadAction<{ data: LiquidityTokenDataKey; value: string }>\r\n    ) => {\r\n      state[action.payload.data].value = action.payload.value;\r\n    },\r\n    setToken: (\r\n      state,\r\n      action: PayloadAction<{\r\n        data: LiquidityTokenDataKey;\r\n        token?: AppTokenMetadata;\r\n      }>\r\n    ) => {\r\n      state[action.payload.data].metadata = action.payload.token;\r\n    },\r\n    setPair: (state, action: PayloadAction<Pair | undefined>) => {\r\n      if (\r\n        action.payload &&\r\n        state.token0.metadata?.id === action.payload.token1\r\n      ) {\r\n        state.pair = {\r\n          ...action.payload,\r\n          token0: action.payload.token1,\r\n          token1: action.payload.token0,\r\n          reserve0: action.payload.reserve1,\r\n          reserve1: action.payload.reserve0,\r\n        };\r\n      } else {\r\n        state.pair = action.payload;\r\n      }\r\n    },\r\n    setSlippage: (state, action: PayloadAction<string>) => {\r\n      state.slippage = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const liquidityViewActions = liquidityViewSlice.actions;\r\nexport const selectLiquidityViewState = (state: RootState) =>\r\n  state.liquidityView;\r\n\r\nexport default liquidityViewSlice.reducer;\r\n","import { useCallback, useEffect } from 'react';\r\n\r\n// import { ENV } from '@/config';\r\nimport { Pair } from '@/models';\r\nimport { useAppDispatch } from '@/store';\r\n\r\nimport { useSwapCanisterStore } from '..';\r\nimport { liquidityViewActions, useLiquidityViewStore } from '.';\r\n\r\nexport const useLiquidityViewInit = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { token0, token1 } = useLiquidityViewStore();\r\n  const { supportedTokenList, allPairs } = useSwapCanisterStore();\r\n\r\n  const getPair = useCallback(async () => {\r\n    if (token0.metadata?.id && token1.metadata?.id) {\r\n      if (allPairs) {\r\n        const localPair = allPairs[token0.metadata.id]?.[token1.metadata.id] as unknown as Pair;\r\n        if (localPair) return dispatch(liquidityViewActions.setPair(localPair));\r\n      }\r\n    }\r\n    return dispatch(liquidityViewActions.setPair(undefined));\r\n  }, [dispatch, token0.metadata?.id, token1.metadata?.id, allPairs]);\r\n\r\n  useEffect(() => {\r\n    if (supportedTokenList && !token0.metadata?.id) {\r\n      const token = supportedTokenList[0];\r\n      dispatch(liquidityViewActions.setToken({ data: 'token0', token }));\r\n    }\r\n  }, [supportedTokenList, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (token0.metadata?.id && token1.metadata?.id) {\r\n      getPair();\r\n    }\r\n  }, [token0.metadata?.id, token1.metadata?.id, getPair]);\r\n};\r\n","import { selectLiquidityViewState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useLiquidityViewStore = () =>\r\n  useAppSelector(selectLiquidityViewState);\r\n","export * from './modals-slice';\r\nexport * from './use-modals-store';\r\nexport * from './use-token-modal-opener';\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { Batch } from '@/integrations/transactions';\r\nimport type { RootState } from '@/store';\r\n\r\nexport type ModalsCallback = (...args: unknown[]) => any;\r\n\r\nexport enum MintTokenSymbol {\r\n  XTC = 'XTC',\r\n  WICP = 'WICP',\r\n}\r\n\r\nexport enum MintModalDataStep {\r\n  LedgerTransfer = 'ledgerTransfer',\r\n  Mint = 'mint',\r\n  Approve = 'approve',\r\n  Deposit = 'deposit',\r\n}\r\n\r\nexport type MintModalData<\r\n  RetryCallback = ModalsCallback,\r\n  CancelCallback = ModalsCallback\r\n> = {\r\n  step?: MintModalDataStep | Batch.DefaultHookState;\r\n  steps?: (MintModalDataStep | Batch.DefaultHookState)[];\r\n  callbacks?: [RetryCallback, CancelCallback];\r\n};\r\n\r\nexport enum WithdrawWICPModalDataStep {\r\n  Withdraw = 'withdraw',\r\n  WithdrawWICP = 'withdrawWICP',\r\n}\r\nexport type WithdrawWICPModalData = {\r\n  step?: WithdrawWICPModalDataStep | Batch.DefaultHookState;\r\n  steps?: (WithdrawWICPModalDataStep | Batch.DefaultHookState)[];\r\n  callbacks?: [ModalsCallback, ModalsCallback];\r\n};\r\n\r\nexport enum SwapModalDataStep {\r\n  Getacnt= 'getacnt',\r\n  Approve = 'approve',\r\n  Deposit = 'deposit',\r\n  Swap = 'swap',\r\n  Withdraw = 'withdraw',\r\n}\r\nexport type SwapModalData = {\r\n  step?: SwapModalDataStep | Batch.DefaultHookState;\r\n  steps?: (SwapModalDataStep | Batch.DefaultHookState)[];\r\n  fromTokenSymbol?: string;\r\n  toTokenSymbol?: string;\r\n  callbacks?: [ModalsCallback, ModalsCallback, ModalsCallback];\r\n};\r\n\r\nexport enum DepositModalDataStep {\r\n  Approve = 'approve',\r\n  Deposit = 'deposit',\r\n  Getacnt = 'getacnt'\r\n\r\n}\r\n\r\nexport type DepositModalData = {\r\n  step?: DepositModalDataStep | Batch.DefaultHookState;\r\n  steps?: (DepositModalDataStep | Batch.DefaultHookState)[];\r\n  tokenSymbol?: string;\r\n  callbacks?: [ModalsCallback, ModalsCallback];\r\n};\r\n\r\nexport enum WithdrawModalDataStep {\r\n  Withdraw = 'withdraw',\r\n}\r\nexport type WithdrawModalData = {\r\n  step?: WithdrawModalDataStep | Batch.DefaultHookState;\r\n  steps?: (WithdrawModalDataStep | Batch.DefaultHookState)[];\r\n  tokenSymbol?: string;\r\n  callbacks?: [ModalsCallback, ModalsCallback];\r\n};\r\n\r\nexport enum TransferModalDataStep {\r\n  Transfer = 'transfer',\r\n}\r\n\r\nexport type TransferModalData = {\r\n  step?: TransferModalDataStep | Batch.DefaultHookState;\r\n  steps?: (TransferModalDataStep | Batch.DefaultHookState)[];\r\n  tokenSymbol?: string;\r\n  callbacks?: [ModalsCallback, ModalsCallback];\r\n};\r\n\r\n\r\nexport enum AddLiquidityModalDataStep {\r\n  Getacnt = 'getacnt',\r\n  Approve0 = 'approve0',\r\n  Deposit0 = 'deposit0',\r\n  Approve1 = 'approve1',\r\n  Deposit1 = 'deposit1',\r\n  CreatePair = 'createPair',\r\n  AddLiquidity = 'addLiquidity',\r\n}\r\nexport type AddLiquidityModalData = {\r\n  step?: AddLiquidityModalDataStep | Batch.DefaultHookState;\r\n  steps?: (AddLiquidityModalDataStep | Batch.DefaultHookState)[];\r\n  token0Symbol?: string;\r\n  token1Symbol?: string;\r\n  callbacks?: [ModalsCallback, ModalsCallback];\r\n};\r\n\r\nexport enum RemoveLiquidityModalDataStep {\r\n  RemoveLiquidity = 'removeLiquidity',\r\n  Withdraw0 = 'withdraw0',\r\n  Withdraw1 = 'withdraw1',\r\n}\r\nexport type RemoveLiquidityModalData = {\r\n  step?: RemoveLiquidityModalDataStep | Batch.DefaultHookState;\r\n  steps?: (RemoveLiquidityModalDataStep | Batch.DefaultHookState)[];\r\n  token0Symbol?: string;\r\n  token1Symbol?: string;\r\n  callbacks?: [ModalsCallback, ModalsCallback];\r\n};\r\n\r\nexport type AllowanceVerifyModalData = {\r\n  tokenSymbol?: string | string[];\r\n  callbacks?: [ModalsCallback, ModalsCallback];\r\n};\r\n\r\nexport type TermsAndConditionsModalData = {\r\n  callbacks?: [ModalsCallback, ModalsCallback];\r\n};\r\n\r\ntype TokenSelectData = {\r\n  tokens: string;\r\n  selectedTokenIds?: string[];\r\n  isLoading?: boolean;\r\n  allowAddToken?: boolean;\r\n  onSelect: (tokenId?: string) => void;\r\n};\r\n\r\n// Define a type for the slice state\r\ninterface ModalsState {\r\n  mintXTCUncompleteBlockHeights?: string[];\r\n  mintWICPUncompleteBlockHeights?: string[];\r\n\r\n  mintManualModalOpened: boolean;\r\n  mintManualModalErrorMessage: string;\r\n  mintManualBlockHeight: string;\r\n  mintManualTokenSymbol: MintTokenSymbol;\r\n\r\n  isMintXTCProgressModalOpened: boolean;\r\n  isMintXTCFailModalOpened: boolean;\r\n  mintXTCModalData: MintModalData;\r\n\r\n  isMintWICPProgressModalOpened: boolean;\r\n  isMintWICPFailModalOpened: boolean;\r\n  mintWICPModalData: MintModalData;\r\n\r\n  isWithdrawWICPProgressModalOpened: boolean;\r\n  isWithdrawWICPFailModalOpened: boolean;\r\n  withdrawWICPModalData: WithdrawWICPModalData;\r\n\r\n  isSwapProgressModalOpened: boolean;\r\n  isSwapFailModalOpened: boolean;\r\n  swapModalData: SwapModalData;\r\n\r\n  isDepositProgressModalOpened: boolean;\r\n  isDepositFailModalOpened: boolean;\r\n  depositModalData: DepositModalData;\r\n\r\n  transferModalData: TransferModalData;\r\n  isTransferProgressModalOpened: boolean;\r\n\r\n  isWithdrawProgressModalOpened: boolean;\r\n  isWithdrawFailModalOpened: boolean;\r\n  withdrawModalData: WithdrawModalData;\r\n\r\n  isAddLiquidityProgressModalOpened: boolean;\r\n  isAddLiquidityFailModalOpened: boolean;\r\n  addLiquidityModalData: AddLiquidityModalData;\r\n\r\n  isRemoveLiquidityProgressModalOpened: boolean;\r\n  isRemoveLiquidityFailModalOpened: boolean;\r\n  removeLiquidityModalData: RemoveLiquidityModalData;\r\n\r\n  isTokenSelectModalModalOpened: boolean;\r\n  tokenSelectModalData: TokenSelectData;\r\n\r\n  isRemoveLiquidityModalOpened: boolean;\r\n\r\n  isAllowanceVerifyModalOpened: boolean;\r\n  allowanceModalData: AllowanceVerifyModalData;\r\n\r\n  isTermsAndConditionsModalOpened: boolean;\r\n  termsAndConditionsModalData: TermsAndConditionsModalData;\r\n}\r\n\r\nconst initialMintXTCModalData: MintModalData = {\r\n  step: undefined,\r\n};\r\n\r\nconst initialMintWICPModalData: MintModalData = {\r\n  step: undefined,\r\n};\r\n\r\nconst initialWithdrawWICPModalData: WithdrawWICPModalData = {\r\n  step: undefined,\r\n};\r\n\r\nconst initialSwapModalData: SwapModalData = {\r\n  step: undefined,\r\n};\r\n\r\nconst initialDepositModalData: DepositModalData = {\r\n  step: undefined,\r\n};\r\n\r\n\r\nconst initialTransferModalData: TransferModalData= {\r\n  step: undefined,\r\n};\r\n\r\nconst initialWithdrawModalData: WithdrawModalData = {\r\n  step: undefined,\r\n};\r\n\r\nconst initialAddLiquidityModalData: AddLiquidityModalData = {\r\n  step: undefined,\r\n};\r\n\r\nconst initialRemoveLiquidityModalData: RemoveLiquidityModalData = {\r\n  step: undefined,\r\n};\r\n\r\nconst initialTokenSelectData: TokenSelectData = {\r\n  onSelect: () => null,\r\n  tokens: '[]',\r\n  selectedTokenIds: [],\r\n  isLoading: false,\r\n  allowAddToken: true,\r\n};\r\n\r\n// Define the initial state using that type\r\nconst initialState: ModalsState = {\r\n  mintManualModalOpened: false,\r\n  mintManualModalErrorMessage: '',\r\n  mintManualTokenSymbol: MintTokenSymbol.WICP,\r\n  mintManualBlockHeight: '',\r\n\r\n  isMintXTCProgressModalOpened: false,\r\n  isMintXTCFailModalOpened: false,\r\n  mintXTCModalData: initialMintXTCModalData,\r\n  mintXTCUncompleteBlockHeights: undefined,\r\n\r\n  isMintWICPProgressModalOpened: false,\r\n  isMintWICPFailModalOpened: false,\r\n  mintWICPModalData: initialMintWICPModalData,\r\n  mintWICPUncompleteBlockHeights: undefined,\r\n\r\n  isWithdrawWICPProgressModalOpened: false,\r\n  isWithdrawWICPFailModalOpened: false,\r\n  withdrawWICPModalData: initialWithdrawWICPModalData,\r\n\r\n  isSwapProgressModalOpened: false,\r\n  isSwapFailModalOpened: false,\r\n  swapModalData: initialSwapModalData,\r\n\r\n  isDepositProgressModalOpened: false,\r\n  isDepositFailModalOpened: false,\r\n  depositModalData: initialDepositModalData,\r\n\r\n  isTransferProgressModalOpened:false,\r\n  transferModalData: initialTransferModalData,\r\n  \r\n  isWithdrawProgressModalOpened: false,\r\n  isWithdrawFailModalOpened: false,\r\n  withdrawModalData: initialWithdrawModalData,\r\n\r\n  isAddLiquidityProgressModalOpened: false,\r\n  isAddLiquidityFailModalOpened: false,\r\n  addLiquidityModalData: initialAddLiquidityModalData,\r\n\r\n  isRemoveLiquidityProgressModalOpened: false,\r\n  isRemoveLiquidityFailModalOpened: false,\r\n  removeLiquidityModalData: initialRemoveLiquidityModalData,\r\n\r\n  isTokenSelectModalModalOpened: false,\r\n  tokenSelectModalData: initialTokenSelectData,\r\n\r\n  isRemoveLiquidityModalOpened: false,\r\n\r\n  isAllowanceVerifyModalOpened: false,\r\n  allowanceModalData: {},\r\n\r\n  isTermsAndConditionsModalOpened: false,\r\n  termsAndConditionsModalData: {},\r\n};\r\n\r\nexport const modalsSlice = createSlice({\r\n  name: 'modals',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setMintManualTokenSymbol: (\r\n      state,\r\n      action: PayloadAction<MintTokenSymbol>\r\n    ) => {\r\n      state.mintManualTokenSymbol = action.payload;\r\n    },\r\n    setMintManualBlockHeight: (state, action: PayloadAction<string>) => {\r\n      state.mintManualBlockHeight = action.payload;\r\n    },\r\n    setMintManualModalErrorMessage: (state, action: PayloadAction<string>) => {\r\n      state.mintManualModalErrorMessage = action.payload;\r\n    },\r\n    openMintManualModal: (state) => {\r\n      state.mintManualModalOpened = true;\r\n    },\r\n    closeMintManualModal: (state) => {\r\n      state.mintManualModalOpened = false;\r\n    },\r\n\r\n    openMintXTCProgressModal: (state) => {\r\n      state.isMintXTCProgressModalOpened = true;\r\n    },\r\n    closeMintXTCProgressModal: (state) => {\r\n      state.isMintXTCProgressModalOpened = false;\r\n    },\r\n    openMintXTCFailModal: (state) => {\r\n      state.isMintXTCFailModalOpened = true;\r\n    },\r\n    closeMintXTCFailModal: (state) => {\r\n      state.isMintXTCFailModalOpened = false;\r\n    },\r\n    clearMintXTCModalData: (state) => {\r\n      state.mintXTCModalData = initialMintXTCModalData;\r\n    },\r\n    setMintXTCModalData: (state, action: PayloadAction<MintModalData>) => {\r\n      state.mintXTCModalData = {\r\n        ...state.mintXTCModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n    setMintXTCUncompleteBlockHeights: (\r\n      state,\r\n      action: PayloadAction<string[]>\r\n    ) => {\r\n      state.mintXTCUncompleteBlockHeights = action.payload;\r\n    },\r\n    addMintXTCUncompleteBlockHeight: (state, action: PayloadAction<string>) => {\r\n      if (state.mintXTCUncompleteBlockHeights === undefined) {\r\n        state.mintXTCUncompleteBlockHeights = [];\r\n      }\r\n      state.mintXTCUncompleteBlockHeights.push(action.payload);\r\n    },\r\n\r\n    openMintWICPProgressModal: (state) => {\r\n      state.isMintWICPProgressModalOpened = true;\r\n    },\r\n    closeMintWICPProgressModal: (state) => {\r\n      state.isMintWICPProgressModalOpened = false;\r\n    },\r\n    openMintWICPFailModal: (state) => {\r\n      state.isMintWICPFailModalOpened = true;\r\n    },\r\n    closeMintWICPFailModal: (state) => {\r\n      state.isMintWICPFailModalOpened = false;\r\n    },\r\n    clearMintWICPModalData: (state) => {\r\n      state.mintWICPModalData = initialMintWICPModalData;\r\n    },\r\n    setMintWICPModalData: (state, action: PayloadAction<MintModalData>) => {\r\n      state.mintWICPModalData = {\r\n        ...state.mintWICPModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n    setMintWICPUncompleteBlockHeights: (\r\n      state,\r\n      action: PayloadAction<string[]>\r\n    ) => {\r\n      state.mintWICPUncompleteBlockHeights = action.payload;\r\n    },\r\n    addMintWICPUncompleteBlockHeight: (\r\n      state,\r\n      action: PayloadAction<string>\r\n    ) => {\r\n      if (state.mintWICPUncompleteBlockHeights === undefined) {\r\n        state.mintWICPUncompleteBlockHeights = [];\r\n      }\r\n      state.mintWICPUncompleteBlockHeights.push(action.payload);\r\n    },\r\n\r\n    openWithdrawWICPProgressModal: (state) => {\r\n      state.isWithdrawWICPProgressModalOpened = true;\r\n    },\r\n    closeWithdrawWICPProgressModal: (state) => {\r\n      state.isWithdrawWICPProgressModalOpened = false;\r\n    },\r\n    openWithdrawWICPFailModal: (state) => {\r\n      state.isWithdrawWICPFailModalOpened = true;\r\n    },\r\n    closeWithdrawWICPFailModal: (state) => {\r\n      state.isWithdrawWICPFailModalOpened = false;\r\n    },\r\n    clearWithdrawWICPModalData: (state) => {\r\n      state.withdrawWICPModalData = initialWithdrawWICPModalData;\r\n    },\r\n    setWithdrawWICPModalData: (\r\n      state,\r\n      action: PayloadAction<WithdrawWICPModalData>\r\n    ) => {\r\n      state.withdrawWICPModalData = {\r\n        ...state.withdrawWICPModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n\r\n    openSwapProgressModal: (state) => {\r\n      state.isSwapProgressModalOpened = true;\r\n    },\r\n    closeSwapProgressModal: (state) => {\r\n      state.isSwapProgressModalOpened = false;\r\n    },\r\n    openSwapFailModal: (state) => {\r\n      state.isSwapFailModalOpened = true;\r\n    },\r\n    closeSwapFailModal: (state) => {\r\n      state.isSwapFailModalOpened = false;\r\n    },\r\n    clearSwapModalData: (state) => {\r\n      state.swapModalData = initialSwapModalData;\r\n    },\r\n    setSwapModalData: (state, action: PayloadAction<SwapModalData>) => {\r\n      state.swapModalData = {\r\n        ...state.swapModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n\r\n    openDepositProgressModal: (state) => {\r\n      state.isDepositProgressModalOpened = true;\r\n    },\r\n    closeDepositProgressModal: (state) => {\r\n      state.isDepositProgressModalOpened = false;\r\n    },\r\n    openDepositFailModal: (state) => {\r\n      state.isDepositFailModalOpened = true;\r\n    },\r\n\r\n    closeDepositFailModal: (state) => {\r\n      state.isDepositFailModalOpened = false;\r\n    },\r\n    clearDepositModalData: (state) => {\r\n      state.depositModalData = initialDepositModalData;\r\n    },\r\n    setDepositModalData: (state, action: PayloadAction<DepositModalData>) => {\r\n      state.depositModalData = {\r\n        ...state.depositModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n\r\n    setTransferModalData: (state, action: PayloadAction<TransferModalData>) => {\r\n      state.transferModalData = { ...state.transferModalData, ...action.payload};\r\n    },\r\n    openTransferProgressModal: (state) => {\r\n      state.isTransferProgressModalOpened = true;\r\n    },\r\n    closeTransferProgressModal: (state) => {\r\n      state.isTransferProgressModalOpened = false;\r\n    },\r\n    clearTransferModalData: (state) => {\r\n      state.transferModalData = initialTransferModalData;\r\n    },\r\n\r\n    openWithdrawProgressModal: (state) => {\r\n      state.isWithdrawProgressModalOpened = true;\r\n    },\r\n    closeWithdrawProgressModal: (state) => {\r\n      state.isWithdrawProgressModalOpened = false;\r\n    },\r\n    openWithdrawFailModal: (state) => {\r\n      state.isWithdrawFailModalOpened = true;\r\n    },\r\n    closeWithdrawFailModal: (state) => {\r\n      state.isWithdrawFailModalOpened = false;\r\n    },\r\n    clearWithdrawModalData: (state) => {\r\n      state.withdrawModalData = initialWithdrawModalData;\r\n    },\r\n    setWithdrawModalData: (state, action: PayloadAction<WithdrawModalData>) => {\r\n      state.withdrawModalData = {\r\n        ...state.withdrawModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n\r\n    openAddLiquidityProgressModal: (state) => {\r\n      state.isAddLiquidityProgressModalOpened = true;\r\n    },\r\n    closeAddLiquidityProgressModal: (state) => {\r\n      state.isAddLiquidityProgressModalOpened = false;\r\n    },\r\n    openAddLiquidityFailModal: (state) => {\r\n      state.isAddLiquidityFailModalOpened = true;\r\n    },\r\n    closeAddLiquidityFailModal: (state) => {\r\n      state.isAddLiquidityFailModalOpened = false;\r\n    },\r\n    clearAddLiquidityModalData: (state) => {\r\n      state.addLiquidityModalData = initialAddLiquidityModalData;\r\n    },\r\n    setAddLiquidityModalData: (\r\n      state,\r\n      action: PayloadAction<AddLiquidityModalData>\r\n    ) => {\r\n      state.addLiquidityModalData = {\r\n        ...state.addLiquidityModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n\r\n    openRemoveLiquidityProgressModal: (state) => {\r\n      state.isRemoveLiquidityProgressModalOpened = true;\r\n    },\r\n    closeRemoveLiquidityProgressModal: (state) => {\r\n      state.isRemoveLiquidityProgressModalOpened = false;\r\n    },\r\n    openRemoveLiquidityFailModal: (state) => {\r\n      state.isRemoveLiquidityFailModalOpened = true;\r\n    },\r\n    closeRemoveLiquidityFailModal: (state) => {\r\n      state.isRemoveLiquidityFailModalOpened = false;\r\n    },\r\n    clearRemoveLiquidityModalData: (state) => {\r\n      state.removeLiquidityModalData = initialRemoveLiquidityModalData;\r\n    },\r\n    setRemoveLiquidityModalData: (\r\n      state,\r\n      action: PayloadAction<RemoveLiquidityModalData>\r\n    ) => {\r\n      state.removeLiquidityModalData = {\r\n        ...state.removeLiquidityModalData,\r\n        ...action.payload,\r\n      };\r\n    },\r\n\r\n    openTokenSelectModal: (state) => {\r\n      state.isTokenSelectModalModalOpened = true;\r\n    },\r\n    closeTokenSelectModal: (state) => {\r\n      state.isTokenSelectModalModalOpened = false;\r\n    },\r\n    clearTokenSelectModalData: (state) => {\r\n      state.tokenSelectModalData = initialTokenSelectData;\r\n    },\r\n    setTokenSelectModalData: (\r\n      state,\r\n      action: PayloadAction<TokenSelectData>\r\n    ) => {\r\n      state.tokenSelectModalData = action.payload;\r\n    },\r\n\r\n    openRemoveLiquidityModal: (state) => {\r\n      state.isRemoveLiquidityModalOpened = true;\r\n    },\r\n    closeRemoveLiquidityModal: (state) => {\r\n      state.isRemoveLiquidityModalOpened = false;\r\n    },\r\n\r\n    openAllowanceVerifyModal: (state) => {\r\n      state.isAllowanceVerifyModalOpened = true;\r\n    },\r\n    closeAllowanceVerifyModal: (state) => {\r\n      state.isAllowanceVerifyModalOpened = false;\r\n    },\r\n    setAllowanceVerifyModalData: (\r\n      state,\r\n      action: PayloadAction<AllowanceVerifyModalData>\r\n    ) => {\r\n      state.allowanceModalData = action.payload;\r\n    },\r\n\r\n    openTermsAndConditionsModal: (state) => {\r\n      state.isTermsAndConditionsModalOpened = true;\r\n    },\r\n    closeTermsAndConditionsModal: (state) => {\r\n      state.isTermsAndConditionsModalOpened = false;\r\n    },\r\n    setTermsAndConditionsModalData: (\r\n      state,\r\n      action: PayloadAction<TermsAndConditionsModalData>\r\n    ) => {\r\n      state.termsAndConditionsModalData = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const modalsSliceActions = modalsSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectModalsState = (state: RootState) => state.modals;\r\n\r\nexport default modalsSlice.reducer;\r\n","import { selectModalsState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useModalsStore = () => useAppSelector(selectModalsState);\r\n","import { serialize } from '@sonicdex/sonic-js';\r\n\r\nimport { AppTokenMetadata } from '@/models';\r\nimport { useAppDispatch } from '@/store';\r\n\r\nimport { modalsSliceActions } from '.';\r\n\r\ntype OpenSelectTokenModalOptions = {\r\n  metadata?: AppTokenMetadata[];\r\n  onSelect: (tokenId?: string) => void;\r\n  selectedTokenIds?: string[];\r\n};\r\n\r\nexport const useTokenModalOpener = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const openSelectTokenModal = ({\r\n    metadata,\r\n    onSelect,\r\n    selectedTokenIds,\r\n  }: OpenSelectTokenModalOptions) => {\r\n    dispatch(\r\n      modalsSliceActions.setTokenSelectModalData({\r\n        tokens: serialize(metadata),\r\n        onSelect,\r\n        selectedTokenIds,\r\n        // Add when we have a custom token selector\r\n        allowAddToken: false,\r\n      })\r\n    );\r\n    dispatch(modalsSliceActions.openTokenSelectModal());\r\n  };\r\n\r\n  return openSelectTokenModal;\r\n};\r\n","export * from './notification-slice';\r\nexport * from './use-notification-store';\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport React from 'react';\r\n\r\nimport type { RootState } from '@/store';\r\nimport { FeatureState } from '@/store';\r\n\r\nexport enum NotificationType {\r\n  Success,\r\n  Error,\r\n  Deposit,\r\n  Withdraw,\r\n  Transfer,\r\n  Swap,\r\n  AddLiquidity,\r\n  RemoveLiquidity,\r\n  MintXTC,\r\n  MintWICP,\r\n  WithdrawWICP,\r\n  MintAuto,\r\n  MintManual,\r\n}\r\n\r\nexport enum NotificationState {\r\n  Idle,\r\n  Pending,\r\n  Success,\r\n  Error,\r\n}\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  title: React.ReactNode;\r\n  errorMessage?: string;\r\n  type: NotificationType;\r\n  transactionLink?: string;\r\n  timeout?: string;\r\n  // TODO: Rewrite notifications to use this\r\n  state?: NotificationState;\r\n}\r\n\r\nexport interface NotificationsState {\r\n  notifications: Array<Notification>;\r\n  state: FeatureState;\r\n}\r\n\r\nconst initialState: NotificationsState = {\r\n  notifications: [],\r\n  state: FeatureState?.Idle,\r\n};\r\n\r\nexport const notificationSlice = createSlice({\r\n  name: 'notification',\r\n  initialState,\r\n  reducers: {\r\n    setState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.state = action.payload;\r\n    },\r\n    setNotificationData: (\r\n      state,\r\n      action: PayloadAction<{\r\n        data: Omit<Partial<Notification>, 'id'>;\r\n        id: string;\r\n      }>\r\n    ) => {\r\n      const notificationIndex = state.notifications.findIndex(\r\n        (notification) => notification.id === action.payload.id\r\n      );\r\n\r\n      if (typeof notificationIndex !== 'undefined') {\r\n        const newNotifications = state.notifications.map(\r\n          (notification, index) => {\r\n            if (index === notificationIndex) {\r\n              return {\r\n                ...notification,\r\n                ...action.payload.data,\r\n              };\r\n            }\r\n\r\n            return notification;\r\n          }\r\n        );\r\n\r\n        state.notifications = newNotifications;\r\n      }\r\n    },\r\n    addNotification: (state, action: PayloadAction<Notification>) => {\r\n      state.notifications.push(action.payload);\r\n    },\r\n    popNotification: (state, action: PayloadAction<string>) => {\r\n      const popId = action.payload;\r\n      const filteredNotifications = state.notifications.filter(\r\n        (obj) => obj.id !== popId\r\n      );\r\n\r\n      state.notifications = filteredNotifications;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setState: setNotificationSliceState,\r\n  addNotification,\r\n  popNotification,\r\n  setNotificationData,\r\n} = notificationSlice.actions;\r\n\r\nexport const selectNotificationState = (state: RootState) => state.notification;\r\n\r\nexport default notificationSlice.reducer;\r\n","import {\r\n  addNotification,\r\n  FeatureState,\r\n  Notification,\r\n  popNotification,\r\n  selectNotificationState,\r\n  setNotificationSliceState,\r\n} from '@/store';\r\nimport { useAppDispatch, useAppSelector } from '@/store';\r\n\r\nexport const useNotificationStore = () => {\r\n  const { notifications, state } = useAppSelector(selectNotificationState);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const _addNotification = (notification: Notification) => {\r\n    dispatch(addNotification(notification));\r\n  };\r\n\r\n  const _popNotification = (notificationId: string) => {\r\n    dispatch(popNotification(notificationId));\r\n  };\r\n\r\n  const _setNotificationState = (state: FeatureState) => {\r\n    dispatch(setNotificationSliceState(state));\r\n  };\r\n\r\n  return {\r\n    notifications,\r\n    state,\r\n    addNotification: _addNotification,\r\n    popNotification: _popNotification,\r\n    setNotificationState: _setNotificationState,\r\n  };\r\n};\r\n","export * from './price-slice';\r\nexport * from './use-price-init';\r\nexport * from './use-price-store';\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { FeatureState, RootState } from '@/store';\r\n\r\nexport interface PriceState {\r\n  icpPrice?: string;\r\n  state: FeatureState;\r\n}\r\n\r\nconst initialState: PriceState = {\r\n  icpPrice: undefined,\r\n  state: 'not-started' as FeatureState,\r\n};\r\n\r\nexport const priceSlice = createSlice({\r\n  name: 'price',\r\n  initialState,\r\n  reducers: {\r\n    setState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.state = action.payload;\r\n    },\r\n    setPrice: (state, action: PayloadAction<string>) => {\r\n      state.icpPrice = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const priceActions = priceSlice.actions;\r\n\r\nexport const selectPriceState = (state: RootState) => state.price;\r\n\r\nexport default priceSlice.reducer;\r\n","import { toBigNumber } from '@sonicdex/sonic-js';\r\nimport BigNumber from 'bignumber.js';\r\nimport { useCallback, useEffect } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { FeatureState, useAppDispatch } from '@/store';\r\nimport { AppLog } from '@/utils';\r\nimport { fetchICPPrice } from '@/utils/icp';\r\n\r\nimport { swapCanisterActions, useSwapCanisterStore } from '..';\r\nimport { useKeepSync } from '../keep-sync';\r\nimport { priceActions, usePriceStore } from '.';\r\n\r\nBigNumber; toBigNumber;\r\n\r\nexport const usePriceInit = () => {\r\n  const { supportedTokenList, supportedTokenListState, allPairsState, allPairs } = useSwapCanisterStore();\r\n\r\n  const { state, icpPrice } = usePriceStore();\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => { _getICPPrice({ isRefreshing: false }) }, []);\r\n\r\n  useEffect(() => {\r\n    if (icpPrice && supportedTokenList && allPairs && supportedTokenListState !== FeatureState.Loading && allPairsState !== FeatureState.Loading) {\r\n\r\n      const supportedTokenListWithPrices = supportedTokenList.map((token) => {\r\n        let tokenPrice;\r\n        if (token.id === ENV.canistersPrincipalIDs.WICP || token.id === ENV.canistersPrincipalIDs.ledger) {\r\n           tokenPrice = icpPrice; }\r\n        else {\r\n\r\n          var BaseTokenPair = allPairs?.[ENV.canistersPrincipalIDs.WICP]?.[token.id];\r\n          if(!BaseTokenPair) BaseTokenPair = allPairs?.[ENV.canistersPrincipalIDs.ledger]?.[token.id];\r\n\r\n          const tokenDecimals = supportedTokenList.find(({ id }) => id === token.id)?.decimals;\r\n          \r\n          const BaseTokenDecimals = supportedTokenList.find(({ id }) => id === ENV.canistersPrincipalIDs.ledger)?.decimals;\r\n\r\n          if (BaseTokenPair && tokenDecimals && BaseTokenDecimals) {\r\n            const baseReserve = BaseTokenPair.token0 === ENV.canistersPrincipalIDs.WICP || BaseTokenPair.token0 === ENV.canistersPrincipalIDs.ledger ?\r\n              BaseTokenPair.reserve0 : BaseTokenPair.reserve1;\r\n\r\n            const tokenReserve = BaseTokenPair.token0 === ENV.canistersPrincipalIDs.WICP || BaseTokenPair.token0 === ENV.canistersPrincipalIDs.ledger ?\r\n              BaseTokenPair.reserve1 : BaseTokenPair.reserve0;\r\n\r\n              if (baseReserve && tokenReserve) {\r\n                tokenPrice = new BigNumber(icpPrice).multipliedBy(toBigNumber(baseReserve).applyDecimals(BaseTokenDecimals))\r\n                 .div(toBigNumber(tokenReserve).applyDecimals(tokenDecimals)).toString();\r\n              }\r\n          }else {\r\n            tokenPrice = '0';\r\n        }\r\n        }\r\n        return {...token,price: tokenPrice};\r\n      });\r\n      dispatch(swapCanisterActions.setSupportedTokenList(supportedTokenListWithPrices));\r\n    }\r\n  }, [icpPrice, supportedTokenListState, allPairsState, dispatch, allPairs]);\r\n\r\n  const _getICPPrice = useKeepSync(\r\n    'getICPPrice',\r\n    useCallback(\r\n      async (isRefreshing?: boolean) => {\r\n        if (state !== FeatureState.Loading) {\r\n          try {\r\n            dispatch(\r\n              priceActions.setState(\r\n                isRefreshing ? FeatureState.Updating : FeatureState.Loading\r\n              )\r\n            );\r\n\r\n            const price = await fetchICPPrice();\r\n\r\n            if (price) {\r\n              dispatch(priceActions.setPrice(price));\r\n            } else {\r\n              throw new Error('No \"getICPPrice\" response');\r\n            }\r\n\r\n            dispatch(priceActions.setState(FeatureState.Idle));\r\n\r\n            return price;\r\n          } catch (error) {\r\n            AppLog.error('ICP price fetch error', error);\r\n            dispatch(priceActions.setState(FeatureState.Error));\r\n          }\r\n        }\r\n      },\r\n      [dispatch, state]\r\n    )\r\n  );\r\n};\r\n","import { useAppSelector } from '@/store';\r\n\r\nimport { selectPriceState } from '.';\r\n\r\nexport const usePriceStore = () => useAppSelector(selectPriceState);\r\n","export * from './swap-canister-slice';\r\nexport * from './use-swap-canister-init';\r\nexport * from './use-swap-canister-store';\r\n","import { Pair } from '@sonicdex/sonic-js';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { AppTokenMetadata, Balances, PairBalances } from '@/models';\r\nimport { FeatureState, RootState } from '@/store';\r\n\r\nexport interface SwapCanisterState {\r\n  supportedTokenListState: FeatureState;\r\n  balancesState: FeatureState;\r\n  allPairsState: FeatureState;\r\n  userLPBalancesState: FeatureState;\r\n\r\n  supportedTokenList?: AppTokenMetadata[];\r\n  sonicBalances?: Balances;\r\n  tokenBalances?: Balances;\r\n  icpBalance?: number;\r\n  allPairs?: Pair.List;\r\n  userLPBalances?: PairBalances;\r\n}\r\n\r\nconst initialState: SwapCanisterState = {\r\n  supportedTokenListState: 'not-started' as FeatureState,\r\n  balancesState: 'not-started' as FeatureState,\r\n  allPairsState: 'not-started' as FeatureState,\r\n  userLPBalancesState: 'not-started' as FeatureState,\r\n\r\n  supportedTokenList: undefined,\r\n  sonicBalances: undefined,\r\n  tokenBalances: undefined,\r\n  icpBalance: undefined,\r\n  allPairs: undefined,\r\n  userLPBalances: undefined,\r\n};\r\n\r\nexport const swapCanisterSlice = createSlice({\r\n  name: 'swapCanister',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setICPBalance: (state, action: PayloadAction<bigint>) => {\r\n      state.icpBalance = Number(action.payload);\r\n    },\r\n    setSupportedTokensListState: (\r\n      state,\r\n      action: PayloadAction<FeatureState>\r\n    ) => {\r\n      state.supportedTokenListState = action.payload;\r\n    },\r\n    setBalancesState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.balancesState = action.payload;\r\n    },\r\n    setSupportedTokenList: (\r\n      state,\r\n      action: PayloadAction<AppTokenMetadata[]>\r\n    ) => {\r\n      state.supportedTokenList = action.payload;\r\n    },\r\n    setSonicBalances: (\r\n      state,\r\n      action: PayloadAction<[string, bigint][] | undefined>\r\n    ) => {\r\n      const parsedBalances = action.payload?.reduce((acc, current) => {\r\n        return {\r\n          ...acc,\r\n          [current[0]]: Number(current[1]),\r\n        };\r\n      }, {} as Balances);\r\n      state.sonicBalances = parsedBalances;\r\n    },\r\n    setTokenBalances: (\r\n      state,\r\n      action: PayloadAction<[string, bigint][] | undefined>\r\n    ) => {\r\n      const parsedBalances = action.payload?.reduce((acc, current) => {\r\n        return {\r\n          ...acc,\r\n          [current[0]]: Number(current[1]),\r\n        };\r\n      }, {} as Balances);\r\n      state.tokenBalances = parsedBalances;\r\n    },\r\n    setAllPairsState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.allPairsState = action.payload;\r\n    },\r\n    setAllPairs: (state, action: PayloadAction<Pair.List>) => {\r\n      state.allPairs = action.payload;\r\n    },\r\n    setUserLPBalancesState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.userLPBalancesState = action.payload;\r\n    },\r\n    setUserLPBalances: (state, action: PayloadAction<PairBalances>) => {\r\n      state.userLPBalances = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const swapCanisterActions = swapCanisterSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectSwapCanisterState = (state: RootState) => state.swap;\r\n\r\nexport default swapCanisterSlice.reducer;\r\n","import { useCallback, useEffect } from 'react';\r\n\r\nimport { useAllPairs } from '@/hooks';\r\nimport { useBalances } from '@/hooks/use-balances';\r\n\r\nimport { getswapActor } from '@/utils'\r\n\r\nimport { FeatureState, swapCanisterActions, useAppDispatch, useSwapCanisterStore , useWalletStore} from '@/store'; \r\nimport { AppLog } from '@/utils';\r\nimport { parseResponseSupportedTokenList } from '@/utils/canister';\r\n\r\nimport { useKeepSync } from '../keep-sync';\r\n\r\nexport const useSwapCanisterInit = () => {\r\n  const { getBalances, getUserPositiveLPBalances } = useBalances();\r\n  const { principalId, isConnected, state: walletState } = useWalletStore();\r\n  const { supportedTokenListState } = useSwapCanisterStore();\r\n  const { getAllPairs } = useAllPairs();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!isConnected) {\r\n      dispatch(swapCanisterActions.setBalancesState(FeatureState.Idle));\r\n    }\r\n  }, [isConnected, walletState]);\r\n\r\n  useEffect(() => {\r\n    if (principalId) {\r\n      getBalances({ isRefreshing: false });\r\n      getUserPositiveLPBalances({ isRefreshing: false });\r\n    }\r\n  }, [principalId]);\r\n\r\n  useEffect(() => {\r\n    getSupportedTokenList({ isRefreshing: false });\r\n    getAllPairs({ isRefreshing: false });\r\n  }, []);\r\n\r\n  const getSupportedTokenList = useKeepSync( 'getSupportedTokenList',\r\n    useCallback(\r\n      async (isRefreshing?: boolean , loadAction?:string) => {\r\n        if (supportedTokenListState !== FeatureState.Loading) {\r\n          try {\r\n            dispatch( swapCanisterActions.setSupportedTokensListState( isRefreshing ? FeatureState.Updating : FeatureState.Loading));\r\n            const swapActor = await getswapActor(true);\r\n            const response = await swapActor?.getSupportedTokenList();\r\n            if (response) {\r\n              dispatch( swapCanisterActions.setSupportedTokenList( parseResponseSupportedTokenList(response)));\r\n            } else {\r\n              throw new Error('No \"getSupportedTokenList\" response');\r\n            }\r\n            dispatch( swapCanisterActions.setSupportedTokensListState(FeatureState.Idle));\r\n            return response;\r\n          } catch (error) {\r\n            AppLog.error('Failed to fetch supported token list', error);\r\n            dispatch( swapCanisterActions.setSupportedTokensListState( FeatureState.Error));\r\n          }\r\n        }\r\n      },\r\n      [supportedTokenListState]\r\n    )\r\n  );\r\n};\r\n","import { selectSwapCanisterState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useSwapCanisterStore = () =>{\r\n  return useAppSelector(selectSwapCanisterState);\r\n}\r\n  \r\n","export * from './swap-view-slice';\r\nexport * from './use-swap-view-init';\r\nexport * from './use-swap-view-store';\r\n","import { MaximalPaths, Pair, Swap } from '@sonicdex/sonic-js';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { ENV } from '@/config';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport { AppTokenMetadata, AppTokenMetadataListObject, BaseTokenData } from '@/models';\r\n\r\nimport { FeatureState, RootState } from '@/store';\r\nimport { capitalize } from '@/utils/format';\r\nimport { getAmountOutFromPath } from '@/views';\r\n\r\n// import BigNumber from 'bignumber.js';\r\n\r\nexport type SwapTokenDataKey = 'from' | 'to';\r\n\r\nexport interface SwapTokenData<M = AppTokenMetadata> extends BaseTokenData<M> {\r\n  paths: MaximalPaths.PathList;\r\n}\r\n\r\ninterface SwapViewState {\r\n  state: FeatureState;\r\n  from: SwapTokenData;\r\n  to: SwapTokenData;\r\n  tokenList?: AppTokenMetadataListObject;\r\n  allPairs?: Pair.List;\r\n  slippage: string;\r\n  keepInSonic: boolean;\r\n  baseFromTokenPaths: MaximalPaths.PathList;\r\n  baseToTokenPaths: MaximalPaths.PathList;\r\n  allowance?: number;\r\n}\r\n\r\nexport const INITIAL_SWAP_SLIPPAGE = '0.5';\r\nfunction toJson(data: any) {\r\n  if(data) return JSON.stringify(data, (_, v) => typeof v === 'bigint' ? `${v}n` : v).replace(/\"(-?\\d+)n\"/g, (_, a) => a);\r\n  return '{}';\r\n}\r\nconst initialState: SwapViewState = {\r\n  state: FeatureState?.Idle,\r\n  from: { paths: {}, metadata: undefined, value: '' },\r\n  to: { paths: {}, metadata: undefined, value: '' },\r\n  tokenList: undefined,\r\n  allPairs: undefined,\r\n  slippage: INITIAL_SWAP_SLIPPAGE,\r\n  keepInSonic: false,\r\n  baseFromTokenPaths: {},\r\n  baseToTokenPaths: {},\r\n  allowance: undefined,\r\n};\r\nexport const swapViewSlice = createSlice({\r\n  name: 'swap',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => {\r\n      \r\n    },\r\n    setState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.state = action.payload;\r\n    },\r\n    setValue: (state, action: PayloadAction<{ data: SwapTokenDataKey; value: string }>) => {\r\n      const { allPairs, tokenList } = state;\r\n      const { data, value } = action.payload;\r\n\r\n      const metadata = data === 'from' ? state.from.metadata : state.to.metadata;\r\n      const oppositeMetadata = data === 'to' ? state.from.metadata : state.to.metadata;\r\n\r\n      const oppositeDataKey = data === 'from' ? 'to' : 'from';\r\n      state[data].value = value;\r\n      if (tokenList && metadata && oppositeMetadata && !(metadata.id === ICP_METADATA.id) && !(oppositeMetadata.id === ICP_METADATA.id)) {\r\n        const paths: any = getTokenPaths(allPairs as Pair.List, tokenList, metadata.id, state[data].value, data);\r\n\r\n        // Swap.getTokenPaths({\r\n        //   pairList: allPairs as Pair.List, tokenList, tokenId: metadata.id, amount: value, dataKey: data,\r\n        // });\r\n        state[data].paths = paths;\r\n\r\n        state[oppositeDataKey].value = getAmountOutFromPath(state[data] as SwapTokenData, state[oppositeDataKey] as SwapTokenData);\r\n\r\n        if (data === 'to' && paths[oppositeMetadata.id]) {\r\n          state.from.paths[metadata.id] = { amountOut: paths[oppositeMetadata.id].amountOut, path: [...paths[oppositeMetadata.id].path].reverse() };\r\n        }\r\n      }\r\n    },\r\n    setToken: (state, action: PayloadAction<{ data: SwapTokenDataKey; tokenId: string | undefined }>) => {\r\n      const { allPairs, tokenList } = state;\r\n      const { data, tokenId } = action.payload;\r\n\r\n      if (tokenId && tokenList && allPairs) {\r\n        const paths = getTokenPaths(allPairs as Pair.List, tokenList, tokenId, state[data].value, data);\r\n        // const paths = //Swap.getTokenPaths({ pairList: allPairs as Pair.List, tokenList, tokenId, amount: state[data].value, dataKey: data });  \r\n        state[data].metadata = { ...tokenList[tokenId] };\r\n        state[data].paths = paths;\r\n        const tokenPathsDataKey = `base${capitalize(data)}TokenPaths` as | 'baseToTokenPaths' | 'baseFromTokenPaths';\r\n        state[tokenPathsDataKey] = getTokenPaths(allPairs as Pair.List, tokenList, tokenId, state[data].value, data);\r\n        // Swap.getTokenPaths({ pairList: allPairs as Pair.List, tokenList, tokenId, dataKey: data });\r\n\r\n      } else { state[data].metadata = undefined; }\r\n      if (data === 'from') {\r\n        state.to.metadata = undefined;\r\n        state.to.value = '';\r\n      }\r\n    },\r\n    switchTokens: (state, action: PayloadAction<SwapTokenDataKey>) => {\r\n      const dataKey = action.payload;\r\n      const oppositeDataKey = dataKey === 'from' ? 'to' : 'from';\r\n      const oppositeMetadata = state[oppositeDataKey].metadata;\r\n\r\n      if (state.from.metadata && state.to.metadata && oppositeMetadata && state.tokenList && state.allPairs) {\r\n        // FIXME: Handle WICP/ICP specific case better/in other place\r\n\r\n        const isICPToWICPPair = state.from.metadata.id === ICP_METADATA.id && state.to.metadata.id === ENV.canistersPrincipalIDs.WICP;\r\n\r\n        const isWICPToICPPair = state.to.metadata.id === ICP_METADATA.id && state.from.metadata.id === ENV.canistersPrincipalIDs.WICP;\r\n\r\n        const isWICPAndICPPair = isICPToWICPPair || isWICPToICPPair;\r\n\r\n        const value = state[dataKey].value;\r\n\r\n        // const oppositeTokenPaths = Swap.getTokenPaths({\r\n        //   pairList: state.allPairs as Pair.List,\r\n        //   tokenList: state.tokenList,\r\n        //   tokenId: state[dataKey].metadata!.id,\r\n        //   amount: value,\r\n        //   dataKey: oppositeDataKey,\r\n        // });\r\n\r\n        const oppositeTokenPaths = getTokenPaths(state.allPairs as Pair.List, state.tokenList, state[dataKey].metadata!.id, value, oppositeDataKey);\r\n\r\n        const oppositeValue = getAmountOutFromPath( { ...state[dataKey], paths: oppositeTokenPaths },state[oppositeDataKey] as SwapTokenData );\r\n\r\n        // const tokenPaths = Swap.getTokenPaths({\r\n        //   pairList: state.allPairs as Pair.List,\r\n        //   tokenList: state.tokenList,\r\n        //   tokenId: state[oppositeDataKey].metadata!.id,\r\n        //   amount: oppositeValue,\r\n        //   dataKey: dataKey,\r\n        // });\r\n\r\n        const tokenPaths = getTokenPaths(state.allPairs as Pair.List, state.tokenList, state[oppositeDataKey].metadata!.id, oppositeValue, dataKey);\r\n\r\n        const tempMetadata = { ...state.from.metadata };\r\n        state.from.metadata = { ...state.to.metadata };\r\n        state.to.metadata = tempMetadata;\r\n\r\n        // In case of WICP/ICP or ICP/WICP switch -- leave values as they are\r\n        if (!isWICPAndICPPair) {\r\n          state[oppositeDataKey].paths = oppositeTokenPaths;\r\n          state[dataKey].paths = tokenPaths;\r\n\r\n          state[oppositeDataKey].value = value;\r\n          state[dataKey].value = oppositeValue;\r\n\r\n          const baseFromPaths = getTokenPaths(state.allPairs as Pair.List, state.tokenList, state.from.metadata.id);\r\n\r\n          // Swap.getTokenPaths({ pairList: state.allPairs as Pair.List,   tokenList: state.tokenList, tokenId: state.from.metadata.id });\r\n          \r\n          const baseToPaths = getTokenPaths(state.allPairs as Pair.List, state.tokenList, state.to.metadata.id);\r\n          \r\n          //Swap.getTokenPaths({ pairList: state.allPairs as Pair.List, tokenList: state.tokenList,tokenId: state.to.metadata.id, });\r\n\r\n          state.baseFromTokenPaths = baseFromPaths;\r\n          state.baseToTokenPaths = baseToPaths;\r\n        }\r\n      }\r\n    },\r\n    setTokenList: ( state, action: PayloadAction<AppTokenMetadataListObject>) => {\r\n      state.tokenList = action.payload;\r\n      const tokens = Object.values(action.payload);\r\n      const { allPairs, tokenList } = state;\r\n      if (!state.from.metadata) {\r\n        state.from.metadata = { ...tokens[0] };\r\n        state.from.paths = {};\r\n        state.from.value = '';\r\n        state.to.value = '';\r\n        if(state.from.metadata.id){\r\n          state.from.paths =  getTokenPaths(allPairs as Pair.List, tokenList, state.from.metadata.id, 0, \"from\");\r\n        }\r\n      }\r\n      if(state.from.metadata && !state.from.paths){\r\n        state.from.paths =  getTokenPaths(allPairs as Pair.List, tokenList, state.from.metadata.id, 0, \"from\");\r\n      }\r\n    },\r\n    setAllPairs: (state, action: PayloadAction<Pair.List | undefined>) => {\r\n      state.allPairs = action.payload;\r\n    },\r\n    setSlippage: (state, action: PayloadAction<string>) => {\r\n      state.slippage = action.payload;\r\n    },\r\n    setKeepInSonic: (state, action: PayloadAction<boolean>) => {\r\n      state.keepInSonic = action.payload;\r\n    },\r\n    setAllowance: (state, action: PayloadAction<number | undefined>) => {\r\n      state.allowance = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const swapViewActions = swapViewSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\n\r\nexport const selectSwapViewState = (state: RootState) => state.swapView;\r\n\r\n\r\n//getTokenPaths to avoid cpu load in built fn\r\n\r\nconst getTokenPaths = function(allPairs?: any, tokenList?: any, tokenId?: string, amount?: any, dataKey?: any) {\r\n  var allPairs = JSON.parse(toJson(allPairs)), tokenList = JSON.parse(toJson(tokenList)),tokenPaths: any = {};\r\n  if (tokenId) {\r\n    if(!allPairs[tokenId] ) return tokenPaths;\r\n    Object.keys(allPairs[tokenId]).forEach((x: string) => {\r\n      let fromValue = amount ? amount : 0;\r\n      var p = Swap.getAmountOut({ \r\n        amountIn: fromValue.toString(),decimalsIn: tokenList[tokenId]?.decimals, decimalsOut: tokenList[x]?.decimals,\r\n        reserveIn: allPairs[tokenId][x].reserve0,reserveOut: allPairs[tokenId][x].reserve1,\r\n      })\r\n      tokenPaths[x] = { amountOut: p, path: [tokenId, x] ,  }\r\n    })\r\n  }\r\n  return tokenPaths;\r\n}\r\nexport const getTokenPath = getTokenPaths;\r\nexport default swapViewSlice.reducer;\r\n","import { useEffect, useState } from 'react';\r\nimport { getICPTokenMetadata } from '@/constants';\r\nimport { useAppDispatch } from '@/store'; //selectSwapViewState selectSwapViewState, useAppSelector\r\nimport { parseResponseTokenList } from '@/utils/canister';\r\n\r\nimport { usePriceStore, useSwapCanisterStore } from '..';\r\nimport { swapViewActions } from '.';\r\nimport { AppTokenMetadataListObject } from '@/models';\r\n\r\nexport const useSwapView = (method: string) => {\r\n  const dispatch = useAppDispatch();\r\n  const { icpPrice } = usePriceStore();\r\n  const { allPairs, supportedTokenList } = useSwapCanisterStore();\r\n\r\n  const [isPairLoaded, setIsPairLoad] = useState<boolean>(false);\r\n  var tokenListTemp: AppTokenMetadataListObject = {};\r\n\r\n  useEffect(() => {\r\n    if (!supportedTokenList) return;\r\n    tokenListTemp = parseResponseTokenList([getICPTokenMetadata(icpPrice), ...supportedTokenList]);\r\n    if (method == 'swap') {\r\n      delete tokenListTemp.ICP;\r\n    } else if (method == 'mint') {\r\n      tokenListTemp = {\r\n        ICP: tokenListTemp.ICP,\r\n        \"utozz-siaaa-aaaam-qaaxq-cai\": tokenListTemp[\"utozz-siaaa-aaaam-qaaxq-cai\"],\r\n        \"aanaa-xaaaa-aaaah-aaeiq-cai\": tokenListTemp[\"aanaa-xaaaa-aaaah-aaeiq-cai\"],\r\n      };\r\n    }\r\n    dispatch(swapViewActions.setTokenList(tokenListTemp));\r\n\r\n    const setInitToken = async () => {\r\n      await dispatch(swapViewActions.setAllPairs(allPairs));\r\n      setIsPairLoad(true);\r\n    }\r\n\r\n    if (allPairs && Object.keys(tokenListTemp)) {\r\n      setInitToken();\r\n    }\r\n\r\n  }, [allPairs, supportedTokenList, dispatch, icpPrice]);\r\n\r\n  useEffect(() => {\r\n    if (method == 'mint') {\r\n      dispatch(swapViewActions.setToken({ data: 'from', tokenId: 'ICP' }));\r\n      dispatch(swapViewActions.setValue({ data: 'from', value: '' }));\r\n      dispatch(swapViewActions.setValue({ data: 'to', value: '' }));\r\n    }\r\n    tokenListTemp = parseResponseTokenList([...supportedTokenList || []]);\r\n    if (!isPairLoaded || !tokenListTemp) return;\r\n    if (method == 'swap') {\r\n      const temp = Object.keys(tokenListTemp)[0];\r\n      dispatch(swapViewActions.setToken({ data: \"from\", tokenId: tokenListTemp[temp]?.id }));\r\n      dispatch(swapViewActions.setValue({ data: 'from', value: '' }));\r\n      dispatch(swapViewActions.setValue({ data: 'to', value: '' }));\r\n    }\r\n  }, [isPairLoaded, method])\r\n};","import { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport { useTokenSelectionChecker } from '@/hooks';\r\nimport { AppTokenMetadata } from '@/models';\r\nimport { selectSwapViewState, useAppSelector } from '@/store';\r\n\r\nimport { useSwapCanisterStore } from '..';\r\n\r\nexport const useSwapViewStore = () => {\r\n  const state = useAppSelector(selectSwapViewState);\r\n  const { from, tokenList } = state;\r\n  const { allPairs } = useSwapCanisterStore();\r\n\r\n  const { isTokenSelected: isICPSelected } = useTokenSelectionChecker({ id0: from.metadata?.id,});\r\n\r\n  const { isTokenSelected: isWICPSelected } = useTokenSelectionChecker({\r\n    id0: from.metadata?.id,\r\n    targetId: ENV.canistersPrincipalIDs.WICP,\r\n  });\r\n\r\n  const [fromTokenOptions, toTokenOptions] = useMemo(() => {\r\n    if (!from.metadata || !tokenList) return [[], []];\r\n    \r\n    const fromTokenOptions = Object.values(tokenList);\r\n\r\n    if (!allPairs) { return [fromTokenOptions, []];}\r\n\r\n    if (isICPSelected) {\r\n      const wicpTokenMetadata = tokenList[ENV.canistersPrincipalIDs.WICP];\r\n      const xtcTokenMetadata = tokenList[ENV.canistersPrincipalIDs.XTC];\r\n      const icpToTokenOptions: AppTokenMetadata[] = [\r\n        ...(wicpTokenMetadata ? [wicpTokenMetadata] : []),\r\n        ...(xtcTokenMetadata ? [xtcTokenMetadata] : []),\r\n      ];\r\n      return [fromTokenOptions, icpToTokenOptions];\r\n    }\r\n    const toTokenPathsIds = Object.keys(from.paths);\r\n    \r\n    const toTokenOptions = fromTokenOptions.filter((token:{ id:string}) =>\r\n      toTokenPathsIds.includes(token.id)\r\n    );\r\n    if (isWICPSelected) {\r\n      const icpToken = fromTokenOptions.find((token) => token.id === ICP_METADATA.id);\r\n      if (icpToken) { toTokenOptions.unshift({ ...icpToken });}\r\n    }\r\n    return [fromTokenOptions, toTokenOptions];\r\n  }, [, from.metadata, from.paths, tokenList, isICPSelected,isWICPSelected]);\r\n\r\n  return { ...state, fromTokenOptions, toTokenOptions};\r\n};\r\n","export * from './transfer-view-slice';\r\nexport * from './use-transfer-view-store';\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport type { RootState } from '@/store';\r\nimport { FeatureState } from '@/store';\r\n\r\nimport {  checkAddressType } from '@/utils';\r\nenum AddressType {\r\n  AccountId = 'accountId',\r\n  PrincipalId = 'principalId',\r\n  None = 'none',\r\n}\r\ninterface TransferViewState {\r\n  state: FeatureState;\r\n  amount: string;\r\n  tokenId?: string;\r\n  toAddress?:string;\r\n  addressType?:AddressType\r\n}\r\n\r\nconst initialState: TransferViewState = {\r\n  state: FeatureState?.Idle,\r\n  amount: '',\r\n  tokenId: undefined,\r\n  toAddress: '',\r\n  addressType: AddressType.None,\r\n};\r\n\r\nexport const transferViewSlice = createSlice({\r\n  name: 'transfer',\r\n  initialState,\r\n  reducers: {\r\n    setState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.state = action.payload;\r\n    },\r\n    setAmount: (state, action: PayloadAction<string>) => {\r\n      state.amount = action.payload;\r\n    },\r\n    setTokenId: (state, action: PayloadAction<string>) => {\r\n      state.tokenId = action.payload;\r\n    },\r\n    setToAddress: (state, action: PayloadAction<string>) => {\r\n      state.toAddress = action.payload;\r\n      const addressType = checkAddressType(action.payload);\r\n      if(addressType == 'accountId' ) \r\n        state.addressType = AddressType.AccountId;\r\n      else if(addressType == 'principalId' ) \r\n        state.addressType = AddressType.PrincipalId;\r\n      else   state.addressType = AddressType.None\r\n    },\r\n  },\r\n});\r\n\r\nexport const transferViewActions = transferViewSlice.actions;\r\nexport const selectTransferViewState = (state: RootState) => state.transferView;\r\nexport default transferViewSlice.reducer;\r\n","import { selectTransferViewState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useTransferViewStore = () => { return  useAppSelector(selectTransferViewState); }\r\n","export * from './withdraw-view-slice';\r\nexport * from './use-withdraw-view-store';\r\n","import { selectAssetsViewState } from '@/store';\r\nimport { useAppSelector } from '@/store';\r\n\r\nexport const useAssetsViewStore = () => useAppSelector(selectAssetsViewState);\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport type { RootState } from '@/store';\r\nimport { FeatureState } from '@/store';\r\n\r\ninterface WithdrawViewState {\r\n  state: FeatureState;\r\n  amount: string;\r\n  tokenId?: string;\r\n}\r\n\r\nconst initialState: WithdrawViewState = {\r\n  state: FeatureState?.Idle,\r\n  amount: '',\r\n  tokenId: undefined,\r\n};\r\n\r\nexport const withdrawViewSlice = createSlice({\r\n  name: 'withdraw',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setState: (state, action: PayloadAction<FeatureState>) => {\r\n      state.state = action.payload;\r\n    },\r\n    setAmount: (state, action: PayloadAction<string>) => {\r\n      state.amount = action.payload;\r\n    },\r\n    setTokenId: (state, action: PayloadAction<string>) => {\r\n      state.tokenId = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const withdrawViewActions = withdrawViewSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectWithdrawViewState = (state: RootState) => state.withdrawView;\r\n\r\nexport default withdrawViewSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\n\r\nimport type { AppDispatch, RootState } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","export * from './features';\r\nexport * from './hooks';\r\nexport * from './models';\r\nexport * from './store';\r\n","export enum FeatureState {\r\n  NotStarted = 'not-started',\r\n  Idle = 'idle',\r\n  Loading = 'loading',\r\n  Error = 'error',\r\n  Updating = 'updating',\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport activityViewReducer from '@/store/features/activity-view/activity-view-slice';\r\nimport allowanceReducer from '@/store/features/allowance/allowance-slice';\r\nimport assetsViewReducer from '@/store/features/assets-view/assets-view-slice';\r\nimport cyclesMintingCanisterReducer from '@/store/features/cycles-minting-canister/cycles-minting-canister-slice';\r\nimport depositViewReducer from '@/store/features/deposit-view/deposit-view-slice';\r\nimport keepSyncReducer from '@/store/features/keep-sync/keep-sync-slice';\r\nimport liquidityViewReducer from '@/store/features/liquidity-view/liquidity-view-slice';\r\nimport modalsReducer from '@/store/features/modals/modals-slice';\r\nimport notificationReducer from '@/store/features/notification/notification-slice';\r\n\r\nimport priceReducer from '@/store/features/price/price-slice';\r\nimport swapReducer from '@/store/features/swap-canister/swap-canister-slice';\r\nimport swapViewReducer from '@/store/features/swap-view/swap-view-slice';\r\nimport withdrawViewReducer from '@/store/features/withdraw-view/withdraw-view-slice';\r\n\r\nimport trasferViewReducer from '@/store/features/transfer-view/transfer-view-slice';\r\nimport walletReducer from '@/store/features/dfinitywallet/wallet-slice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    cyclesMinting: cyclesMintingCanisterReducer,\r\n    modals: modalsReducer,\r\n    notification: notificationReducer,\r\n    swap: swapReducer,\r\n    price: priceReducer,\r\n    keepSync: keepSyncReducer,\r\n    activityView: activityViewReducer,\r\n    assetsView: assetsViewReducer,\r\n    depositView: depositViewReducer,\r\n    liquidityView: liquidityViewReducer,\r\n    swapView: swapViewReducer,\r\n    withdrawView: withdrawViewReducer,\r\n    allowance: allowanceReducer,\r\n    dfinityWallet:walletReducer,\r\n    transferView: trasferViewReducer\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({ serializableCheck: false}),\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import type {\r\n  SystemStyleFunction,\r\n  SystemStyleObject,\r\n} from '@chakra-ui/theme-tools';\r\nimport { mode, transparentize } from '@chakra-ui/theme-tools';\r\n\r\nconst baseStyle: SystemStyleObject = {\r\n  lineHeight: '1.2',\r\n  borderRadius: 'xl',\r\n  fontWeight: 'semibold',\r\n  transitionProperty: 'common',\r\n  transitionDuration: 'normal',\r\n  _focus: {\r\n    boxShadow: 'outline',\r\n  },\r\n  _disabled: {\r\n    opacity: 0.4,\r\n    cursor: 'not-allowed',\r\n    boxShadow: 'none',\r\n  },\r\n  _hover: {\r\n    _disabled: {\r\n      bg: 'initial',\r\n    },\r\n  },\r\n};\r\n\r\nconst variantGhost: SystemStyleFunction = (props) => {\r\n  const { colorScheme: c, theme } = props;\r\n\r\n  if (c === 'gray') {\r\n    return {\r\n      color: mode(`inherit`, `whiteAlpha.900`)(props),\r\n      _hover: {\r\n        bg: mode(`gray.100`, `whiteAlpha.200`)(props),\r\n      },\r\n      _active: { bg: mode(`custom.200`, `whiteAlpha.300`)(props) },\r\n    };\r\n  }\r\n\r\n  const darkHoverBg = transparentize(`${c}.200`, 0.12)(theme);\r\n  const darkActiveBg = transparentize(`${c}.200`, 0.24)(theme);\r\n\r\n  return {\r\n    color: mode(`${c}.600`, `${c}.200`)(props),\r\n    bg: 'transparent',\r\n    _hover: {\r\n      bg: mode(`${c}.50`, darkHoverBg)(props),\r\n    },\r\n    _active: {\r\n      bg: mode(`${c}.100`, darkActiveBg)(props),\r\n    },\r\n  };\r\n};\r\n\r\nconst variantOutline: SystemStyleFunction = (props) => {\r\n  const { colorScheme: c } = props;\r\n  const borderColor = mode(`gray.200`, `whiteAlpha.300`)(props);\r\n  return {\r\n    border: '1px solid',\r\n    borderColor: c === 'gray' ? borderColor : 'currentColor',\r\n    ...variantGhost(props),\r\n  };\r\n};\r\n\r\ntype AccessibleColor = {\r\n  bg?: string;\r\n  color?: string;\r\n  hoverBg?: string;\r\n  activeBg?: string;\r\n};\r\n\r\n/** Accessible color overrides for less accessible colors. */\r\nconst accessibleColorMap: { [key: string]: AccessibleColor } = {\r\n  yellow: {\r\n    bg: 'yellow.400',\r\n    color: 'black',\r\n    hoverBg: 'yellow.500',\r\n    activeBg: 'yellow.600',\r\n  },\r\n  cyan: {\r\n    bg: 'cyan.400',\r\n    color: 'black',\r\n    hoverBg: 'cyan.500',\r\n    activeBg: 'cyan.600',\r\n  },\r\n};\r\n\r\nconst variantSolid: SystemStyleFunction = (props) => {\r\n  const { colorScheme: c } = props;\r\n\r\n  if (c === 'gray') {\r\n    const bg = mode(`gray.100`, `whiteAlpha.200`)(props);\r\n\r\n    return {\r\n      bg,\r\n      _hover: {\r\n        bg: mode(`gray.200`, `whiteAlpha.300`)(props),\r\n        _disabled: {\r\n          bg,\r\n        },\r\n      },\r\n      _active: { bg: mode(`gray.300`, `whiteAlpha.400`)(props) },\r\n    };\r\n  }\r\n\r\n  const {\r\n    bg = `${c}.500`,\r\n    color = 'white',\r\n    hoverBg = `${c}.600`,\r\n    activeBg = `${c}.700`,\r\n  } = accessibleColorMap[c] ?? {};\r\n\r\n  const background = mode(bg, `${c}.200`)(props);\r\n\r\n  return {\r\n    bg: background,\r\n    color: mode(color, `gray.800`)(props),\r\n    _hover: {\r\n      bg: mode(hoverBg, `${c}.300`)(props),\r\n      _disabled: {\r\n        bg: background,\r\n      },\r\n    },\r\n    _active: { bg: mode(activeBg, `${c}.400`)(props) },\r\n  };\r\n};\r\n\r\nconst variantLink: SystemStyleFunction = (props) => {\r\n  const { colorScheme: c } = props;\r\n  return {\r\n    padding: 0,\r\n    height: 'auto',\r\n    lineHeight: 'normal',\r\n    verticalAlign: 'baseline',\r\n    color: mode(`${c}.500`, `${c}.200`)(props),\r\n    _hover: {\r\n      textDecoration: 'underline',\r\n      _disabled: {\r\n        textDecoration: 'none',\r\n      },\r\n    },\r\n    _active: {\r\n      color: mode(`${c}.700`, `${c}.500`)(props),\r\n    },\r\n  };\r\n};\r\n\r\nconst variantGradient: SystemStyleFunction = (props) => {\r\n  const { colorScheme: c, theme } = props;\r\n\r\n  const gradientColor0 = mode(\r\n    theme.colors[c][400],\r\n    theme.colors[c][500]\r\n  )(props);\r\n  const gradientColor1 = mode(\r\n    theme.colors[c][600],\r\n    theme.colors[c][700]\r\n  )(props);\r\n\r\n  const background = `linear-gradient(180deg, ${gradientColor0} 0%, ${gradientColor1} 100%)`;\r\n\r\n  return {\r\n    ...variantSolid(props),\r\n    color: mode(`white`, `gray.50`)(props),\r\n    bg: background,\r\n    _disabled: {\r\n      background: mode('gray.200', 'gray.700')(props),\r\n      color: mode(`gray.800`, `gray.50`)(props),\r\n    },\r\n    _hover: {\r\n      background,\r\n      _disabled: {\r\n        background: mode('gray.200', 'gray.700')(props),\r\n        color: mode(`gray.800`, `gray.50`)(props),\r\n      },\r\n    },\r\n    _active: {\r\n      background,\r\n    },\r\n  };\r\n};\r\n\r\nconst variantUnstyled: SystemStyleObject = {\r\n  bg: 'none',\r\n  color: 'inherit',\r\n  display: 'inline',\r\n  lineHeight: 'inherit',\r\n  m: 0,\r\n  p: 0,\r\n};\r\n\r\nconst variants = {\r\n  ghost: variantGhost,\r\n  outline: variantOutline,\r\n  solid: variantSolid,\r\n  link: variantLink,\r\n  gradient: variantGradient,\r\n  unstyled: variantUnstyled,\r\n};\r\n\r\nconst sizes: Record<string, SystemStyleObject> = {\r\n  lg: {\r\n    h: 12,\r\n    minW: 12,\r\n    fontSize: 'lg',\r\n    px: 6,\r\n  },\r\n  md: {\r\n    h: 10,\r\n    minW: 10,\r\n    fontSize: 'md',\r\n    px: 4,\r\n  },\r\n  sm: {\r\n    h: 8,\r\n    minW: 8,\r\n    fontSize: 'sm',\r\n    px: 3,\r\n  },\r\n  xs: {\r\n    h: 6,\r\n    minW: 6,\r\n    fontSize: 'xs',\r\n    px: 2,\r\n  },\r\n};\r\n\r\nconst defaultProps = {\r\n  variant: 'solid',\r\n  size: 'md',\r\n  colorScheme: 'gray',\r\n};\r\n\r\nexport default {\r\n  baseStyle,\r\n  variants,\r\n  sizes,\r\n  defaultProps,\r\n};\r\n","const variantRounded = {\r\n  borderWidth: '1px',\r\n  borderStyle: 'solid',\r\n  borderColor: 'gray.200',\r\n  borderRadius: 'full',\r\n};\r\n\r\nconst variants = {\r\n  rounded: variantRounded,\r\n};\r\n\r\nexport default {\r\n  variants,\r\n};\r\n","import { menuAnatomy as parts } from '@chakra-ui/anatomy';\r\nimport type {\r\n  PartsStyleFunction,\r\n  SystemStyleFunction,\r\n  SystemStyleObject,\r\n} from '@chakra-ui/theme-tools';\r\nimport { mode } from '@chakra-ui/theme-tools';\r\n\r\nconst baseStyleList: SystemStyleFunction = (props) => {\r\n  return {\r\n    bg: mode('#fff', 'gray.700')(props),\r\n    boxShadow: mode('sm', 'dark-lg')(props),\r\n    color: 'inherit',\r\n    minW: '3xs',\r\n    py: '2',\r\n    zIndex: 1,\r\n    borderRadius: 'md',\r\n    borderWidth: '1px',\r\n  };\r\n};\r\n\r\nconst baseStyleItem: SystemStyleFunction = (props) => {\r\n  return {\r\n    py: '0.4rem',\r\n    px: '0.8rem',\r\n    transitionProperty: 'background',\r\n    transitionDuration: 'ultra-fast',\r\n    transitionTimingFunction: 'ease-in',\r\n    _focus: {\r\n      bg: mode('gray.100', 'whiteAlpha.100')(props),\r\n    },\r\n    _active: {\r\n      bg: mode('gray.200', 'whiteAlpha.200')(props),\r\n    },\r\n    _expanded: {\r\n      bg: mode('gray.100', 'whiteAlpha.100')(props),\r\n    },\r\n    _disabled: {\r\n      opacity: 0.4,\r\n      cursor: 'not-allowed',\r\n    },\r\n  };\r\n};\r\n\r\nconst baseStyleGroupTitle: SystemStyleObject = {\r\n  mx: 4,\r\n  my: 2,\r\n  fontWeight: 'semibold',\r\n  fontSize: 'sm',\r\n};\r\n\r\nconst baseStyleCommand: SystemStyleObject = {\r\n  opacity: 0.6,\r\n};\r\n\r\nconst baseStyleDivider: SystemStyleObject = {\r\n  border: 0,\r\n  borderBottom: '1px solid',\r\n  borderColor: 'inherit',\r\n  my: '0.5rem',\r\n  opacity: 0.6,\r\n};\r\n\r\nconst baseStyleButton: SystemStyleObject = {\r\n  transitionProperty: 'common',\r\n  transitionDuration: 'normal',\r\n};\r\n\r\nconst baseStyle: PartsStyleFunction<typeof parts> = (props) => ({\r\n  button: baseStyleButton,\r\n  list: baseStyleList(props),\r\n  item: baseStyleItem(props),\r\n  groupTitle: baseStyleGroupTitle,\r\n  command: baseStyleCommand,\r\n  divider: baseStyleDivider,\r\n});\r\n\r\nexport default {\r\n  parts: parts.keys,\r\n  baseStyle,\r\n};\r\n","import { modalAnatomy as parts } from '@chakra-ui/anatomy';\r\nimport type {\r\n  PartsStyleFunction,\r\n  PartsStyleObject,\r\n  SystemStyleFunction,\r\n  SystemStyleObject,\r\n} from '@chakra-ui/theme-tools';\r\nimport { mode } from '@chakra-ui/theme-tools';\r\n\r\nconst baseStyleOverlay: SystemStyleObject = {\r\n  bg: 'blackAlpha.600',\r\n  zIndex: 'modal',\r\n};\r\n\r\nconst baseStyleDialogContainer: SystemStyleFunction = (props) => {\r\n  const { isCentered, scrollBehavior } = props;\r\n\r\n  return {\r\n    display: 'flex',\r\n    zIndex: 'modal',\r\n    justifyContent: 'center',\r\n    alignItems: isCentered ? 'center' : 'flex-start',\r\n    overflow: scrollBehavior === 'inside' ? 'hidden' : 'auto',\r\n  };\r\n};\r\n\r\nconst baseStyleDialog: SystemStyleFunction = (props) => {\r\n  const { scrollBehavior } = props;\r\n\r\n  return {\r\n    borderRadius: 'xl',\r\n    bg: mode('white', 'custom.2')(props),\r\n    color: 'inherit',\r\n    my: '3.75rem',\r\n    mx: '1rem',\r\n    zIndex: 'modal',\r\n    maxH: scrollBehavior === 'inside' ? 'calc(100% - 7.5rem)' : undefined,\r\n    boxShadow: mode('lg', 'dark-lg')(props),\r\n  };\r\n};\r\n\r\nconst baseStyleHeader: SystemStyleObject = {\r\n  px: 6,\r\n  py: 4,\r\n  borderStyle: 'solid',\r\n  borderBottomWidth: '1px',\r\n  fontSize: 'xl',\r\n  fontWeight: 'semibold',\r\n  textAlign: 'center',\r\n};\r\n\r\nconst baseStyleCloseButton: SystemStyleObject = {\r\n  borderRadius: 'full',\r\n  position: 'absolute',\r\n  top: 2,\r\n  insetEnd: 3,\r\n};\r\n\r\nconst baseStyleBody: SystemStyleFunction = (props) => {\r\n  const { scrollBehavior } = props;\r\n  return {\r\n    px: 6,\r\n    py: 2,\r\n    flex: 1,\r\n    overflow: scrollBehavior === 'inside' ? 'auto' : undefined,\r\n  };\r\n};\r\n\r\nconst baseStyleFooter: SystemStyleObject = {\r\n  px: 6,\r\n  py: 4,\r\n};\r\n\r\nconst baseStyle: PartsStyleFunction<typeof parts> = (props) => ({\r\n  overlay: baseStyleOverlay,\r\n  dialogContainer: baseStyleDialogContainer(props),\r\n  dialog: baseStyleDialog(props),\r\n  header: baseStyleHeader,\r\n  closeButton: baseStyleCloseButton,\r\n  body: baseStyleBody(props),\r\n  footer: baseStyleFooter,\r\n});\r\n\r\n/**\r\n * Since the `maxWidth` prop references theme.sizes internally,\r\n * we can leverage that to size our modals.\r\n */\r\nfunction getSize(value: string): PartsStyleObject<typeof parts> {\r\n  if (value === 'full') {\r\n    return {\r\n      dialog: { maxW: '100vw', minH: '100vh', my: 0 },\r\n    };\r\n  }\r\n  return {\r\n    dialog: { maxW: value },\r\n  };\r\n}\r\n\r\nconst sizes = {\r\n  xs: getSize('xs'),\r\n  sm: getSize('sm'),\r\n  md: getSize('md'),\r\n  lg: getSize('lg'),\r\n  xl: getSize('xl'),\r\n  '2xl': getSize('2xl'),\r\n  '3xl': getSize('3xl'),\r\n  '4xl': getSize('4xl'),\r\n  '5xl': getSize('5xl'),\r\n  '6xl': getSize('6xl'),\r\n  full: getSize('full'),\r\n};\r\n\r\nconst defaultProps = {\r\n  size: 'md',\r\n};\r\n\r\nexport default {\r\n  parts: parts.keys,\r\n  baseStyle,\r\n  sizes,\r\n  defaultProps,\r\n};\r\n","import { popoverAnatomy as parts } from '@chakra-ui/anatomy';\r\nimport type {\r\n  PartsStyleFunction,\r\n  SystemStyleFunction,\r\n  SystemStyleObject,\r\n} from '@chakra-ui/theme-tools';\r\nimport { cssVar, mode } from '@chakra-ui/theme-tools';\r\n\r\nconst $popperBg = cssVar('popper-bg');\r\n\r\nconst $arrowBg = cssVar('popper-arrow-bg');\r\nconst $arrowShadowColor = cssVar('popper-arrow-shadow-color');\r\n\r\nconst baseStylePopper: SystemStyleObject = {\r\n  zIndex: 10,\r\n};\r\n\r\nconst baseStyleContent: SystemStyleFunction = (props) => {\r\n  const bg = mode('white', 'gray.800')(props);\r\n  const borderColor = mode('gray.100', 'custom.4')(props);\r\n\r\n  return {\r\n    [$popperBg.variable]: `colors.${bg}`,\r\n    bg: $popperBg.reference,\r\n    [$arrowBg.variable]: $popperBg.reference,\r\n    [$arrowShadowColor.variable]: 'transparent',\r\n    width: 'xs',\r\n    borderRadius: 'xl',\r\n    shadow: 'md',\r\n    border: '1px solid',\r\n    borderColor,\r\n    zIndex: 'inherit',\r\n    _focus: {\r\n      outline: 0,\r\n      boxShadow: 'outline',\r\n    },\r\n  };\r\n};\r\n\r\nconst baseStyleHeader: SystemStyleObject = {\r\n  mx: 4,\r\n  py: 4,\r\n  px: 1,\r\n  borderBottomWidth: '1px',\r\n  fontWeight: 'bold',\r\n};\r\n\r\nconst baseStyleBody: SystemStyleObject = {\r\n  mx: 4,\r\n  px: 1,\r\n  py: 4,\r\n};\r\n\r\nconst baseStyleFooter: SystemStyleObject = {\r\n  px: 3,\r\n  py: 2,\r\n  borderTopWidth: '1px',\r\n};\r\n\r\nconst baseStyleCloseButton: SystemStyleObject = {\r\n  position: 'absolute',\r\n  borderRadius: 'md',\r\n  top: 1,\r\n  insetEnd: 2,\r\n  padding: 2,\r\n};\r\n\r\nconst baseStyle: PartsStyleFunction<typeof parts> = (props) => ({\r\n  popper: baseStylePopper,\r\n  content: baseStyleContent(props),\r\n  header: baseStyleHeader,\r\n  body: baseStyleBody,\r\n  footer: baseStyleFooter,\r\n  closeButton: baseStyleCloseButton,\r\n});\r\n\r\nexport default {\r\n  parts: parts.keys,\r\n  baseStyle,\r\n};\r\n","import { tabsAnatomy as parts } from '@chakra-ui/anatomy';\r\nimport type {\r\n  PartsStyleFunction,\r\n  PartsStyleInterpolation,\r\n  PartsStyleObject,\r\n  SystemStyleFunction,\r\n  SystemStyleObject,\r\n} from '@chakra-ui/theme-tools';\r\nimport { getColor, mode } from '@chakra-ui/theme-tools';\r\n\r\nimport { theme } from '..';\r\n\r\nconst baseStyleRoot: SystemStyleFunction = (props) => {\r\n  const { orientation } = props;\r\n  return {\r\n    display: orientation === 'vertical' ? 'flex' : 'block',\r\n  };\r\n};\r\n\r\nconst baseStyleTab: SystemStyleFunction = (props) => {\r\n  const { isFitted } = props;\r\n\r\n  return {\r\n    flex: isFitted ? 1 : undefined,\r\n    transitionProperty: 'common',\r\n    transitionDuration: 'normal',\r\n    _focus: {\r\n      zIndex: 1,\r\n      boxShadow: 'outline',\r\n    },\r\n  };\r\n};\r\n\r\nconst baseStyleTablist: SystemStyleFunction = (props) => {\r\n  const { align = 'start', orientation } = props;\r\n\r\n  const alignments = {\r\n    end: 'flex-end',\r\n    center: 'center',\r\n    start: 'flex-start',\r\n  };\r\n\r\n  return {\r\n    justifyContent: alignments[align as keyof typeof alignments],\r\n    flexDirection: orientation === 'vertical' ? 'column' : 'row',\r\n  };\r\n};\r\n\r\nconst baseStyleTabpanel: SystemStyleObject = {\r\n  p: 4,\r\n};\r\n\r\nconst baseStyle: PartsStyleFunction<typeof parts> = (props) => ({\r\n  root: baseStyleRoot(props),\r\n  tab: baseStyleTab(props),\r\n  tablist: baseStyleTablist(props),\r\n  tabpanel: baseStyleTabpanel,\r\n});\r\n\r\nconst sizes: Record<string, PartsStyleObject<typeof parts>> = {\r\n  sm: {\r\n    tab: {\r\n      py: 1,\r\n      px: 4,\r\n      fontSize: 'sm',\r\n    },\r\n  },\r\n  md: {\r\n    tab: {\r\n      fontSize: 'md',\r\n      py: 2,\r\n      px: 4,\r\n    },\r\n  },\r\n  lg: {\r\n    tab: {\r\n      fontSize: 'lg',\r\n      py: 3,\r\n      px: 4,\r\n    },\r\n  },\r\n};\r\n\r\nconst variantLine: PartsStyleFunction<typeof parts> = (props) => {\r\n  const { colorScheme: c, orientation } = props;\r\n  const isVertical = orientation === 'vertical';\r\n  const borderProp =\r\n    orientation === 'vertical' ? 'borderStart' : 'borderBottom';\r\n  const marginProp = isVertical ? 'marginStart' : 'marginBottom';\r\n\r\n  return {\r\n    tablist: {\r\n      [borderProp]: '2px solid',\r\n      borderColor: 'inherit',\r\n    },\r\n    tab: {\r\n      [borderProp]: '2px solid',\r\n      borderColor: 'transparent',\r\n      [marginProp]: '-2px',\r\n      _selected: {\r\n        color: mode(`${c}.600`, `${c}.300`)(props),\r\n        borderColor: 'currentColor',\r\n      },\r\n      _active: {\r\n        bg: mode('gray.200', 'whiteAlpha.300')(props),\r\n      },\r\n      _disabled: {\r\n        opacity: 0.4,\r\n        cursor: 'not-allowed',\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nconst variantEnclosed: PartsStyleFunction<typeof parts> = (props) => {\r\n  const { colorScheme: c } = props;\r\n  return {\r\n    tab: {\r\n      borderTopRadius: 'md',\r\n      border: '1px solid',\r\n      borderColor: 'transparent',\r\n      mb: '-1px',\r\n      _selected: {\r\n        color: mode(`${c}.600`, `${c}.300`)(props),\r\n        borderColor: 'inherit',\r\n        borderBottomColor: mode(`white`, `gray.800`)(props),\r\n      },\r\n    },\r\n    tablist: {\r\n      mb: '-1px',\r\n      borderBottom: '1px solid',\r\n      borderColor: 'inherit',\r\n    },\r\n  };\r\n};\r\n\r\nconst variantEnclosedColored: PartsStyleFunction<typeof parts> = (props) => {\r\n  const { colorScheme: c } = props;\r\n  return {\r\n    tab: {\r\n      border: '1px solid',\r\n      borderColor: 'inherit',\r\n      bg: mode(`gray.50`, `whiteAlpha.50`)(props),\r\n      mb: '-1px',\r\n      _notLast: {\r\n        marginEnd: '-1px',\r\n      },\r\n      _selected: {\r\n        bg: mode('white', 'gray.800')(props),\r\n        color: mode(`${c}.600`, `${c}.300`)(props),\r\n        borderColor: 'inherit',\r\n        borderTopColor: 'currentColor',\r\n        borderBottomColor: 'transparent',\r\n      },\r\n    },\r\n    tablist: {\r\n      mb: '-1px',\r\n      borderBottom: '1px solid',\r\n      borderColor: 'inherit',\r\n    },\r\n  };\r\n};\r\n\r\nconst variantSoftRounded: PartsStyleFunction<typeof parts> = (props) => {\r\n  const { colorScheme: c, theme } = props;\r\n  return {\r\n    tab: {\r\n      borderRadius: 'full',\r\n      fontWeight: 'semibold',\r\n      color: 'gray.600',\r\n      _selected: {\r\n        color: getColor(theme, `${c}.700`),\r\n        bg: getColor(theme, `${c}.100`),\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nconst variantSolidRounded: PartsStyleFunction<typeof parts> = (props) => {\r\n  const { colorScheme: c } = props;\r\n\r\n  return {\r\n    tab: {\r\n      borderRadius: 'full',\r\n      fontWeight: 'semibold',\r\n      color: mode('gray.600', 'inherit')(props),\r\n      _selected: {\r\n        color: mode(`#fff`, 'gray.100')(props),\r\n        bg: mode(\r\n          `${c}.600`,\r\n          `linear-gradient(to right, ${theme.colors[c][500]}, ${theme.colors[c][600]})`\r\n        )(props),\r\n      },\r\n    },\r\n    tablist: {\r\n      shadow: mode('base', 'none')(props),\r\n      backgroundColor: mode(`gray.50`, `gray.800`)(props),\r\n      borderRadius: 'full',\r\n      p: '1.5',\r\n    },\r\n  };\r\n};\r\nconst variantUnstyled: PartsStyleObject<typeof parts> = {};\r\nconst variants: Record<string, PartsStyleInterpolation<typeof parts>> = {\r\n  line: variantLine,\r\n  enclosed: variantEnclosed,\r\n  'enclosed-colored': variantEnclosedColored,\r\n  'soft-rounded': variantSoftRounded,\r\n  'solid-rounded': variantSolidRounded,\r\n  unstyled: variantUnstyled,\r\n};\r\nconst defaultProps = {\r\n  size: 'md',\r\n  variant: 'line',\r\n  colorScheme: 'blue',\r\n};\r\n\r\nexport default {\r\n  parts: parts.keys,\r\n  baseStyle,\r\n  sizes,\r\n  variants,\r\n  defaultProps,\r\n};\r\n","export const colors = {\r\n  gray: {\r\n    50: '#F0F2F4',\r\n    100: '#D6D8DA',\r\n    200: '#BBBEC2',\r\n    300: '#9EA5AC',\r\n    400: '#818B95',\r\n    500: '#68727D',\r\n    600: '#515860',\r\n    700: '#3B3F44',\r\n    800: '#323350',\r\n    900: '#0B0D0F',\r\n  },\r\n  black: '#151515',\r\n  darkBlue:\"#0C0D30\",\r\n  custom: {\r\n    1: '#888E8F',\r\n    2: \"#1c1f43\", // \"#1c1f43\",// '#1E1E1E',\r\n    3: \"#323350\", //'#282828',\r\n    4: '#373737',\r\n    5: '#FFFFFF',\r\n  },\r\n  ['dark-blue']: {\r\n    50: '#eceefe',\r\n    100: '#d8dcfd',\r\n    200: '#b1bafb',\r\n    300: '#8b97f8',\r\n    400: '#6475f6',\r\n    500: '#3d52f4',\r\n    600: '#3142c3',\r\n    700: '#253192',\r\n    800: '#182162',\r\n    900: '#0c1031',\r\n  },\r\n  app: {\r\n    background: {\r\n    body: {\r\n      dark: '#0C0D30',\r\n      light: '#FFFFFF',\r\n    }\r\n  }}\r\n};\r\n","export * from './colors';\r\n","import { extendTheme } from '@chakra-ui/react';\r\nimport { mode } from '@chakra-ui/theme-tools';\r\n\r\nimport Button from './components/button';\r\nimport CloseButton from './components/close-button';\r\nimport Menu from './components/menu';\r\nimport Modal from './components/modal';\r\nimport Popover from './components/popover';\r\nimport Tabs from './components/tabs';\r\nimport { colors } from './foundations';\r\n\r\nconst appTheme = {\r\n  styles: {\r\n    global: (props: any) => ({\r\n      html: {\r\n        fontSize: ['12px', '14px', '16px'],\r\n      },\r\n      body: {\r\n        // bg: mode('custom.5', 'black')(props),\r\n        bg: mode('app.background.body.light', 'app.background.body.dark')(props),\r\n      },\r\n    }),\r\n  },\r\n  fonts: {\r\n    heading: 'Nunito Sans',\r\n    body: 'Nunito Sans',\r\n  },\r\n  config: {\r\n    initialColorMode: 'dark',\r\n    useSystemColorMode: false,\r\n  },\r\n  sizes: {\r\n    modalHeight: '345px',\r\n  },\r\n  colors,\r\n  components: {\r\n    Button,\r\n    Tabs,\r\n    CloseButton,\r\n    Modal,\r\n    Popover,\r\n    Menu,\r\n  },\r\n};\r\n\r\nexport const theme = extendTheme(appTheme);\r\n","import { Principal } from '@dfinity/principal';\r\nimport { Pair } from '@sonicdex/sonic-js';\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\nimport { ENV } from '@/config';\r\nimport { SwapIDL } from '@/did';\r\nimport { AppTokenMetadata, AppTokenMetadataListObject, PairBalances } from '@/models';\r\n\r\nvar prorityOrder = ENV.prorityOrder;\r\n\r\nexport const desensitizationPrincipalId = (principalId?: string, firstLength = 5, lastLength = 3) => {\r\n  if (principalId) {\r\n    const firstPart = principalId.slice(0, firstLength);\r\n    const secondPart = principalId.slice(principalId.length - lastLength, principalId.length);\r\n    return `${firstPart}...${secondPart}`;\r\n  }\r\n};\r\n\r\nexport const parseResponseSupportedTokenList = (response: SwapIDL.TokenInfoExt[], price?: string): AppTokenMetadata[] => {\r\n  var a1: any = [], a2: any = [];\r\n  response.forEach((token) => {\r\n    const logo = \"https://cdn.sonic.ooo/icons/\"+token.id || questionMarkSrc ; // getFromStorage(`${token.id}-logo`) || questionMarkSrc;\r\n    var tempTkn = { ...token, ...(price ? { price } : {}), logo }\r\n    var order = prorityOrder.findIndex(x => x == token.symbol);\r\n    var isBlocked = ENV.hiddenTokens.includes(token.id);\r\n    if (!isBlocked) {\r\n      if (order != -1) { a1[order] = tempTkn }\r\n      else { a2.push(tempTkn) }\r\n    }\r\n  })\r\n  var resetArr = [...a1, ...a2].filter(x => x ? true : false);\r\n  return resetArr;\r\n};\r\n\r\nexport const parseResponseTokenList = (response: AppTokenMetadata[]): AppTokenMetadataListObject => {\r\n  return response.reduce((list, token) => {\r\n    if (!list) return {};\r\n    if (ENV.hiddenTokens.includes(token.id))\r\n      return list;\r\n    list[token.id] = token;\r\n    return list;\r\n  }, {} as AppTokenMetadataListObject);\r\n};\r\n\r\nexport const parseResponsePair = (\r\n  pair: [] | [SwapIDL.PairInfoExt]\r\n): SwapIDL.PairInfoExt | undefined => {\r\n  if (pair.length === 0) { return undefined; }\r\n  const resultPair = pair[0];\r\n  for (const token of [resultPair.token0, resultPair.token1]) {\r\n    if (ENV.hiddenTokens.includes(token)) return undefined;\r\n  }\r\n  return pair[0];\r\n};\r\n\r\nexport const parseResponseAllPairs = (\r\n  response: SwapIDL.PairInfoExt[]\r\n): Pair.List => {\r\n  return response.reduce((list, pair) => {\r\n    const { token0, token1, reserve0, reserve1 } = pair;\r\n    for (const token of [token0, token1]) {\r\n      if (ENV.hiddenTokens.includes(token)) return list;\r\n    }\r\n    return {\r\n      ...list,\r\n      [token0]: { ...list[token0], [token1]: pair },\r\n      [token1]: { ...list[token1], [token0]: { ...pair, token0: token1, token1: token0, reserve0: reserve1, reserve1: reserve0 } },\r\n    } as Pair.List;\r\n  }, {} as Pair.List);\r\n};\r\n\r\nexport const parseResponseUserLPBalances = ( response: [tokenId: string, amount: bigint][]): PairBalances => {\r\n  return response.reduce((balances, [tokenId, amount]) => {\r\n    const tokenIds = tokenId.split(':');\r\n    for (const token of tokenIds) {\r\n      if (ENV.hiddenTokens.includes(token)) return balances;\r\n    }\r\n    const [token0Id, token1Id] = tokenIds;\r\n    return {...balances,[token0Id]: { ...balances[token0Id], [token1Id]: Number(amount) },\r\n      [token1Id]: { ...balances[token1Id], [token0Id]: Number(amount) },\r\n    };\r\n  }, {} as PairBalances);\r\n};\r\n\r\nexport const validPrincipalId = (principalId: string) => {\r\n  try {\r\n    return Boolean(Principal.fromText(principalId));\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n","import { TokenIDL, SwapIDL, capCanIDL } from '@/did';\r\nimport { useSwapCanisterStore } from '@/store';\r\n\r\nimport { Principal } from '@dfinity/principal';\r\n\r\nimport { artemis } from '@/integrations/artemis';\r\n\r\nimport { AppTokenMetadata } from '@/models';\r\nimport { ENV } from '@/config';\r\n\r\nimport crc32 from 'buffer-crc32';\r\nimport { Buffer } from 'buffer';\r\nimport crypto from \"crypto-js\";\r\n\r\nvar supportedTokenList: any = [];\r\nvar tokenListObj: any = {};\r\n\r\nfunction waitWithTimeout(ms:number) {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => reject(new Error('Timeout')), ms);\r\n  });\r\n}\r\n\r\n\r\nexport const loadsupportedTokenList = async () => {\r\n  supportedTokenList = useSwapCanisterStore()?.supportedTokenList;\r\n  if (!supportedTokenList || Object.keys(tokenListObj).length > 0) return false;\r\n  supportedTokenList.forEach((el: { id: string }) => { tokenListObj[el.id] = el });\r\n\r\n  // if (isConnected) { \r\n  //   [...Object.values(ENV.canistersPrincipalIDs),...Object.keys(supportedTokenList)]\r\n  //   artemis.connect('plug',); }\r\n}\r\n\r\nexport const tokenList = (returnType: 'array' | 'obj', tokenId?: string): AppTokenMetadata[] | any => {\r\n  return (returnType == 'array' && !tokenId) ? supportedTokenList :\r\n    (!tokenId) ? tokenListObj : tokenListObj[tokenId];\r\n};\r\n\r\nexport const getTokenActor = async (canisterId: string, isAnnon: boolean): Promise<any> => {\r\n\r\n  var token = tokenListObj?.[canisterId];\r\n  if (!token) return false;\r\n  var actor = false;\r\n  var idl: any = token.tokenType == 'DIP20' ? TokenIDL.DIP20.factory :\r\n    token.tokenType == 'YC' ? TokenIDL.DIP20.YCfactory :\r\n      token.tokenType == 'ICRC1' ? TokenIDL.ICRC1.factory : TokenIDL.DIP20.factory;\r\n  if (isAnnon == false && !artemis.provider) { await artemis.autoConnect(); }\r\n  actor = await artemis.getCanisterActor(token.id, idl, isAnnon);\r\n  return actor;\r\n}\r\n\r\nexport const getswapActor = async (isAnnon: boolean): Promise<SwapIDL.Factory> => {\r\n  if (!isAnnon && !artemis.provider) {\r\n    await artemis.autoConnect();\r\n  }\r\n  var actor = await artemis.getCanisterActor(ENV.canistersPrincipalIDs.swap, SwapIDL.factory, isAnnon);\r\n  return actor;\r\n}\r\n\r\nexport const getSwapCapActor = async (isAnnon: boolean): Promise<capCanIDL.Factory> => {\r\n  if (!isAnnon && !artemis.provider) {\r\n    await artemis.autoConnect();\r\n  }\r\n  var actor = await artemis.getCanisterActor(ENV.canistersPrincipalIDs.swapCapRoot, capCanIDL.factory, isAnnon);\r\n  return actor;\r\n}\r\n\r\n\r\nexport const getTokenLogo = async (canisterId: string): Promise<string> => {\r\n  var token = tokenListObj?.[canisterId];\r\n  if (!token) return '';\r\n  var tokenLogo = '';\r\n  var tokenActor = await getTokenActor(token.id, true);\r\n  try {\r\n    if (!token?.tokenType || token?.tokenType == 'DIP20' || token?.tokenType == 'YC') {\r\n      tokenLogo = await tokenActor.logo();\r\n    } else if (token?.tokenType == 'ICRC1') {\r\n      tokenLogo = \"https://d15bmhsw4m27if.cloudfront.net/sonic/\" + token.id\r\n    }\r\n  } catch (error) {\r\n    tokenLogo = ''\r\n  }\r\n\r\n  return tokenLogo;\r\n}\r\n\r\nexport const getTokenBalance = async (canisterId: string, principalId?: string): Promise<bigint> => {\r\n  var tokenInfo = tokenListObj?.[canisterId];\r\n  var tokenBalance: bigint = BigInt(0);\r\n  if (!tokenInfo) { return tokenBalance; }\r\n  var prin = artemis.principalId ? artemis.principalId : principalId;\r\n\r\n  if (!prin) return tokenBalance;\r\n  \r\n  try {\r\n    var tokenActor = await getTokenActor(tokenInfo.id, true);\r\n    if (tokenInfo?.tokenType == 'DIP20' || tokenInfo?.tokenType == 'YC') {\r\n      tokenBalance =  await Promise.race([\r\n        tokenActor.balanceOf(Principal.fromText(prin)), \r\n        waitWithTimeout(10000) \r\n      ]);\r\n    } else if (tokenInfo?.tokenType == 'ICRC1') {\r\n      tokenBalance =  await Promise.race([\r\n        tokenActor.icrc1_balance_of({ owner: Principal.fromText(prin), subaccount: [] }),\r\n        waitWithTimeout(10000) \r\n      ]);\r\n    }\r\n  } catch (error) {\r\n    tokenBalance = BigInt(0);\r\n    console.log(tokenInfo.name+' ('+ tokenInfo.id +') failed to load !!!' );\r\n  }\r\n   return tokenBalance;\r\n}\r\n\r\nexport const getTokenAllowance = async (canisterId: string): Promise<bigint> => {\r\n\r\n  var allowance = BigInt(0);\r\n  var tokenInfo = tokenListObj?.[canisterId];\r\n  if (!tokenInfo || !artemis.principalId) return allowance;\r\n\r\n  try {\r\n    var tokenActor = await getTokenActor(canisterId, true);\r\n    if (tokenInfo?.tokenType == 'DIP20' || tokenInfo?.tokenType == 'YC') {\r\n      allowance = await tokenActor.allowance(Principal.fromText(artemis.principalId), Principal.fromText(ENV.canistersPrincipalIDs.swap));\r\n    } else allowance = BigInt(0);\r\n  } catch (error) {\r\n    allowance = BigInt(0);\r\n  }\r\n  return allowance;\r\n}\r\n\r\nexport const toHexString = (byteArray: []) => {\r\n  return Array.from(byteArray, function (byte) {\r\n    return ('0' + (byte & 0xFF).toString(16)).slice(-2);\r\n  }).join('')\r\n}\r\nexport const fromHexString = (hex: string): number[] => {\r\n  if (!hex) return [];\r\n  if (hex.substr(0, 2) === \"0x\") hex = hex.substr(2);\r\n  for (var bytes: number[] = [], c = 0; c < hex.length; c += 2)\r\n    bytes.push(parseInt(hex.substr(c, 2), 16));\r\n  return bytes;\r\n}\r\nexport const checkAddressType = (address: string): string => {\r\n  if (address.length < 23) return 'invalid';\r\n  if (isValidAccountId(address)) return 'accountId';\r\n  else if (isPrincipalId(address)) return 'principalId';\r\n  else return 'invalid'\r\n\r\n  function isPrincipalId(id: string) {\r\n    try {\r\n      Principal.fromText(id); return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n  function isValidAccountId(accountId: string) {\r\n    const accountIdRegex = /^[A-Fa-f0-9]{64}$/;\r\n    return accountIdRegex.test(accountId);\r\n  }\r\n}\r\nconst ACCOUNT_DOMAIN_SEPERATOR = '\\x0Aaccount-id';\r\nconst SUB_ACCOUNT_ZERO = Buffer.alloc(32);\r\n\r\nconst byteArrayToWordArray = (byteArray: any) => {\r\n  const wordArray: any = [];\r\n  let i;\r\n  for (i = 0; i < byteArray.length; i += 1) {\r\n    wordArray[(i / 4) | 0] |= byteArray[i] << (24 - 8 * i);\r\n  }\r\n  // eslint-disable-next-line\r\n  const result = crypto.lib.WordArray.create(wordArray, byteArray.length);\r\n  return result;\r\n};\r\nconst wordToByteArray = (word: any, length: number) => {\r\n  const byteArray = [];\r\n  const xFF = 0xff;\r\n  if (length > 0) byteArray.push(word >>> 24);\r\n  if (length > 1) byteArray.push((word >>> 16) & xFF);\r\n  if (length > 2) byteArray.push((word >>> 8) & xFF);\r\n  if (length > 3) byteArray.push(word & xFF);\r\n\r\n  return byteArray;\r\n};\r\nconst wordArrayToByteArray = (wordArray: any, length: number) => {\r\n  if (\r\n    wordArray.hasOwnProperty('sigBytes') &&\r\n    wordArray.hasOwnProperty('words')\r\n  ) {\r\n    length = wordArray.sigBytes;\r\n    wordArray = wordArray.words;\r\n  }\r\n\r\n  let result: any = [];\r\n  let bytes;\r\n  let i = 0;\r\n  while (length > 0) {\r\n    bytes = wordToByteArray(wordArray[i], Math.min(4, length));\r\n    length -= bytes.length;\r\n    result = [...result, bytes];\r\n    i++;\r\n  }\r\n  return [].concat.apply([], result);\r\n};\r\nconst generateChecksum = (hash: any) => {\r\n  const crc = crc32.unsigned(Buffer.from(hash));\r\n  const hex = intToHex(crc);\r\n  return hex.padStart(8, '0');\r\n};\r\n\r\nconst intToHex = (val: any) =>\r\n  val < 0 ? (Number(val) >>> 0).toString(16) : Number(val).toString(16);\r\n\r\nexport const getAccountIdFromPrincipalId = (principalId: string) => {\r\n\r\n  try {\r\n    var principal = Principal.from(principalId);\r\n    const sha = crypto.algo.SHA224.create();\r\n    sha.update(ACCOUNT_DOMAIN_SEPERATOR); // Internally parsed with UTF-8, like go does\r\n    sha.update(byteArrayToWordArray(principal.toUint8Array()));\r\n    const subBuffer = Buffer.from(SUB_ACCOUNT_ZERO);\r\n\r\n    sha.update(byteArrayToWordArray(subBuffer));\r\n    const hash = sha.finalize();\r\n    const byteArray = wordArrayToByteArray(hash, 28);\r\n    const checksum = generateChecksum(byteArray);\r\n    const val = checksum + hash.toString();\r\n    return val;\r\n  } catch (error) { return '' }\r\n}\r\n\r\nexport const getPrincipalFromText = (prin: string) => {\r\n  try {\r\n    return Principal.fromText(prin)\r\n  } catch (error) { return false }\r\n}","import { ENV } from '@/config';\r\n\r\nexport abstract class ExternalLink {\r\n  static readonly discord = ENV.URLs.discord;\r\n\r\n  static readonly twitter = ENV.URLs.twitter;\r\n\r\n  static readonly medium = ENV.URLs.medium;\r\n\r\n  static readonly github = ENV.URLs.github;\r\n\r\n  static readonly sonicDocs = ENV.URLs.sonicDocs;\r\n\r\n  static readonly swapApiDocs = `${ENV.URLs.sonicDocs}/dev/swaps-api`;\r\n\r\n  static readonly failedMintDocs = `${ENV.URLs.sonicDocs}/product/swap/failed-swaps#failed-mints`;\r\n\r\n  static readonly termsAndConditions = ENV.URLs.termsAndConditions;\r\n\r\n  static readonly tokenRequestForm = ENV.URLs.tokenRequestForm;\r\n\r\n  static readonly analyticsApp = ENV.URLs.analyticsApp;\r\n\r\n  static readonly icpPrice = \"https://datapool.memecake.io/ticker/icpusdt\" \r\n\r\n  static ledgerTransaction(transaction: string): ExternalLink.URL {\r\n    return `${ENV.URLs.ledgerTransactions}/${transaction}`;\r\n  }\r\n\r\n  static capTransaction(transaction: string): ExternalLink.URL {\r\n    return `https://explorer.cap.ooo/app-transactions/${ENV.canistersPrincipalIDs.swap}/${transaction}`;\r\n  }\r\n}\r\n\r\nexport namespace ExternalLink {\r\n  export type URL = string;\r\n}\r\n","import { Pair, toBigNumber } from '@sonicdex/sonic-js';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nimport { AppTokenMetadata } from '@/models';\r\n\r\n\r\n\r\nexport type BigNumberish = BigNumber | bigint | string | number;\r\n\r\nBigNumber.config({ EXPONENTIAL_AT: 99 });\r\n\r\nexport const parseAmount = (val: string, decimals: string | number): bigint => {\r\n  try {\r\n    const fixedVal = new BigNumber(val).toFixed(Number(decimals)); // Fix for scientific notation string\r\n    // const str = parseUnits(fixedVal, decimals).toString();\r\n    const str = ((Number(fixedVal)) * (10 ** (Number(decimals)))).toString();\r\n    //console.log(fixedVal,decimals, str , ((Number(fixedVal)) * (10**(Number(decimals)))).toString() );\r\n    return BigInt(str);\r\n  } catch (err) {\r\n    return BigInt(0);\r\n  }\r\n};\r\n\r\nexport const roundBigInt = (val: BigInt, actualDecimals: string | number, roundOfdecimals: number): bigint => {\r\n  try {\r\n    var ad: number = parseInt(actualDecimals.toString());\r\n    var roundedNumber = (Math.floor((Number(val) / 10 ** ad) * (10 ** roundOfdecimals)) / (10 ** roundOfdecimals)).toString();\r\n    var tmp: number = parseFloat(roundedNumber) * (10 ** ad);\r\n    tmp = Number(tmp.toFixed(0))\r\n    return BigInt(tmp);\r\n  } catch (err) {\r\n    return BigInt(0);\r\n  }\r\n}\r\n\r\nexport const formatValue = (val: BigInt | number | string, decimals: number): string => {\r\n  try {\r\n    const valueAsBigNumber = typeof val === 'string' ? BigInt(val) : BigInt(val.toString());\r\n\r\n    const integerPart = (valueAsBigNumber / BigInt(10 ** decimals)).toString();\r\n    const fractionalPart = valueAsBigNumber.toString().padStart(decimals + integerPart.length, '0').slice(-decimals);\r\n\r\n    return integerPart + (decimals > 0 ? '.' + fractionalPart : '');\r\n  } catch (err) {\r\n    return '0';\r\n  }\r\n};\r\n\r\n\r\nexport type GetValueWithoutFeesOptions = {\r\n  value: string;\r\n  fee: bigint;\r\n  decimals: number;\r\n  numberOfFees?: number;\r\n};\r\n\r\nexport const getValueWithoutFees = ({\r\n  value,\r\n  fee,\r\n  decimals,\r\n  numberOfFees = 1,\r\n}: GetValueWithoutFeesOptions) => {\r\n  const _value = new BigNumber(value);\r\n  const _feesAmount = toBigNumber(numberOfFees * Number(fee)).applyDecimals(\r\n    decimals\r\n  );\r\n\r\n  return _value.minus(_feesAmount);\r\n};\r\n\r\nexport const getMaxValue = (token?: AppTokenMetadata, balance?: number | bigint, isTransfer: boolean = false): BigNumber => {\r\n  if (!token || !balance) return new BigNumber(0);\r\n  var times = 1;\r\n  if (token.tokenType == 'ICRC1' || token.tokenType == 'DIP20') {\r\n    times = 2;\r\n  }\r\n  if (isTransfer) { times = 1; }\r\n\r\n  const value = toBigNumber(Number(balance)).minus(Number(token.fee) * times);\r\n\r\n  if (value.isNegative() || value.isZero()) {\r\n    return new BigNumber(0);\r\n  }\r\n\r\n  return value.applyDecimals(token.decimals);\r\n};\r\n\r\nexport const capitalize = (str: string) => {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n};\r\n\r\nexport const getPairIdsFromPairList = (pairList: Pair.List): string[] => {\r\n  const idsSet = new Set<string>();\r\n  Object.values(pairList).forEach((paired) => {\r\n    Object.values(paired).forEach((pair) => {\r\n      idsSet.add(pair.id);\r\n    });\r\n  });\r\n  return Array.from(idsSet);\r\n};\r\n\r\nexport const getUserPailListFromPairList = (pairList: Pair.List, principalId?: any): string[] => {\r\n  const idsSet = new Set<string>();\r\n  Object.values(pairList).forEach(paired => {\r\n    Object.values(paired).forEach(pair => {\r\n      if (pair?.creator.toString() == principalId) idsSet.add(pair.id);\r\n    })\r\n  })\r\n  return Array.from(idsSet);\r\n}\r\n\r\n","let timer: NodeJS.Timer | null = null;\r\n\r\nexport const debounce = (\r\n  fn: (...args: unknown[]) => unknown,\r\n  awaitTime = 500\r\n) => {\r\n  if (timer) clearTimeout(timer);\r\n  timer = setTimeout(() => {\r\n    fn();\r\n  }, awaitTime || 0);\r\n};\r\n","import { Principal } from '@dfinity/principal';\r\n\r\nimport axios from 'axios';\r\nimport BigNumber from 'bignumber.js';\r\nimport crc32 from 'buffer-crc32';\r\nimport CryptoJS from 'crypto-js';\r\n\r\nimport { CyclesMintingIDL } from '@/did';\r\n\r\nimport { artemis } from '@/integrations/artemis';\r\nimport { ENV } from '@/config';\r\nimport { LedgerIDL } from '@/did';\r\n\r\n\r\nimport { ExternalLink } from './external-link';\r\nimport { roundBigInt } from '@/utils/format';\r\nexport const ACCOUNT_DOMAIN_SEPERATOR = '\\x0Aaccount-id';\r\n\r\nexport const fetchICPBalance = async (principalId: string) => {\r\n  const ledgerActor = await artemis.getCanisterActor( ENV.canistersPrincipalIDs.ledger, LedgerIDL.factory,true);\r\n\r\n  const accountId = getAccountId(Principal.fromText(principalId || ''), 0);\r\n  if (accountId) {\r\n    const balance = ( await ledgerActor.account_balance_dfx({ account: accountId })).e8s;\r\n    var temp =  roundBigInt(balance, 8, 5);\r\n    const icpBalanceNoDecimals = new BigNumber(temp.toString()).div(new BigNumber('100000000')).toString();\r\n    return icpBalanceNoDecimals;\r\n  } else {\r\n    throw new Error('Account ID is required');\r\n  }\r\n};\r\n\r\nexport const fetchICP2XDRConversionRate = async () => {\r\n  const cmActor = await artemis.getCanisterActor('rkp4c-7iaaa-aaaaa-aaaca-cai',  CyclesMintingIDL.factory, true);\r\n  return await cmActor.get_icp_xdr_conversion_rate();\r\n};\r\n\r\nexport const fetchICPPrice = async () => {\r\n  try {\r\n    const response = await axios.get(ExternalLink.icpPrice);\r\n    if (response.status === 200) {\r\n      return response.data.price // ['internet-computer']['usd'];\r\n    } else {\r\n      throw new Error(response.statusText);\r\n    }\r\n  } catch (error) {\r\n    throw new Error((error as any).message);\r\n  }\r\n};\r\n\r\n/*\r\n    Used dfinity/keysmith/account/account.go as a base for the ID generation\r\n*/\r\nexport const getAccountId = ( principal: Principal, subAccount?: number): string => {\r\n  \r\n  const sha = CryptoJS.algo.SHA224.create();\r\n  sha.update(ACCOUNT_DOMAIN_SEPERATOR); // Internally parsed with UTF-8, like go does\r\n  sha.update(byteArrayToWordArray(principal.toUint8Array()));\r\n\r\n  const SUB_ACCOUNT_ZERO = Buffer.alloc(32);\r\n\r\n  const subBuffer = Buffer.from(SUB_ACCOUNT_ZERO);\r\n  if (subAccount) {\r\n    subBuffer.writeUInt32BE(subAccount);\r\n  }\r\n  sha.update(byteArrayToWordArray(subBuffer));\r\n  const hash = sha.finalize();\r\n\r\n  /// While this is backed by an array of length 28, it's canonical representation\r\n  /// is a hex string of length 64. The first 8 characters are the CRC-32 encoded\r\n  /// hash of the following 56 characters of hex. Both, upper and lower case\r\n  /// characters are valid in the input string and can even be mixed.\r\n  /// [ic/rs/rosetta-api/ledger_canister/src/account_identifier.rs]\r\n  const byteArray = wordArrayToByteArray(hash, 28);\r\n  const checksum = generateChecksum(byteArray);\r\n  const val = checksum + hash.toString();\r\n\r\n  return val;\r\n};\r\n\r\nconst byteArrayToWordArray = (byteArray: Uint8Array) => {\r\n  const wordArray = [] as any;\r\n  let i;\r\n  for (i = 0; i < byteArray.length; i += 1) {\r\n    wordArray[(i / 4) | 0] |= byteArray[i] << (24 - 8 * i);\r\n  }\r\n  // eslint-disable-next-line\r\n  const result = CryptoJS.lib.WordArray.create(wordArray, byteArray.length);\r\n  return result;\r\n};\r\n\r\nconst wordToByteArray = (word: number, length: number): number[] => {\r\n  const byteArray: number[] = [];\r\n  const xFF = 0xff;\r\n  if (length > 0) byteArray.push(word >>> 24);\r\n  if (length > 1) byteArray.push((word >>> 16) & xFF);\r\n  if (length > 2) byteArray.push((word >>> 8) & xFF);\r\n  if (length > 3) byteArray.push(word & xFF);\r\n\r\n  return byteArray;\r\n};\r\n\r\nconst wordArrayToByteArray = (wordArray: any, length: number) => {\r\n  if (\r\n    wordArray.hasOwnProperty('sigBytes') &&\r\n    wordArray.hasOwnProperty('words')\r\n  ) {\r\n    length = wordArray.sigBytes;\r\n    wordArray = wordArray.words;\r\n  }\r\n\r\n  let result: any = [];\r\n  let bytes;\r\n  let i = 0;\r\n  while (length > 0) {\r\n    bytes = wordToByteArray(wordArray[i], Math.min(4, length));\r\n    length -= bytes.length;\r\n    result = [...result, bytes];\r\n    i++;\r\n  }\r\n  return [].concat(...result) as unknown as Uint8Array;\r\n};\r\n\r\nexport const intToHex = (val: number) =>\r\n  val < 0 ? (Number(val) >>> 0).toString(16) : Number(val).toString(16);\r\n\r\n// We generate a CRC32 checksum, and trnasform it into a hexString\r\nexport const generateChecksum = (hash: Uint8Array) => {\r\n  const crc = crc32.unsigned(Buffer.from(hash));\r\n  const hex = intToHex(crc);\r\n  return hex.padStart(8, '0');\r\n};\r\n","export * from './external-link';\r\nexport * from './log';\r\nexport * from './canister';\r\nexport * from './navigator';\r\nexport * from './local-storage';\r\nexport * from './canisterDriver';\r\n","import { serialize } from '@sonicdex/sonic-js';\r\n\r\nimport { AppLog } from '@/utils';\r\n\r\nexport enum LocalStorageKey {\r\n  Logos = 'logos',\r\n  LiquidityBannerDisabled = 'liquidityBannerDisabled',\r\n  AssetsBannerDisabled = 'assetsBannerDisabled',\r\n  TermsAndConditionsAccepted = 'termsAndConditionsAccepted',\r\n\r\n  MintWICPUncompleteBlockHeights = 'mintWICPUncompleteBlockHeights',\r\n  MintXTCUncompleteBlockHeights = 'mintXTCUncompleteBlockHeights',\r\n}\r\n\r\nexport type MintUncompleteBlockHeights = {\r\n  [principalId: string]: string[];\r\n};\r\n\r\nexport function getFromStorage(key: LocalStorageKey | string): any | undefined {\r\n  try {\r\n    const serializedValue = localStorage.getItem(key);\r\n    return serializedValue ? JSON.parse(serializedValue) : undefined;\r\n  } catch (error) {\r\n    AppLog.warn(`Failed to get from storage: key=${key}`, error);\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport function saveToStorage(key: LocalStorageKey | string, value: any): void {\r\n  try {\r\n    const serializedValue = JSON.stringify(value);\r\n    localStorage.setItem(key, serializedValue);\r\n  } catch (error) {\r\n    AppLog.warn(\r\n      `Failed to save to storage: key=${key} value=${serialize(value)}`,\r\n      error\r\n    );\r\n  }\r\n}\r\n\r\nexport function removeFromStorage(key: LocalStorageKey | string): void {\r\n  try {\r\n    localStorage.removeItem(key);\r\n  } catch (error) {\r\n    AppLog.warn(`Failed to remove from storage: key=${key}`, error);\r\n  }\r\n}\r\n","export abstract class AppLog {\r\n  static readonly IDENTIFIER = '[Sonic]';\r\n\r\n  static error(label: string, ...args: unknown[]): void {\r\n    // eslint-disable-next-line no-console\r\n    console.error(this.IDENTIFIER, this.createLabel(label), ...args);\r\n  }\r\n\r\n  static warn(label: string, ...args: unknown[]): void {\r\n    // eslint-disable-next-line no-console\r\n    console.warn(this.IDENTIFIER, this.createLabel(label), ...args);\r\n  }\r\n\r\n  private static createLabel(label: string): string {\r\n    return `[${label}]`;\r\n  }\r\n}\r\n","import { addNotification, NotificationType, store } from '@/store';\r\n\r\nexport const copyToClipboard = (\r\n  text: string,\r\n  message = 'Copied to clipboard'\r\n): void => {\r\n  navigator.clipboard.writeText(text);\r\n  store.dispatch(\r\n    addNotification({\r\n      id: String(new Date().getTime()),\r\n      title: message,\r\n      type: NotificationType.Success,\r\n    })\r\n  );\r\n};\r\n","import { Heading, HStack, Stack } from '@chakra-ui/react';\r\nimport { FaPlus } from '@react-icons/all-files/fa/FaPlus';\r\n\r\nimport {\r\n  Asset,\r\n  AssetImageBlock,\r\n  AssetTitleBlock,\r\n  DisplayValue,\r\n} from '@/components';\r\nimport { useActivityViewStore } from '@/store';\r\n\r\nexport type AddLiquidityActivityProps = {\r\n  amount0: number;\r\n  amount1: number;\r\n  lpAmount: number;\r\n  pairId: string;\r\n  reserve0: number;\r\n  reserve1: number;\r\n  token0: string;\r\n  token1: string;\r\n  time: number;\r\n};\r\n\r\nexport const AddLiquidityActivity: React.FC<AddLiquidityActivityProps> = ({\r\n  token0: _token0,\r\n  token1: _token1,\r\n  amount0,\r\n  amount1,\r\n  time,\r\n}) => {\r\n  const { tokenList } = useActivityViewStore();\r\n\r\n  if (!tokenList) return null;\r\n\r\n  const token0 = tokenList[_token0];\r\n  const token1 = tokenList[_token1];\r\n\r\n  if (!token0 || !token1) return null;\r\n\r\n  return (\r\n    <Asset type=\"lp\" imageSources={[token0.logo, token1.logo]}>\r\n      <HStack spacing={4}>\r\n        <AssetImageBlock />\r\n        <AssetTitleBlock\r\n          title=\"Add Liquidity\"\r\n          subtitle={new Date(time).toLocaleTimeString('en-US')}\r\n        />\r\n      </HStack>\r\n      <Stack textAlign=\"end\">\r\n        <Heading as=\"h6\" size=\"sm\" display=\"flex\" alignItems=\"center\">\r\n          <DisplayValue\r\n            value={amount0}\r\n            decimals={token0.decimals}\r\n            suffix={' ' + token0.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n          &nbsp;\r\n          <FaPlus />\r\n          &nbsp;\r\n          <DisplayValue\r\n            value={amount1}\r\n            decimals={token1.decimals}\r\n            suffix={' ' + token1.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n        </Heading>\r\n      </Stack>\r\n    </Asset>\r\n  );\r\n};\r\n","import { Heading, HStack, Stack } from '@chakra-ui/react';\r\nimport { Principal } from '@dfinity/principal';\r\n\r\nimport {\r\n  Asset,\r\n  AssetImageBlock,\r\n  AssetTitleBlock,\r\n  DisplayValue,\r\n} from '@/components';\r\nimport { useActivityViewStore } from '@/store';\r\n\r\nexport type DepositActivityProps = {\r\n  amount: number;\r\n  balance: number;\r\n  fee: number;\r\n  from: Principal;\r\n  to: Principal;\r\n  tokenId: string;\r\n  totalSupply: number;\r\n  time: number;\r\n};\r\n\r\nexport const DepositActivity = ({\r\n  amount,\r\n  tokenId,\r\n  time,\r\n}: DepositActivityProps) => {\r\n  const { tokenList } = useActivityViewStore();\r\n\r\n  if (!tokenList) return null;\r\n\r\n  const token = tokenList[tokenId];\r\n\r\n  if (!token) return null;\r\n\r\n  return (\r\n    <Asset type=\"token\" imageSources={[token.logo]}>\r\n      <HStack spacing={4}>\r\n        <AssetImageBlock />\r\n        <AssetTitleBlock\r\n          title={`Deposit ${token.symbol}`}\r\n          subtitle={new Date(time).toLocaleTimeString('en-US')}\r\n        />\r\n      </HStack>\r\n      <Stack textAlign=\"end\">\r\n        <Heading as=\"h6\" size=\"sm\" display=\"flex\" alignItems=\"center\">\r\n          <DisplayValue\r\n            value={amount}\r\n            decimals={token.decimals}\r\n            suffix={' ' + token.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n        </Heading>\r\n      </Stack>\r\n    </Asset>\r\n  );\r\n};\r\n","export * from './add-liquidity-activity';\r\nexport * from './deposit-activity';\r\nexport * from './loading-activity';\r\nexport * from './remove-liquidity-activity';\r\nexport * from './swap-activity';\r\nexport * from './withdraw-activity';\r\nexport * from './ledger-transaction-activity';\r\n","import { Flex, Heading, HStack, Link, Box } from '@chakra-ui/react';\r\nimport { FaCube } from '@react-icons/all-files/fa/FaCube';\r\nimport { useMemo } from 'react';\r\n\r\nimport {\r\n  Asset,\r\n  AssetImageBlock,\r\n  AssetTitleBlock,\r\n  DisplayValue,\r\n} from '@/components';\r\nimport { ENV } from '@/config';\r\nimport { LedgerTransaction } from '@/integrations/ledger';\r\nimport { AppTokenMetadata } from '@/models';\r\nimport { useSwapCanisterStore } from '@/store';\r\nimport { ExternalLink } from '@/utils';\r\n\r\nimport { copyToClipboard } from '@/utils';\r\n\r\nimport { FiCopy } from '@react-icons/all-files/fi/FiCopy';\r\nexport type LedgerTransactionActivityProps = LedgerTransaction;\r\n\r\nconst getTokenByAddress = (\r\n  address: string,\r\n  tokenList?: AppTokenMetadata[]\r\n): AppTokenMetadata | undefined => {\r\n  if (!tokenList) return;\r\n\r\n  const findToken = (tokenPrincipal: string) =>\r\n    tokenList.find((token) => token.id === tokenPrincipal);\r\n\r\n  switch (address) {\r\n    case ENV.accountIDs.WICP:\r\n      return findToken(ENV.canistersPrincipalIDs.WICP);\r\n    case ENV.accountIDs.XTC:\r\n      return findToken(ENV.canistersPrincipalIDs.XTC);\r\n  }\r\n};\r\n\r\nexport const LedgerTransactionActivity = ({\r\n  amount,\r\n  account1Address,\r\n  account2Address,\r\n  timestamp,\r\n  blockIndex,\r\n  hash,\r\n}: LedgerTransactionActivityProps) => {\r\n  const { supportedTokenList } = useSwapCanisterStore();\r\n\r\n  const [action, token] = useMemo(() => {\r\n    const from = getTokenByAddress(account1Address, supportedTokenList);\r\n    if (from) return ['from', from];\r\n\r\n    const to = getTokenByAddress(account2Address, supportedTokenList);\r\n    if (to) return ['to mint', to];\r\n\r\n    return ['unknown', undefined];\r\n  }, [account1Address, account2Address, supportedTokenList]);\r\n\r\n  if (!token) return null;\r\n\r\n  return (\r\n    <Asset type=\"token\" imageSources={[token.logo]}>\r\n      <HStack spacing={4}>\r\n        <AssetImageBlock />\r\n        <AssetTitleBlock\r\n          title={`ICP transfer ${action} ${token.symbol}`}\r\n          subtitle={timestamp.toLocaleTimeString('en-US')}\r\n        />\r\n      </HStack>\r\n      <Flex textAlign=\"end\" direction=\"column\">\r\n        <Heading\r\n          as=\"h6\"\r\n          size=\"sm\"\r\n          display=\"flex\"\r\n          alignItems=\"flex-end\"\r\n          justifyContent=\"flex-end\"\r\n          mt=\"1\"\r\n          mb=\"0.5\"\r\n        >\r\n          <DisplayValue value={amount.toString()} decimals={token.decimals} suffix={' ICP'} shouldDivideByDecimals />\r\n        </Heading>\r\n        <Box>\r\n          <Flex>\r\n            <Flex> <FiCopy cursor={'pointer'} onClick={() => copyToClipboard(blockIndex.toString(), 'Block index ( ' + blockIndex + ' ) copied')} /> &nbsp; {blockIndex}&nbsp; </Flex>\r\n            <Link display=\"flex\" justifyContent=\"center\" alignItems=\"center\" fontSize=\"sm\"\r\n              href={ExternalLink.ledgerTransaction(hash)} target=\"_blank\" color=\"gray.400\"\r\n            >\r\n              <FaCube />\r\n            </Link>\r\n          </Flex>\r\n\r\n\r\n        </Box>\r\n\r\n      </Flex>\r\n    </Asset>\r\n  );\r\n};\r\n","import { Heading, HStack, Skeleton, Stack } from '@chakra-ui/react';\r\n\r\nimport { Asset, AssetImageBlock, AssetTitleBlock } from '@/components';\r\n\r\nexport const LoadingActivity = () => {\r\n  return (\r\n    <Asset type=\"token\" isLoading mb={2}>\r\n      <HStack spacing={4}>\r\n        <AssetImageBlock />\r\n        <AssetTitleBlock title={`Loading Title`} subtitle={'Loading'} />\r\n      </HStack>\r\n      <Stack textAlign=\"end\" alignSelf=\"flex-start\">\r\n        <Skeleton>\r\n          <Heading as=\"h6\" size=\"sm\" display=\"flex\" alignItems=\"center\" mb={2}>\r\n            Loading\r\n          </Heading>\r\n        </Skeleton>\r\n      </Stack>\r\n    </Asset>\r\n  );\r\n};\r\n","import { Heading, HStack, Stack } from '@chakra-ui/react';\r\nimport { FaPlus } from '@react-icons/all-files/fa/FaPlus';\r\n\r\nimport {\r\n  Asset,\r\n  AssetImageBlock,\r\n  AssetTitleBlock,\r\n  DisplayValue,\r\n} from '@/components';\r\nimport { useActivityViewStore } from '@/store';\r\n\r\nexport type RemoveLiquidityActivityProps = {\r\n  amount0: number;\r\n  amount1: number;\r\n  lpAmount: number;\r\n  pairId: string;\r\n  reserve0: number;\r\n  reserve1: number;\r\n  token0: string;\r\n  token1: string;\r\n  time: number;\r\n};\r\n\r\nexport const RemoveLiquidityActivity: React.FC<\r\n  RemoveLiquidityActivityProps\r\n> = ({ token0: _token0, token1: _token1, amount0, amount1, time }) => {\r\n  const { tokenList } = useActivityViewStore();\r\n\r\n  if (!tokenList) return null;\r\n\r\n  const token0 = tokenList[_token0];\r\n  const token1 = tokenList[_token1];\r\n\r\n  if (!token0 || !token1) return null;\r\n\r\n  return (\r\n    <Asset type=\"lp\" imageSources={[token0.logo, token1.logo]}>\r\n      <HStack spacing={4}>\r\n        <AssetImageBlock />\r\n        <AssetTitleBlock\r\n          title=\"Remove Liquidity\"\r\n          subtitle={new Date(time).toLocaleTimeString('en-US')}\r\n        />\r\n      </HStack>\r\n      <Stack textAlign=\"end\">\r\n        <Heading as=\"h6\" size=\"sm\" display=\"flex\" alignItems=\"center\">\r\n          <DisplayValue\r\n            value={amount0}\r\n            decimals={token0.decimals}\r\n            suffix={' ' + token0.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n          &nbsp;\r\n          <FaPlus />\r\n          &nbsp;\r\n          <DisplayValue\r\n            value={amount1}\r\n            decimals={token1.decimals}\r\n            suffix={' ' + token1.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n        </Heading>\r\n      </Stack>\r\n    </Asset>\r\n  );\r\n};\r\n","import { Heading, HStack, Stack } from '@chakra-ui/react';\r\nimport { FaArrowRight } from '@react-icons/all-files/fa/FaArrowRight';\r\n\r\nimport { Asset, AssetImageBlock, AssetTitleBlock, DisplayValue } from '@/components';\r\nimport { useActivityViewStore } from '@/store';\r\n\r\nexport type SwapActivityProps = {\r\n  amountIn: number;\r\n  amountOut: number;\r\n  fee: number;\r\n  from: string;\r\n  pairId: string;\r\n  reserve0: number;\r\n  reserve1: number;\r\n  to: string;\r\n  time: number;\r\n};\r\n\r\nexport const SwapActivity = ({\r\n  from,\r\n  to,\r\n  time,\r\n  amountIn,\r\n  amountOut,\r\n}: SwapActivityProps) => {\r\n  const { tokenList } = useActivityViewStore();\r\n\r\n  if (!tokenList) return null;\r\n\r\n  const fromToken = tokenList[from];\r\n  const toToken = tokenList[to];\r\n\r\n  if (!fromToken || !toToken) return null;\r\n\r\n  return (\r\n    <Asset type=\"swap\" imageSources={[fromToken.logo, toToken.logo]}>\r\n      <HStack spacing={4}>\r\n        <AssetImageBlock />\r\n        <AssetTitleBlock\r\n          title={`Swap ${fromToken.symbol} to ${toToken.symbol}`}\r\n          subtitle={new Date(time).toLocaleTimeString('en-US')}\r\n        />\r\n      </HStack>\r\n      <Stack textAlign=\"end\">\r\n        <Heading as=\"h6\" size=\"sm\" display=\"flex\" alignItems=\"center\">\r\n          <DisplayValue\r\n            value={amountIn}\r\n            decimals={fromToken.decimals}\r\n            suffix={' ' + fromToken.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n          &nbsp;\r\n          <FaArrowRight />\r\n          &nbsp;\r\n          <DisplayValue\r\n            value={amountOut}\r\n            decimals={toToken.decimals}\r\n            suffix={' ' + toToken.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n        </Heading>\r\n      </Stack>\r\n    </Asset>\r\n  );\r\n};\r\n","import { Heading, HStack, Stack } from '@chakra-ui/react';\r\nimport { Principal } from '@dfinity/principal';\r\n\r\nimport {\r\n  Asset,\r\n  AssetImageBlock,\r\n  AssetTitleBlock,\r\n  DisplayValue,\r\n} from '@/components';\r\nimport { useActivityViewStore } from '@/store';\r\n\r\nexport type WithdrawActivityProps = {\r\n  amount: number;\r\n  balance: number;\r\n  fee: number;\r\n  from: Principal;\r\n  to: Principal;\r\n  tokenId: string;\r\n  totalSupply: number;\r\n  time: number;\r\n};\r\n\r\nexport const WithdrawActivity = ({\r\n  amount,\r\n  tokenId,\r\n  time,\r\n}: WithdrawActivityProps) => {\r\n  const { tokenList } = useActivityViewStore();\r\n\r\n  if (!tokenList) return null;\r\n\r\n  const token = tokenList[tokenId];\r\n\r\n  if (!token) return null;\r\n\r\n  return (\r\n    <Asset type=\"token\" imageSources={[token.logo]}>\r\n      <HStack spacing={4}>\r\n        <AssetImageBlock />\r\n        <AssetTitleBlock\r\n          title={`Withdraw ${token.symbol}`}\r\n          subtitle={new Date(time).toLocaleTimeString('en-US')}\r\n        />\r\n      </HStack>\r\n      <Stack textAlign=\"end\">\r\n        <Heading as=\"h6\" size=\"sm\" display=\"flex\" alignItems=\"center\">\r\n          <DisplayValue\r\n            value={amount}\r\n            decimals={token.decimals}\r\n            suffix={' ' + token.symbol}\r\n            shouldDivideByDecimals\r\n          />\r\n        </Heading>\r\n      </Stack>\r\n    </Asset>\r\n  );\r\n};\r\n","export * from './list';\r\n","import { Skeleton, Stack, Text, useColorModeValue } from '@chakra-ui/react';\r\nimport React, { Fragment, useEffect, useMemo } from 'react';\r\n\r\nimport { Header, WalletNotConnected } from '@/components';\r\nimport {\r\n  activityViewActions,\r\n  FeatureState,\r\n  useActivityView,\r\n  useActivityViewStore,\r\n  useAppDispatch,\r\n  useWalletStore,\r\n} from '@/store';\r\n\r\nimport {\r\n  AddLiquidityActivity,\r\n  DepositActivity,\r\n  LedgerTransactionActivity,\r\n  LoadingActivity,\r\n  RemoveLiquidityActivity,\r\n  SwapActivity,\r\n  WithdrawActivity,\r\n} from './components';\r\n\r\nexport const ActivityListView = () => {\r\n  useActivityView();\r\n  const { isConnected } = useWalletStore();\r\n  const { activityList, CAPstate, LedgerState, page, lastPage } = useActivityViewStore();\r\n  \r\n  const dispatch = useAppDispatch();\r\n\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n\r\n  useEffect(() => {\r\n    const scrollHandler = (): void => {\r\n      if (lastPage === 0 || page === 0 || CAPstate === FeatureState.Loading)\r\n        return;\r\n      const isBottom =\r\n        window.scrollY + window.innerHeight >= document.body.offsetHeight;\r\n      if (isBottom && page) {\r\n        dispatch(activityViewActions.setPage(page - 1));\r\n      }\r\n    };\r\n\r\n    scrollHandler();\r\n    window.addEventListener('scroll', scrollHandler);\r\n    return () => window.removeEventListener('scroll', scrollHandler);\r\n  }, [page, lastPage, CAPstate, dispatch]);\r\n\r\n  const isUpdating = useMemo(() => {\r\n    return (\r\n      CAPstate === FeatureState.Loading || LedgerState === FeatureState.Loading\r\n    );\r\n  }, [CAPstate, LedgerState]);\r\n\r\n  if (!isConnected) {\r\n    return (\r\n      <>\r\n        <Header title=\"Your Activity\" />\r\n        <WalletNotConnected message=\"Your transaction activity will appear here.\" />\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (isUpdating && Object.keys(activityList).length === 0) {\r\n    return (\r\n      <>\r\n        <Header title=\"Your Activity\" />\r\n        <Skeleton mb={2} h={4} w={40} />\r\n        <LoadingActivity />\r\n        <LoadingActivity />\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (Object.keys(activityList).length === 0) {\r\n    return (\r\n      <>\r\n        <Header\r\n          title=\"Your Activity\"\r\n          isUpdating={CAPstate === FeatureState.Loading}\r\n        />\r\n        <Text textAlign=\"center\" color={color}>\r\n          You have no activity\r\n        </Text>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header title=\"Your Activity\" isUpdating={isUpdating} />\r\n      <Stack mt={-5} mb={-5} spacing={4} overflowX=\"hidden\" position=\"relative\">\r\n        <Stack\r\n          overflowX=\"auto\"\r\n          pb={20}\r\n          pt={5}\r\n          css={{\r\n            '&::-webkit-scrollbar': {\r\n              display: 'none',\r\n            },\r\n            '&::-webkit-scrollbar-track': {\r\n              display: 'none',\r\n            },\r\n            '&::-webkit-scrollbar-thumb': {\r\n              display: 'none',\r\n            },\r\n          }}\r\n        >\r\n          {Object.entries(activityList)\r\n            .sort(\r\n              ([dateA], [dateB]) =>\r\n                new Date(dateB).getTime() - new Date(dateA).getTime()\r\n            )\r\n            .map(([date, transactions], index) => (\r\n              <Fragment key={index}>\r\n                <Text>{new Date(date).toDateString()}</Text>\r\n                {transactions.map((transaction, index) => {\r\n                  if ('timestamp' in transaction) {\r\n                    return (\r\n                      <LedgerTransactionActivity key={index} {...transaction} />\r\n                    );\r\n                  }\r\n\r\n                  const renderActivity = (\r\n                    Activity: React.FC<any>\r\n                  ): JSX.Element => (\r\n                    <Activity\r\n                      key={index}\r\n                      {...transaction.details}\r\n                      time={transaction.time}\r\n                    />\r\n                  );\r\n                  switch (transaction.operation) {\r\n                    case 'swap':\r\n                      return renderActivity(SwapActivity);\r\n                    case 'addLiquidity':\r\n                      return renderActivity(AddLiquidityActivity);\r\n                    case 'removeLiquidity':\r\n                      return renderActivity(RemoveLiquidityActivity);\r\n                    case 'withdraw':\r\n                      return renderActivity(WithdrawActivity);\r\n                    case 'deposit':\r\n                      return renderActivity(DepositActivity);\r\n                    default:\r\n                      return null;\r\n                  }\r\n                })}\r\n              </Fragment>\r\n            ))}\r\n        </Stack>\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n","import { Box, Button } from '@chakra-ui/react';\r\nimport { toBigNumber } from '@sonicdex/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport { \r\n  Token, TokenContent, TokenData, TokenDataBalances,TokenDataPrice,TokenDetailsButton,\r\n  TokenDetailsLogo,TokenDetailsSymbol,TokenDataMetaInfo,TokenInput,ViewHeader,\r\n} from '@/components';\r\n\r\nimport { FeeBox } from '@/components/core/fee-box';\r\n\r\nimport { useQuery } from '@/hooks/use-query';\r\n\r\nimport { useTokenAllowance } from '@/hooks/use-token-allowance';\r\nimport {\r\n  depositViewActions, FeatureState, NotificationType, useAppDispatch, useDepositViewStore,\r\n  useNotificationStore, useSwapCanisterStore, useTokenModalOpener, useWalletStore\r\n} from '@/store';\r\n\r\nimport { getMaxValue } from '@/utils/format';\r\nimport { debounce } from '@/utils/function';\r\n\r\nimport {tokenList } from '@/utils';\r\n\r\nimport {artemis} from '@/integrations/artemis';\r\n\r\n\r\nexport const AssetsDepositView = () => {\r\n  const query = useQuery();\r\n  const { supportedTokenList, tokenBalances, balancesState, supportedTokenListState } = useSwapCanisterStore();\r\n\r\n  const {isConnected} = useWalletStore()\r\n\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const { amount, tokenId } = useDepositViewStore();\r\n\r\n  const { addNotification } = useNotificationStore();\r\n  const openSelectTokenModal = useTokenModalOpener();\r\n\r\n  const selectedTokenMetadata =  tokenList('obj')[tokenId?tokenId:''];\r\n\r\n  const allowance = useTokenAllowance(selectedTokenMetadata?.id)\r\n  \r\n  const handleSelectTokenId = (tokenId?: string) => {\r\n    if (tokenId) {\r\n      dispatch(depositViewActions.setTokenId(tokenId));\r\n    }\r\n  };\r\n\r\n  const handleOpenSelectTokenModal = () => {\r\n    openSelectTokenModal({ metadata: supportedTokenList, onSelect: (tokenId) => handleSelectTokenId(tokenId), selectedTokenIds: []});\r\n  };\r\n\r\n  const handleDeposit = () => {\r\n    addNotification({\r\n      title: `Deposit ${amount} ${selectedTokenMetadata?.symbol}`,\r\n      type: NotificationType.Deposit,\r\n      id: String(new Date().getTime()),\r\n    });\r\n    debounce(() => dispatch(depositViewActions.setAmount('')), 300);\r\n  };\r\n\r\n  const handleMaxClick = () => {\r\n    if (tokenBalance && selectedTokenMetadata)\r\n      dispatch(\r\n        depositViewActions.setAmount(\r\n          getMaxValue(selectedTokenMetadata, tokenBalance).toString()\r\n        )\r\n      );\r\n  };\r\n\r\n  const [buttonDisabled, buttonMessage] = useMemo<[boolean, string]>(() => {\r\n    if(!isConnected) return [true, 'Connect wallet'];\r\n    if (!selectedTokenMetadata?.id) return [true, 'Select a Token'];\r\n\r\n    if (typeof allowance !== 'number') return [true, 'Getting allowance...'];\r\n\r\n    const parsedFromValue = (amount && parseFloat(amount)) || 0;\r\n\r\n    if (parsedFromValue <= 0)\r\n      return [true, `Enter ${selectedTokenMetadata?.symbol} Amount`];\r\n\r\n    if (\r\n      parsedFromValue <= \r\n      toBigNumber(selectedTokenMetadata.fee).applyDecimals(selectedTokenMetadata.decimals).toNumber()\r\n    ) {\r\n      return [true, `Amount must be greater than fee`];\r\n    }\r\n\r\n    if (tokenBalances && selectedTokenMetadata) {\r\n      if (\r\n        parsedFromValue >\r\n        getMaxValue( selectedTokenMetadata,tokenBalances[selectedTokenMetadata.id]).toNumber()\r\n      ) {\r\n        return [true, `Insufficient ${selectedTokenMetadata.symbol} Balance`];\r\n      }\r\n    }\r\n\r\n    return [false, 'Deposit'];\r\n  }, [amount, tokenBalances, selectedTokenMetadata, allowance]);\r\n\r\n  const tokenBalance = useMemo(() => {\r\n    if (tokenBalances && tokenId) {\r\n      return tokenBalances[tokenId];\r\n    }\r\n\r\n    return 0;\r\n  }, [tokenBalances, tokenId]);\r\n\r\n  const isLoading = useMemo(() =>\r\n      supportedTokenListState === FeatureState.Loading ||\r\n      balancesState === FeatureState.Loading,\r\n    [supportedTokenListState, balancesState]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const tokenId = query.get('tokenId');\r\n    const fromQueryValue = query.get('amount');\r\n\r\n    if (fromQueryValue) {\r\n      dispatch(depositViewActions.setAmount(fromQueryValue));\r\n    }\r\n\r\n    if (tokenId) {\r\n      handleSelectTokenId(tokenId);\r\n    }\r\n\r\n    return () => {\r\n      dispatch(depositViewActions.setAmount(''));\r\n    };\r\n  }, []);\r\n\r\n  var connectedWalletInfo = artemis.connectedWalletInfo;\r\n  \r\n  return (\r\n    <>\r\n      <ViewHeader title={ \"Deposit \"+ selectedTokenMetadata?.symbol + '' } onArrowBack={() => navigate('/assets')}/>\r\n      <Box my={5}>\r\n        <Token\r\n          isLoading={isLoading}\r\n          value={amount}\r\n          setValue={(value) => dispatch(depositViewActions.setAmount(value))}\r\n          sources={[\r\n            {\r\n              name: connectedWalletInfo?.name,\r\n              src: connectedWalletInfo?.icon,\r\n              balance: tokenBalance,\r\n            },\r\n          ]}\r\n          tokenListMetadata={supportedTokenList}\r\n          tokenMetadata={selectedTokenMetadata}\r\n        >\r\n          <TokenContent>\r\n            <TokenDetailsButton onClick={handleOpenSelectTokenModal}>\r\n              <TokenDetailsLogo />\r\n              <TokenDetailsSymbol />\r\n            </TokenDetailsButton>\r\n            <TokenInput autoFocus />\r\n          </TokenContent>\r\n          <TokenData>\r\n            <TokenDataBalances onMaxClick={handleMaxClick} />\r\n            <TokenDataPrice />\r\n          </TokenData>\r\n          <TokenDataMetaInfo \r\n                tokenSymbol={selectedTokenMetadata?selectedTokenMetadata.symbol:''}\r\n                pageInfo=\"deposit\"\r\n                tokenValue={amount}></TokenDataMetaInfo>\r\n        </Token>\r\n      </Box>\r\n      <FeeBox token={selectedTokenMetadata} isDeposit />\r\n      \r\n      <Button  isFullWidth  size=\"lg\"  variant=\"gradient\" colorScheme=\"dark-blue\" \r\n      isDisabled={buttonDisabled} onClick={handleDeposit} isLoading={isLoading}>\r\n        {buttonMessage}\r\n      </Button>\r\n    </>\r\n  )\r\n};\r\n","export * from './deposit';\r\nexport * from './list';\r\nexport * from './withdraw';\r\nexport * from './transfer';\r\n","import { Flex, HStack, Icon, Stack, Text, useColorModeValue, ButtonGroup, Button } from '@chakra-ui/react';\r\nimport { toBigNumber } from '@sonicdex/sonic-js';\r\nimport { FaInfoCircle } from '@react-icons/all-files/fa/FaInfoCircle';\r\nimport { FaMinus } from '@react-icons/all-files/fa/FaMinus';\r\nimport { FaPlus } from '@react-icons/all-files/fa/FaPlus';\r\nimport { useCallback, useMemo, useState } from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport {\r\n  Asset, AssetIconButton, AssetImageBlock, AssetTitleBlock, DisplayValue, Header,\r\n  InformationBox, WalletNotConnected, TokenBalancesPopover,\r\n} from '@/components';\r\n\r\nimport { getAppAssetsSources } from '@/config/utils';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { AppTokenMetadata } from '@/models';\r\n\r\nimport {\r\n  assetsViewActions, FeatureState, useAppDispatch, useAssetsViewStore,\r\n  usePriceStore, useSwapCanisterStore, useWalletStore\r\n} from '@/store';\r\n\r\n\r\nimport { DepostAddressModal, RetryFailedTrxModal } from '@/components/modals';\r\n\r\nRetryFailedTrxModal;\r\n\r\nconst getAssetPriceByBalance = (price?: string, balance?: number, decimals?: number) => {\r\n  if (price && balance && decimals) {\r\n    return (\r\n      Number(price) * Number(toBigNumber(balance).applyDecimals(decimals).toString())\r\n    );\r\n  }\r\n  return price;\r\n};\r\n\r\nexport const AssetsListView = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isBannerOpened } = useAssetsViewStore();\r\n  const { totalBalances, sonicBalances, tokenBalances } = useBalances();\r\n  const { supportedTokenListState, balancesState, supportedTokenList } = useSwapCanisterStore();\r\n\r\n  const { icpPrice } = usePriceStore();\r\n  const { isConnected } = useWalletStore();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const navigateToDeposit = (tokenId?: string) => {\r\n    if (tokenId) { navigate(`/assets/deposit?tokenId=${tokenId}`); }\r\n  };\r\n\r\n  const navigateToWithdraw = (tokenId?: string) => {\r\n    if (tokenId) { navigate(`/assets/withdraw?tokenId=${tokenId}`); }\r\n  };\r\n  const navigateToTransfer = (tokenId?: string) => {\r\n    if (tokenId) { navigate(`/assets/transfer?tokenId=${tokenId}`); }\r\n  };\r\n\r\n  const handleBannerClose = () => {\r\n    dispatch(assetsViewActions.setIsBannerOpened(false));\r\n  };\r\n\r\n\r\n  const notEmptyTokenList = useMemo(() => {\r\n    const supportedTokenListWithICP: AppTokenMetadata[] = [\r\n      ...(supportedTokenList || []),\r\n    ];\r\n    if (totalBalances) {\r\n      return supportedTokenListWithICP.filter(\r\n        (token) => totalBalances[token.id] !== 0\r\n      );\r\n    }\r\n    return [];\r\n  }, [supportedTokenList, totalBalances, icpPrice]);\r\n\r\n  const isTokenListPresent = useMemo(() => notEmptyTokenList && notEmptyTokenList.length > 0, [notEmptyTokenList]);\r\n\r\n  const isLoading = useMemo(() =>\r\n    supportedTokenListState === FeatureState.Loading ||\r\n    balancesState === FeatureState.Loading,\r\n    [supportedTokenListState, balancesState]\r\n  );\r\n\r\n  const isUpdating = useMemo(() =>\r\n    supportedTokenListState === FeatureState.Updating ||\r\n    balancesState === FeatureState.Updating,\r\n    [supportedTokenListState, balancesState]\r\n  );\r\n\r\n  const assetsDetailsTextColor = useColorModeValue('gray.800', 'custom.1');\r\n  const headerColor = useColorModeValue('gray.600', 'gray.400');\r\n\r\n  const getCanWithdraw = useCallback(\r\n    (tokenId: string) => {\r\n      return (tokenId !== ICP_METADATA.id && sonicBalances && sonicBalances[tokenId] > 0);\r\n    },\r\n    [sonicBalances]\r\n  );\r\n  const [isModelOpen, setisModelOpen] = useState(false);\r\n  const [tokenSelected, settokenSelected] = useState('');\r\n\r\n  const [isFailedTrxOpen, setIsFailedTrxOpen] = useState(0);\r\n  const retryFailedTrx = () => { var r = Math.random() * 100; setIsFailedTrxOpen(r); };\r\n\r\n  const showDepositModal = function (tokenId: string) {\r\n    setisModelOpen(true);\r\n    settokenSelected(tokenId);\r\n  }\r\n\r\n  const getCanDeposit = useCallback(\r\n    (tokenId: string) => {\r\n      return (tokenId !== ICP_METADATA.id && tokenBalances && tokenBalances[tokenId] > 0);\r\n    },\r\n    [tokenBalances]\r\n  );\r\n  retryFailedTrx;\r\n  return (\r\n    <>\r\n      <RetryFailedTrxModal  isRetryOpen={isFailedTrxOpen}/>\r\n      <DepostAddressModal isNotiOpen={isModelOpen} tokenId={tokenSelected} onclose={() => { setisModelOpen(false); }} />\r\n      <Header title=\"Your Assets\" isUpdating={isUpdating}>\r\n        {isBannerOpened && (\r\n          <InformationBox title=\"Assets Details\" mb={9} onClose={handleBannerClose}>\r\n            <Text color={assetsDetailsTextColor}>\r\n            It is the representation of total token assets in your wallets and sonic wallet associated with this wallet account.\r\n            </Text>\r\n          </InformationBox>\r\n        )}\r\n        <Flex alignItems={'self-end'} w=\"100%\" flexDirection=\"column\">\r\n          <Flex>\r\n            <Button size=\"md\" variant=\"gradient\" colorScheme=\"dark-blue\" isLoading={isLoading}  onClick={retryFailedTrx}>\r\n              Retry Failed Deposit\r\n            </Button>\r\n          </Flex>\r\n        </Flex>\r\n      </Header>\r\n\r\n      {!isConnected ? (\r\n        <WalletNotConnected message=\"Your assets will appear here.\" />\r\n      ) : (\r\n\r\n        <Stack spacing={4} pb={8} flex={1}>\r\n          {isLoading ? (\r\n            <>\r\n              <Asset isLoading>\r\n                <AssetImageBlock />\r\n                <HStack>\r\n                  <AssetIconButton aria-label=\"Deposit\" icon={<FaPlus />} />\r\n                  <AssetIconButton aria-label=\"Withdraw\" icon={<FaMinus />} />\r\n                  <AssetIconButton aria-label=\"Deposit\" icon={<FaPlus />} />\r\n                </HStack>\r\n              </Asset>\r\n              <Asset isLoading>\r\n                <AssetImageBlock />\r\n                <HStack>\r\n                  <AssetIconButton aria-label=\"Deposit\" icon={<FaPlus />} />\r\n                  <AssetIconButton aria-label=\"Withdraw\" icon={<FaMinus />} />\r\n                </HStack>\r\n              </Asset>\r\n            </>\r\n          ) : isTokenListPresent ? (\r\n            notEmptyTokenList.map(\r\n              ({ id, name, symbol, decimals, price, logo }) => (\r\n                <Asset key={id} imageSources={[logo]}>\r\n                  <HStack spacing={4} flex={2} minW={['100%', '200px', '200px']} overflow=\"hidden\" mr={4}>\r\n                    <AssetImageBlock />\r\n                    <AssetTitleBlock title={symbol} subtitle={name} maxW={['100%', '140px', '140px']} />\r\n                  </HStack>\r\n                  <TokenBalancesPopover\r\n                    sources={getAppAssetsSources({\r\n                      balances: {\r\n                        wallet: id === ICP_METADATA.id ? totalBalances?.[id] : tokenBalances?.[id],\r\n                        sonic: sonicBalances?.[id],\r\n                      },\r\n                    })}\r\n                    decimals={decimals} symbol={symbol}\r\n                  >\r\n                    <Flex flex={1} direction=\"column\">\r\n                      <Text fontWeight=\"bold\" color={headerColor} display=\"flex\" alignItems=\"center\">\r\n                        Balance\r\n                        <Icon as={FaInfoCircle} w={4} h={4} ml={1.5} opacity={0.45} />\r\n                      </Text>\r\n                      <DisplayValue isUpdating={isUpdating} value={totalBalances?.[id]}\r\n                        decimals={decimals} fontWeight=\"bold\" disableTooltip shouldDivideByDecimals\r\n                      />\r\n                    </Flex>\r\n                  </TokenBalancesPopover>\r\n                  <Flex flex={1} direction=\"column\">\r\n                    <Text fontWeight=\"bold\" color={headerColor}>\r\n                      Price\r\n                    </Text>\r\n                    <DisplayValue isUpdating={isUpdating} fontWeight=\"bold\" prefix=\"~$\"\r\n                      value={\r\n                        (id == 'ryjl3-tyaaa-aaaaa-aaaba-cai') ?\r\n                          ((totalBalances?.[id]) ? (totalBalances?.[id] / 10 ** decimals) : 0) * (parseFloat(icpPrice || '1')) :\r\n                          getAssetPriceByBalance(price, totalBalances?.[id], decimals) ?? 0\r\n                      }\r\n                    />\r\n                  </Flex>\r\n                  <HStack>\r\n                    <AssetIconButton aria-label={`Withdraw ${symbol} From Sonic`} icon={<FaMinus />}\r\n                      onClick={() => navigateToWithdraw(id)} isDisabled={!getCanWithdraw(id)}\r\n                    />\r\n                    <AssetIconButton colorScheme=\"dark-blue\" aria-label={`Deposit ${symbol} to Sonic`} icon={<FaPlus />}\r\n                      onClick={() => navigateToDeposit(id)} isDisabled={!getCanDeposit(id)}\r\n                    />\r\n                  </HStack>\r\n                  <Flex flex={1} direction=\"column\" alignItems='end' gap='2' minW={['100%']}>\r\n                    <ButtonGroup gap='2'>\r\n                      <Button fontSize={14} px={6} onClick={() => showDepositModal(id)} >Deposit</Button>\r\n                      <Button fontSize={14} px={6} onClick={() => navigateToTransfer(id)} >Send</Button>\r\n                    </ButtonGroup>\r\n                  </Flex>\r\n                </Asset>\r\n              )\r\n            )\r\n          ) : (\r\n            <Text textAlign=\"center\" color={headerColor}>\r\n              No assets available\r\n            </Text>\r\n          )}\r\n        </Stack>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { Box, Button, Skeleton, Input, Text } from '@chakra-ui/react';\r\nimport { toBigNumber } from '@sonicdex/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport { FeeBox } from '@/components/core/fee-box';\r\nimport { useQuery } from '@/hooks/use-query';\r\nimport {\r\n  Token, TokenContent, TokenData, TokenDataBalances, TokenDataPrice, TokenDetailsButton,\r\n  TokenDetailsLogo, TokenDetailsSymbol, TokenDataMetaInfo, TokenInput, ViewHeader,\r\n} from '@/components';\r\n\r\n\r\nimport {\r\n  transferViewActions, FeatureState, NotificationType, useAppDispatch, useTransferViewStore,\r\n  useNotificationStore, useSwapCanisterStore, useTokenModalOpener, useWalletStore\r\n} from '@/store';\r\n\r\nimport { getMaxValue } from '@/utils/format';\r\nimport { debounce } from '@/utils/function';\r\nimport { tokenList } from '@/utils';\r\n\r\nimport { artemis } from '@/integrations/artemis';\r\n\r\nexport const AssetsTransferView = () => {\r\n  const query = useQuery();\r\n  const { supportedTokenList, tokenBalances, balancesState, supportedTokenListState } = useSwapCanisterStore();\r\n\r\n  const { isConnected } = useWalletStore()\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const ICPTOKENID='ryjl3-tyaaa-aaaaa-aaaba-cai';\r\n  const { amount, tokenId , toAddress ,addressType} = useTransferViewStore(); \r\n   \r\n  const { addNotification } = useNotificationStore();\r\n  const openSelectTokenModal = useTokenModalOpener();\r\n\r\n  const selectedTokenMetadata = tokenId ? tokenList('obj')[tokenId] : tokenList('obj')[ICPTOKENID];\r\n\r\n  const supportingAddrsType: string = useMemo(() => {\r\n    if (selectedTokenMetadata?.id == ICPTOKENID) {\r\n      return 'both';\r\n    } else return 'principalId';\r\n  }, [selectedTokenMetadata])\r\n\r\n  const handleSelectTokenId = (tokenId?: string) => {\r\n    if (tokenId) { dispatch(transferViewActions.setTokenId(tokenId)); }\r\n\r\n  };\r\n\r\n  const handleOpenSelectTokenModal = () => {\r\n    openSelectTokenModal({ metadata: supportedTokenList, onSelect: (tokenId) => handleSelectTokenId(tokenId), selectedTokenIds: [] });\r\n  };\r\n\r\n  const handleTransfer = () => {\r\n    addNotification({ title: `Transfer ${amount} ${selectedTokenMetadata?.symbol}`, type: NotificationType.Transfer, id: String(new Date().getTime()), });\r\n    debounce(() => dispatch(transferViewActions.setAmount('')), 300);\r\n  };\r\n\r\n  const handleMaxClick = () => {\r\n    if (tokenBalance && selectedTokenMetadata)\r\n      dispatch(transferViewActions.setAmount(getMaxValue(selectedTokenMetadata, tokenBalance, true).toString()));\r\n  };\r\n  //const [toAddress, setToAddress] = useState('');\r\n\r\n  const [buttonDisabled, buttonMessage] = useMemo<[boolean, string]>(() => {\r\n    if (!isConnected) return [true, 'Connect wallet'];\r\n    if (!selectedTokenMetadata?.id) return [true, 'Select a Token'];\r\n    const parsedFromValue = (amount && parseFloat(amount)) || 0;\r\n    if (parsedFromValue <= 0) return [true, `Enter ${selectedTokenMetadata?.symbol} Amount`];\r\n    if (parsedFromValue <= toBigNumber(selectedTokenMetadata.fee).applyDecimals(selectedTokenMetadata.decimals).toNumber()) {\r\n      return [true, `Amount must be greater than fee`];\r\n    }\r\n\r\n    if (tokenBalances && selectedTokenMetadata) {\r\n      if (parsedFromValue > getMaxValue(selectedTokenMetadata, tokenBalances[selectedTokenMetadata.id], true).toNumber()) {\r\n        return [true, `Insufficient ${selectedTokenMetadata.symbol} Balance`];\r\n      }\r\n    }\r\n   // const addressType = checkAddressType(toAddress);\r\n    if (supportingAddrsType == 'both') {\r\n      if (addressType == 'none') {\r\n        return [true, 'Invalid Address'];\r\n      }\r\n    } else {\r\n      if (supportingAddrsType != addressType) {\r\n        return [true, 'Invalid Address'];\r\n      }\r\n    }\r\n    return [false, `Send ${amount} ${selectedTokenMetadata.symbol} `];\r\n  }, [amount, toAddress, tokenBalances, selectedTokenMetadata,addressType]);\r\n\r\n  const tokenBalance = useMemo(() => {\r\n    if (tokenBalances && tokenId) return tokenBalances[tokenId];\r\n    return 0;\r\n  }, [tokenBalances, tokenId ]);\r\n\r\n  const isLoading = useMemo(() =>\r\n    supportedTokenListState === FeatureState.Loading ||\r\n    balancesState === FeatureState.Loading,\r\n    [supportedTokenListState, balancesState]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const tokenId = query.get('tokenId');\r\n    if (tokenId) handleSelectTokenId(tokenId);\r\n    return () => { dispatch(transferViewActions.setAmount('')); };\r\n  }, []);\r\n\r\n  const connectedWalletInfo = artemis.connectedWalletInfo;\r\n\r\n  const handleToAddressChange = (event: any) => {\r\n    dispatch(transferViewActions.setToAddress(event?.target?.value))\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ViewHeader title={\"Transfer \" + selectedTokenMetadata?.symbol + ''} onArrowBack={() => navigate('/assets')} />\r\n      <Box my={5}>\r\n        <Token isLoading={isLoading} value={amount}\r\n          setValue={(value) => dispatch(transferViewActions.setAmount(value))}\r\n          sources={[{ name: connectedWalletInfo?.name, src: connectedWalletInfo?.icon, balance: tokenBalance }]}\r\n          tokenListMetadata={supportedTokenList} tokenMetadata={selectedTokenMetadata}\r\n        >\r\n          <TokenContent>\r\n            <TokenDetailsButton onClick={handleOpenSelectTokenModal}>\r\n              <TokenDetailsLogo />\r\n              <TokenDetailsSymbol />\r\n            </TokenDetailsButton>\r\n            <TokenInput autoFocus />\r\n          </TokenContent>\r\n          <TokenData>\r\n            <TokenDataBalances onMaxClick={handleMaxClick} />\r\n            <TokenDataPrice />\r\n          </TokenData>\r\n          <TokenDataMetaInfo\r\n            tokenSymbol={selectedTokenMetadata ? selectedTokenMetadata.symbol : ''}\r\n            pageInfo=\"deposit\"\r\n            tokenValue={amount}></TokenDataMetaInfo>\r\n          <Skeleton isLoaded={!isLoading} borderRadius=\"6\" mt={'3'}>\r\n            <Text mb=\"4\" fontWeight={600}> To :</Text>\r\n            <Input type=\"text\" value={toAddress} onChange={handleToAddressChange} fontSize={'large'}\r\n              placeholder={`Enter ${supportingAddrsType === 'both' ? 'Principal ID or Account ID' : supportingAddrsType === 'accountId' ? 'Account ID' : supportingAddrsType === 'principalId' ? 'Principal ID' : ''}`}\r\n              size=\"md\" />\r\n          </Skeleton>\r\n        </Token>\r\n      </Box>\r\n      <FeeBox isTransfer token={selectedTokenMetadata} />\r\n\r\n      <Button isFullWidth size=\"lg\" variant=\"gradient\" colorScheme=\"dark-blue\"\r\n        isDisabled={buttonDisabled} onClick={handleTransfer} isLoading={isLoading}>\r\n        {buttonMessage}\r\n      </Button>\r\n    </>\r\n  )\r\n};\r\n","import { Box, Button } from '@chakra-ui/react';\r\nimport { toBigNumber } from '@sonicdex/sonic-js';\r\nimport { useEffect, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport { sonicCircleSrc } from '@/assets';\r\nimport {\r\n  Token,\r\n  TokenContent,\r\n  TokenData,\r\n  TokenDataBalances,\r\n  TokenDataPrice,\r\n  TokenDetailsButton,\r\n  TokenDetailsLogo,\r\n  TokenDetailsSymbol,\r\n  TokenInput,\r\n  ViewHeader,\r\n} from '@/components';\r\nimport { FeeBox } from '@/components/core/fee-box';\r\nimport { useQuery } from '@/hooks/use-query';\r\nimport {\r\n  FeatureState,\r\n  NotificationType,\r\n  useAppDispatch,\r\n  useNotificationStore,\r\n  useSwapCanisterStore,\r\n  useTokenModalOpener,\r\n  useWithdrawViewStore,\r\n  withdrawViewActions,\r\n} from '@/store';\r\nimport { formatValue } from '@/utils/format';\r\nimport { debounce } from '@/utils/function';\r\n\r\nexport const AssetsWithdrawView = () => {\r\n  const query = useQuery();\r\n  const { amount, tokenId } = useWithdrawViewStore();\r\n  const {\r\n    supportedTokenList,\r\n    sonicBalances,\r\n    balancesState,\r\n    supportedTokenListState,\r\n  } = useSwapCanisterStore();\r\n\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const { addNotification } = useNotificationStore();\r\n  const openSelectTokenModal = useTokenModalOpener();\r\n\r\n  const selectedTokenMetadata = useMemo(() => {\r\n    if (tokenId && supportedTokenList) {\r\n      return supportedTokenList.find(({id}) => id === tokenId);\r\n    }\r\n    return undefined;\r\n  }, [supportedTokenList, tokenId]);\r\n\r\n  const handleSelectTokenId = (tokenId?: string) => {\r\n    if (tokenId) {\r\n      dispatch(withdrawViewActions.setTokenId(tokenId));\r\n    }\r\n  };\r\n\r\n  const handleOpenSelectTokenModal = () => {\r\n    openSelectTokenModal({\r\n      metadata: supportedTokenList,\r\n      onSelect: (tokenId) => handleSelectTokenId(tokenId),\r\n      selectedTokenIds: [],\r\n    });\r\n  };\r\n\r\n  const [buttonDisabled, buttonMessage] = useMemo<[boolean, string]>(() => {\r\n    if (!selectedTokenMetadata?.id) return [true, 'Select a Token'];\r\n\r\n    const parsedFromValue = (amount && parseFloat(amount)) || 0;\r\n\r\n    if (parsedFromValue <= 0)\r\n      return [true, `Enter ${selectedTokenMetadata?.symbol} Amount`];\r\n\r\n    if (\r\n      parsedFromValue <=\r\n      toBigNumber(selectedTokenMetadata.fee)\r\n        .applyDecimals(selectedTokenMetadata.decimals)\r\n        .toNumber()\r\n    ) {\r\n      return [true, `Amount must be greater than fee`];\r\n    }\r\n\r\n    if (sonicBalances && selectedTokenMetadata) {\r\n      const parsedBalance = parseFloat(\r\n        formatValue(\r\n          sonicBalances[selectedTokenMetadata.id],\r\n          selectedTokenMetadata.decimals\r\n        )\r\n      );\r\n\r\n      if (parsedFromValue > parsedBalance) {\r\n        return [true, `Insufficient ${selectedTokenMetadata.symbol} Balance`];\r\n      }\r\n    }\r\n\r\n    return [false, 'Withdraw'];\r\n  }, [amount, sonicBalances, selectedTokenMetadata]);\r\n\r\n  const tokenBalance = useMemo(() => {\r\n    if (sonicBalances && tokenId) {\r\n      return sonicBalances[tokenId];\r\n    }\r\n\r\n    return 0;\r\n  }, [sonicBalances, tokenId]);\r\n\r\n  useEffect(() => {\r\n    const tokenId = query.get('tokenId');\r\n    const amount = query.get('amount');\r\n\r\n    if (amount) {\r\n      dispatch(withdrawViewActions.setAmount(amount));\r\n    }\r\n\r\n    if (tokenId) {\r\n      handleSelectTokenId(tokenId);\r\n    }\r\n\r\n    return () => {\r\n      dispatch(withdrawViewActions.setAmount(''));\r\n    };\r\n  }, []);\r\n\r\n  const handleWithdraw = () => {\r\n    addNotification({\r\n      title: `Withdraw ${amount} ${selectedTokenMetadata?.symbol}`,\r\n      type: NotificationType.Withdraw,\r\n      id: String(new Date().getTime()),\r\n    });\r\n\r\n    debounce(() => dispatch(withdrawViewActions.setAmount('')), 300);\r\n  };\r\n\r\n  const handleMaxClick = () => {\r\n    dispatch(\r\n      withdrawViewActions.setAmount(\r\n        toBigNumber(tokenBalance)\r\n          .applyDecimals(selectedTokenMetadata?.decimals ?? 0)\r\n          .toString()\r\n      )\r\n    );\r\n  };\r\n\r\n  const isLoading = useMemo(\r\n    () =>\r\n      supportedTokenListState === FeatureState.Loading ||\r\n      balancesState === FeatureState.Loading,\r\n    [balancesState, supportedTokenListState]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <ViewHeader\r\n        title={\"Withdraw \"+ selectedTokenMetadata?.symbol + ''}\r\n        onArrowBack={() => navigate('/assets')}\r\n      />\r\n      <Box my={5}>\r\n        <Token\r\n          value={amount}\r\n          setValue={(value) => dispatch(withdrawViewActions.setAmount(value))}\r\n          tokenListMetadata={supportedTokenList}\r\n          tokenMetadata={selectedTokenMetadata}\r\n          isLoading={isLoading}\r\n          sources={[\r\n            {\r\n              name: 'Sonic',\r\n              src: sonicCircleSrc,\r\n              balance: tokenBalance,\r\n            },\r\n          ]}\r\n        >\r\n          <TokenContent>\r\n            <TokenDetailsButton onClick={handleOpenSelectTokenModal}>\r\n              <TokenDetailsLogo />\r\n              <TokenDetailsSymbol />\r\n            </TokenDetailsButton>\r\n\r\n            <TokenInput autoFocus />\r\n          </TokenContent>\r\n          <TokenData>\r\n            <TokenDataBalances onMaxClick={handleMaxClick} />\r\n            <TokenDataPrice />\r\n          </TokenData>\r\n        </Token>\r\n      </Box>\r\n      <FeeBox token={selectedTokenMetadata} />\r\n      <Button\r\n        isFullWidth\r\n        variant=\"gradient\"\r\n        colorScheme=\"dark-blue\"\r\n        size=\"lg\"\r\n        onClick={handleWithdraw}\r\n        isLoading={isLoading}\r\n        isDisabled={buttonDisabled}\r\n      >\r\n        {buttonMessage}\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n","export * from './activity';\r\nexport * from './assets';\r\nexport * from './liquidity';\r\nexport * from './swap';\r\nexport * from './test';\r\n","import {\r\n  Box, Button, Center, Flex, HStack, Icon, IconButton, Menu, MenuButton, MenuList, Popover, PopoverArrow, PopoverBody,\r\n  PopoverContent, PopoverHeader, PopoverTrigger, Skeleton, Stack, Text, Tooltip, useColorModeValue,\r\n} from '@chakra-ui/react';\r\n\r\nimport { Liquidity } from '@sonicdex/sonic-js';\r\nimport { FaCog } from '@react-icons/all-files/fa/FaCog';\r\nimport { FaEquals } from '@react-icons/all-files/fa/FaEquals';\r\nimport { FaInfoCircle } from '@react-icons/all-files/fa/FaInfoCircle';\r\nimport { FaPlus } from '@react-icons/all-files/fa/FaPlus';\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport {\r\n  DisplayValue, LPImageBlock, SlippageSettings, StackLine, Token, TokenContent, TokenData, TokenDataBalances, TokenDataPrice,\r\n  TokenDetailsButton, TokenDetailsLogo, TokenDetailsSymbol, TokenDataMetaInfo, TokenInput, ViewHeader,\r\n  WalletNotConnected\r\n} from '@/components';\r\n\r\nimport { useTokenAllowance, useTokenBalanceMemo } from '@/hooks';\r\nimport { useBalances } from '@/hooks/use-balances';\r\nimport { useQuery } from '@/hooks/use-query';\r\n\r\nimport {\r\n  FeatureState, INITIAL_LIQUIDITY_SLIPPAGE, LiquidityTokenDataKey, liquidityViewActions, NotificationType, useAppDispatch,\r\n  useLiquidityViewStore, useNotificationStore, useWalletStore, usePriceStore, useSwapCanisterStore, useTokenModalOpener,\r\n} from '@/store';\r\n\r\nimport { AppLog } from '@/utils';\r\nimport { getMaxValue } from '@/utils/format';\r\nimport { debounce } from '@/utils/function';\r\n\r\nimport { useAddLiquidityMemo, useTokenSourceMemo } from './liquidity.utils';\r\n\r\nexport const LiquidityAddView = () => {\r\n  const query = useQuery();\r\n  const { isConnected } = useWalletStore();\r\n\r\n  const { addNotification } = useNotificationStore();\r\n  const { token0, token1, slippage, pair, pairState } = useLiquidityViewStore();\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const balances = useBalances();\r\n  const { tokenBalances, sonicBalances, totalBalances } = balances;\r\n  var { supportedTokenList, supportedTokenListState, balancesState } =\r\n    useSwapCanisterStore();\r\n  const { state: priceState } = usePriceStore();\r\n  const openSelectTokenModal = useTokenModalOpener();\r\n\r\n  const [isReviewing, setIsReviewing] = useState(false);\r\n  const [autoSlippage, setAutoSlippage] = useState(true);\r\n\r\n  const handlePreviousStep = () => {\r\n    if (isReviewing) setIsReviewing(false);\r\n    else navigate('/liquidity');\r\n  };\r\n  const handleAddLiquidity = () => {\r\n    if (!isReviewing) { \r\n      setIsReviewing(true);return;\r\n    }\r\n\r\n    addNotification({\r\n      title: `Add LP of ${token0.value} ${token0.metadata?.symbol} + ${token1.value} ${token1.metadata?.symbol}`,\r\n      type: NotificationType.AddLiquidity,\r\n      id: String(new Date().getTime()),\r\n    });\r\n\r\n    debounce(() => {\r\n      dispatch(liquidityViewActions.setValue({ data: 'token0', value: '' }));\r\n      dispatch(liquidityViewActions.setValue({ data: 'token1', value: '' }));\r\n      setIsReviewing(false);\r\n      navigate('/liquidity');\r\n    }, 300);\r\n  };\r\n\r\n  const handleTokenMaxClick = (dataKey: LiquidityTokenDataKey) => {\r\n    const token = dataKey === 'token0' ? token0 : token1;\r\n    const tokenBalance = dataKey === 'token0' ? token0Balance : token1Balance;\r\n    if (!token || !tokenBalance) return;\r\n    const maxValue = getMaxValue(token.metadata, tokenBalance).toString();\r\n    setInAndOutTokenValues(dataKey, maxValue);\r\n  };\r\n\r\n  const lockedPairsList = [['ryjl3-tyaaa-aaaaa-aaaba-cai', 'utozz-siaaa-aaaam-qaaxq-cai']];\r\n\r\n\r\n  const handleSelectToken = (dataKey: LiquidityTokenDataKey) => {\r\n    if (!isReviewing) {\r\n\r\n      const excludeToken = (() => {\r\n        const foundPair = lockedPairsList.find(pair => {\r\n          if (dataKey === 'token0') {\r\n            return pair[0] === token1.metadata?.id || pair[1] === token1.metadata?.id;\r\n          } else if (dataKey === 'token1') {\r\n            return pair[0] === token0.metadata?.id || pair[1] === token0.metadata?.id;\r\n          }\r\n          return false;\r\n        });\r\n        return foundPair ? foundPair.find(x => x !== (token0.metadata?.id || token1.metadata?.id)) : '';\r\n      })();\r\n\r\n      const customTokenList = supportedTokenList ? supportedTokenList.filter(x => {\r\n        if (dataKey === 'token0') {\r\n          return x.id !== token1.metadata?.id && x.id !== excludeToken;\r\n        } else if (dataKey === 'token1') {\r\n          return x.id !== token0.metadata?.id && x.id !== excludeToken;\r\n        }\r\n      }) : [];\r\n\r\n      openSelectTokenModal({\r\n        metadata: customTokenList,\r\n        onSelect: (tokenId) => {\r\n          if (tokenId && supportedTokenList) {\r\n            if (token0.metadata?.id === tokenId || token1.metadata?.id === tokenId) {\r\n              return;\r\n            }\r\n            const foundToken = supportedTokenList.find(({ id }) => id === tokenId);\r\n            dispatch(liquidityViewActions.setToken({ data: dataKey, token: foundToken }));\r\n            dispatch(liquidityViewActions.setValue({ data: 'token0', value: '' }));\r\n            dispatch(liquidityViewActions.setValue({ data: 'token1', value: '' }));\r\n          }\r\n        },\r\n        selectedTokenIds,\r\n      });\r\n    }\r\n  };\r\n\r\n  type useTokenTaxCheckOptions = {\r\n    balances?: any;\r\n    tokenId?: string;\r\n    tokenDecimals?: number;\r\n    tokenValue?: string;\r\n    tokenSymbol?: string;\r\n    needAsNetValue?: boolean;\r\n  };\r\n\r\n  const useTokenTaxCheck = ({ balances, tokenId, tokenSymbol, tokenDecimals = 1, tokenValue = '', needAsNetValue = false }: useTokenTaxCheckOptions) => {\r\n    const { sonicBalances, tokenBalances, icpBalance } = balances;\r\n    const tokenInfo = { wallet: 0, sonic: 0, taxInfo: { input: 0, taxedValue: 0, nonTaxedValue: 0, netValue: 0 } }\r\n    if (tokenId != '' && tokenId != 'ICP' && sonicBalances && tokenBalances) {\r\n      var id = tokenId ? tokenId : '';\r\n      tokenInfo['wallet'] = tokenBalances[id] ? tokenBalances[id] : 0;\r\n      tokenInfo['sonic'] = sonicBalances[id] ? sonicBalances[id] : 0;\r\n    } else { tokenInfo['wallet'] = icpBalance ? icpBalance : 0; }\r\n    if (tokenValue) {\r\n      let tokenVal: number = parseFloat(tokenValue)\r\n      if (tokenSymbol == 'YC') {\r\n        let decimals = tokenDecimals ? (10 ** tokenDecimals) : 1\r\n        let sonicBalance = tokenInfo['sonic'] / decimals;\r\n\r\n        if ((sonicBalance > tokenVal)) {\r\n          tokenInfo.taxInfo.nonTaxedValue = tokenVal;\r\n          tokenInfo.taxInfo.taxedValue = 0;\r\n        } else {\r\n          tokenInfo.taxInfo.nonTaxedValue = sonicBalance;\r\n          tokenInfo.taxInfo.taxedValue = tokenVal - tokenInfo.taxInfo.nonTaxedValue;\r\n        }\r\n        if (needAsNetValue) {\r\n          if (tokenInfo.taxInfo.taxedValue > 0) {\r\n            tokenInfo.taxInfo.netValue = tokenInfo.taxInfo.nonTaxedValue + ((tokenVal - tokenInfo.taxInfo.nonTaxedValue) / 0.89);\r\n          } else {\r\n            tokenInfo.taxInfo.netValue = tokenInfo.taxInfo.nonTaxedValue;\r\n          }\r\n        } else {\r\n          tokenInfo.taxInfo.netValue = tokenInfo.taxInfo.nonTaxedValue + (tokenInfo.taxInfo.taxedValue * (89 / 100));\r\n        }\r\n      }\r\n    }\r\n    return tokenInfo\r\n  };\r\n  const setInAndOutTokenValues = useCallback(\r\n    (dataKey: LiquidityTokenDataKey, value?: string) => {\r\n      const [amountIn, reserveIn, reserveOut, decimalsIn, decimalsOut] =\r\n        dataKey === 'token0'\r\n          ? [value ?? token0.value, String(pair?.reserve0), String(pair?.reserve1),\r\n          Number(token0.metadata?.decimals), Number(token1.metadata?.decimals)]\r\n          : [value ?? token1.value, String(pair?.reserve1), String(pair?.reserve0),\r\n          Number(token1.metadata?.decimals), Number(token0.metadata?.decimals)];\r\n\r\n      try {\r\n        var token = (dataKey == 'token0') ? token0 : token1;\r\n        var convertToken = (dataKey == 'token0') ? token1 : token0;\r\n        var fromAmount = amountIn;\r\n        \r\n        if (token.metadata?.symbol == \"YC\") {\r\n          var info = useTokenTaxCheck({\r\n            balances: balances, tokenId: token.metadata.id, tokenSymbol: token.metadata.symbol, tokenDecimals: token.metadata.decimals, tokenValue: amountIn\r\n          });\r\n          fromAmount = info.taxInfo.netValue.toFixed(3);\r\n        }\r\n\r\n        const lpValue = Liquidity.getOppositeAmount({ amountIn: fromAmount ? fromAmount : '0', reserveIn, reserveOut, decimalsIn, decimalsOut });\r\n\r\n        var parsedLPValue = lpValue.toString();\r\n        if (convertToken.metadata?.symbol == \"YC\") {\r\n          var info = useTokenTaxCheck({\r\n            balances: balances, tokenId: convertToken.metadata.id, tokenSymbol: convertToken.metadata.symbol, tokenDecimals: convertToken.metadata.decimals,\r\n            tokenValue: parsedLPValue, needAsNetValue: true\r\n          });\r\n          parsedLPValue = info.taxInfo.netValue.toFixed(3);\r\n        }\r\n\r\n        dispatch(liquidityViewActions.setValue({ data: dataKey, value: amountIn }));\r\n\r\n        const reversedDataKey = dataKey === 'token0' ? 'token1' : 'token0';\r\n\r\n        if (lpValue.gt(0)) {\r\n          dispatch(liquidityViewActions.setValue({ data: reversedDataKey, value: parsedLPValue }));\r\n        }\r\n      } catch (e) {\r\n        if (e instanceof Error && e.message.startsWith('Minimal amountIn')) {\r\n          const minimalAmount = e.message.split(': ')[1];\r\n          setInAndOutTokenValues(dataKey, minimalAmount);\r\n        } else {\r\n          AppLog.warn('Failed to set token amount', e);\r\n        }\r\n      }\r\n    },\r\n    [dispatch, pair?.reserve0, pair?.reserve1, token0.metadata, token0.value, token1.metadata, token1.value]\r\n  );\r\n  // Memorized values\r\n  const token0Balance = useTokenBalanceMemo(token0.metadata?.id);\r\n  const token1Balance = useTokenBalanceMemo(token1.metadata?.id);\r\n  const token0Allowance = useTokenAllowance(token0.metadata?.id);\r\n  const token1Allowance = useTokenAllowance(token1.metadata?.id);\r\n\r\n  const isLoading = useMemo(\r\n    () =>\r\n      supportedTokenListState === FeatureState.Loading || pairState === FeatureState.Loading,\r\n    [supportedTokenListState, pairState]\r\n  );\r\n\r\n  const isBalancesUpdating = useMemo(() => balancesState === FeatureState.Updating, [balancesState]);\r\n  const isPriceUpdating = useMemo( () => priceState === FeatureState.Updating, [priceState]);\r\n\r\n  const [buttonDisabled, buttonMessage] = useMemo<[boolean, string]>(() => {\r\n    if (isLoading) return [true, 'Loading'];\r\n    if (!token0.metadata || !token1.metadata) return [true, 'Select Tokens'];\r\n\r\n    const parsedToken0Value = (token0.value && parseFloat(token0.value)) || 0;\r\n    const parsedToken1Value = (token1.value && parseFloat(token1.value)) || 0;\r\n\r\n    if ( typeof token0Allowance !== 'number' || typeof token1Allowance !== 'number') {\r\n      return [true, 'Getting allowance'];\r\n    }\r\n\r\n    if (parsedToken0Value <= 0)\r\n      return [true, `Enter ${token0.metadata.symbol} Amount`];\r\n\r\n    if (parsedToken1Value <= 0)\r\n      return [true, `Enter ${token1.metadata.symbol} Amount`];\r\n\r\n    if ( totalBalances && typeof token0Balance === 'number' && typeof token1Balance === 'number') {\r\n      if ( parsedToken0Value > getMaxValue(token0.metadata, token0Balance).toNumber()) {\r\n        return [true, `Insufficient ${token0.metadata.symbol} Balance`];\r\n      }\r\n\r\n      if ( parsedToken1Value > getMaxValue(token1.metadata, token1Balance).toNumber()) {\r\n        return [true, `Insufficient ${token1.metadata.symbol} Balance`];\r\n      }\r\n    }\r\n\r\n    if (isReviewing) return [false, 'Confirm Supply'];\r\n    return [false, 'Review Supply'];\r\n  }, [isLoading, token0, token1, totalBalances, token0Balance, token1Balance, isReviewing, token0Allowance, token1Allowance]);\r\n\r\n  const selectedTokenIds = useMemo(() => {\r\n    const selectedIds = [];\r\n    if (token0?.metadata?.id) selectedIds.push(token0.metadata.id);\r\n    if (token1?.metadata?.id) selectedIds.push(token1.metadata.id);\r\n\r\n    return selectedIds;\r\n  }, [token0?.metadata?.id, token1?.metadata?.id]);\r\n\r\n  const { fee0, fee1, price0, price1, shareOfPool, liquidityAmount } = useAddLiquidityMemo({ pair, token0, token1 });\r\n\r\n  const token0Sources = useTokenSourceMemo({ token: token0, tokenBalances, sonicBalances });\r\n  const token1Sources = useTokenSourceMemo({ token: token1, tokenBalances, sonicBalances });\r\n\r\n  useEffect(() => {\r\n    if (!isLoading && supportedTokenList) {\r\n      const token1Id = query.get('token1');\r\n      const token0Id = query.get('token0');\r\n\r\n      if (token0Id) {\r\n        const token0 = supportedTokenList.find(({ id }) => id === token0Id);\r\n        dispatch(liquidityViewActions.setToken({ data: 'token0', token: token0 }));\r\n        dispatch(liquidityViewActions.setValue({ data: 'token0', value: '' }));\r\n      }\r\n\r\n      if (token1Id) {\r\n        const token1 = supportedTokenList.find(({ id }) => id === token1Id);\r\n        dispatch(liquidityViewActions.setToken({ data: 'token1', token: token1 }));\r\n        dispatch(liquidityViewActions.setValue({ data: 'token1', value: '' }));\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isLoading]);\r\n\r\n  const handleSetIsAutoSlippage = (isAutoSlippage: boolean) => {\r\n    setAutoSlippage(isAutoSlippage);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    if (autoSlippage) {\r\n      dispatch(liquidityViewActions.setSlippage(INITIAL_LIQUIDITY_SLIPPAGE));\r\n    }\r\n  };\r\n\r\n  const menuListShadow = useColorModeValue('lg', 'none');\r\n  const menuListBg = useColorModeValue('gray.50', 'custom.3');\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n  const bg = useColorModeValue('gray.100', 'gray.800');\r\n  const iconBorderColor = useColorModeValue('gray.200', 'custom.4');\r\n  const textColor = useColorModeValue('gray.700', 'gray.300');\r\n\r\n  return (\r\n    <Stack spacing={4}>\r\n      <ViewHeader onArrowBack={handlePreviousStep} title=\"Add Liquidity\">\r\n        <Menu onClose={handleMenuClose}>\r\n          <Tooltip label=\"Adjust the slippage\">\r\n            <MenuButton as={IconButton} isRound size=\"sm\" aria-label=\"Adjust the slippage\" icon={<FaCog />} ml=\"auto\" />\r\n          </Tooltip>\r\n          <MenuList shadow={menuListShadow} bg={menuListBg} border=\"none\" borderRadius={20} py={0}>\r\n            <SlippageSettings slippage={slippage}\r\n              setSlippage={(value) =>dispatch(liquidityViewActions.setSlippage(value))}\r\n              isAutoSlippage={autoSlippage} setIsAutoSlippage={handleSetIsAutoSlippage}\r\n            />\r\n          </MenuList>\r\n        </Menu>\r\n      </ViewHeader>\r\n      <Flex direction=\"column\" alignItems=\"center\">\r\n        <Box width=\"100%\">\r\n          <Token value={token0.value} setValue={(value) => setInAndOutTokenValues('token0', value)} tokenListMetadata={supportedTokenList}\r\n            tokenMetadata={token0.metadata} isDisabled={isReviewing} sources={token0Sources} isLoading={isLoading}\r\n          >\r\n            <TokenContent>\r\n              <TokenDetailsButton onClick={() => handleSelectToken('token0')}>\r\n                <TokenDetailsLogo />\r\n                <TokenDetailsSymbol />\r\n              </TokenDetailsButton>\r\n\r\n              <TokenInput autoFocus />\r\n            </TokenContent>\r\n            <TokenData>\r\n              <TokenDataBalances isUpdating={isBalancesUpdating} onMaxClick={() => handleTokenMaxClick('token0')} />\r\n              <TokenDataPrice isUpdating={isPriceUpdating} />\r\n            </TokenData>\r\n            <TokenDataMetaInfo tokenId={token0.metadata ? token0.metadata.id : ''}\r\n              tokenSymbol={token0.metadata ? token0.metadata.symbol : ''} tokenDecimals={token0.metadata ? token0.metadata.decimals : 0}\r\n              pageInfo=\"liquidity\" tokenValue={token0.value}></TokenDataMetaInfo>\r\n          </Token>\r\n        </Box>\r\n\r\n        <Center borderRadius={12} width={10} height={10} border=\"1px solid\" borderColor={iconBorderColor}\r\n          bg={menuListBg} mt={-2} mb={-2} zIndex=\"docked\">\r\n          <Icon as={FaPlus} />\r\n        </Center>\r\n\r\n        <Box width=\"100%\">\r\n          <Token value={token1.value} setValue={(value) => setInAndOutTokenValues('token1', value)} tokenListMetadata={supportedTokenList}\r\n            tokenMetadata={token1.metadata} isDisabled={isReviewing} sources={token1Sources} isLoading={isLoading}\r\n          >\r\n            <TokenContent>\r\n              {token1.metadata ? (\r\n                <TokenDetailsButton onClick={() => handleSelectToken('token1')}>\r\n                  <TokenDetailsLogo />\r\n                  <TokenDetailsSymbol />\r\n                </TokenDetailsButton>\r\n              ) : (\r\n                <TokenDetailsButton onClick={() => handleSelectToken('token1')} variant={isLoading ? 'solid' : 'gradient'}\r\n                  colorScheme={isLoading ? 'gray' : 'dark-blue'}\r\n                >\r\n                  <Skeleton isLoaded={!isLoading}>Select a Token</Skeleton>\r\n                </TokenDetailsButton>\r\n              )}\r\n\r\n              <TokenInput />\r\n            </TokenContent>\r\n            <TokenData>\r\n              <TokenDataBalances isUpdating={isBalancesUpdating} onMaxClick={() => handleTokenMaxClick('token1')} />\r\n              <TokenDataPrice isUpdating={isPriceUpdating} />\r\n            </TokenData>\r\n            <TokenDataMetaInfo tokenId={token1.metadata ? token1.metadata.id : ''} tokenSymbol={token1.metadata ? token1.metadata.symbol : ''}\r\n              tokenDecimals={token1.metadata ? token1.metadata.decimals : 0} pageInfo=\"liquidity\" tokenValue={token1.value}>\r\n            </TokenDataMetaInfo>\r\n          </Token>\r\n        </Box>\r\n        {token0.metadata && token1.metadata && (\r\n          <>\r\n            {isReviewing && (\r\n              <>\r\n                <Center borderRadius={12} width={10} height={10} border=\"1px solid\" borderColor={iconBorderColor}\r\n                  bg={menuListBg} mt={-2} mb={-2} justifyContent=\"center\" alignItems=\"center\" zIndex=\"docked\"\r\n                >\r\n                  <Icon as={FaEquals} />\r\n                </Center>\r\n\r\n                <Token value={liquidityAmount} isDisabled shouldGlow>\r\n                  <TokenContent>\r\n                    <Flex borderRadius=\"full\" mr={5} minWidth=\"fit-content\" background={bg}\r\n                      height={10} px={4} justifyContent=\"center\" alignItems=\"center\" fontWeight=\"bold\"\r\n                    >\r\n                      <LPImageBlock imageSources={[token0.metadata?.logo, token1.metadata?.logo]} size=\"sm\" />\r\n                      <Text ml={2.5}>\r\n                        {`${token0.metadata?.symbol}-${token1.metadata?.symbol}`}\r\n                      </Text>\r\n\r\n                      <Popover trigger=\"hover\">\r\n                        <PopoverTrigger>\r\n                          <Flex>\r\n                            <Icon as={FaInfoCircle} ml={2.5} width={4} />\r\n                          </Flex>\r\n                        </PopoverTrigger>\r\n                        <PopoverContent>\r\n                          <PopoverArrow />\r\n                          <PopoverBody>\r\n                            This is your share of the liquidity pool represented\r\n                            as tokens\r\n                          </PopoverBody>\r\n                        </PopoverContent>\r\n                      </Popover>\r\n                    </Flex>\r\n\r\n                    <TokenInput />\r\n                  </TokenContent>\r\n                  <TokenData color={color}>\r\n                    Share of Pool:\r\n                    <Text flex={1} textAlign=\"right\">\r\n                      {shareOfPool}\r\n                    </Text>\r\n                  </TokenData>\r\n                </Token>\r\n              </>\r\n            )}\r\n\r\n            {liquidityAmount && (\r\n              <Flex alignItems=\"center\" justifyContent=\"space-between\" width=\"full\" mt={5} px={5}>\r\n                <Text color={textColor}>\r\n                  {`1 ${token0.metadata?.symbol} = `}{' '}\r\n                  <DisplayValue as=\"span\" value={price1} />{' '}\r\n                  {` ${token1.metadata?.symbol}`}\r\n                </Text>\r\n                <HStack>\r\n                  <Text color={textColor}>\r\n                    {`1 ${token1.metadata?.symbol} = `}{' '}\r\n                    <DisplayValue as=\"span\" value={price0} />{' '}\r\n                    {`${token0.metadata?.symbol}`}\r\n                  </Text>\r\n                  <Popover trigger=\"hover\">\r\n                    <PopoverTrigger>\r\n                      <Flex>\r\n                        <Icon as={FaInfoCircle} width={5} transition=\"opacity 200ms\" opacity={0.6} />\r\n                      </Flex>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent minWidth=\"25rem\">\r\n                      <PopoverHeader>Transaction Details</PopoverHeader>\r\n                      <PopoverArrow />\r\n                      <PopoverBody display=\"inline-block\">\r\n                        <Stack>\r\n                          <StackLine title={`${token0.metadata.name} Deposit Fee`} value={`${fee0} ${token0.metadata.symbol}`}/>\r\n                          <StackLine\r\n                            title={`${token1.metadata.name} Deposit Fee`}\r\n                            value={`${fee1} ${token1.metadata.symbol}`}\r\n                          />\r\n                        </Stack>\r\n                      </PopoverBody>\r\n                    </PopoverContent>\r\n                  </Popover>\r\n                </HStack>\r\n              </Flex>\r\n            )}\r\n          </>\r\n        )}\r\n      </Flex>\r\n      {!isConnected ? ( <WalletNotConnected />) : (\r\n        <Button isFullWidth size=\"lg\" variant=\"gradient\" colorScheme=\"dark-blue\" onClick={handleAddLiquidity}\r\n          isDisabled={buttonDisabled || typeof token0Allowance !== 'number' || typeof token1Allowance !== 'number'}\r\n          isLoading={isLoading || typeof token0Allowance !== 'number' || typeof token1Allowance !== 'number'}\r\n        >\r\n          {buttonMessage}\r\n        </Button>\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n","export * from './paired-user-lp-token';\r\nexport * from './remove-liquidity-modal';\r\nexport * from './remove-liquidity-modal-asset';\r\n","import {\r\n  Box, Button, Divider, Flex, Popover, PopoverArrow, PopoverBody, PopoverContent, PopoverTrigger, Text, useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { Liquidity, Pair } from '@sonicdex/sonic-js';\r\nimport { FaInfoCircle } from '@react-icons/all-files/fa/FaInfoCircle';\r\nimport { useMemo } from 'react';\r\n\r\nimport { DisplayValue, TokenImageBlock } from '@/components';\r\nimport { LPBreakdownPopover } from '@/components/core/lp-breakdown-popover';\r\nimport { UserLPMetrics, getuserLprewards } from '@/hooks';\r\nimport { AppTokenMetadata } from '@/models';\r\n\r\nexport interface PairedUserLPTokenProps {\r\n  pairId: string;\r\n  token0: AppTokenMetadata;\r\n  token1: AppTokenMetadata;\r\n  balance0: string;\r\n  balance1: string;\r\n  userShares: string;\r\n  totalShares?: string;\r\n  allPairs?: Pair.List;\r\n  pairMetrics?: UserLPMetrics[keyof UserLPMetrics];\r\n  handleRemove: (token0: AppTokenMetadata, token1: AppTokenMetadata) => void;\r\n  handleAdd: (token0?: string, token1?: string) => void;\r\n  isMetricsLoading?: boolean;\r\n  isLPBalanceLoading?: boolean;\r\n}\r\n\r\nexport const PairedUserLPToken: React.FC<PairedUserLPTokenProps> = ({\r\n  token0,\r\n  token1,\r\n  totalShares,\r\n  userShares,\r\n  allPairs,\r\n  balance0,\r\n  balance1,\r\n  pairMetrics,\r\n  handleAdd,\r\n  handleRemove,\r\n  isMetricsLoading,\r\n  isLPBalanceLoading,\r\n}) => {\r\n  const successColor = useColorModeValue('green.500', 'green.400');\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const shadow = useColorModeValue('base', 'none');\r\n  const headerColor = useColorModeValue('gray.600', 'gray.400');\r\n\r\n  const userLPValue = useMemo(() => {\r\n    const pair = allPairs?.[token0.id]?.[token1.id];\r\n\r\n    console.log()\r\n\r\n    if (pair && token0.price && token1.price && totalShares && userShares) {\r\n      return Liquidity.getUserPositionValue({\r\n        price0: token0.price,\r\n        price1: token1.price,\r\n        reserve0: pair.reserve0,\r\n        reserve1: pair.reserve1,\r\n        decimals0: token0.decimals,\r\n        decimals1: token1.decimals,\r\n        totalShares,\r\n        userShares,\r\n      }).toString();\r\n    }\r\n    return '0';\r\n  }, [allPairs, token0, token1, totalShares, userShares]);\r\n\r\n  //getuserLprewards\r\n  const rewardData = getuserLprewards(token0.id, token1.id);\r\n  rewardData;\r\n\r\n  return (\r\n    <Flex direction=\"column\" borderRadius=\"xl\" bg={bg} shadow={shadow}>\r\n      <Flex\r\n        position=\"relative\"\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\"\r\n        px={5}\r\n        py={4}\r\n        gridGap={1.5}\r\n      >\r\n        <TokenImageBlock src={token0.logo} size={7} />\r\n        <TokenImageBlock src={token1.logo} size={7} />\r\n        <Text flex={1} fontWeight=\"bold\" fontSize=\"1.125rem\">\r\n          {token0.symbol}/{token1.symbol}\r\n        </Text>\r\n        <Button\r\n          variant=\"outline\"\r\n          borderColor=\"dark-blue.500\"\r\n          onClick={() => handleAdd(token0.id, token1.id)}\r\n          fontWeight=\"normal\"\r\n          width=\"4.5rem\"\r\n        >\r\n          Add\r\n        </Button>\r\n        <Button\r\n          variant=\"ghost\"\r\n          onClick={() => handleRemove(token0, token1)}\r\n          fontWeight=\"normal\"\r\n        >\r\n          Remove\r\n        </Button>\r\n      </Flex>\r\n\r\n      <Divider />\r\n\r\n      <Flex direction=\"row\" px={6} py={4}>\r\n        <Box flex={1}>\r\n          <Text color={headerColor}>LP Tokens</Text>\r\n          <LPBreakdownPopover\r\n            sources={[\r\n              {\r\n                src: token0.logo,\r\n                symbol: token0.symbol,\r\n                decimals: token0.decimals,\r\n                balance: balance0,\r\n              },\r\n              {\r\n                src: token1.logo,\r\n                symbol: token1.symbol,\r\n                decimals: token1.decimals,\r\n                balance: balance1,\r\n              },\r\n            ]}\r\n          >\r\n            <DisplayValue\r\n              value={userShares}\r\n              isUpdating={isLPBalanceLoading}\r\n              fontWeight=\"bold\"\r\n              disableTooltip\r\n              width=\"fit-content\"\r\n            />\r\n          </LPBreakdownPopover>\r\n        </Box>\r\n\r\n        <Box flex={1}>\r\n          <Text color={headerColor}>USD Value</Text>\r\n          <DisplayValue\r\n            isUpdating={isLPBalanceLoading}\r\n            prefix=\"$\"\r\n            value={userLPValue}\r\n            fontWeight=\"bold\"\r\n            decimals={8}\r\n            width=\"fit-content\"\r\n          />\r\n        </Box>\r\n\r\n        <Box\r\n          flex={1}\r\n          backgroundColor=\"#8888882f\"\r\n          mx={-3}\r\n          my={-1}\r\n          px={3}\r\n          py={1}\r\n          borderRadius=\"xl\"\r\n        >\r\n\r\n          <Popover trigger=\"hover\">\r\n            <PopoverTrigger>\r\n              <Flex>\r\n                <Text color={headerColor} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">Fees Earned &nbsp; </Text>\r\n                <Flex marginTop={1}><FaInfoCircle /></Flex>\r\n              </Flex>\r\n            </PopoverTrigger>\r\n\r\n            <PopoverContent color={useColorModeValue('black', 'white')}>\r\n              <PopoverArrow />\r\n              <PopoverBody>\r\n              It is the representation of the fees earned from swaps in consecutive tokens. Please note that the accrued fees will be automatically added to your LP pool.\r\n              </PopoverBody>\r\n            </PopoverContent>\r\n          </Popover>\r\n          {/* {!rewardData && ( */}\r\n          <DisplayValue\r\n            color={successColor}\r\n            isUpdating={isMetricsLoading}\r\n            prefix=\"$\"\r\n            value={pairMetrics?.fees ?? 0}\r\n            fontWeight=\"bold\"\r\n            decimals={8}\r\n            width=\"fit-content\"\r\n          />\r\n          {/* )} */}\r\n          {/* {rewardData && (\r\n            <>\r\n              <Flex>\r\n                <Flex>\r\n                  <DisplayValue color={successColor} value={Number(rewardData.token0) / 10 ** token0.decimals} fontWeight=\"bold\" width=\"fit-content\" />\r\n                  &nbsp; <Text>{token0.symbol}</Text>\r\n                </Flex>\r\n              </Flex>\r\n              <Flex marginTop={2}>\r\n                <Flex>\r\n                  <DisplayValue color={successColor} value={Number(rewardData.token1) / 10 ** token1.decimals} fontWeight=\"bold\" width=\"fit-content\" />\r\n                  &nbsp; <Text >{token1.symbol}</Text>\r\n                </Flex>\r\n              </Flex>\r\n            </>\r\n          )} */}\r\n        </Box>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Image } from '@chakra-ui/image';\r\nimport { Box, Flex, HStack, Text, useColorModeValue } from '@chakra-ui/react';\r\nimport { Price } from '@sonicdex/sonic-js';\r\nimport { FC, useMemo } from 'react'; //useEffect useState\r\n\r\nimport { questionMarkSrc } from '@/assets';\r\nimport { DisplayValue } from '@/components';\r\nimport { AppTokenMetadata } from '@/models';\r\n\r\ntype RemoveLiquidityModalAssetProps = Partial<AppTokenMetadata> & {\r\n  balance: string;\r\n  isUpdating?: boolean;\r\n  onValueChange?: Function;\r\n};\r\n\r\nexport const RemoveLiquidityModalAsset: FC<RemoveLiquidityModalAssetProps> = ({\r\n  symbol,decimals,logo = questionMarkSrc,balance = 0,price = 0, isUpdating, onValueChange\r\n}) => {\r\n\r\n  // const [tokenBalance, setTokenBalance] = useState<number|string>();\r\n\r\n  const balancePrice = useMemo(\r\n    () => {return Price.getByAmount({ amount: String(balance), price }).toString()},\r\n    [balance, price]\r\n  );\r\n\r\n // useEffect(()=>{ setTokenBalance(Number(balance).toFixed(decimals) )},[balance])\r\n\r\n  const bg = useColorModeValue('gray.100', 'gray.700');\r\n  \r\n  // const manageChange = (e: any) => {\r\n  //   setTokenBalance(e.target.value);\r\n  //   onValueChange?onValueChange(symbol, e.target.value):null;\r\n  // }\r\n  \r\n  return (\r\n    <Flex justifyContent=\"space-between\">\r\n      <HStack pl={2} py={2} pr={4} bg={bg} borderRadius=\"full\" alignSelf=\"center\">\r\n        <Image src={logo} alt={symbol} boxSize={6} borderRadius=\"full\" />\r\n        <Text fontWeight=\"bold\">{symbol}</Text>\r\n      </HStack>\r\n      <Box textAlign=\"end\">\r\n        <Box fontSize=\"xl\" fontWeight=\"bold\">\r\n          {/* <Input w={'auto'} marginTop={2} value={tokenBalance}  type={'number'} onChange={manageChange}></Input> */}\r\n          <DisplayValue value={balance} isUpdating={isUpdating} decimals={decimals}/>\r\n        </Box>\r\n        <Box fontSize=\"xs\">\r\n          <DisplayValue value={balancePrice} prefix=\"~$\" isUpdating={isUpdating} />\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n","import {\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n} from '@chakra-ui/modal';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Center,\r\n  Checkbox,\r\n  Divider,\r\n  Flex,\r\n  FormControl,\r\n  Heading,\r\n  Input,\r\n  SimpleGrid,\r\n  Slider,\r\n  SliderFilledTrack,\r\n  SliderThumb,\r\n  SliderTrack,\r\n  Stack,\r\n  Tooltip,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { Liquidity } from '@sonicdex/sonic-js';\r\nimport { FaArrowDown } from '@react-icons/all-files/fa/FaArrowDown';\r\nimport { useMemo } from 'react';\r\n\r\nimport { ENV } from '@/config';\r\nimport {\r\n  FeatureState,\r\n  liquidityViewActions,\r\n  modalsSliceActions,\r\n  NotificationType,\r\n  useAppDispatch,\r\n  useLiquidityViewStore,\r\n  useModalsStore,\r\n  useNotificationStore,\r\n  useSwapCanisterStore,\r\n} from '@/store';\r\nimport { debounce } from '@/utils/function';\r\n\r\nimport { RemoveLiquidityModalAsset } from './remove-liquidity-modal-asset';\r\n\r\nconst PERCENTAGE_PRESETS = [25, 50, 75, 100];\r\n\r\nexport const RemoveLiquidityModal = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { isRemoveLiquidityModalOpened } = useModalsStore();\r\n  const { addNotification } = useNotificationStore();\r\n  const { token0, token1, removeAmountPercentage, keepInSonic } = useLiquidityViewStore();\r\n  const { allPairs, userLPBalances, userLPBalancesState } = useSwapCanisterStore();\r\n\r\n  const handleModalClose = () => {\r\n    dispatch(modalsSliceActions.closeRemoveLiquidityModal());\r\n  };\r\n\r\n  const handleRemoveLiquidity = () => {\r\n    addNotification({\r\n      title: `Removing LP of ${token0.metadata?.symbol} + ${token1.metadata?.symbol}`,\r\n      type: NotificationType.RemoveLiquidity,\r\n      id: String(new Date().getTime()),\r\n    });\r\n    debounce(() => {\r\n      dispatch(liquidityViewActions.setRemoveAmountPercentage(0));\r\n    }, 300);\r\n    handleModalClose();\r\n  };\r\n\r\n  const handleSliderChange = (value: number) => {\r\n    dispatch(liquidityViewActions.setRemoveAmountPercentage(value));\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target;\r\n    if (value === '')\r\n      return dispatch(liquidityViewActions.setRemoveAmountPercentage(NaN));\r\n    const newValue = Math.max(1, Math.min(100, Number(value)));\r\n    dispatch(liquidityViewActions.setRemoveAmountPercentage(newValue));\r\n  };\r\n\r\n\r\n  const isBalancesUpdating = useMemo(\r\n    () => userLPBalancesState === FeatureState.Updating,\r\n    [userLPBalancesState]\r\n  );\r\n\r\n  const { balance0, balance1 } = useMemo(() => {\r\n    if (userLPBalances && allPairs && token0.metadata && token1.metadata) {\r\n      const lpBalance = userLPBalances[token0.metadata.id]?.[token1.metadata.id];\r\n      const pair = allPairs[token0.metadata.id]?.[token1.metadata.id];\r\n\r\n      const { balance0, balance1 } = Liquidity.getTokenBalances({\r\n        decimals0: token0.metadata.decimals,\r\n        decimals1: token1.metadata.decimals,\r\n        reserve0: pair?.reserve0 ?? 0,\r\n        reserve1: pair?.reserve1 ?? 0,\r\n        totalSupply: pair?.totalSupply ?? 0,\r\n        lpBalance,\r\n      });\r\n\r\n      return {\r\n        balance0: balance0.multipliedBy(removeAmountPercentage / 100).toString(),\r\n        balance1: balance1.multipliedBy(removeAmountPercentage / 100).toString(),\r\n      };\r\n    }\r\n\r\n    return { balance0: '0', balance1: '0' };\r\n  }, [userLPBalances, allPairs, token0.metadata, token1.metadata, removeAmountPercentage]);\r\n\r\n  const { buttonMessage, isAmountIsLow } = useMemo(() => {\r\n    const AMOUNT_TOO_LOW_LABEL = 'Amount is too low';\r\n\r\n    if (userLPBalances && token0.metadata && token1.metadata) {\r\n      const tokensLPBalance =\r\n        userLPBalances[token0.metadata.id]?.[token1.metadata.id];\r\n      const lpAmount = (removeAmountPercentage / 100) * tokensLPBalance;\r\n\r\n      const isAmountIsLow =\r\n        lpAmount <= ENV.swapCanisterFee || !removeAmountPercentage;\r\n\r\n      return {\r\n        buttonMessage: isAmountIsLow ? AMOUNT_TOO_LOW_LABEL : 'Remove',\r\n        isAmountIsLow,\r\n      };\r\n    }\r\n\r\n    return {\r\n      buttonMessage: AMOUNT_TOO_LOW_LABEL,\r\n      isAmountIsLow: true,\r\n    };\r\n  }, [\r\n    removeAmountPercentage,\r\n    token0.metadata,\r\n    token1.metadata,\r\n    userLPBalances,\r\n  ]);\r\n\r\n  const borderColor = useColorModeValue('gray.300', 'gray.700');\r\n\r\n  const checkboxColorKeepInSonic = useColorModeValue('black', 'white');\r\n  const checkboxColorNotKeepInSonic = useColorModeValue('gray.600', 'custom.1');\r\n  const checkboxColor = keepInSonic ? checkboxColorKeepInSonic : checkboxColorNotKeepInSonic;\r\n\r\n  const onInputValueChange = (symbol: string, newvalue: number) => {\r\n    var percentage = 0;\r\n    if (userLPBalances && allPairs && token0.metadata && token1.metadata) {\r\n      const lpBalance = userLPBalances[token0.metadata.id]?.[token1.metadata.id];\r\n      const pair = allPairs[token0.metadata.id]?.[token1.metadata.id];\r\n      var lpToken = Liquidity.getTokenBalances({ decimals0: token0.metadata.decimals, decimals1: token1.metadata.decimals, reserve0: pair?.reserve0 ?? 0, reserve1: pair?.reserve1 ?? 0, totalSupply: pair?.totalSupply ?? 0, lpBalance });\r\n      var tmpper: number = 0;\r\n\r\n      if (symbol == token0.metadata?.symbol) {\r\n        tmpper = (newvalue / lpToken.balance0.toNumber()) * 100;\r\n      } else if (symbol == token1.metadata?.symbol) {\r\n        tmpper = (newvalue / lpToken.balance1.toNumber()) * 100;\r\n      }\r\n\r\n      if (tmpper > 100) percentage = 100;\r\n      else percentage = parseFloat(tmpper.toFixed(2));\r\n      dispatch(liquidityViewActions.setRemoveAmountPercentage(percentage));\r\n\r\n    }\r\n\r\n  }\r\n  return (\r\n    <Modal\r\n      isCentered\r\n      isOpen={isRemoveLiquidityModalOpened}\r\n      onClose={handleModalClose}\r\n    >\r\n      <ModalOverlay />\r\n\r\n      <ModalContent>\r\n        <ModalCloseButton />\r\n        <ModalHeader>\r\n          <Heading as=\"h3\" size=\"sm\">\r\n            Remove Liquidity\r\n          </Heading>\r\n        </ModalHeader>\r\n        <ModalBody textAlign=\"center\">\r\n          <Heading as=\"h4\" size=\"xs\" color=\"gray.500\" mt={2}>\r\n            Amount\r\n          </Heading>\r\n          <Heading\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            as=\"h6\"\r\n            size=\"xl\"\r\n            fontWeight=\"bold\"\r\n            mt={2}\r\n            mb={4}\r\n          >\r\n            <Input\r\n              w={`${String(removeAmountPercentage || 1).length * 23 + 5}px`}\r\n              variant=\"unstyled\"\r\n              value={String(removeAmountPercentage || '')}\r\n              onChange={handleInputChange}\r\n              size=\"xl\"\r\n              fontWeight=\"bold\"\r\n              textAlign=\"right\"\r\n              type=\"number\"\r\n              step={1}\r\n            />\r\n            %\r\n          </Heading>\r\n          <Box px={6}>\r\n            <Slider\r\n              value={removeAmountPercentage || 1}\r\n              onChange={handleSliderChange}\r\n              colorScheme=\"dark-blue\"\r\n              focusThumbOnChange={false}\r\n              min={1}\r\n              max={100}\r\n            >\r\n              <SliderTrack>\r\n                <SliderFilledTrack />\r\n              </SliderTrack>\r\n              <SliderThumb />\r\n            </Slider>\r\n          </Box>\r\n\r\n          <SimpleGrid columns={4} spacing={4} py={6}>\r\n            {PERCENTAGE_PRESETS.map((preset) => (\r\n              <Tooltip\r\n                key={preset}\r\n                label={`${preset}% of your liquidity position`}\r\n              >\r\n                <Button\r\n                  lineHeight=\"1\"\r\n                  colorScheme=\"dark-blue\"\r\n                  variant=\"outline\"\r\n                  disabled={removeAmountPercentage === preset}\r\n                  onClick={() => handleSliderChange(preset)}\r\n                >\r\n                  {preset}%\r\n                </Button>\r\n              </Tooltip>\r\n            ))}\r\n          </SimpleGrid>\r\n\r\n          <Flex alignItems=\"center\" mx={-6}>\r\n            <Divider />\r\n            <Center\r\n              p={2.5}\r\n              borderWidth=\"1px\"\r\n              borderStyle=\"solid\"\r\n              borderColor={borderColor}\r\n              borderRadius=\"md\"\r\n            >\r\n              <FaArrowDown />\r\n            </Center>\r\n\r\n            <Divider />\r\n          </Flex>\r\n\r\n          <Stack mt={6} mb={4}>\r\n            <RemoveLiquidityModalAsset\r\n              {...token0.metadata}\r\n              balance={balance0}\r\n              isUpdating={isBalancesUpdating}\r\n              onValueChange={onInputValueChange}\r\n            />\r\n            <RemoveLiquidityModalAsset\r\n              {...token1.metadata}\r\n              balance={balance1}\r\n              isUpdating={isBalancesUpdating}\r\n              onValueChange={onInputValueChange}\r\n            />\r\n          </Stack>\r\n\r\n          <Flex direction=\"row\" alignItems=\"center\" borderRadius={5} pt={4}>\r\n            <FormControl dir=\"row\" alignItems=\"center\">\r\n              <Checkbox\r\n                isChecked={keepInSonic}\r\n                onChange={(e) =>\r\n                  dispatch(\r\n                    liquidityViewActions.setKeepInSonic(e.target.checked)\r\n                  )\r\n                }\r\n                colorScheme=\"dark-blue\"\r\n                size=\"md\"\r\n                color={checkboxColor}\r\n                fontWeight={600}\r\n              >\r\n                Keep tokens in Sonic after removing liquidity\r\n              </Checkbox>\r\n            </FormControl>\r\n          </Flex>\r\n        </ModalBody>\r\n\r\n        <ModalFooter>\r\n          <Button\r\n            variant=\"gradient\"\r\n            colorScheme=\"dark-blue\"\r\n            mb={3}\r\n            size=\"lg\"\r\n            isFullWidth\r\n            isDisabled={isAmountIsLow}\r\n            onClick={handleRemoveLiquidity}\r\n          >\r\n            {buttonMessage}\r\n          </Button>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n","export * from './add';\r\nexport * from './liquidity.utils';\r\nexport * from './list';\r\nexport * from './components';\r\n","import { Liquidity, toBigNumber } from '@sonicdex/sonic-js';\r\nimport { useMemo } from 'react';\r\n\r\nimport { AppAssetSource, getAppAssetsSources } from '@/config/utils';\r\nimport { SwapIDL } from '@/did';\r\nimport { Balances, BaseTokenData } from '@/models';\r\n\r\nexport const getShareOfPoolString = (\r\n  params: Liquidity.GetShareOfPoolParams\r\n) => {\r\n  const percentage = Liquidity.getShareOfPool(params).multipliedBy(100);\r\n\r\n  if (percentage.isEqualTo(0)) return '0%';\r\n\r\n  if (percentage.isLessThanOrEqualTo(0.01)) {\r\n    return '<0.01%';\r\n  }\r\n\r\n  return `${percentage.toFixed(2)}%`;\r\n};\r\n\r\nexport interface AddLiquidityMemoParams {\r\n  token0: BaseTokenData;\r\n  token1: BaseTokenData;\r\n  pair?: SwapIDL.PairInfoExt;\r\n}\r\n\r\nexport interface AddLiquidityMemo {\r\n  fee0: string;\r\n  fee1: string;\r\n  price0: string;\r\n  price1: string;\r\n  liquidityAmount?: string;\r\n  shareOfPool?: string;\r\n}\r\n\r\nexport const useAddLiquidityMemo = ({\r\n  token0,\r\n  token1,\r\n  pair,\r\n}: AddLiquidityMemoParams) =>\r\n  useMemo<AddLiquidityMemo>(() => {\r\n    try {\r\n      if (token0.metadata && token1.metadata && token0.value && token1.value) {\r\n        const fee0 = toBigNumber(token0.metadata.fee)\r\n          .multipliedBy(2)\r\n          .applyDecimals(token0.metadata.decimals)\r\n          .toString();\r\n\r\n        const fee1 = toBigNumber(token1.metadata.fee)\r\n          .multipliedBy(2)\r\n          .applyDecimals(token1.metadata.decimals)\r\n          .toString();\r\n\r\n        if (pair && Number(pair.reserve0) && Number(pair.reserve1)) {\r\n          // If pair exists and have reserves\r\n          const price0 = Liquidity.getOppositeAmount({\r\n            amountIn: '1',\r\n            reserveIn: pair.reserve1,\r\n            reserveOut: pair.reserve0,\r\n            decimalsIn: token1.metadata.decimals,\r\n            decimalsOut: token0.metadata.decimals,\r\n          }).toString();\r\n\r\n          const price1 = Liquidity.getOppositeAmount({\r\n            amountIn: '1',\r\n            reserveIn: pair.reserve0,\r\n            reserveOut: pair.reserve1,\r\n            decimalsIn: token0.metadata.decimals,\r\n            decimalsOut: token1.metadata.decimals,\r\n          }).toString();\r\n\r\n          const options = {\r\n            amount0: token0.value,\r\n            amount1: token1.value,\r\n            decimals0: token0.metadata?.decimals,\r\n            decimals1: token1.metadata?.decimals,\r\n            reserve0: pair.reserve0,\r\n            reserve1: pair.reserve1,\r\n            totalSupply: pair.totalSupply,\r\n          };\r\n\r\n          const liquidityAmount = Liquidity.getPosition(options)\r\n            .applyDecimals(Liquidity.PAIR_DECIMALS)\r\n            .toString();\r\n\r\n          const shareOfPool = getShareOfPoolString(options);\r\n\r\n          return {\r\n            fee0,\r\n            fee1,\r\n            price0,\r\n            price1,\r\n            liquidityAmount,\r\n            shareOfPool,\r\n          };\r\n        } else {\r\n          // If pair doesn't exist or doesn't have reserves\r\n          const price0 = toBigNumber(token0.value)\r\n            .div(token1.value)\r\n            .dp(token0.metadata.decimals)\r\n            .toString();\r\n\r\n          const price1 = toBigNumber(token1.value)\r\n            .div(token0.value)\r\n            .dp(token1.metadata.decimals)\r\n            .toString();\r\n\r\n          const liquidityAmount = Liquidity.getPosition({\r\n            amount0: token0.value,\r\n            amount1: token1.value,\r\n            decimals0: token0.metadata.decimals,\r\n            decimals1: token1.metadata.decimals,\r\n            reserve0: 0,\r\n            reserve1: 0,\r\n            totalSupply: 0,\r\n          })\r\n            .applyDecimals(Liquidity.PAIR_DECIMALS)\r\n            .toString();\r\n\r\n          return {\r\n            fee0,\r\n            fee1,\r\n            price0,\r\n            price1,\r\n            shareOfPool: '100%',\r\n            liquidityAmount,\r\n          };\r\n        }\r\n      }\r\n\r\n      throw new Error('Empty token data');\r\n    } catch {\r\n      // If token data is empty or invalid values\r\n      return {\r\n        fee0: '0',\r\n        fee1: '0',\r\n        price0: '0',\r\n        price1: '0',\r\n      };\r\n    }\r\n  }, [token0, token1, pair]);\r\n\r\nexport interface TokenSourceMemoParams {\r\n  token: BaseTokenData;\r\n  tokenBalances?: Balances;\r\n  sonicBalances?: Balances;\r\n}\r\n\r\nexport const useTokenSourceMemo = ({\r\n  token,\r\n  tokenBalances,\r\n  sonicBalances,\r\n}: TokenSourceMemoParams) =>\r\n  useMemo<AppAssetSource[] | undefined>(() => {\r\n    if (token.metadata) {\r\n      return getAppAssetsSources({\r\n        balances: {\r\n          wallet: tokenBalances ? tokenBalances[token.metadata.id] : 0,\r\n          sonic: sonicBalances ? sonicBalances[token.metadata.id] : 0,\r\n        },\r\n      });\r\n    }\r\n  }, [token.metadata, tokenBalances, sonicBalances]);\r\n","import { Box, Stack, Text, useColorModeValue } from '@chakra-ui/react';\r\nimport { Liquidity, toBigNumber } from '@sonicdex/sonic-js';\r\nimport { useMemo } from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport { Asset, Header, InformationBox, WalletNotConnected, TokenImageBlock } from '@/components';\r\nimport { useUserMetrics } from '@/hooks';\r\nimport { AppTokenMetadata } from '@/models';\r\n\r\nimport {\r\n  FeatureState, liquidityViewActions, modalsSliceActions, useAppDispatch, useLiquidityViewStore,\r\n  useWalletStore , useSwapCanisterStore,\r\n} from '@/store';\r\n\r\nimport { PairedUserLPToken, PairedUserLPTokenProps, RemoveLiquidityModal } from './components';\r\n\r\nconst INFORMATION_TITLE = 'Liquidity Provider Rewards';\r\nconst INFORMATION_DESCRIPTION = `Liquidity providers earn a 0.25% fee on all trades proportional to their share of the pool. Fees are added to the pool, accrue in real-time, and can be claimed by withdrawing your liquidity. If you want to learn `;\r\n\r\nconst INFORMATION_LINK = 'https://docs.sonic.ooo/product/adding-liquidity/claiming-your-rewards';\r\n\r\nconst InformationDescription = () => {\r\n  const color = useColorModeValue('gray.600', 'custom.1');\r\n\r\n  return (\r\n    <Text color={color}>\r\n      {INFORMATION_DESCRIPTION}\r\n      <Box as=\"a\" color={color} href={INFORMATION_LINK} textDecoration=\"underline\" _visited={{ color: color }}>\r\n        review our documentation\r\n      </Box>\r\n      .\r\n    </Text>\r\n  );\r\n};\r\n\r\nexport const LiquidityListView = () => {\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const { isConnected } = useWalletStore();\r\n\r\n  const { allPairs, allPairsState, userLPBalances, userLPBalancesState, supportedTokenList, supportedTokenListState } = useSwapCanisterStore();\r\n  const { isBannerOpened } = useLiquidityViewStore();\r\n  const { isLoading: isMetricsLoading, userPairMetrics } = useUserMetrics();\r\n\r\n  const moveToAddLiquidityView = (token0?: string, token1?: string) => {\r\n    const query = token0 || token1\r\n        ? `?${token0 ? `token0=${token0}` : ''}${token1 ? `&token1=${token1}` : ''\r\n        }`\r\n        : '';\r\n    navigate(`/liquidity/add${query}`);\r\n  };\r\n\r\n  const handleInformationClose = () => { dispatch(liquidityViewActions.setIsBannerOpened(false));};\r\n\r\n  const handleOpenRemoveLiquidityModal = ( token0: AppTokenMetadata, token1: AppTokenMetadata) => {\r\n    dispatch(liquidityViewActions.setToken({ data: 'token0', token: token0 }));\r\n    dispatch(liquidityViewActions.setToken({ data: 'token1', token: token1 }));\r\n    dispatch(modalsSliceActions.openRemoveLiquidityModal());\r\n  };\r\n\r\n  const isLoading = useMemo(() => {\r\n    return (\r\n      allPairsState === FeatureState.Loading ||\r\n      supportedTokenListState === FeatureState.Loading ||\r\n      userLPBalancesState === FeatureState.Loading\r\n    );\r\n  }, [allPairsState, supportedTokenListState, userLPBalancesState]);\r\n\r\n  const isUserLPBalancesUpdating = useMemo(() => {\r\n    return userLPBalancesState === FeatureState.Updating;\r\n  }, [userLPBalancesState]);\r\n\r\n  const isUpdating = useMemo(() => {\r\n    return (\r\n      allPairsState === FeatureState.Updating ||\r\n      supportedTokenListState === FeatureState.Updating ||\r\n      isUserLPBalancesUpdating\r\n    );\r\n  }, [allPairsState, supportedTokenListState, isUserLPBalancesUpdating]);\r\n\r\n  const pairedUserLPTokens = useMemo(() => {\r\n    if (userLPBalances && supportedTokenList && allPairs) {\r\n      const lpBalancesPairIDs = Object.keys(userLPBalances);\r\n      const existentPairs = new Set();\r\n\r\n      return lpBalancesPairIDs.reduce((acc, tokenId0) => {\r\n        const pairedList: PairedUserLPTokenProps[] = [];\r\n\r\n        for (const tokenId1 in userLPBalances[tokenId0]) {\r\n          if (existentPairs.has(`${tokenId1}:${tokenId0}`)) continue;\r\n          existentPairs.add(`${tokenId0}:${tokenId1}`);\r\n\r\n          const token0 = supportedTokenList.find((token) => token.id === tokenId0);\r\n          const token1 = supportedTokenList.find((token) => token.id === tokenId1);\r\n\r\n          let balance0, balance1;\r\n\r\n          if (userLPBalances && allPairs && token0 && token1) {\r\n            const lpBalance = userLPBalances[token0.id]?.[token1.id];\r\n            const pair = allPairs[token0.id]?.[token1.id];\r\n\r\n            const balances = Liquidity.getTokenBalances({\r\n              decimals0: token0.decimals,\r\n              decimals1: token1.decimals,\r\n              reserve0: pair?.reserve0 ?? 0,\r\n              reserve1: pair?.reserve1 ?? 0,\r\n              totalSupply: pair?.totalSupply ?? 0,\r\n              lpBalance,\r\n            });\r\n\r\n            balance0 = balances.balance0.toString();\r\n            balance1 = balances.balance1.toString();\r\n          }\r\n\r\n          const userShares = toBigNumber(userLPBalances[tokenId0][tokenId1]).applyDecimals(Liquidity.PAIR_DECIMALS).toString();\r\n\r\n          const totalShares = toBigNumber(\r\n            allPairs?.[tokenId0]?.[tokenId1]?.totalSupply\r\n          ).applyDecimals(Liquidity.PAIR_DECIMALS).toString();\r\n\r\n          pairedList.push({\r\n            pairId: allPairs?.[tokenId0]?.[tokenId1]?.id,\r\n            token0,\r\n            token1,\r\n            balance0,\r\n            balance1,\r\n            userShares,\r\n            totalShares,\r\n            allPairs,\r\n          } as PairedUserLPTokenProps);\r\n        }\r\n\r\n        return [...acc, ...pairedList];\r\n      }, [] as PairedUserLPTokenProps[]);\r\n    }\r\n  }, [userLPBalances, supportedTokenList, allPairs]);\r\n\r\n  const headerColor = useColorModeValue('gray.600', 'gray.400');\r\n\r\n  return (\r\n    <div>\r\n      <Header\r\n        title=\"Your Liquidity Positions\"\r\n        buttonText=\"Create Position\"\r\n        onButtonClick={() => moveToAddLiquidityView()}\r\n        isUpdating={isUpdating}\r\n       \r\n      >\r\n        \r\n        {isBannerOpened && (\r\n          <InformationBox\r\n            onClose={handleInformationClose}\r\n            title={INFORMATION_TITLE}\r\n            mb={9}\r\n            mt={9}\r\n          >\r\n            <InformationDescription />\r\n          </InformationBox>\r\n        )}\r\n      </Header>\r\n\r\n      <RemoveLiquidityModal />\r\n\r\n      {!isConnected ? (\r\n        <WalletNotConnected message=\"Your liquidity positions will appear here.\" />\r\n      ) : isLoading ? (\r\n        <Stack spacing={4}>\r\n          <Asset isLoading justifyContent=\"flex-start\" gridGap={2}>\r\n            <TokenImageBlock size={7} isLoading />\r\n            <TokenImageBlock size={7} isLoading />\r\n          </Asset>\r\n\r\n          <Asset isLoading justifyContent=\"flex-start\" gridGap={2}>\r\n            <TokenImageBlock size={7} isLoading />\r\n            <TokenImageBlock size={7} isLoading />\r\n          </Asset>\r\n\r\n          <Asset isLoading justifyContent=\"flex-start\" gridGap={2}>\r\n            <TokenImageBlock size={7} isLoading />\r\n            <TokenImageBlock size={7} isLoading />\r\n          </Asset>\r\n        </Stack>\r\n      ) : !pairedUserLPTokens?.length ? (\r\n        <Text textAlign=\"center\" color={headerColor}>\r\n          You have no liquidity positions\r\n        </Text>\r\n      ) : (\r\n        <Stack\r\n          css={{ msOverflowStyle: 'none', scrollbarWidth: 'none','&::-webkit-scrollbar': { display: 'none'}}}\r\n          spacing={4} pb={40} overflow=\"auto\">\r\n          {pairedUserLPTokens.map((userLPToken) => {\r\n\r\n            return (\r\n              <PairedUserLPToken {...userLPToken} key={userLPToken.pairId} handleRemove={handleOpenRemoveLiquidityModal}\r\n                handleAdd={moveToAddLiquidityView} pairMetrics={userPairMetrics?.[userLPToken.pairId]}\r\n                isMetricsLoading={isMetricsLoading} isLPBalanceLoading={isUserLPBalancesUpdating}\r\n              />\r\n            );\r\n          })}\r\n        </Stack>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  Flex,\r\n  Image,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { FaArrowRight } from '@react-icons/all-files/fa/FaArrowRight';\r\nimport { FaLink } from '@react-icons/all-files/fa/FaLink';\r\nimport { useMemo } from 'react';\r\n\r\nimport { SwapTokenData, useSwapViewStore } from '@/store';\r\n\r\nexport interface ChainPopoverProps {\r\n  from: SwapTokenData;\r\n  to: SwapTokenData;\r\n}\r\n\r\nexport const ChainPopover: React.FC<ChainPopoverProps> = ({ from, to }) => {\r\n  const { tokenList } = useSwapViewStore();\r\n  const [path, isChained] = useMemo(() => {\r\n    if (to.metadata) {\r\n      const path = from.paths[to.metadata.id];\r\n      return [path, path?.path?.length > 2];\r\n    }\r\n    return [];\r\n  }, [from, to]);\r\n\r\n  const bg = useColorModeValue('gray.200', 'gray.700');\r\n\r\n  if (!path || !tokenList || !isChained)\r\n    return (\r\n      <Flex justifyContent=\"center\" alignItems=\"center\">\r\n        {from.metadata?.symbol}\r\n        &nbsp;\r\n        <FaArrowRight />\r\n        &nbsp;\r\n        {to.metadata?.symbol}\r\n      </Flex>\r\n    );\r\n\r\n  return (\r\n    <Popover trigger=\"hover\">\r\n      <PopoverTrigger>\r\n        <Flex justifyContent=\"center\" alignItems=\"center\">\r\n          {from.metadata?.symbol}\r\n          &nbsp;\r\n          <FaLink />\r\n          &nbsp;\r\n          {to.metadata?.symbol}\r\n        </Flex>\r\n      </PopoverTrigger>\r\n\r\n      <PopoverContent width=\"320px\" minWidth=\"fit-content\">\r\n        <PopoverArrow />\r\n        <PopoverBody>\r\n          <Flex width=\"full\" justifyContent=\"space-between\" alignItems=\"center\">\r\n            {path.path.map((item, index) => (\r\n              <div key={index}>\r\n                <Flex\r\n                  px={2}\r\n                  py={1}\r\n                  borderRadius={4}\r\n                  backgroundColor={bg}\r\n                  fontSize=\"0.75rem\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Image src={tokenList[item].logo} width={3} mr={1} />\r\n                  {tokenList[item].symbol}\r\n                </Flex>\r\n\r\n                {index !== path.path.length - 1 && (\r\n                  <FaArrowRight size={12} style={{ margin: '0 5px' }} />\r\n                )}\r\n              </div>\r\n            ))}\r\n          </Flex>\r\n        </PopoverBody>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n","import {\r\n  Flex,\r\n  Icon,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Portal,\r\n  Stack,\r\n  Text,\r\n} from '@chakra-ui/react';\r\nimport { toBigNumber } from '@sonicdex/sonic-js';\r\nimport { FaArrowRight } from '@react-icons/all-files/fa/FaArrowRight';\r\nimport { FaInfoCircle } from '@react-icons/all-files/fa/FaInfoCircle';\r\nimport BigNumber from 'bignumber.js';\r\nimport React, { useMemo } from 'react';\r\n\r\nimport { DisplayValue, StackLine } from '@/components';\r\nimport { ENV } from '@/config';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport { useBalances, useTokenSelectionChecker } from '@/hooks';\r\nimport { useCyclesMintingCanisterStore, useSwapViewStore } from '@/store';\r\nimport { formatValue } from '@/utils/format';\r\n\r\nimport { getSwapAmountOutMin } from '..';\r\nimport { getAmountOutRatio, getXTCValueByXDRRate } from '../swap.utils';\r\nimport { ChainPopover } from './chain-popover';\r\n\r\nexport type ExchangeBoxProps = {\r\n  priceImpact?: string;\r\n};\r\n\r\nexport const ExchangeBox: React.FC<ExchangeBoxProps> = ({ priceImpact }) => {\r\n  const { from, to, slippage, keepInSonic, allPairs } = useSwapViewStore();\r\n\r\n  const { sonicBalances } = useBalances();\r\n\r\n  const { ICPXDRconversionRate } = useCyclesMintingCanisterStore();\r\n\r\n  const { isFirstIsSelected: isFromTokenIsICP,\r\n    isSecondIsSelected: isToTokenIsICP } = useTokenSelectionChecker({ id0: from.metadata?.id, id1: to.metadata?.id });\r\n\r\n  const {\r\n    isFirstIsSelected: isFromTokenIsWICP,\r\n    isSecondIsSelected: isToTokenIsWICP,\r\n  } = useTokenSelectionChecker({ id0: from.metadata?.id, id1: to.metadata?.id, targetId: ENV.canistersPrincipalIDs.WICP });\r\n\r\n  const {\r\n    isFirstIsSelected: isFromTokenIsXTC,\r\n    isSecondIsSelected: isToTokenIsXTC,\r\n  } = useTokenSelectionChecker({\r\n    id0: from.metadata?.id,\r\n    id1: to.metadata?.id,\r\n    targetId: ENV.canistersPrincipalIDs.XTC,\r\n  });\r\n\r\n  const { depositFee, withdrawFee } = useMemo(() => {\r\n    if (from.metadata?.id && to.metadata?.id && sonicBalances) {\r\n      const hasDeposit = sonicBalances[from.metadata.id] < Number(from.value);\r\n      const depositFee =\r\n        hasDeposit && Number(from.metadata.fee) > 0\r\n          ? toBigNumber(BigInt(2) * from.metadata.fee)\r\n            .applyDecimals(from.metadata.decimals)\r\n            .toString()\r\n          : undefined;\r\n\r\n      const withdrawFee =\r\n        !keepInSonic && Number(to.metadata.fee) > 0\r\n          ? toBigNumber(to.metadata.fee)\r\n            .applyDecimals(to.metadata.decimals)\r\n            .toString()\r\n          : undefined;\r\n\r\n      return { depositFee, withdrawFee };\r\n    }\r\n\r\n    return {};\r\n  }, [from, to, sonicBalances, keepInSonic]);\r\n\r\n  const { icpMetadata, operation, fee, feeSymbol } = useMemo(() => {\r\n\r\n    const icpMetadata = isFromTokenIsICP ? from.metadata: isToTokenIsICP? to.metadata: undefined;\r\n    const xtcMetadata = isToTokenIsXTC && to.metadata;\r\n\r\n    const operation = isFromTokenIsWICP? 'Unwrap': isToTokenIsWICP ? 'Wrap' : isFromTokenIsXTC ? 'Swap' : isToTokenIsXTC ? 'Mint XTC': undefined;\r\n\r\n    const icpFeeInXTC = xtcMetadata && ICPXDRconversionRate?\r\n      getXTCValueByXDRRate({\r\n         amount: formatValue(ICP_METADATA.fee, ICP_METADATA.decimals), conversionRate: ICPXDRconversionRate,\r\n        }).minus(formatValue(xtcMetadata.fee, xtcMetadata.decimals)): new BigNumber(0);\r\n\r\n    const xtcFees = icpMetadata? \r\n    toBigNumber( (to.metadata?.fee ?? BigInt(0)) * (keepInSonic ? BigInt(3) : BigInt(1)))\r\n        .applyDecimals(to.metadata?.decimals ?? 0).plus(icpFeeInXTC.multipliedBy(2)).toString()\r\n      : '0';\r\n\r\n    const wicpFee = icpMetadata? toBigNumber(icpMetadata.fee).applyDecimals(icpMetadata.decimals).toString(): '0';\r\n\r\n    const fee = isToTokenIsXTC ? xtcFees : wicpFee;\r\n    const feeSymbol = isToTokenIsXTC ? 'XTC' : 'ICP';\r\n    return { icpMetadata, operation, fee, feeSymbol };\r\n    \r\n  }, [ isFromTokenIsICP, from.metadata, isToTokenIsICP, to.metadata, isToTokenIsXTC,isFromTokenIsWICP,\r\n    isToTokenIsWICP,isFromTokenIsXTC, ICPXDRconversionRate,keepInSonic,\r\n  ]);\r\n\r\n  const pathAmountOut = useMemo( () => getAmountOutRatio(from, to, allPairs), [from, to, allPairs]);\r\n\r\n  const amountOutMin = useMemo( () =>\r\n      getSwapAmountOutMin({ from, to, slippage, allPairs, hasDeposit: Boolean(depositFee), hasWithdraw: keepInSonic}),\r\n    [allPairs, depositFee, from, keepInSonic, slippage, to]\r\n  );\r\n\r\n  if (!from.metadata || !to.metadata) return null;\r\n\r\n  if (icpMetadata) {\r\n    return (\r\n      <Flex opacity={0.4} alignItems=\"center\" px={4} fontWeight={400}>\r\n        <Text display=\"flex\" alignItems=\"center\">\r\n          {from.metadata.symbol}&nbsp;\r\n          <FaArrowRight />\r\n          &nbsp;{to.metadata.symbol}\r\n        </Text>\r\n        <Text flex={1} textAlign=\"right\">\r\n          {operation} Fee = <DisplayValue as=\"span\" value={fee} /> {feeSymbol}\r\n        </Text>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" px={4} fontWeight={400}>\r\n      <ChainPopover from={from} to={to} />\r\n      <Text flex={1} textAlign=\"right\" mx={2}>\r\n        1&nbsp;{from.metadata.symbol}&nbsp;=&nbsp;\r\n        {pathAmountOut}\r\n        &nbsp;\r\n        {to.metadata.symbol}\r\n      </Text>\r\n      <Popover trigger=\"hover\">\r\n        <PopoverTrigger>\r\n          <Flex>\r\n            <Icon as={FaInfoCircle} width={5} transition=\"opacity 200ms\" />\r\n          </Flex>\r\n        </PopoverTrigger>\r\n        <Portal>\r\n          <PopoverContent minWidth=\"25rem\">\r\n            <PopoverHeader>Transaction Details</PopoverHeader>\r\n            <PopoverArrow />\r\n            <PopoverBody display=\"inline-block\">\r\n              <Stack>\r\n                <StackLine\r\n                  title=\"Minimum Received\"\r\n                  value={`${amountOutMin} ${to.metadata.symbol}`}\r\n                />\r\n                <StackLine\r\n                  title=\"Price Impact\"\r\n                  value={\r\n                    <DisplayValue as=\"span\" value={priceImpact} suffix=\"%\" />\r\n                  }\r\n                />\r\n                <StackLine title=\"Allowed Slippage\" value={`${slippage}%`} />\r\n                {depositFee && (\r\n                  <StackLine\r\n                    title=\"Deposit Fee\"\r\n                    value={`${depositFee} ${from.metadata.symbol}`}\r\n                  />\r\n                )}\r\n                {withdrawFee && (\r\n                  <StackLine\r\n                    title=\"Withdraw Fee\"\r\n                    value={`${withdrawFee} ${to.metadata.symbol}`}\r\n                  />\r\n                )}\r\n              </Stack>\r\n            </PopoverBody>\r\n          </PopoverContent>\r\n        </Portal>\r\n      </Popover>\r\n    </Flex>\r\n  );\r\n};\r\n","export * from './exchange-box';\r\nexport * from './keep-in-sonic-box';\r\nexport * from './topmenu';\r\n","import {\r\n  Checkbox,\r\n  Flex,\r\n  FormControl,\r\n  Icon,\r\n  Link,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n  Portal,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { FaInfoCircle } from '@react-icons/all-files/fa/FaInfoCircle';\r\nimport { useMemo } from 'react';\r\n\r\nimport { swapViewActions, useAppDispatch, useSwapViewStore } from '@/store';\r\n\r\nexport enum OperationType {\r\n  Swap = 'swap',\r\n  Wrap = 'wrap',\r\n  Mint = 'mint',\r\n}\r\n\r\ntype KeepInSonicBoxProps = {\r\n  symbol?: string;\r\n  operation?: OperationType;\r\n  canHeldInSonic?: boolean;\r\n};\r\n\r\nconst KEEP_IN_SONIC_LINK =\r\n  'https://docs.sonic.ooo/product/assets#keeping-assets-in-sonic-after-a-swap';\r\n\r\nexport const KeepInSonicBox: React.FC<KeepInSonicBoxProps> = ({\r\n  symbol,\r\n  operation = 'swap',\r\n  canHeldInSonic = true,\r\n}) => {\r\n  const { keepInSonic } = useSwapViewStore();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const linkColor = useColorModeValue('dark-blue.300', 'dark-blue.500');\r\n  const bg = useColorModeValue('gray.50', 'custom.2');\r\n  const shadow = useColorModeValue('base', 'none');\r\n\r\n  const checkboxColorKeepInSonic = useColorModeValue('black', 'white');\r\n  const checkboxColorNotKeepInSonic = useColorModeValue('gray.600', 'custom.1');\r\n  const checkboxColor = keepInSonic ? checkboxColorKeepInSonic : checkboxColorNotKeepInSonic;\r\n\r\n  const { label, popoverLabel } = useMemo(() => {\r\n    switch (operation) {\r\n      case 'swap':\r\n        return {\r\n          label: `Keep ${symbol ? symbol : 'tokens'\r\n            } in Sonic after ${operation}`,\r\n          popoverLabel: (\r\n            <>\r\n              Keeping tokens in Sonic (instead of withdrawing to Plug) is good\r\n              for high frequency trading where a few extra seconds matter a lot.\r\n              By doing this, you can skip the deposit step on your next trades\r\n              and save 2-3 seconds each time.&nbsp;\r\n              <Link href={KEEP_IN_SONIC_LINK} color={linkColor}>\r\n                Learn More\r\n              </Link>\r\n              .\r\n            </>\r\n          ),\r\n        };\r\n      case 'mint':\r\n      case 'wrap':\r\n        return {\r\n          label: `Deposit ${symbol ? symbol : 'tokens'\r\n            } to Sonic after ${operation}`,\r\n          popoverLabel: (\r\n            <>\r\n              If you keep your tokens deposited in Sonic (instead of withdrawing\r\n              to Plug) you can start swaps or add liquidity faster on your next\r\n              operation. &nbsp;\r\n              <Link href={KEEP_IN_SONIC_LINK} color={linkColor}>\r\n                Learn More\r\n              </Link>\r\n              .\r\n            </>\r\n          ),\r\n        };\r\n      default:\r\n        return {\r\n          label: 'Keep in Sonic',\r\n          popoverLabel: 'Keep in Sonic',\r\n        };\r\n    }\r\n  }, [operation, symbol]);\r\n\r\n  return (\r\n    <Flex\r\n      direction=\"row\"\r\n      justifyContent=\"space-between\"\r\n      alignItems=\"center\"\r\n      borderRadius=\"xl\"\r\n      bg={bg}\r\n      shadow={shadow}\r\n      px={5}\r\n      py={4}\r\n      mb={5}\r\n    >\r\n      {canHeldInSonic ? (\r\n        <>\r\n          <FormControl dir=\"row\" alignItems=\"center\">\r\n            <Checkbox\r\n              isChecked={keepInSonic}\r\n              onChange={(e) =>\r\n                dispatch(swapViewActions.setKeepInSonic(e.target.checked))\r\n              }\r\n              colorScheme=\"dark-blue\"\r\n              color={checkboxColor}\r\n              fontWeight={600}\r\n            >\r\n              {label}\r\n            </Checkbox>\r\n          </FormControl>\r\n          <Popover trigger=\"hover\">\r\n            <PopoverTrigger>\r\n              <Flex>\r\n                <Icon\r\n                  as={FaInfoCircle}\r\n                  width={5}\r\n                  transition=\"opacity 200ms\"\r\n                  opacity={keepInSonic ? 1 : 0.5}\r\n                />\r\n              </Flex>\r\n            </PopoverTrigger>\r\n            <Portal>\r\n              <PopoverContent>\r\n                <PopoverArrow />\r\n                <PopoverBody display=\"inline-block\">{popoverLabel}</PopoverBody>\r\n              </PopoverContent>\r\n            </Portal>\r\n          </Popover>\r\n        </>\r\n      ) : (\r\n        <Text fontWeight=\"bold\" color=\"gray.400\">\r\n          {symbol} can’t be held in the Sonic canister\r\n        </Text>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Flex, Button } from '@chakra-ui/react';\r\nimport { Link } from 'react-router-dom';\r\ntype options = {\r\n    tabname?: string;\r\n};\r\n\r\nexport const SwapSubTab: React.FC<options> = ({ tabname }) => {\r\n    var url = location.pathname;\r\n    return (\r\n        <Flex gap={4} direction='row' align='center' alignItems='center' style={ {justifyContent: 'center'}}>\r\n            <Button style={\r\n                { backgroundColor: (url == '/swap')?'#3F51B5' :'transparent' , border:\"1\" , color:'white' , borderColor:'#3F51B5' }} \r\n                as={Link} colorScheme='blue'  to={'/swap'} variant='outline' px={6}>\r\n              Swap\r\n            </Button>\r\n            <Button  style={\r\n                { backgroundColor: (url == '/swap/mint')?'#3F51B5' :'transparent' , border:\"1\" , color:'white' , borderColor:'#3F51B5' }} \r\n                as={Link} colorScheme='blue'  to={'/swap/mint'} variant='outline'  px={6}>\r\n            Mint\r\n            </Button>\r\n        </Flex>\r\n    );\r\n}","export * from './use-swap-view-data';\r\n","\r\nimport { Pair, Swap, toBigNumber } from '@sonicdex/sonic-js';\r\nimport BigNumber from 'bignumber.js';\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { batch } from 'react-redux';\r\n\r\n\r\nimport { ENV } from '@/config';\r\nimport { getAppAssetsSources } from '@/config/utils';\r\nimport { ICP_METADATA } from '@/constants';\r\nimport { useBalances, useQuery, useTokenAllowance, useTokenBalanceMemo, useTokenSelectionChecker } from '@/hooks';\r\n\r\nimport {\r\n  FeatureState, INITIAL_SWAP_SLIPPAGE, NotificationType, SwapTokenDataKey, swapViewActions, useAppDispatch, useCyclesMintingCanisterStore,\r\n  useNotificationStore, useWalletStore, usePriceStore, useSwapCanisterStore, useSwapViewStore, useTokenModalOpener, getTokenPath\r\n} from '@/store';\r\n\r\nimport { formatValue, getMaxValue } from '@/utils/format';\r\nimport { debounce } from '@/utils/function';\r\n\r\nimport { OperationType } from '../components';\r\nimport {\r\n  getAmountOutFromPath, getICPValueByXDRRate, getXTCValueByXDRRate,\r\n} from '../swap.utils';\r\n\r\nexport enum SwapStep { Home, Review }\r\n\r\nexport const useSwapViewData = (action: string) => {\r\n  const dispatch = useAppDispatch();\r\n  const [lastChangedInputDataKey, setLastChangedInputDataKey] = useState<SwapTokenDataKey>('from');\r\n\r\n  const [step, setStep] = useState(SwapStep.Home);\r\n  const [isAutoSlippage, setIsAutoSlippage] = useState(true);\r\n\r\n  const query = useQuery();\r\n  const { addNotification } = useNotificationStore();\r\n  const { fromTokenOptions, toTokenOptions, from, to, tokenList, keepInSonic } = useSwapViewStore();\r\n\r\n  const {\r\n    sonicBalances, tokenBalances, icpBalance, balancesState, supportedTokenListState,\r\n    supportedTokenList, allPairsState, allPairs,\r\n  } = useSwapCanisterStore();\r\n\r\n  const { totalBalances } = useBalances();\r\n\r\n  const { ICPXDRconversionRate } = useCyclesMintingCanisterStore();\r\n  const { state: priceState } = usePriceStore();\r\n  const { isConnected } = useWalletStore();\r\n\r\n  const openSelectTokenModal = useTokenModalOpener();\r\n\r\n  const {\r\n    isFirstIsSelected: isFromTokenIsICP,\r\n    isSecondIsSelected: isToTokenIsICP,\r\n    isTokenSelected: isICPSelected,\r\n  } = useTokenSelectionChecker({ id0: from.metadata?.id, id1: to.metadata?.id });\r\n\r\n  const {\r\n    isTokenSelected: isWICPSelected,\r\n    isFirstIsSelected: isFromTokenIsWICP,\r\n    isSecondIsSelected: isToTokenIsWICP,\r\n  } = useTokenSelectionChecker({ id0: from.metadata?.id, id1: to.metadata?.id, targetId: ENV.canistersPrincipalIDs.WICP });\r\n\r\n  const {\r\n    isSecondIsSelected: isToTokenIsXTC, isTokenSelected: isXTCSelected } =\r\n    useTokenSelectionChecker({ id0: from.metadata?.id, id1: to.metadata?.id, targetId: ENV.canistersPrincipalIDs.XTC });\r\n\r\n  const fromBalance = useTokenBalanceMemo(from.metadata?.id);\r\n  const toBalance = useTokenBalanceMemo(to.metadata?.id);\r\n\r\n  function handleICPToWICPChange(newValue: string, dataKey: SwapTokenDataKey) {\r\n    const oppositeDataKey = dataKey === 'from' ? 'to' : 'from';\r\n\r\n    const _newValue = new BigNumber(newValue);\r\n    const icpFee = formatValue(ICP_METADATA.fee, ICP_METADATA.decimals);\r\n\r\n    const value = dataKey === 'from' ? _newValue.minus(icpFee) : _newValue.plus(icpFee);\r\n\r\n    dispatch(\r\n      swapViewActions.setValue({\r\n        data: oppositeDataKey,\r\n        value: value.toNumber() > 0 ? value.dp(ICP_METADATA.decimals).toString() : '',\r\n      })\r\n    );\r\n  }\r\n\r\n  function handleICPToXTCChange(newValue: string, dataKey: SwapTokenDataKey) {\r\n    const oppositeDataKey = dataKey === 'from' ? 'to' : 'from';\r\n\r\n    const xtcMetadata = tokenList?.[ENV.canistersPrincipalIDs.XTC];\r\n\r\n    if (ICPXDRconversionRate && xtcMetadata) {\r\n      const handler =\r\n        dataKey === 'from' ? getXTCValueByXDRRate : getICPValueByXDRRate;\r\n\r\n      const xtcFee = new BigNumber(\r\n        formatValue(xtcMetadata.fee, xtcMetadata.decimals)\r\n      );\r\n\r\n      const icpFeesConvertedToXTC = getXTCValueByXDRRate({\r\n        amount: formatValue(ICP_METADATA.fee, ICP_METADATA.decimals),\r\n        conversionRate: ICPXDRconversionRate,\r\n      }).minus(xtcFee).multipliedBy(2);\r\n\r\n      const xtcFees = xtcFee.multipliedBy(keepInSonic ? 4 : 2);\r\n\r\n      const amount =\r\n        dataKey === 'from'\r\n          ? newValue\r\n          : new BigNumber(newValue).plus(xtcFees).plus(icpFeesConvertedToXTC).toString();\r\n\r\n      const rateBasedAmount = handler({ amount, conversionRate: ICPXDRconversionRate });\r\n\r\n      const resultAmount =\r\n        dataKey === 'from'\r\n          ? rateBasedAmount.minus(icpFeesConvertedToXTC).minus(xtcFees)\r\n          : rateBasedAmount.dp(ICP_METADATA.decimals);\r\n\r\n      dispatch(\r\n        swapViewActions.setValue({\r\n          data: oppositeDataKey,\r\n          value: resultAmount.toNumber() > 0 ? resultAmount.toString() : '',\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  function handleICPToTokenChange(newValue: string, dataKey: SwapTokenDataKey) {\r\n    const oppositeDataKey = dataKey === 'from' ? 'to' : 'from';\r\n    const data = dataKey === 'from' ? from : to;\r\n    const oppositeData = dataKey === 'from' ? to : from;\r\n\r\n    const wrappedICPMetadata = supportedTokenList?.find((token) => token.id === ENV.canistersPrincipalIDs.WICP);\r\n\r\n    if (wrappedICPMetadata && tokenList && allPairs) {\r\n      const paths = getTokenPath({\r\n        pairList: allPairs as unknown as Pair.List, tokenList,\r\n        tokenId: wrappedICPMetadata.id, amount: newValue,\r\n      });\r\n      const dataWICP = { ...data, metadata: wrappedICPMetadata, paths };\r\n      dispatch(swapViewActions.setValue({ data: oppositeDataKey, value: getAmountOutFromPath(dataWICP, oppositeData) }));\r\n    }\r\n  }\r\n\r\n  const handleSetValue = (value: string, dataKey: SwapTokenDataKey) => {\r\n    dispatch(swapViewActions.setValue({ data: dataKey, value }));\r\n  };\r\n\r\n  const resetViewState = useCallback(() => {\r\n    setStep(SwapStep.Home);\r\n    dispatch(swapViewActions.setValue({ data: 'from', value: '' }));\r\n    dispatch(swapViewActions.setValue({ data: 'to', value: '' }));\r\n  }, [dispatch]);\r\n\r\n  const resetStepToHome = useCallback(() => {\r\n    if (step === SwapStep.Review) {\r\n      setStep(SwapStep.Home);\r\n    }\r\n  }, [step]);\r\n\r\n  const handleChangeValue = (value: string, dataKey: SwapTokenDataKey) => {\r\n    if (!from.metadata || !allPairs) return;\r\n    resetStepToHome();\r\n    handleSetValue(value, dataKey);\r\n\r\n    if (isICPSelected && isWICPSelected) {\r\n      handleICPToWICPChange(value, dataKey);\r\n      return;\r\n    }\r\n\r\n    if (isICPSelected && isXTCSelected) {\r\n      handleICPToXTCChange(value, dataKey);\r\n      return;\r\n    }\r\n\r\n    if (isICPSelected) {\r\n      handleICPToTokenChange(value, dataKey);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleSwitchTokens = () => {\r\n    resetStepToHome();\r\n\r\n    if (!to.metadata || (isFromTokenIsICP && isToTokenIsXTC)) {\r\n      dispatch(swapViewActions.switchTokens(lastChangedInputDataKey));\r\n      dispatch(swapViewActions.setToken({ data: 'to', tokenId: '' }));\r\n    } else {\r\n      dispatch(swapViewActions.switchTokens(lastChangedInputDataKey));\r\n      setLastChangedInputDataKey(\r\n        lastChangedInputDataKey === 'from' ? 'to' : 'from'\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleMaxClick = (dataKey: SwapTokenDataKey) => {\r\n    const balance = dataKey === 'from' ? fromBalance : toBalance;\r\n    const metadata = dataKey === 'from' ? from.metadata : to.metadata;\r\n\r\n    if (!balance) { return }\r\n\r\n    const maxValue = getMaxValue(metadata, balance).toString();\r\n    handleChangeValue(maxValue, dataKey);\r\n  };\r\n\r\n  const handleSelectToken = (dataKey: SwapTokenDataKey) => {\r\n    resetStepToHome();\r\n\r\n    const options = dataKey === 'from' ? fromTokenOptions : toTokenOptions;\r\n    const oppositeDataKey = dataKey === 'from' ? 'to' : 'from';\r\n    const oppositeTokenId = dataKey === 'from' ? to.metadata?.id : from.metadata?.id;\r\n\r\n    openSelectTokenModal({\r\n      metadata: options,\r\n      onSelect: (tokenId) => {\r\n        batch(() => {\r\n          if (\r\n            (dataKey === 'from' && from?.metadata?.id === tokenId) ||\r\n            (dataKey === 'to' && to?.metadata?.id === tokenId)\r\n          ) {\r\n            return;\r\n          }\r\n          if (oppositeTokenId === tokenId) {\r\n            dispatch(swapViewActions.setToken({ data: oppositeDataKey, tokenId: undefined }));\r\n            dispatch(swapViewActions.setToken({ data: dataKey, tokenId }));\r\n          } else if (tokenId === ENV.canistersPrincipalIDs.XTC && to.metadata?.id === ICP_METADATA.id) {\r\n            dispatch(swapViewActions.setToken({ data: dataKey, tokenId }));\r\n            dispatch(swapViewActions.setToken({ data: oppositeDataKey, tokenId: '' }));\r\n          } else {\r\n            dispatch(swapViewActions.setToken({ data: dataKey, tokenId }));\r\n          }\r\n        });\r\n      },\r\n      selectedTokenIds,\r\n    });\r\n  };\r\n\r\n\r\n  const handleMintXTC = useCallback(() => {\r\n    addNotification({\r\n      title: `Minting ${to.value} ${to.metadata?.symbol}`,\r\n      type: NotificationType.MintXTC,\r\n      id: String(new Date().getTime()),\r\n    });\r\n    debounce(resetViewState, 300);\r\n  }, [\r\n    addNotification,\r\n    resetViewState,\r\n    to.metadata?.symbol,\r\n    to.value,\r\n  ]);\r\n\r\n  const handleMintWICP = useCallback(() => {\r\n    addNotification({\r\n      title: `Wrapping ${from.value} ${from.metadata?.symbol}`,\r\n      type: NotificationType.MintWICP,\r\n      id: String(new Date().getTime()),\r\n    });\r\n\r\n    debounce(resetViewState, 300);\r\n  }, [addNotification, from.metadata?.symbol, from.value, resetViewState]);\r\n\r\n  const handleWithdrawWICP = useCallback(() => {\r\n    addNotification({\r\n      title: `Unwrapping ${from.value} ${from.metadata?.symbol}`,\r\n      type: NotificationType.WithdrawWICP,\r\n      id: String(new Date().getTime()),\r\n    });\r\n    debounce(resetViewState, 300);\r\n  }, [addNotification, from.metadata?.symbol, from.value, resetViewState]);\r\n\r\n  useEffect(() => { handleChangeValue(from.value, 'from'); }, [to.metadata]);\r\n\r\n  const handleApproveSwap = useCallback(() => {\r\n    addNotification({\r\n      title: `Swap ${from.value} ${from.metadata?.symbol} for ${to.value} ${to.metadata?.symbol}`,\r\n      type: NotificationType.Swap, id: String(new Date().getTime()),\r\n    });\r\n\r\n    debounce(resetViewState, 300);\r\n  }, [addNotification, from.metadata?.symbol, from.value, resetViewState, to.metadata?.symbol, to.value]);\r\n\r\n  const allowance = useTokenAllowance(from.metadata?.id);\r\n\r\n  const handleSetIsAutoSlippage = (isAutoSlippage: boolean) => {\r\n    setIsAutoSlippage(isAutoSlippage);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    if (isAutoSlippage) {\r\n      dispatch(swapViewActions.setSlippage(INITIAL_SWAP_SLIPPAGE));\r\n    }\r\n  };\r\n\r\n  const handleSetSlippage = (slippage: string) => {\r\n    dispatch(swapViewActions.setSlippage(slippage));\r\n  };\r\n\r\n  const isFetchingNotStarted = useMemo(\r\n    () =>\r\n      allPairsState === FeatureState.NotStarted ||\r\n      supportedTokenListState === FeatureState.NotStarted,\r\n    [supportedTokenListState, allPairsState]\r\n  );\r\n\r\n  const isLoading = useMemo(\r\n    () =>\r\n      balancesState === FeatureState.Loading ||\r\n      supportedTokenListState === FeatureState.Loading ||\r\n      allPairsState === FeatureState.Loading,\r\n    [balancesState, supportedTokenListState, allPairsState]\r\n  );\r\n\r\n  const isBalancesUpdating = useMemo(\r\n    () => balancesState === FeatureState.Updating,\r\n    [balancesState]\r\n  );\r\n  const isPriceUpdating = useMemo(\r\n    () => priceState === FeatureState.Updating,\r\n    [priceState]\r\n  );\r\n\r\n  const [isButtonDisabled, buttonMessage, handleButtonClick] = useMemo<\r\n    [boolean, string, (() => void)?]\r\n  >(() => {\r\n    if (isLoading) return [true, 'Loading'];\r\n    if (isFetchingNotStarted || !from.metadata) return [true, 'Fetching'];\r\n    if (!to.metadata) return [true, 'Select a Token'];\r\n\r\n    if (toTokenOptions && toTokenOptions.length <= 0)\r\n      return [true, 'No pairs available'];\r\n\r\n    const parsedFromValue = (from.value && parseFloat(from.value)) || 0;\r\n\r\n    if (parsedFromValue <= 0)\r\n      return [true, `Enter ${from.metadata.symbol} Amount`];\r\n\r\n    if (\r\n      parsedFromValue <= toBigNumber(from.metadata.fee).applyDecimals(from.metadata.decimals).toNumber()\r\n    ) {\r\n      return [true, `${from.metadata.symbol} amount must be greater than fee`];\r\n    }\r\n\r\n    const parsedToValue = (to.value && parseFloat(to.value)) || 0;\r\n\r\n    if (\r\n      parsedToValue <= toBigNumber(to.metadata.fee).applyDecimals(to.metadata.decimals).toNumber()\r\n    ) {\r\n      return [true, `${to.metadata.symbol} amount must be greater than fee`];\r\n    }\r\n\r\n    if (totalBalances && typeof fromBalance === 'number') {\r\n      if (parsedFromValue > Number(getMaxValue(from.metadata, fromBalance))) {\r\n        return [true, `Insufficient ${from.metadata.symbol} Balance`];\r\n      }\r\n    }\r\n\r\n    if (isFromTokenIsICP && isToTokenIsWICP) {\r\n      return [false, 'Wrap', handleMintWICP];\r\n    }\r\n\r\n    if (isFromTokenIsWICP && isToTokenIsICP) {\r\n      return [false, 'Unwrap', handleWithdrawWICP];\r\n    }\r\n\r\n    if (isFromTokenIsICP && isToTokenIsXTC) {\r\n      return [false, 'Mint XTC', handleMintXTC];\r\n    }\r\n\r\n    const handleButtonClick = () => {\r\n      if (step !== SwapStep.Review) {\r\n        setStep(SwapStep.Review);\r\n      }\r\n\r\n      if (step === SwapStep.Review) {\r\n        handleApproveSwap();\r\n      }\r\n    };\r\n    const buttonText = step === SwapStep.Review ? 'Swap' : 'Review Swap';\r\n    const waitingForAllowance = step === SwapStep.Review && typeof allowance === 'undefined';\r\n\r\n    return [waitingForAllowance, buttonText, handleButtonClick];\r\n  }, [\r\n    isLoading, isFetchingNotStarted, from.metadata, from.value, to.metadata, to.value, toTokenOptions, totalBalances,\r\n    fromBalance, isFromTokenIsICP, isToTokenIsWICP, isFromTokenIsWICP, isToTokenIsICP, isToTokenIsXTC, step, allowance,\r\n    handleMintWICP, handleWithdrawWICP, handleMintXTC, handleApproveSwap,\r\n  ]);\r\n\r\n  const headerTitle = useMemo(() => {\r\n    if (isFromTokenIsICP && isToTokenIsXTC) {\r\n      return 'Mint XTC';\r\n    }\r\n\r\n    if (isFromTokenIsICP && isToTokenIsWICP) {\r\n      return 'Wrap';\r\n    }\r\n\r\n    if (isFromTokenIsWICP && isToTokenIsICP) {\r\n      return 'Unwrap';\r\n    }\r\n\r\n    return action == 'swap' ? 'Swap' : action == 'mint' ? 'Mint' : '';\r\n  }, [\r\n    isFromTokenIsICP,\r\n    isToTokenIsXTC,\r\n    isToTokenIsWICP,\r\n    isFromTokenIsWICP,\r\n    isToTokenIsICP,\r\n  ]);\r\n\r\n  const priceImpact = useMemo(\r\n    () => {\r\n      return Swap.getPriceImpact({\r\n        amountIn: parseFloat(from.value) > 0 ? from.value : '0',\r\n        amountOut: to.value,\r\n        priceIn: from.metadata?.price ?? '0',\r\n        priceOut: to.metadata?.price ?? '0',\r\n      }).toString();\r\n    },\r\n    [from, to]\r\n  );\r\n\r\n  const selectedTokenIds = useMemo(() => {\r\n    const selectedIds = [];\r\n    if (from?.metadata?.id) {\r\n      selectedIds.push(from.metadata.id);\r\n    }\r\n\r\n    return selectedIds;\r\n  }, [from?.metadata?.id]);\r\n\r\n  const [isSelectTokenButtonDisabled, selectTokenButtonText] = useMemo(() => {\r\n    if (toTokenOptions && toTokenOptions.length <= 0)\r\n      return [true, 'No pairs available'];\r\n    return [false, 'Select a Token'];\r\n  }, [toTokenOptions]);\r\n\r\n  const fromSources = useMemo(() => {\r\n    if (from.metadata) {\r\n      if (from.metadata.id === ICP_METADATA.id) {\r\n        return getAppAssetsSources({\r\n          balances: {\r\n            wallet: icpBalance ?? 0,\r\n          },\r\n        });\r\n      }\r\n\r\n      return getAppAssetsSources({\r\n        balances: {\r\n          wallet: tokenBalances ? tokenBalances[from.metadata.id] : 0,\r\n          sonic: sonicBalances ? sonicBalances[from.metadata.id] : 0,\r\n        },\r\n      });\r\n    }\r\n  }, [from.metadata, tokenBalances, sonicBalances, icpBalance]);\r\n\r\n  const toSources = useMemo(() => {\r\n    if (to.metadata) {\r\n      if (to.metadata.id === ICP_METADATA.id) {\r\n        return getAppAssetsSources({\r\n          balances: {\r\n            wallet: icpBalance ?? 0,\r\n          },\r\n        });\r\n      }\r\n\r\n      return getAppAssetsSources({\r\n        balances: {\r\n          wallet: tokenBalances ? tokenBalances[to.metadata.id] : 0,\r\n          sonic: sonicBalances ? sonicBalances[to.metadata.id] : 0,\r\n        },\r\n      });\r\n    }\r\n  }, [to.metadata, tokenBalances, sonicBalances, icpBalance]);\r\n\r\n  const isExplanationTooltipVisible = useMemo(() => {\r\n    return isToTokenIsXTC && isFromTokenIsICP;\r\n  }, [isFromTokenIsICP, isToTokenIsXTC]);\r\n\r\n  const currentOperation = useMemo(\r\n    () =>\r\n      isFromTokenIsICP && isToTokenIsWICP\r\n        ? OperationType.Wrap\r\n        : isFromTokenIsICP && isToTokenIsXTC\r\n          ? OperationType.Mint\r\n          : OperationType.Swap,\r\n    [isFromTokenIsICP, isToTokenIsWICP, isToTokenIsXTC]\r\n  );\r\n\r\n  const canHeldInSonic = useMemo(() => !isToTokenIsICP, [isToTokenIsICP]);\r\n\r\n  useEffect(() => {\r\n    // Get tokens from query params after loading\r\n    if (!isLoading && fromTokenOptions && toTokenOptions) {\r\n      const tokenFromId = query.get('from');\r\n      const tokenToId = query.get('to');\r\n\r\n      if (tokenFromId) {\r\n        const from = fromTokenOptions.find(({ id }) => id === tokenFromId);\r\n        if (from?.id) {\r\n          dispatch(swapViewActions.setToken({ data: 'from', tokenId: from.id }));\r\n          dispatch(swapViewActions.setValue({ data: 'from', value: '' }));\r\n        }\r\n      }\r\n\r\n      if (tokenToId) {\r\n        const to = toTokenOptions.find(({ id }) => id === tokenToId);\r\n        if (to?.id) {\r\n          dispatch(swapViewActions.setToken({ data: 'to', tokenId: to.id }));\r\n          dispatch(swapViewActions.setValue({ data: 'to', value: '' }));\r\n        }\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isLoading]);\r\n\r\n  return {\r\n    step, allowance, isButtonDisabled, buttonMessage, canHeldInSonic, isAutoSlippage, headerTitle, isConnected, isLoading, isBalancesUpdating,\r\n    isPriceUpdating, priceImpact, fromSources, toSources, currentOperation, isICPSelected, isExplanationTooltipVisible,\r\n    isSelectTokenButtonDisabled, selectTokenButtonText, setStep, setLastChangedInputDataKey, onButtonClick: handleButtonClick,\r\n    onMenuClose: handleMenuClose, onSetSlippage: handleSetSlippage, onSetIsAutoSlippage: handleSetIsAutoSlippage, onChangeValue: handleChangeValue,\r\n    onSelectToken: handleSelectToken, onMaxClick: handleMaxClick, onSwitchTokens: handleSwitchTokens,\r\n  };\r\n};\r\n","export * from './components';\r\nexport * from './hooks';\r\nexport * from './swap';\r\nexport * from './mint';\r\nexport * from './swap.utils';\r\n","import {\r\n  Box, Button, Flex, Icon, IconButton, Link, Menu, MenuButton, MenuList, Popover, PopoverArrow, PopoverBody,\r\n  PopoverContent, PopoverTrigger, Skeleton, Stack, Text, Tooltip, useColorModeValue,\r\n} from '@chakra-ui/react';\r\n\r\nimport { FaArrowDown } from '@react-icons/all-files/fa/FaArrowDown';\r\nimport { FaCog } from '@react-icons/all-files/fa/FaCog';\r\nimport { FaInfoCircle } from '@react-icons/all-files/fa/FaInfoCircle';\r\n\r\nimport {\r\n  WalletNotConnected, SlippageSettings, Token, TokenContent, TokenData, TokenDataBalances, TokenDataPrice,\r\n  TokenDataMetaInfo, TokenDetailsButton, TokenDetailsLogo, TokenDetailsSymbol, TokenInput, ViewHeader,\r\n} from '@/components';\r\n\r\nimport { useSwapView, useSwapViewStore } from '@/store';\r\n\r\nimport { SwapStep } from './';\r\nimport { ExchangeBox, KeepInSonicBox, SwapSubTab } from './components';\r\nimport { useSwapViewData } from './hooks';\r\n\r\nimport { useEffect } from 'react';\r\n\r\nimport { swapViewActions, useAppDispatch } from '@/store';\r\n\r\nexport const MintView = () => {\r\n  useSwapView('mint');\r\n  const dispatch = useAppDispatch();\r\n\r\n  const swapPlacementButtonBg = useColorModeValue('gray.50', 'custom.3');\r\n  const menuListShadow = useColorModeValue('lg', 'none');\r\n  const menuListBg = useColorModeValue('gray.50', 'custom.3');\r\n  const linkColor = useColorModeValue('dark-blue.500', 'dark-blue.400');\r\n  useEffect(() => { dispatch(swapViewActions.setKeepInSonic(false)) }, []);\r\n\r\n  \r\n  const {\r\n    allowance, step, headerTitle, isAutoSlippage, isICPSelected, isLoading, isBalancesUpdating, isPriceUpdating, isExplanationTooltipVisible,\r\n    isSelectTokenButtonDisabled, selectTokenButtonText, currentOperation, priceImpact, fromSources, toSources, canHeldInSonic,\r\n    isConnected, isButtonDisabled, buttonMessage, setStep, setLastChangedInputDataKey, onButtonClick, onChangeValue,\r\n    onSetIsAutoSlippage, onSetSlippage, onMenuClose, onMaxClick, onSelectToken, onSwitchTokens,\r\n  } = useSwapViewData('mint');\r\n\r\n  const { fromTokenOptions, toTokenOptions, from, to, slippage } = useSwapViewStore();\r\n\r\n  return (\r\n    <Stack spacing={4}>\r\n      <SwapSubTab tabname={'mint'} />\r\n      <ViewHeader title={headerTitle}\r\n        onArrowBack={step === SwapStep.Review ? () => setStep(SwapStep.Home) : undefined}\r\n      >\r\n        <Menu onClose={onMenuClose}>\r\n          <Tooltip label=\"Adjust the slippage\">\r\n            <MenuButton as={IconButton} isRound size=\"sm\" aria-label=\"Adjust the slippage\"\r\n              icon={<FaCog />} ml=\"auto\" isDisabled={isICPSelected}\r\n            />\r\n          </Tooltip>\r\n          <MenuList bg={menuListBg} shadow={menuListShadow} borderRadius={20} ml={-20} py={0}>\r\n            <SlippageSettings slippage={slippage} isAutoSlippage={isAutoSlippage} setSlippage={onSetSlippage} setIsAutoSlippage={onSetIsAutoSlippage} />\r\n          </MenuList>\r\n        </Menu>\r\n      </ViewHeader>\r\n      <Flex direction=\"column\" alignItems=\"center\">\r\n        <Box width=\"full\">\r\n          <Token value={from.value} setValue={(value) => onChangeValue(value, 'from')}\r\n            tokenListMetadata={fromTokenOptions} tokenMetadata={from.metadata}\r\n            isLoading={isLoading} sources={fromSources}\r\n          >\r\n            <TokenContent>\r\n              <TokenDetailsButton onClick={() => onSelectToken('from')}>\r\n                <TokenDetailsLogo />\r\n                <TokenDetailsSymbol />\r\n              </TokenDetailsButton>\r\n\r\n              <TokenInput autoFocus onChange={() => setLastChangedInputDataKey('from')} />\r\n            </TokenContent>\r\n            <TokenData>\r\n              <TokenDataBalances\r\n                isUpdating={isBalancesUpdating}\r\n                onMaxClick={() => onMaxClick('from')}\r\n              />\r\n              <TokenDataPrice isUpdating={isPriceUpdating} />\r\n            </TokenData>\r\n            <TokenDataMetaInfo\r\n              tokenSymbol={from.metadata ? from.metadata.symbol : ''} tokenValue={from.value}\r\n              tokenId={from.metadata ? from.metadata.id : ''} tokenDecimals={from.metadata ? from.metadata.decimals : 0}\r\n              pageInfo=\"swap\"\r\n            ></TokenDataMetaInfo>\r\n          </Token>\r\n        </Box>\r\n\r\n        <Flex direction=\"column-reverse\" w=\"full\">\r\n\r\n          <Box width=\"full\">\r\n            <Token value={to.value} setValue={(value) => onChangeValue(value, 'to')} tokenListMetadata={toTokenOptions}\r\n              tokenMetadata={to.metadata} isLoading={isLoading} sources={toSources}\r\n              shouldGlow={step === SwapStep.Review}\r\n            >\r\n              <TokenContent>\r\n                {to.metadata ? (\r\n                  <TokenDetailsButton onClick={() => onSelectToken('to')}>\r\n                    <TokenDetailsLogo />\r\n                    <TokenDetailsSymbol />\r\n                  </TokenDetailsButton>\r\n                ) : (\r\n                  <TokenDetailsButton onClick={() => onSelectToken('to')}\r\n                    isDisabled={isSelectTokenButtonDisabled} variant={isLoading ? 'solid' : 'gradient'}\r\n                    colorScheme={isLoading ? 'gray' : 'dark-blue'}\r\n                  >\r\n                    <Skeleton isLoaded={!isLoading}>\r\n                      {selectTokenButtonText}\r\n                    </Skeleton>\r\n                  </TokenDetailsButton>\r\n                )}\r\n                <TokenInput onChange={() => setLastChangedInputDataKey('to')} />\r\n              </TokenContent>\r\n              <TokenData>\r\n                <TokenDataBalances isUpdating={isBalancesUpdating} />\r\n                <TokenDataPrice isUpdating={isPriceUpdating} priceImpact={priceImpact}>\r\n                  {isExplanationTooltipVisible && (\r\n                    <Popover trigger=\"hover\">\r\n                      <PopoverTrigger>\r\n                        <Box tabIndex={0}>\r\n                          <FaInfoCircle />\r\n                        </Box>\r\n                      </PopoverTrigger>\r\n                      <PopoverContent>\r\n                        <PopoverArrow />\r\n                        <PopoverBody>\r\n                          <Text>\r\n                            This price & percentage shows the current difference\r\n                            between minting and swapping to XTC from ICP. If\r\n                            negative, it's better to swap; if positive, it's\r\n                            better to mint.{' '}\r\n                            <Link\r\n                              color={linkColor}\r\n                              rel=\"noopener noreferrer\"\r\n                              target=\"_blank\"\r\n                              href=\"https://sonic-ooo.medium.com/xtc-in-sonic-minting-vs-swapping-and-price-differences-67965228e52e\"\r\n                            >\r\n                              Learn More.\r\n                            </Link>\r\n                          </Text>\r\n                        </PopoverBody>\r\n                      </PopoverContent>\r\n                    </Popover>\r\n                  )}\r\n                </TokenDataPrice>\r\n              </TokenData>\r\n            </Token>\r\n          </Box>\r\n          <Tooltip label=\"Switch placement\">\r\n            <IconButton aria-label=\"Switch placement\"\r\n              icon={<Icon as={FaArrowDown} transition=\"transform 250ms\" />}\r\n              variant=\"outline\" mt={-2} mb={-2} w=\"fit-content\" mx=\"auto\"\r\n              bg={swapPlacementButtonBg} onClick={onSwitchTokens}\r\n              pointerEvents={!to.metadata ? 'none' : 'all'}\r\n              _hover={{\r\n                '& > svg': {\r\n                  transform: 'rotate(180deg)',\r\n                },\r\n              }}\r\n            />\r\n          </Tooltip>\r\n        </Flex>\r\n      </Flex>\r\n\r\n      <ExchangeBox priceImpact={priceImpact} />\r\n\r\n      <KeepInSonicBox canHeldInSonic={canHeldInSonic} symbol={to.metadata?.symbol} operation={currentOperation} />\r\n\r\n      {isConnected ? (\r\n        <Button isFullWidth variant=\"gradient\" colorScheme=\"dark-blue\" size=\"lg\" onClick={onButtonClick}\r\n          isLoading={\r\n            isLoading ||\r\n            (step === SwapStep.Review && typeof allowance !== 'number')\r\n          }\r\n          isDisabled={isButtonDisabled}\r\n        >\r\n          {buttonMessage}\r\n        </Button>\r\n      ) : (\r\n        <WalletNotConnected />\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n","import {\r\n  Box, Button, Flex, Icon, IconButton, Link, Menu, MenuButton, MenuList, Popover, PopoverArrow, PopoverBody,\r\n  PopoverContent, PopoverTrigger, Skeleton, Stack, Text, Tooltip, useColorModeValue,\r\n} from '@chakra-ui/react';\r\n\r\nimport { FaArrowDown } from '@react-icons/all-files/fa/FaArrowDown';\r\nimport { FaCog } from '@react-icons/all-files/fa/FaCog';\r\nimport { FaInfoCircle } from '@react-icons/all-files/fa/FaInfoCircle';\r\n\r\nimport {\r\n  SlippageSettings, Token, TokenContent, TokenData, TokenDataBalances, TokenDataPrice,\r\n  TokenDataMetaInfo, TokenDetailsButton, TokenDetailsLogo, TokenDetailsSymbol, TokenInput, ViewHeader,\r\n  WalletNotConnected\r\n} from '@/components';\r\n\r\nimport { useSwapView, useSwapViewStore } from '@/store';\r\n\r\nimport { SwapStep } from './';\r\nimport { ExchangeBox, KeepInSonicBox, SwapSubTab } from './components';\r\nimport { useSwapViewData } from './hooks';\r\n\r\nexport const SwapView = () => {\r\n  useSwapView('swap');\r\n  const {\r\n    allowance, step, headerTitle, isAutoSlippage, isICPSelected, isLoading, isBalancesUpdating, isPriceUpdating, isExplanationTooltipVisible,\r\n    isSelectTokenButtonDisabled, selectTokenButtonText, currentOperation, priceImpact, fromSources, toSources, canHeldInSonic,\r\n    isConnected, isButtonDisabled, buttonMessage, setStep, setLastChangedInputDataKey, onButtonClick, onChangeValue,\r\n    onSetIsAutoSlippage, onSetSlippage, onMenuClose, onMaxClick, onSelectToken, onSwitchTokens,\r\n  } = useSwapViewData('swap');\r\n\r\n  const swapPlacementButtonBg = useColorModeValue('gray.50', 'custom.3');\r\n  const menuListShadow = useColorModeValue('lg', 'none');\r\n  const menuListBg = useColorModeValue('gray.50', 'custom.3');\r\n  const linkColor = useColorModeValue('dark-blue.500', 'dark-blue.400');\r\n\r\n  const { fromTokenOptions, toTokenOptions, from, to, slippage } = useSwapViewStore();\r\n\r\n  return (\r\n    <Stack spacing={4} mb={9}>\r\n      <SwapSubTab tabname={'swap'} />\r\n      <ViewHeader title={headerTitle}\r\n        onArrowBack={step === SwapStep.Review ? () => setStep(SwapStep.Home) : undefined}\r\n      >\r\n        <Menu onClose={onMenuClose}>\r\n          <Tooltip label=\"Adjust the slippage\">\r\n            <MenuButton as={IconButton} isRound size=\"sm\" aria-label=\"Adjust the slippage\"\r\n              icon={<FaCog />} ml=\"auto\" isDisabled={isICPSelected}\r\n            />\r\n          </Tooltip>\r\n          <MenuList bg={menuListBg} shadow={menuListShadow} borderRadius={20} ml={-20} py={0}>\r\n            <SlippageSettings slippage={slippage} isAutoSlippage={isAutoSlippage} setSlippage={onSetSlippage} setIsAutoSlippage={onSetIsAutoSlippage} />\r\n          </MenuList>\r\n        </Menu>\r\n      </ViewHeader>\r\n\r\n\r\n      <Flex direction=\"column\" alignItems=\"center\">\r\n        <Box width=\"full\">\r\n          <Token value={from.value} setValue={(value) => onChangeValue(value, 'from')}\r\n            tokenListMetadata={fromTokenOptions} tokenMetadata={from.metadata}\r\n            isLoading={isLoading} sources={fromSources}\r\n          >\r\n            <TokenContent>\r\n              <TokenDetailsButton onClick={() => onSelectToken('from')}>\r\n                <TokenDetailsLogo />\r\n                <TokenDetailsSymbol />\r\n              </TokenDetailsButton>\r\n\r\n              <TokenInput autoFocus onChange={() => setLastChangedInputDataKey('from')} />\r\n            </TokenContent>\r\n            <TokenData>\r\n              <TokenDataBalances\r\n                isUpdating={isBalancesUpdating}\r\n                onMaxClick={() => onMaxClick('from')}\r\n              />\r\n              <TokenDataPrice isUpdating={isPriceUpdating} />\r\n            </TokenData>\r\n            <TokenDataMetaInfo\r\n              tokenSymbol={from.metadata ? from.metadata.symbol : ''} tokenValue={from.value}\r\n              tokenId={from.metadata ? from.metadata.id : ''} tokenDecimals={from.metadata ? from.metadata.decimals : 0}\r\n              pageInfo=\"swap\"\r\n            ></TokenDataMetaInfo>\r\n          </Token>\r\n        </Box>\r\n\r\n        <Flex direction=\"column-reverse\" w=\"full\">\r\n\r\n          <Box width=\"full\">\r\n            <Token value={to.value} setValue={(value) => onChangeValue(value, 'to')} tokenListMetadata={toTokenOptions}\r\n              tokenMetadata={to.metadata} isLoading={isLoading} sources={toSources}\r\n              shouldGlow={step === SwapStep.Review}\r\n            >\r\n              <TokenContent>\r\n                {to.metadata ? (\r\n                  <TokenDetailsButton onClick={() => onSelectToken('to')}>\r\n                    <TokenDetailsLogo />\r\n                    <TokenDetailsSymbol />\r\n                  </TokenDetailsButton>\r\n                ) : (\r\n                  <TokenDetailsButton onClick={() => onSelectToken('to')}\r\n                    isDisabled={isSelectTokenButtonDisabled} variant={isLoading ? 'solid' : 'gradient'}\r\n                    colorScheme={isLoading ? 'gray' : 'dark-blue'}\r\n                  >\r\n                    <Skeleton isLoaded={!isLoading}>\r\n                      {selectTokenButtonText}\r\n                    </Skeleton>\r\n                  </TokenDetailsButton>\r\n                )}\r\n                <TokenInput onChange={() => setLastChangedInputDataKey('to')} />\r\n              </TokenContent>\r\n              <TokenData>\r\n                <TokenDataBalances isUpdating={isBalancesUpdating} />\r\n                <TokenDataPrice isUpdating={isPriceUpdating} priceImpact={priceImpact}>\r\n                  {isExplanationTooltipVisible && (\r\n                    <Popover trigger=\"hover\">\r\n                      <PopoverTrigger>\r\n                        <Box tabIndex={0}>\r\n                          <FaInfoCircle />\r\n                        </Box>\r\n                      </PopoverTrigger>\r\n                      <PopoverContent>\r\n                        <PopoverArrow />\r\n                        <PopoverBody>\r\n                          <Text>\r\n                            This price & percentage shows the current difference\r\n                            between minting and swapping to XTC from ICP. If\r\n                            negative, it's better to swap; if positive, it's\r\n                            better to mint.{' '}\r\n                            <Link\r\n                              color={linkColor}\r\n                              rel=\"noopener noreferrer\"\r\n                              target=\"_blank\"\r\n                              href=\"https://sonic-ooo.medium.com/xtc-in-sonic-minting-vs-swapping-and-price-differences-67965228e52e\"\r\n                            >\r\n                              Learn More.\r\n                            </Link>\r\n                          </Text>\r\n                        </PopoverBody>\r\n                      </PopoverContent>\r\n                    </Popover>\r\n                  )}\r\n                </TokenDataPrice>\r\n              </TokenData>\r\n            </Token>\r\n          </Box>\r\n          <Tooltip label=\"Switch placement\">\r\n            <IconButton aria-label=\"Switch placement\"\r\n              icon={<Icon as={FaArrowDown} transition=\"transform 250ms\" />}\r\n              variant=\"outline\" mt={-2} mb={-2} w=\"fit-content\" mx=\"auto\"\r\n              bg={swapPlacementButtonBg} onClick={onSwitchTokens}\r\n              pointerEvents={!to.metadata ? 'none' : 'all'}\r\n              _hover={{\r\n                '& > svg': {\r\n                  transform: 'rotate(180deg)',\r\n                },\r\n              }}\r\n            />\r\n          </Tooltip>\r\n        </Flex>\r\n      </Flex>\r\n\r\n      <ExchangeBox priceImpact={priceImpact} />\r\n\r\n      <KeepInSonicBox canHeldInSonic={canHeldInSonic} symbol={to.metadata?.symbol} operation={currentOperation} />\r\n\r\n      {isConnected ? (\r\n        <Button isFullWidth variant=\"gradient\" colorScheme=\"dark-blue\" size=\"lg\" onClick={onButtonClick}\r\n          isLoading={\r\n            isLoading ||\r\n            (step === SwapStep.Review && typeof allowance !== 'number')\r\n          }\r\n          isDisabled={isButtonDisabled}\r\n        >\r\n          {buttonMessage}\r\n        </Button>\r\n      ) : (\r\n        <WalletNotConnected />\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n","import { Pair, Swap, toBigNumber } from '@sonicdex/sonic-js';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nimport {\r\n  DEFAULT_CYCLES_PER_XDR,\r\n  SwapTokenData,\r\n  TOKEN_SUBDIVIDABLE_BY,\r\n} from '@/store';\r\nimport { getValueWithoutFees } from '@/utils/format';\r\n\r\nexport type GetXTCValueByXDRRateOptions = {\r\n  amount: string;\r\n  conversionRate: string;\r\n};\r\n\r\nexport type GetICPValueByXDRRateOptions = {\r\n  amount: string;\r\n  conversionRate: string;\r\n};\r\n\r\nexport function getXTCValueByXDRRate({\r\n  amount,\r\n  conversionRate,\r\n}: GetXTCValueByXDRRateOptions) {\r\n  const _amount = new BigNumber(amount);\r\n  const _conversionRate = new BigNumber(conversionRate);\r\n  const _defaultCyclesPerXDR = new BigNumber(DEFAULT_CYCLES_PER_XDR);\r\n  const _subdividableBy = new BigNumber(TOKEN_SUBDIVIDABLE_BY * 100_000_000);\r\n\r\n  // XTCValueByXDRRate = amount * conversionRate * defaultCyclesPerXDR / subdividableBy\r\n  const result = _amount\r\n    .multipliedBy(_conversionRate)\r\n    .multipliedBy(_defaultCyclesPerXDR)\r\n    .dividedBy(_subdividableBy);\r\n\r\n  return result;\r\n}\r\n\r\nexport function getICPValueByXDRRate({\r\n  amount,\r\n  conversionRate,\r\n}: GetXTCValueByXDRRateOptions) {\r\n  const _amount = new BigNumber(amount);\r\n  const _defaultCyclesPerXDR = new BigNumber(DEFAULT_CYCLES_PER_XDR);\r\n  const _subdividableBy = new BigNumber(TOKEN_SUBDIVIDABLE_BY * 100_000_000);\r\n\r\n  const _conversionRate = new BigNumber(conversionRate);\r\n\r\n  // ICPValueByXDRRate = amount / conversionRate / defaultCyclesPerXDR * subdividableBy\r\n  const result = _amount\r\n    .multipliedBy(_subdividableBy)\r\n    .dividedBy(_defaultCyclesPerXDR)\r\n    .dividedBy(_conversionRate);\r\n\r\n  return result;\r\n}\r\n\r\nexport const getAmountOutFromPath = (\r\n  tokenIn: SwapTokenData,\r\n  tokenOut: SwapTokenData\r\n): string => {\r\n  if (!tokenIn.metadata || !tokenOut.metadata || !tokenIn.value) return '';\r\n\r\n  const path = tokenIn.paths[tokenOut.metadata.id];\r\n\r\n  if (path) {\r\n    return new BigNumber(path.amountOut)\r\n      .dp(tokenOut.metadata.decimals)\r\n      .toString();\r\n  }\r\n\r\n  return '';\r\n};\r\n\r\nexport type GetSwapAmountOutMinOptions = {\r\n  from: SwapTokenData;\r\n  to: SwapTokenData;\r\n  slippage: string;\r\n  allPairs?: Pair.List;\r\n  hasDeposit?: boolean;\r\n  hasWithdraw?: boolean;\r\n};\r\n\r\nexport const getSwapAmountOutMin = ({\r\n  from,\r\n  to,\r\n  slippage,\r\n  allPairs,\r\n  hasDeposit,\r\n  hasWithdraw,\r\n}: GetSwapAmountOutMinOptions) => {\r\n  if (\r\n    !from.metadata ||\r\n    new BigNumber(from.value).isZero() ||\r\n    new BigNumber(from.value).isNaN() ||\r\n    !to.metadata ||\r\n    new BigNumber(to.value).isZero() ||\r\n    new BigNumber(to.value).isNaN() ||\r\n    !allPairs\r\n  )\r\n    return '0';\r\n\r\n  const pair = allPairs[from.metadata.id]?.[to.metadata.id];\r\n  if (!pair) return '0';\r\n\r\n  let fromValue = new BigNumber(from.value);\r\n\r\n  if (hasDeposit) {\r\n    fromValue = getValueWithoutFees({\r\n      value: from.value,\r\n      fee: from.metadata.fee,\r\n      decimals: from.metadata.decimals,\r\n      numberOfFees: 2,\r\n    });\r\n  }\r\n\r\n  const toValue = Swap.getAmountOut({\r\n    amountIn: fromValue.toString(),\r\n    decimalsIn: from.metadata.decimals,\r\n    decimalsOut: to.metadata.decimals,\r\n    reserveIn: Number(pair.reserve0),\r\n    reserveOut: Number(pair.reserve1),\r\n  }).toString();\r\n\r\n  let result = Swap.getAmountMin({\r\n    amount: Math.max(Number(toValue), 0).toString(),\r\n    slippage,\r\n    decimals: to.metadata.decimals,\r\n  });\r\n\r\n  if (hasWithdraw) {\r\n    result = getValueWithoutFees({\r\n      value: result.toString(),\r\n      fee: to.metadata.fee,\r\n      decimals: to.metadata.decimals,\r\n      numberOfFees: 2,\r\n    });\r\n  }\r\n\r\n  return result.dp(Number(to.metadata.decimals)).toString();\r\n};\r\n\r\nexport const getAmountOutRatio = (\r\n  from: SwapTokenData,\r\n  to: SwapTokenData,\r\n  allPairs?: Pair.List\r\n): string => {\r\n  if (!from.metadata || !to.metadata) return '0';\r\n\r\n  if (from.value && to.value) {\r\n    const ratio = toBigNumber(to.value)\r\n      .div(from.value)\r\n      .dp(to.metadata.decimals);\r\n    if (ratio.isZero())\r\n      return `less than ${toBigNumber(1)\r\n        .applyDecimals(to.metadata.decimals)\r\n        .toString()}`;\r\n    return ratio.toString();\r\n  }\r\n\r\n  if (!allPairs) return '0';\r\n\r\n  const pair = allPairs[from.metadata.id]?.[to.metadata.id];\r\n\r\n  if (!pair) return '0';\r\n\r\n  return Swap.getAmountOut({\r\n    amountIn: '1',\r\n    decimalsIn: from.metadata.decimals,\r\n    decimalsOut: to.metadata.decimals,\r\n    reserveIn: Number(pair.reserve0),\r\n    reserveOut: Number(pair.reserve1),\r\n  }).toString();\r\n};\r\n","export * from './test';\r\nexport * from './todos';\r\nexport * from './test2'","import { useState , useEffect , createContext, useContext , useRef , useReducer , useCallback ,useMemo  } from \"react\";\r\nconst UserContext = createContext({});\r\n\r\nimport Todos2 from './todos';\r\nimport useFetch from './useFetch';\r\n\r\n\r\n\r\nconst initialTodos = [\r\n    {\r\n      id: 1,\r\n      title: \"Todo 1\",\r\n      complete: false,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Todo 2\",\r\n      complete: false,\r\n    },\r\n  ];\r\n\r\n  const reducer = (state:any, action:any) => {\r\n    switch (action.type) {\r\n      case \"COMPLETE\":\r\n        return state.map((todo:any) => {\r\n          if (todo.id === action.id) {\r\n           var p= { ...todo, complete: !todo.complete }\r\n            return p;\r\n          } else {\r\n            return todo;\r\n          }\r\n        });\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n\r\n  function Todos() {\r\n\r\n    const [todos, dispatch] = useReducer(reducer, initialTodos);\r\n\r\n    const handleComplete = (todo:any) => {\r\n      dispatch({ type: \"COMPLETE\", id: todo.id });\r\n    };\r\n  \r\n    return (\r\n      <>\r\n        {todos.map((todo:any) => (\r\n          <div key={todo.id}>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={todo.complete}\r\n                onChange={() => handleComplete(todo)}\r\n              />\r\n              {todo.title}\r\n            </label>\r\n          </div>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\nfunction App() {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const previousInputValue = useRef(\"\");\r\n  \r\n    useEffect(() => {\r\n      previousInputValue.current = inputValue;\r\n    }, [inputValue]);\r\n  \r\n    return (\r\n      <>\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={(e) => setInputValue(e.target.value)}\r\n        />\r\n        <h2>Current Value: {inputValue}</h2>\r\n        <h2>Previous Value: {previousInputValue.current}</h2>\r\n      </>\r\n    );\r\n  }\r\n  \r\n\r\nfunction Component1() {\r\n  \r\n\r\n    const [user, setUser] = useState(\"Jesse Hall\");\r\n    setUser;\r\n    return (\r\n        <UserContext.Provider value={{user:user , number:1222}}>\r\n      <div>\r\n        <h1>{`Hello ${user}!`}</h1>\r\n        <Component2 />\r\n      </div>\r\n        \r\n      </UserContext.Provider>\r\n    //  \r\n    );\r\n  }\r\n  \r\n  function Component2() {\r\n    return (\r\n      <>\r\n        <h1>Component 2  </h1>\r\n        <Component3 />\r\n      </>\r\n    );\r\n  }\r\n  \r\n  function Component3() {\r\n    const value:any = useContext(UserContext);\r\n    return (\r\n      <>\r\n        <h1>Component 3 user {value.user}</h1>\r\n        <Component4 />\r\n      </>\r\n    );\r\n  }\r\n  \r\n  function Component4() {\r\n    return (\r\n      <>\r\n        <h1>Component 4</h1>\r\n        <Component5 />\r\n      </>\r\n    );\r\n  }\r\n  \r\n  function Component5() {\r\n    const value:any = useContext(UserContext);\r\n  \r\n    return (\r\n      <>\r\n        <h1>Component 5</h1>\r\n        <h2>{`Hello ${value.user} again!`}</h2>\r\n      </>\r\n    );\r\n  }\r\n\r\nfunction Timer() {\r\n    const [count, setCount] = useState(0);\r\n    // setInterval(() => {\r\n    //     setCount((count) => count + 2);\r\n    // }, 3000);\r\n    setCount;\r\n    useEffect(() => {\r\n    //     setCount((count) => count + 2);\r\n    //   console.log('count updated' ,count)\r\n    },[count]);\r\n  \r\n    return <h1>I've rendered {count} times!</h1>;\r\n  }\r\n // Timer;\r\n\r\n\r\nconst App2 = () => {\r\n  const [count, setCount] = useState(0);\r\n  const [todos, setTodos] = useState([\"todo 1\", \"todo 2\"]);\r\n\r\n  const increment = () => {\r\n    setCount(count+1)\r\n    setTodos(() => [...todos, \"new Task\"+count]);\r\n  };\r\n\r\n\r\n\r\n  const addTodo = useCallback(() => {\r\n    setCount(count+1) \r\n    setTodos((t) => [...t, \"New Todo \"+ count]);}, [todos]);\r\n\r\n    const expensiveCalculation = (num:number) => {\r\n\r\n      console.log(\"Calculating...\");\r\n      for (let i = 0; i < 1000000000; i++) {\r\n        num += 1;\r\n      }\r\n      return num;\r\n    };\r\n\r\n   // const calculation = expensiveCalculation(count);\r\n   const calculation =  useMemo(() => expensiveCalculation(count), [count]);\r\n\r\n  return (\r\n    <div>\r\n      <Todos2 todos={todos} addTodo={addTodo}  />\r\n      <hr />\r\n      <div>\r\n        Count: {count}\r\n        <button onClick={increment}>+</button>\r\n      </div>\r\n      <br/>\r\n      <br/>\r\n      <hr />\r\n\r\n      <div>\r\n        Count: {count}\r\n        <button onClick={increment}>+</button>\r\n        <h2>Expensive Calculation</h2>\r\n        {calculation}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst Home = () => {\r\n //const [data, setData] = useState<[{id?:string , title?:string}]>([{}]);\r\n\r\n  type  d= [{id?:string , title?:string}];\r\n const data:d= useFetch(\"https://jsonplaceholder.typicode.com/todos\");\r\n\r\n//  useMemo(():any => {\r\n\r\n//   setTimeout(() => {\r\n//     fetch(\"https://jsonplaceholder.typicode.com/todos\").then(\r\n//       (res) => res.json()\r\n//   ).then((data) => setData(data) );\r\n//   }, 10*1000);\r\n//  },[]);\r\n\r\n\r\n  return data.length>1 ?(\r\n    <>\r\n      <h1>HOME</h1>\r\n      {data.length>1 &&\r\n        data.map((item ) => {\r\n          return <p key={item.id} >{item.title}</p>;\r\n        })}\r\n    </>\r\n  ): (<></>);\r\n};\r\n\r\nexport const TestView = () => {\r\n    const [count, setCount] = useState(0);\r\n    const [color, setColor] = useState(\"\");\r\n  \r\n\r\n    useEffect(() => {\r\n       \r\n      console.log( 'count' , count , color)\r\n    },[count , color]);\r\n\r\n   \r\n\r\n    \r\n\r\n    return (<div>\r\n        <h1>My favorite color is {color}!</h1>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => setColor(\"blue\")}\r\n      >Blue</button> , \r\n\r\n<button\r\n        type=\"button\"\r\n        onClick={() => setColor(\"red\")}\r\n      >Red</button> ,\r\n       <button\r\n        type=\"button\"\r\n        onClick={() => setColor(\"pink\")}\r\n      >Pink</button> , \r\n      <button\r\n        type=\"button\"\r\n        onClick={() => setColor(\"green\")}\r\n      >Green</button>\r\n    <br/>\r\n    ----------------------------------------------------------------------------------\r\n\r\n    <h1>I've rendered {count} times! </h1>\r\n    <button\r\n        type=\"button\"\r\n        onClick={() => setCount(count+1)}\r\n      >count</button>\r\n\r\n      <Timer></Timer>\r\n      <br/>\r\n      ----------------------------------------------------------------------------------\r\n\r\n      <Component1 />\r\n      ----------------------------------------------------------------------------------\r\n      <br/>\r\n      <App/>\r\n      ----------------------------------------------------------------------------------\r\n      <br/>\r\n\r\n      <Todos />\r\n\r\n      <App2/>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n\r\n      <Home/>\r\n    </div>\r\n    \r\n    )\r\n}\r\n","import { useState, useEffect , useMemo } from \"react\";\r\n\r\n\r\nexport const TestViewt1 = () => {\r\n\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n      let timer = setTimeout(() => {\r\n      setCount((count) => count + 1);\r\n    }, 5000);\r\n  \r\n    return () => clearTimeout(timer)\r\n    }, [count]);\r\n  \r\n    return <h1>I've rendered {count} times!</h1>;\r\n}\r\n\r\nexport const TestViewt2 = () => {\r\n    const [count, setCount] = useState(0);\r\n    const [todos, setTodos] =  useState<string[]>(['']);\r\n    const calculation = useMemo(() => expensiveCalculation(count), [count]);\r\n  \r\n    const increment = () => {\r\n      setCount((c) => c + 1);\r\n    };\r\n    const addTodo = () => {\r\n      setTodos((t) => {\r\n        var s:string[] = [...t, \"New Todo\"]\r\n        return s;\r\n      }  );\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <div>\r\n          <h2>My Todos</h2>\r\n          {todos.map((todo, index) => {\r\n            return <p key={index}>{todo}</p>;\r\n          })}\r\n          <button onClick={addTodo}>Add Todo</button>\r\n        </div>\r\n        <hr />\r\n        <div>\r\n          Count: {count}\r\n          <button onClick={increment}>+</button>\r\n          <h2>Expensive Calculation</h2>\r\n          {calculation}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const expensiveCalculation = (num:number) => {\r\n    console.log(\"Calculating...\");\r\n    for (let i = 0; i < 1000000000; i++) {\r\n      num += 1;\r\n    }\r\n    return num;\r\n}\r\n","import React, { memo  } from 'react';\r\n\r\ntype TodosProps={\r\n    todos:string[],\r\n    addTodo:() => any;\r\n}\r\nconst Todos2: React.FC<TodosProps>  = ( {todos, addTodo} ) => {\r\n    console.log(\"child render\");\r\n    return (\r\n      <div>\r\n        ---------------------------------------\r\n        <br/>\r\n        <h2>My Todos</h2>\r\n        {todos.map((todo, index) => {\r\n          return <p key={index}>{todo}</p>;\r\n        })}\r\n         <button onClick={addTodo}>Add Todo</button>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default memo(Todos2);\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useFetch = (url: string): any => {\r\n    const [data, setData] = useState([]);\r\n    useEffect(() => {\r\n        fetch(url).then(\r\n            (res) => res.json()\r\n        ).then((data) => setData(data));\r\n    }, [url]);\r\n    return data;\r\n};\r\n\r\nexport default useFetch;"],"names":["loadsupportedTokenList","App","useCyclesMintingCanisterInit","useWalletInit","usePriceInit","useSwapCanisterInit","useLiquidityViewInit","useBlockHeightsInit","useNetworkErrorNotifications","BrowserRouter","basename","Layout","WalletListModal","NotificationManager","TermsAndConditionsModal","TokenSelectModal","AllowanceVerifyModal","MintManualModal","SwapProgressModal","SwapFailModal","WithdrawProgressModal","DepositProgressModal","TransferProgressModal","AddLiquidityProgressModal","AddLiquidityFailModal","RemoveLiquidityProgressModal","RemoveLiquidityFailModal","WithdrawWICPProgressModal","WithdrawWICPFailModal","MintXTCProgressModal","MintXTCFailModal","MintWICPProgressModal","MintWICPFailModal","Routes","Route","path","element","SwapView","MintView","AssetsListView","AssetsWithdrawView","AssetsDepositView","AssetsTransferView","LiquidityListView","LiquidityAddView","ActivityListView","TestView","TestViewt1","TestViewt2","Navigate","to","AnalyticsApi","constructor","this","axios","create","baseURL","ENV","analyticsHost","method","transformRequest","data","serialize","transformResponse","deserialize","headers","async","request","principalId","pairId","response","operationName","query","variables","user","positionMetrics","JSONbig","strict","RosettaErrorType","Object","freeze","NotFound","Timeout","NetworkError","RosettaError","Error","message","status","super","errorType","Transaction","rosettaTransaction","blockIndex","hash","transaction_identifier","timestampMs","metadata","timestamp","div","toNumber","Date","operations","length","type","account1Address","account","address","amount","value","isZero","negated","account2Address","fee","memo","RosettaApi","process","env","REACT_APP_ROSETTA_BASE_URL","stringify","parse","networkIdentifier","networksList","then","res","network_identifiers","find","blockchain","accountAddress","accountBalanceByAddress","balances","error","isAxiosError","networkStatus","current_block_identifier","index","transactionHash","responseTransactions","transactionsByHash","transactions","transaction","block_identifier","undefined","limit","maxBlockIndex","offset","Math","max","transactionCount","min","i","push","getTransactionByBlock","transactionsByAccount","Promise","all","map","blockTransaction","reverse","blockByIndex","block","url","network_identifier","account_identifier","default","AssetProvider","useAssetContext","createContext","name","errorMessage","Asset","imageSources","questionMarkSrc","isLoading","props","bg","useColorModeValue","shadow","Flex","position","direction","borderRadius","alignItems","justifyContent","px","py","flexWrap","gap","AssetIconButton","ariaLabel","tooltipProps","SkeletonCircle","h","w","minW","isLoaded","Tooltip","label","IconButton","isRound","variant","AssetTitleBlock","title","subtitle","color","subtitleColor","Box","ml","Skeleton","mb","width","Heading","as","fontSize","fontWeight","openDelay","Text","textOverflow","whiteSpace","overflow","maxW","AssetImageBlock","swap","SwapImageBlock","lp","LPImageBlock","token","TokenImageBlock","src","Checkbox","checked","onClick","borderColor","cursor","height","border","Fade","in","Image","checkPlainSrc","DisplayValue","forwardRef","decimals","isUpdating","prefix","suffix","disableTooltip","shouldDivideByDecimals","textProps","ref","blinker","keyframes","formattedValue","tooltipAmount","isDisabled","useMemo","toBigNumber","applyDecimals","toString","dp","formatAmount","String","animation","Emoji","children","chakra","span","role","mt","transform","FeeBox","isDeposit","isTransfer","connectedWalletInfo","artemis","BigInt","opacity","display","FaArrowRight","flex","textAlign","mx","symbol","GradientBox","size","background","pt","sm","md","lg","Header","buttonText","onButtonClick","top","setTop","useState","paddingToLine","marginTop","backgroundColor","useHeaderResizeEffect","clientHeight","transition","zIndex","flexDirection","pb","Spinner","Button","colorScheme","Divider","boxSize","skeletonSize","alt","left","bottom","right","InformationBox","onClose","collapse","setCollapse","titleColor","Collapse","unmountOnExit","CloseButton","setTimeout","LogoBox","stackBg","Link","href","style","textDecoration","boxShadow","Stack","align","userSelect","Logo","viewBox","fill","xmlns","fillRule","clipRule","d","id","x1","y1","x2","y2","gradientUnits","stopColor","LPBreakdownPopoverItem","balance","justify","_last","HStack","minWidth","LPBreakdownPopover","sources","filteredSources","filter","source","Number","Popover","trigger","PopoverTrigger","PopoverContent","PopoverArrow","PopoverHeader","PopoverBody","NumberInput","placeholder","onChange","setValue","Input","outline","_placeholder","event","target","isNaN","SearchBar","search","setSearch","boxSizing","searchSrc","mr","inputValue","SlippageSettings","slippage","setSlippage","isAutoSlippage","setIsAutoSlippage","inputBorderColorDisabled","inputBorderColor","inputColorDisabled","inputColorEnabled","inputColor","yellowColor","redColor","messageColor","warningMessage","InputGroup","borderStyle","borderWidth","num","replace","onBlur","e","pr","pl","InputRightElement","spacing","Icon","FaExclamationTriangle","StackLine","StackItem","TokenBalancesPopoverItem","_balance","TokenBalancesPopover","TokenProvider","useTokenContext","Token","shouldGlow","htmlProps","tokenProps","borderGlow","borderNotGlow","backgroundGlow","backgroundNotGlow","TokenGlow","TokenContent","TokenDetailsButton","FaChevronDown","TokenDetailsLogo","tokenMetadata","logoSrc","logo","minH","TokenDetailsSymbol","TokenData","TokenDataPrice","priceImpact","isActive","parseFloat","price","Price","getByAmount","defaultColorActive","defaultColorInactive","defaultColor","priceImpactNumber","isPrice","TokenDataBalances","onMaxClick","totalTokenBalance","reduce","acc","current","shouldRenderMaxButton","getMaxValue","TokenInput","handleChange","useCallback","_value","nat","split","newValue","parseInt","includes","slice","activeColor","inactiveColor","TokenDataMetaInfo","tokenSymbol","tokenValue","tokenDecimals","tokenId","pageInfo","info","useTokenTaxCheck","calcPrice","taxInfo","netValue","toFixed","className","ViewHeader","onArrowBack","titleRightAdjustment","titleLeftAdjustment","borderTopRadius","borderBottomRadius","icon","FaArrowLeft","spin","CircleIcon","iconSrc","spinAnimation","bgDark","StepStatus","Disabled","bgLight","checkOpacity","Done","borderTop","greenCheckSrc","PlusIcon","NAVBAR_HEIGHT","FOOTER_HEIGHT","NAVIGATION_TABS","isConnected","useWalletStore","dispatch","useAppDispatch","location","useLocation","headerHeight","setHeaderHeight","currentTabIndex","findIndex","pathname","backgroundColorValue","useToken","colorMode","toggleColorMode","useColorMode","menuBg","menuShadow","showBanner","setShowBanner","Alert","AlertIcon","isExternal","Container","maxWidth","margin","p","nav","Tabs","TabList","Tab","FiArrowUpRight","ExternalLink","analyticsApp","WalletMenu","placement","WalletConnectBtn","Menu","MenuButton","FaEllipsisH","MenuList","isDarkModeEnabled","MenuItem","FaSun","FaMoon","modalsSliceActions","openMintManualModal","FaRedo","MenuDivider","twitter","rel","FaTwitter","discord","FaDiscord","medium","FaMedium","sonicDocs","FaBook","swapApiDocs","FaNetworkWired","footer","pointerEvents","version","Maintenance","m","verticalAlign","isAddLiquidityFailModalOpened","isAddLiquidityFailOpened","addLiquidityModalData","addLiquidityData","useModalsStore","callbacks","addLiquidityCallback","closeCallback","handleClose","closeAddLiquidityFailModal","TransactionFailedModal","isOpen","isCentered","isFullWidth","isAddLiquidityProgressModalOpened","steps","token1Symbol","token0Symbol","step","activeStep","getStepStatus","useStepStatus","TransactionProgressModal","closeAddLiquidityProgressModal","AddLiquidityModalDataStep","Getacnt","TransactionStep","chevron","CreatePair","plusSrc","Approve0","Deposit0","depositSrc","Approve1","Deposit1","AddLiquidity","dropSrc","isAllowanceVerifyModalOpened","allowanceModalData","_tokenSymbol","closeAllowanceVerifyModal","Active","appVer","localStorage","getItem","AppUpdatedModal","isNotiOpen","isModelOpen","setisModelOpen","useEffect","Modal","setItem","ModalOverlay","ModalContent","ModalCloseButton","ImportTokenImage","ImportToken","handleImport","understandRisk","setUnderstandRisk","redTriangleWarningSrc","isChecked","alignSelf","disabled","modalProps","ModalHeader","ModalBody","ModalFooter","rowGap","colorDisabled","colorEnabled","weight","FaChevronRight","my","TransactionType","DepositFailModal","isDepositFailModalOpened","depositModalData","retryCallback","closeDepositFailModal","DepostAddressModal","onclose","accountId","shortPrincipalId","desensitizationPrincipalId","shortAccntId","handleCopy","copyToClipboard","tokenData","tokenList","marginRight","FiCopy","isDepositProgressModalOpened","closeDepositProgressModal","DepositModalDataStep","Approve","Deposit","TOKEN_OPTIONS","useConst","MintTokenSymbol","WICP","XTC","mintManualModalOpened","mintManualBlockHeight","mintManualTokenSymbol","mintManualModalErrorMessage","addNotification","useNotificationStore","blockHeightErrorMessage","setBlockHeightErrorMessage","tokenErrorMessage","setTokenErrorMessage","handleMint","NotificationType","MintManual","getTime","resetModalData","setMintManualModalErrorMessage","closeMintManualModal","linkColor","activityTabURL","learnMoreURL","failedMintDocs","onSubmit","preventDefault","noValidate","borderBottom","FormControl","isRequired","isInvalid","Boolean","FormLabel","Select","setMintManualTokenSymbol","option","FormErrorMessage","onKeyDown","key","setMintManualBlockHeight","FormHelperText","leftIcon","FaRedoAlt","isMintWICPFailModalOpened","mintWICPModalData","closeMintWICPFailModal","isMintWICPProgressModalOpened","closeMintWICPProgressModal","MintModalDataStep","LedgerTransfer","withdrawSrc","Mint","swapSrc","isMintXTCFailModalOpened","isRemoveLiquidityFailOpened","mintXTCModalData","closeMintXTCFailModal","isMintXTCProgressModalOpened","closeMintXTCProgressModal","isRemoveLiquidityFailModalOpened","removeLiquidityModalData","closeRemoveLiquidityFailModal","isRemoveLiquidityProgressModalOpened","closeRemoveLiquidityProgressModal","RemoveLiquidityModalDataStep","RemoveLiquidity","Withdraw0","Withdraw1","RetryFailedTrxModal","isRetryOpen","setIsOpen","setRokenError","tokenSelected","settokenSelected","setbuttonText","supportedTokenList","useSwapCanisterStore","isTokenTrx","setisTokenTrx","BatchTransact","closeOnOverlayClick","retry","canisterId","canistersPrincipalIDs","idl","SwapIDL","factory","methodName","onSuccess","onFail","args","Principal","fromText","execute","Success","catch","err","isSwapFailModalOpened","swapModalData","withdrawCallback","closeSwapFailModal","isSwapProgressModalOpened","fromTokenSymbol","toTokenSymbol","closeSwapProgressModal","SwapModalDataStep","Swap","Withdraw","isTermsAndConditionsModalOpened","isOpened","termsAndConditionsModalData","successCallback","closeTermsAndConditionsModal","termsAndConditions","tokenSelectModalData","tokenSelectData","isTokenSelectModalModalOpened","isTokenSelectOpened","tokens","onSelect","selectedTokenIds","allowAddToken","addToken","setAddToken","importTokenData","setImportTokenData","parsedTokens","filteredList","setFilteredList","totalBalances","useBalances","filteredItems","lowerSearch","toLowerCase","handleTokenSelectClose","closeTokenSelectModal","emptyColor","scrollBehavior","_hover","arrowBackSrc","Array","TokenSelectItemSkeleton","TokenSelectItem","isSelected","FaHdd","balancesState","isBalancesUpdating","FeatureState","Updating","nameColor","isTransferProgressModalOpened","transferModalData","closeTransferProgressModal","TransferModalDataStep","Transfer","selectedStepIndex","indexOf","activeStepIndex","state","walletSelected","walletState","OpenWalletList","Connecting","walletActions","setOnwalletList","Idle","wallets","item","handleSelectWallet","tknList","connectObj","host","whitelist","values","keys","setWalletSelected","connect","provider","setWalletLoaded","principleId","walletActive","adapter","readyState","textTransform","thickness","speed","isWithdrawProgressModalOpened","withdrawModalData","closeWithdrawProgressModal","WithdrawModalDataStep","isWithdrawWICPFailModalOpened","withdrawWICPModalData","closeWithdrawWICPFailModal","isWithdrawWICPProgressModalOpened","closeWithdrawWICPProgressModal","WithdrawWICPModalDataStep","WithdrawWICP","navigate","useNavigate","iconUrl","shortaccountId","Loading","FaExchangeAlt","window","open","disconnect","resetWallet","reload","BiExit","WalletNotConnected","FaInbox","PATHS","All","Home","ROUTES","swapCanisterFee","SWAP_CANISTER_FEE","ledger","cyclesMinting","swapCapRoot","accountIDs","URLs","DISCORD_URL","TWITTER_URL","MEDIUM_URL","github","GITHUB_URL","TERMS_AND_CONDITIONS_URL","tokenRequestForm","TOKEN_REQUEST_FORM_URL","ledgerTransactions","LEDGER_TRANSACTIONS_URL","hiddenTokens","maintenanceMode","prorityOrder","getAppAssetsSources","wallet","sonicCircleSrc","sonic","ICP_METADATA","totalSupply","icpSrc","tokenType","getICPTokenMetadata","LedgerIDL","IDL","AccountIdentifier","ICPTs","Record","e8s","Nat64","AccountBalanceArgs","SubAccount","Vec","Nat8","BlockHeight","NotifyCanisterArgs","to_subaccount","Opt","from_subaccount","to_canister","max_fee","block_height","Memo","TimeStamp","timestamp_nanos","SendArgs","created_at_time","Service","account_balance_dfx","Func","notify_dfx","send_dfx","capCanIDL","DetailValue","Rec","WithIdArg","Bool","Witness","GetBucketResponse","WithWitnessArg","GetNextCanistersResponse","Variant","Int64","Null","Float64","Event","Tuple","GetTransactionResponse","GetTransactionsArg","Nat32","GetTransactionsResponseBorrowed","GetUserTransactionsArg","IndefiniteEvent","CyclesMintingIDL","IcpXdrConversionRate","xdr_permyriad_per_icp","timestamp_seconds","IcpXdrConversionRateCertifiedResponse","certificate","hash_tree","SetAuthorizedSubnetworkListArgs","who","subnets","TransactionNotification","from","CyclesResponse","Refunded","CanisterCreated","ToppedUp","Result","Ok","Err","get_average_icp_xdr_conversion_rate","get_icp_xdr_conversion_rate","set_authorized_subnetwork_list","transaction_notification","TxReceipt","Nat","TokenInfoExt","PairInfoExt","Int","RewardInfo","Time","DepositSubAccounts","SwapInfoExt","CapDetails","ICRC1SubAccountBalance","TokenInfoWithType","SwapInfo","TokenAnalyticsInfo","UserInfo","UserInfoPage","Result_1","ICRCTxReceipt","Status","CanisterSettings","CanisterStatus","MonitorMetrics","TokenIDL","DIP20","ICRC1","TxError","InsufficientAllowance","InsufficientBalance","ErrorOperationStyle","Unauthorized","LedgerTrap","ErrorTo","Other","BlockUsed","AmountTooSmall","Metadata","owner","TokenInfo","holderNumber","deployTime","historySize","cycles","feeTo","allowance","approve","balanceOf","getAllowanceSize","getBlockUsed","getHolders","getMetadata","getTokenInfo","getUserApprovals","isBlockUsed","mint","setFee","setFeeTo","setGenesis","setLogo","setName","setOwner","transfer","transferFrom","withdraw","YCfactory","GetTransactionsRequest","start","Account","subaccount","Burn","burn","kind","ArchivedTransactionRange","callback","GetTransactionsResponse","first_index","log_length","archived_transactions","HttpRequest","body","HttpResponse","status_code","Nat16","Value","Blob","StandardRecord","TransferArg","TransferError","GenericError","error_code","TemporarilyUnavailable","BadBurn","min_burn_amount","Duplicate","duplicate_of","BadFee","expected_fee","CreatedInFuture","ledger_time","TooOld","InsufficientFunds","Tokens","TransferError_1","TxTooOld","TxDuplicate","TxCreatedInFuture","TransferArgs","get_transactions","http_request","icrc1_balance_of","icrc1_decimals","icrc1_fee","icrc1_metadata","icrc1_minting_account","icrc1_name","icrc1_supported_standards","icrc1_symbol","icrc1_total_supply","icrc1_transfer","XTCIDL","NotifyDfxFailed","UnexpectedCyclesResponse","InsufficientXTCFee","FetchRateFailed","TransactionId","BurnError","InvalidTokenContract","NotSufficientLiquidity","BurnResult","TransactionStatus","FAILED","SUCCEEDED","EventDetail","canister","CanisterCalled","method_name","TransferFrom","caller","EventsConnection","next_offset","next_canister_id","Operation","canisterCalled","canisterCreated","TxRecord","op","MintError","MintResult","Stats","transfers_count","mints_count","transfers_from_count","canisters_created_count","supply","burns_count","approvals_count","proxy_calls_count","history_events","TxReceiptLegacy","ResultCall","return","CreateResult","canister_id","ResultSend","events","getTransaction","getTransactions","get_map_block_used","get_transaction","halt","mint_by_icp","nameErc20","stats","transferErc20","wallet_balance","wallet_call","wallet_create_canister","controller","wallet_create_wallet","wallet_send","useAllPairs","useDispatch","allPairsState","allPairs","getAllPairs","useKeepSync","isRefreshing","swapCanisterActions","setAllPairsState","swapActor","getswapActor","setAllPairs","parseResponseAllPairs","AppLog","interval","directGetAllPairs","sonicBalances","icpBalance","tokenBalances","userLPBalancesState","getUserPositiveLPBalances","setUserLPBalancesState","getUserLPBalancesAbove","setUserLPBalances","parseResponseUserLPBalances","getBalances","tokenInfo","setBalancesState","getUserBalances","tokenCanisterId","tokenFeeLen","roundBigInt","tokenBalance","getTokenBalance","fetchICPBalance","setICPBalance","parseAmount","setSonicBalances","setTokenBalances","sumBalances","entries","forEach","notificationId","popNotification","totalBlockHeightsWICP","getFromStorage","LocalStorageKey","MintWICPUncompleteBlockHeights","totalBlockHeightsXTC","MintXTCUncompleteBlockHeights","blockHeightsXTC","blockHeightsWICP","totalLength","setMintWICPUncompleteBlockHeights","setMintXTCUncompleteBlockHeights","MINT_AUTO_NOTIFICATION_TITLES","NotificationState","MintAuto","resizeObserver","ResizeObserver","header","document","getElementById","observe","useNotificationEffect","notifications","timeout","supportedTokenListState","balanceState","useAppSelector","priceState","useQuery","get","URLSearchParams","delete","history","replaceState","useTokenAllowance","tokensAllowance","useAllowanceStore","validPrincipalId","now","expiration","allowanceActions","fetchAllowance","useTokenBalanceMemo","input","taxedValue","nonTaxedValue","tokenVal","sonicBalance","useTokenLogosFetcherInit","storageKey","tokenLogo","saveToStorage","useTokenSelectionChecker","id0","id1","targetId","isFirstIsSelected","isSecondIsSelected","isTokenSelected","useUserMetrics","setIsLoading","userLPMetrics","setUserLPMetrics","getUserLPMetrics","pairIds","x","analyticsApi","promises","queryUserLPMetrics","_userPairMetrics","userPairMetrics","getUserMetrics","getuserLprewards","token0","token1","setData","getUserReward","ok","getUserRwds","Render","render","ColorModeScript","initialColorMode","theme","config","ChakraProvider","resetCSS","store","Artemis","walletId","autoConnect","initAdapter","getCapRootInstance","CapRoot","init","getUserTransactions","page","capRoot","result","get_user_transactions","parseCapHistoryLog","time","details","aux","ADDRESS_TO_FILTER","getUserLedgerTransactions","rosetta","getTransactionsByAccount","isArray","t","getAmountDependsOnBalance","fromValue","getTransactionName","blockHeight","removeBlockHeightFromStorage","localStorageKey","totalBlockHeights","userBlockHeights","newBlockHeights","_blockHeight","saveBlockHeightToStorage","prevMintWICPBlockHeight","updateFailedBlockHeight","prevResponses","failedBlockHeight","useAddLiquidityBatch","addLiquidityParams","batchLoad","pair","useLiquidityViewStore","batch","openBatchModal","deposit0Params","allowance0","deposit1Params","allowance1","createPairParams","approve0","deposit0","approve1","deposit1","getICRCAcnt","tx0complete","tx1complete","DepositBatch","token0Type","token1Type","token0Amt","token1Amt","intitICRCTokenDepositIn","useApproveTransactionMemo","useDepositTransactionMemo","useICRCTransferMemo","tokenAcnt","createPair","useCreatePairTransactionMemo","addLiquidity","useAddLiquidityTransactionMemo","LiquidityBatchTx","_transactions","handleRetry","resolve","setAddLiquidityModalData","openAddLiquidityFailModal","openAddLiquidityProgressModal","batchExecute","batchFnUpdate","useDepositBatch","deposit","approveTx","depositTx","DepositBatchTx","setDepositModalData","openDepositProgressModal","getAcnt","intitICRCTokenDeposit","getacnt","useMintBatch","amountIn","amountOut","keepInSonic","useSwapViewStore","ledgerTransfer","useLedgerTransferTransactionMemo","toAccountId","canisterPrincipalId","_trx","getMintWICPTransaction","getMintXTCTransaction","depositParams","batchTrx","stepsList","setMintWICPModalData","openMintWICPProgressModal","setMintXTCModalData","openMintXTCProgressModal","useMintMultipleBatch","blockHeights","setTransactions","updateTransactions","handler","transactionName","useBatch","getTransactionNames","useMintSingleBatch","MintBatchTx","batchTx","trx","useRemoveLiquidityBatch","removeLiquidityParams","RemoveLiquidityBatch","withdraw0Params","amount0Min","withdraw1Params","amount1Min","removeLiquidity","useRemoveLiquidityTransactionMemo","withdraw0","useWithdrawTransactionMemo","withdraw1","setRemoveLiquidityModalData","openRemoveLiquidityFailModal","openRemoveLiquidityProgressModal","useSwapBatch","swapParams","entryVal","withdrawParams","SwapBatch","trxList","useSwapExactTokensTransactionMemo","SwapBatchTrx","setSwapModalData","openSwapProgressModal","useTransferBatch","TransferBatch","transferTrx","useTransferTransactionMemo","TransferBatchTx","setTransferModalData","openTransferProgressModal","useWithdrawBatch","withdrawMemo","WithdrawBatchTx","setWithdrawModalData","openWithdrawProgressModal","useWithdrawWICPBatch","withdrawWICP","useWithdrawWICPTransactionMemo","WithdrawBatch","setWithdrawWICPModalData","openWithdrawWICPProgressModal","parsedAmount","toApproveAmount","JSON","actor","initiateICRC1Transfer","updateNextStep","trxResult","nextTrxItem","canId","subacc","useICRCDepositMemo","tokenTrx","settokenTrxData","getTokenActor","fromHexString","resp","token0Value","token1Value","_temp","substring","amount0Desired","amount1Desired","getAmountMin","currentTime","lpAmount","round","options","bh","outAmountMin","amountOutMin","paths","getSwapCapActor","witness","trxInfo","operation","matchingDetail","detail","U64","useSwapForExactTokensTransactionMemo","amountInMin","addressType","natAddress","getAccountIdFromPrincipalId","getPrincipalFromText","setState","Batch","DefaultHookState","setError","states","transactionsList","newBatch","txSuccessResponse","prevRes","handleError","reject","useMintErrorHandler","isBlockUsedError","isUnauthorizedError","isOtherError","isOperationStyleError","isErrorToError","isAmountToSmallError","errorText","removeLastProcessedTransaction","prevMintBlockHeightData","newBlockHeightData","_","State","AddLiquidityNotificationContent","liquidityViewStore","batchData","batchExecutalbe","handleStateChange","console","log","clearAddLiquidityModalData","clearDepositModalData","handleOpenModal","setAllowanceVerifyModalData","openAllowanceVerifyModal","transactionLink","finally","DepositNotificationContent","depositViewStore","useDepositViewStore","selectedToken","Pending","MintAutoNotificationContent","setSteps","setStep","handleMintError","mintWICPUncompleteBlockHeights","mintXTCUncompleteBlockHeights","doneStepColor","activeStepColor","disabledStepColor","setNotificationData","removeFromStorage","transactionNames","_step","stepStatus","isDoneStep","isActiveStep","isDisabledStep","stepColor","stepLabel","MintManualNotificationContent","MintWICPNotificationContent","swapViewStore","MintXTCNotificationContent","RemoveLiquidityNotificationContent","userLPBalances","removeLiquidityBatchParams","removeAmountPercentage","multipliedBy","reserve0","dividedBy","reserve1","clearRemoveLiquidityModalData","SwapNotificationContent","clearSwapModalData","TransactionNotificationContent","NavLink","TransferNotificationContent","transferViewStore","useTransferViewStore","toAddress","clearTransferModalData","transferViewActions","setToAddress","WithdrawNotificationContent","useWithdrawViewStore","clearWithdrawModalData","WithdrawWICPNotificationContent","getAccountId","NotificationBox","notification","show","setShow","animateOpacity","NotificationHeader","NotificationContent","NotificationTimer","notificationContent","MintWICP","MintXTC","ErrorNotificationType","ERRORS","NotificationIcon","errorNode","redWarningSrc","pendingNode","successNode","transparentGreenCheckSrc","n","shouldShowCloseButton","closeSrc","errorBody","hasOwnProperty","reduceWidth","collapseAnimation","onAnimationEnd","initialState","CAPstate","LedgerState","activityList","lastPage","fetchedPages","activityViewSlice","createSlice","reducers","setCAPState","action","payload","setLedgerState","setTokenList","setPage","setLedgerTransactions","pushActivityList","toFilterTransactions","cur","dateString","toDateString","alreadyAdded","Set","has","add","sort","a","b","timeA","setLastPage","pushFetchedPages","clearActivityList","activityViewActions","actions","selectActivityViewState","activityView","reducer","useActivityViewStore","useActivityView","parseResponseTokenList","getUserTransactionsPage","_principalId","_page","allowanceSlice","setAllowance","clearAllowance","rest","selectAllowanceState","createAsyncThunk","getState","dfinityWallet","getTokenAllowance","isBannerOpened","AssetsBannerDisabled","assetsViewSlice","setIsBannerOpened","assetsViewActions","selectAssetsViewState","assetsView","selectWithdrawViewState","ICPXDRconversionRate","ICPXDRconversionRateState","cyclesMintingCanisterSlice","setICPXDRConversionRate","setICPXDRConversionRateState","cyclesMintingCanisterSliceActions","selectCyclesMintingCanisterState","DEFAULT_CYCLES_PER_XDR","TOKEN_SUBDIVIDABLE_BY","useCyclesMintingCanisterStore","getICPXDRConversionRate","fetchICP2XDRConversionRate","conversionRate","depositViewSlice","setAmount","setTokenId","depositViewActions","selectDepositViewState","depositView","walletConnected","walletSlice","Connected","selectWalletState","KEEP_SYNC_DEFAULT_INTERVAL","keepSyncSlice","timers","clearInterval","setInterval","keepSync","setCallback","keepSyncActions","selectKeepSyncState","runner","_interval","INITIAL_LIQUIDITY_SLIPPAGE","LiquidityBannerDisabled","pairState","liquidityViewSlice","setPairState","setRemoveAmountPercentage","setKeepInSonic","setToken","setPair","liquidityViewActions","selectLiquidityViewState","liquidityView","getPair","localPair","initialMintXTCModalData","initialMintWICPModalData","initialWithdrawWICPModalData","initialSwapModalData","initialDepositModalData","initialTransferModalData","initialWithdrawModalData","initialAddLiquidityModalData","initialRemoveLiquidityModalData","initialTokenSelectData","isWithdrawFailModalOpened","isRemoveLiquidityModalOpened","modalsSlice","openMintXTCFailModal","clearMintXTCModalData","addMintXTCUncompleteBlockHeight","openMintWICPFailModal","clearMintWICPModalData","addMintWICPUncompleteBlockHeight","openWithdrawWICPFailModal","clearWithdrawWICPModalData","openSwapFailModal","openDepositFailModal","openWithdrawFailModal","closeWithdrawFailModal","openTokenSelectModal","clearTokenSelectModalData","setTokenSelectModalData","openRemoveLiquidityModal","closeRemoveLiquidityModal","openTermsAndConditionsModal","setTermsAndConditionsModalData","selectModalsState","modals","useTokenModalOpener","notificationSlice","notificationIndex","newNotifications","popId","filteredNotifications","obj","setNotificationSliceState","selectNotificationState","setNotificationState","icpPrice","priceSlice","setPrice","priceActions","selectPriceState","usePriceStore","_getICPPrice","supportedTokenListWithPrices","tokenPrice","BaseTokenPair","BaseTokenDecimals","baseReserve","tokenReserve","setSupportedTokenList","fetchICPPrice","swapCanisterSlice","setSupportedTokensListState","parsedBalances","selectSwapCanisterState","getSupportedTokenList","loadAction","parseResponseSupportedTokenList","toJson","v","INITIAL_SWAP_SLIPPAGE","baseFromTokenPaths","baseToTokenPaths","swapViewSlice","reset","oppositeMetadata","oppositeDataKey","getTokenPaths","getAmountOutFromPath","capitalize","switchTokens","dataKey","isICPToWICPPair","isWICPToICPPair","isWICPAndICPPair","oppositeTokenPaths","oppositeValue","tokenPaths","tempMetadata","baseFromPaths","baseToPaths","swapViewActions","selectSwapViewState","swapView","getAmountOut","decimalsIn","decimalsOut","reserveIn","reserveOut","getTokenPath","useSwapView","isPairLoaded","setIsPairLoad","tokenListTemp","ICP","setInitToken","temp","isICPSelected","isWICPSelected","fromTokenOptions","toTokenOptions","wicpTokenMetadata","xtcTokenMetadata","toTokenPathsIds","icpToken","unshift","AddressType","None","transferViewSlice","checkAddressType","AccountId","PrincipalId","selectTransferViewState","transferView","useAssetsViewStore","withdrawViewSlice","withdrawViewActions","withdrawView","useSelector","configureStore","middleware","getDefaultMiddleware","serializableCheck","variantGhost","c","mode","_active","darkHoverBg","transparentize","darkActiveBg","accessibleColorMap","yellow","hoverBg","activeBg","cyan","variantSolid","_disabled","variants","ghost","solid","link","padding","lineHeight","gradient","colors","unstyled","baseStyle","transitionProperty","transitionDuration","_focus","sizes","xs","defaultProps","rounded","baseStyleList","baseStyleItem","transitionTimingFunction","_expanded","baseStyleGroupTitle","baseStyleCommand","baseStyleDivider","baseStyleButton","parts","button","list","groupTitle","command","divider","baseStyleOverlay","baseStyleDialogContainer","baseStyleDialog","maxH","baseStyleHeader","borderBottomWidth","baseStyleCloseButton","insetEnd","baseStyleBody","baseStyleFooter","getSize","dialog","xl","full","overlay","dialogContainer","closeButton","$popperBg","cssVar","$arrowBg","$arrowShadowColor","baseStylePopper","baseStyleContent","variable","reference","borderTopWidth","popper","content","baseStyleRoot","orientation","baseStyleTab","isFitted","baseStyleTablist","end","center","baseStyleTabpanel","line","borderProp","tablist","tab","_selected","enclosed","borderBottomColor","_notLast","marginEnd","borderTopColor","getColor","root","tabpanel","gray","black","darkBlue","custom","app","dark","light","appTheme","styles","global","html","fonts","heading","useSystemColorMode","modalHeight","components","extendTheme","firstLength","lastLength","a1","a2","tempTkn","order","parseResponsePair","resultPair","tokenIds","token0Id","token1Id","tokenListObj","waitWithTimeout","ms","el","returnType","isAnnon","getCanisterActor","getTokenLogo","tokenActor","prin","race","toHexString","byteArray","byte","join","hex","substr","bytes","isValidAccountId","test","isPrincipalId","SUB_ACCOUNT_ZERO","Buffer","alloc","byteArrayToWordArray","wordArray","lib","WordArray","wordToByteArray","word","intToHex","val","principal","sha","algo","SHA224","update","toUint8Array","subBuffer","finalize","checksum","crc","unsigned","padStart","generateChecksum","sigBytes","words","concat","apply","wordArrayToByteArray","static","EXPONENTIAL_AT","fixedVal","str","actualDecimals","roundOfdecimals","ad","roundedNumber","floor","tmp","formatValue","valueAsBigNumber","integerPart","fractionalPart","getValueWithoutFees","numberOfFees","_feesAmount","minus","times","isNegative","charAt","toUpperCase","getPairIdsFromPairList","pairList","idsSet","paired","getUserPailListFromPairList","creator","timer","debounce","fn","awaitTime","clearTimeout","ACCOUNT_DOMAIN_SEPERATOR","ledgerActor","cmActor","statusText","subAccount","writeUInt32BE","serializedValue","warn","removeItem","IDENTIFIER","createLabel","text","navigator","clipboard","writeText","AddLiquidityActivity","_token0","_token1","amount0","amount1","toLocaleTimeString","FaPlus","DepositActivity","getTokenByAddress","findToken","tokenPrincipal","LedgerTransactionActivity","ledgerTransaction","FaCube","LoadingActivity","RemoveLiquidityActivity","SwapActivity","fromToken","toToken","WithdrawActivity","scrollHandler","scrollY","innerHeight","offsetHeight","addEventListener","removeEventListener","overflowX","css","dateA","dateB","date","Fragment","renderActivity","Activity","openSelectTokenModal","selectedTokenMetadata","handleSelectTokenId","buttonDisabled","buttonMessage","parsedFromValue","fromQueryValue","tokenListMetadata","autoFocus","getAssetPriceByBalance","notEmptyTokenList","supportedTokenListWithICP","isTokenListPresent","assetsDetailsTextColor","headerColor","getCanWithdraw","isFailedTrxOpen","setIsFailedTrxOpen","retryFailedTrx","r","random","getCanDeposit","FaMinus","FaInfoCircle","ButtonGroup","showDepositModal","ICPTOKENID","supportingAddrsType","isReviewing","setIsReviewing","autoSlippage","setAutoSlippage","handleTokenMaxClick","token0Balance","token1Balance","maxValue","setInAndOutTokenValues","lockedPairsList","handleSelectToken","excludeToken","foundPair","customTokenList","foundToken","needAsNetValue","convertToken","fromAmount","lpValue","Liquidity","getOppositeAmount","parsedLPValue","reversedDataKey","gt","startsWith","minimalAmount","token0Allowance","token1Allowance","isPriceUpdating","parsedToken0Value","parsedToken1Value","selectedIds","fee0","fee1","price0","price1","shareOfPool","liquidityAmount","useAddLiquidityMemo","token0Sources","useTokenSourceMemo","token1Sources","menuListShadow","menuListBg","iconBorderColor","textColor","FaCog","Center","FaEquals","PairedUserLPToken","totalShares","userShares","balance0","balance1","pairMetrics","handleAdd","handleRemove","isMetricsLoading","isLPBalanceLoading","successColor","userLPValue","getUserPositionValue","decimals0","decimals1","gridGap","fees","RemoveLiquidityModalAsset","onValueChange","balancePrice","PERCENTAGE_PRESETS","RemoveLiquidityModal","handleModalClose","handleSliderChange","lpBalance","getTokenBalances","isAmountIsLow","AMOUNT_TOO_LOW_LABEL","tokensLPBalance","checkboxColorKeepInSonic","checkboxColorNotKeepInSonic","checkboxColor","onInputValueChange","newvalue","percentage","lpToken","tmpper","NaN","Slider","focusThumbOnChange","SliderTrack","SliderFilledTrack","SliderThumb","SimpleGrid","columns","preset","FaArrowDown","dir","getShareOfPoolString","params","getShareOfPool","isEqualTo","isLessThanOrEqualTo","getPosition","PAIR_DECIMALS","InformationDescription","_visited","moveToAddLiquidityView","handleOpenRemoveLiquidityModal","isUserLPBalancesUpdating","pairedUserLPTokens","lpBalancesPairIDs","existentPairs","tokenId0","pairedList","tokenId1","msOverflowStyle","scrollbarWidth","userLPToken","ChainPopover","isChained","FaLink","ExchangeBox","isFromTokenIsICP","isToTokenIsICP","isFromTokenIsWICP","isToTokenIsWICP","isFromTokenIsXTC","isToTokenIsXTC","depositFee","withdrawFee","icpMetadata","feeSymbol","xtcMetadata","icpFeeInXTC","getXTCValueByXDRRate","xtcFees","plus","wicpFee","pathAmountOut","getAmountOutRatio","getSwapAmountOutMin","hasDeposit","hasWithdraw","Portal","OperationType","KEEP_IN_SONIC_LINK","KeepInSonicBox","canHeldInSonic","popoverLabel","SwapSubTab","tabname","SwapStep","useSwapViewData","lastChangedInputDataKey","setLastChangedInputDataKey","isXTCSelected","fromBalance","toBalance","resetViewState","resetStepToHome","Review","handleChangeValue","handleSetValue","handleICPToWICPChange","_newValue","icpFee","handleICPToXTCChange","getICPValueByXDRRate","xtcFee","icpFeesConvertedToXTC","rateBasedAmount","resultAmount","handleICPToTokenChange","oppositeData","wrappedICPMetadata","dataWICP","handleMintXTC","handleMintWICP","handleWithdrawWICP","handleApproveSwap","isFetchingNotStarted","NotStarted","isButtonDisabled","handleButtonClick","headerTitle","getPriceImpact","priceIn","priceOut","isSelectTokenButtonDisabled","selectTokenButtonText","fromSources","toSources","isExplanationTooltipVisible","currentOperation","Wrap","tokenFromId","tokenToId","onMenuClose","onSetSlippage","onSetIsAutoSlippage","onChangeValue","onSelectToken","oppositeTokenId","onSwitchTokens","swapPlacementButtonBg","tabIndex","_amount","_conversionRate","_defaultCyclesPerXDR","_subdividableBy","tokenIn","tokenOut","toValue","ratio","UserContext","initialTodos","complete","todo","Todos","todos","useReducer","handleComplete","setInputValue","previousInputValue","useRef","Component1","setUser","Provider","number","Component2","Component3","useContext","Component4","Component5","Timer","count","setCount","App2","setTodos","increment","addTodo","calculation","expensiveCalculation","setColor","fetch","json"],"sourceRoot":""}